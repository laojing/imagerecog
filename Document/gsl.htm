<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0062)mhtml:file://G:\GNU Scientific Library – Reference Manual.mht -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd"><HTML><HEAD><TITLE>GNU 
Scientific Library – Reference Manual</TITLE><!-- Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 The GSL Team.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "Free Software
Needs Free Documentation", the Front-Cover text being "A GNU Manual",
and with the Back-Cover Text being (a) (see below). A copy of the
license is included in the section entitled "GNU Free Documentation
License".

(a) The Back-Cover Text is: "You have the freedom to copy and modify this
GNU Manual." --><!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<META name="description" content="GNU Scientific Library – Reference Manual">
<META name="keywords" content="GNU Scientific Library – Reference Manual">
<META name="resource-type" content="document">
<META name="distribution" content="global">
<META name="GENERATOR" content="MSHTML 9.00.8112.16553">
<META content="text/html; charset=utf-8" http-equiv="Content-Type"><LINK title="Top" 
rel="start" href="#Top"><LINK title="Function Index" rel="index" href="#Function-Index"><LINK 
title="(dir)" rel="up" href="dir.html#Top">
<STYLE type="text/css">A.summary-letter {
	TEXT-DECORATION: none
}
BLOCKQUOTE.smallquotation {
	FONT-SIZE: smaller
}
DIV.display {
	MARGIN-LEFT: 3.2em
}
DIV.example {
	MARGIN-LEFT: 3.2em
}
DIV.indentedblock {
	MARGIN-LEFT: 3.2em
}
DIV.lisp {
	MARGIN-LEFT: 3.2em
}
DIV.smalldisplay {
	MARGIN-LEFT: 3.2em
}
DIV.smallexample {
	MARGIN-LEFT: 3.2em
}
DIV.smallindentedblock {
	MARGIN-LEFT: 3.2em; FONT-SIZE: smaller
}
DIV.smalllisp {
	MARGIN-LEFT: 3.2em
}
KBD {
	FONT-STYLE: oblique
}
PRE.display {
	FONT-FAMILY: inherit
}
PRE.format {
	FONT-FAMILY: inherit
}
PRE.menu-comment {
	FONT-FAMILY: serif
}
PRE.menu-preformatted {
	FONT-FAMILY: serif
}
PRE.smalldisplay {
	FONT-FAMILY: inherit; FONT-SIZE: smaller
}
PRE.smallexample {
	FONT-SIZE: smaller
}
PRE.smallformat {
	FONT-FAMILY: inherit; FONT-SIZE: smaller
}
PRE.smalllisp {
	FONT-SIZE: smaller
}
SPAN.nocodebreak {
	WHITE-SPACE: nowrap
}
SPAN.nolinebreak {
	WHITE-SPACE: nowrap
}
SPAN.roman {
	FONT-FAMILY: serif; FONT-WEIGHT: normal
}
SPAN.sansserif {
	FONT-FAMILY: sans-serif; FONT-WEIGHT: normal
}
UL.no-bullet {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
</STYLE>
</HEAD>
<BODY lang="en" aLink="#ff0000" bgColor="#ffffff" text="#000000" vLink="#800080" 
link="#0000ff">
<H1 class="settitle" align="center">GNU Scientific Library – Reference 
Manual</H1><A name="Top"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Introduction" 
rel="next">Introduction</A>, Previous: <A accessKey="p" href="http://www.gnu.org/software/gsl/manual/dir.html#Top" 
rel="previous">(dir)</A>, Up: <A accessKey="u" href="http://www.gnu.org/software/gsl/manual/dir.html#Top" 
rel="up">(dir)</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GSL"></A>
<H1 class="top">GSL</H1>
<P>This file documents the <I>GNU Scientific Library</I> (GSL), a collection of 
 numerical routines for scientific computing. It corresponds to release 1.16+ of 
 the library. Please report any errors in this manual to <A href="mailto:bug-gsl@gnu.org">bug-gsl@gnu.org</A>. 
</P>
<P>More information about GSL can be found at the project homepage, <A href="http://www.gnu.org/software/gsl/">http://www.gnu.org/software/gsl/</A>. 
</P>
<P>Printed copies of this manual can be purchased from Network Theory Ltd at <A 
href="http://www.network-theory.co.uk/gsl/manual/">http://www.network-theory.co.uk/gsl/manual/</A>. 
 The money raised from sales of the manual helps support the development of GSL. 
</P>
<P>A Japanese translation of this manual is available from the GSL project 
 homepage thanks to Daisuke Tominaga. </P>
<P>Copyright © 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 
 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 The GSL Team. </P>
<P>Permission is granted to copy, distribute and/or modify this document under 
 the terms of the GNU Free Documentation License, Version 1.3 or any later 
 version published by the Free Software Foundation; with the Invariant Sections 
 being “GNU General Public License” and “Free Software Needs Free 
Documentation”, the Front-Cover text being “A GNU Manual”, and with the 
Back-Cover Text being  (a) (see below). A copy of the license is included in the 
section entitled “GNU  Free Documentation License”. </P>
<P>(a) The Back-Cover Text is: “You have the freedom to copy and modify this GNU 
 Manual.” </P><BR>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Introduction">Introduction</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Using-the-library">Using 
            the library</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Error-Handling">Error 
            Handling</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Mathematical-Functions">Mathematical 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Complex-Numbers">Complex 
            Numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Polynomials">Polynomials</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Special-Functions">Special 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Vectors-and-Matrices">Vectors 
            and Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Permutations">Permutations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Combinations">Combinations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Multisets">Multisets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Sorting">Sorting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#BLAS-Support">BLAS 
            Support</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Linear-Algebra">Linear 
            Algebra</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Eigensystems">Eigensystems</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Fast-Fourier-Transforms">Fast 
            Fourier Transforms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Numerical-Integration">Numerical 
            Integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Generation">Random 
            Number Generation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Quasi_002dRandom-Sequences">Quasi-Random 
            Sequences</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Distributions">Random 
            Number Distributions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Statistics">Statistics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Running-Statistics">Running 
            Statistics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Histograms">Histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#N_002dtuples">N-tuples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Monte-Carlo-Integration">Monte 
            Carlo Integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Simulated-Annealing">Simulated 
            Annealing</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Ordinary-Differential-Equations">Ordinary 
            Differential Equations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Interpolation">Interpolation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Numerical-Differentiation">Numerical 
            Differentiation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Chebyshev-Approximations">Chebyshev 
            Approximations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Series-Acceleration">Series 
            Acceleration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Wavelet-Transforms">Wavelet 
            Transforms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Discrete-Hankel-Transforms">Discrete 
            Hankel Transforms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#One-dimensional-Minimization">One 
            dimensional Minimization</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Multidimensional-Root_002dFinding">Multidimensional 
            Root-Finding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Multidimensional-Minimization">Multidimensional 
            Minimization</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Least_002dSquares-Fitting">Least-Squares 
            Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Nonlinear-Least_002dSquares-Fitting">Nonlinear 
            Least-Squares Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Basis-Splines">Basis 
            Splines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Sparse-Matrices">Sparse 
            Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Sparse-BLAS-Support">Sparse 
            BLAS Support</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Sparse-Linear-Algebra">Sparse 
            Linear Algebra</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Physical-Constants">Physical 
            Constants</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#IEEE-floating_002dpoint-arithmetic">IEEE 
            floating-point arithmetic</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Debugging-Numerical-Programs">Debugging 
            Numerical Programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Contributors-to-GSL">Contributors 
            to GSL</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Autoconf-Macros">Autoconf 
            Macros</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#GSL-CBLAS-Library">GSL 
            CBLAS Library</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#GNU-General-Public-License">GNU 
            General Public License</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#GNU-Free-Documentation-License">GNU 
            Free Documentation License</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Function-Index">Function 
            Index</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Variable-Index">Variable 
            Index</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Type-Index">Type 
            Index</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Concept-Index">Concept 
            Index</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Introduction"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Using-the-library" 
rel="next">Using the library</A>, Previous: <A accessKey="p" href="#Top" 
rel="previous">Top</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Introduction-1"></A>
<H2 class="chapter">1 Introduction</H2><A name="index-license-of-GSL"></A><A 
name="index-GNU-General-Public-License"></A>
<P>The GNU Scientific Library (GSL) is a collection of routines for numerical 
 computing. The routines have been written from scratch in C, and present a 
 modern Applications Programming Interface (API) for C programmers, allowing 
 wrappers to be written for very high level languages. The source code is 
 distributed under the GNU General Public License. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Routines-available-in-GSL">Routines 
            available in GSL</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#GSL-is-Free-Software">GSL 
            is Free Software</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Obtaining-GSL">Obtaining 
            GSL</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#No-Warranty">No 
            Warranty</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Reporting-Bugs">Reporting 
            Bugs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Further-Information">Further 
            Information</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Conventions-used-in-this-manual">Conventions 
            used in this manual</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Routines-available-in-GSL"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#GSL-is-Free-Software" 
rel="next">GSL is Free Software</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Routines-available-in-GSL-1"></A>
<H3 class="section">1.1 Routines available in GSL</H3>
<P>The library covers a wide range of topics in numerical computing. Routines 
 are available for the following areas, </P>
<TABLE>
  <TBODY>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Complex Numbers</TD>
    <TD width="45%">Roots of Polynomials</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Special Functions</TD>
    <TD width="45%">Vectors and Matrices</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Permutations</TD>
    <TD width="45%">Combinations</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Sorting</TD>
    <TD width="45%">BLAS Support</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Linear Algebra</TD>
    <TD width="45%">CBLAS Library</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Fast Fourier Transforms</TD>
    <TD width="45%">Eigensystems</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Random Numbers</TD>
    <TD width="45%">Quadrature</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Random Distributions</TD>
    <TD width="45%">Quasi-Random Sequences</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Histograms</TD>
    <TD width="45%">Statistics</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Monte Carlo Integration</TD>
    <TD width="45%">N-Tuples</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Differential Equations</TD>
    <TD width="45%">Simulated Annealing</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Numerical Differentiation</TD>
    <TD width="45%">Interpolation</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Series Acceleration</TD>
    <TD width="45%">Chebyshev Approximations</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Root-Finding</TD>
    <TD width="45%">Discrete Hankel Transforms</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Least-Squares Fitting</TD>
    <TD width="45%">Minimization</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">IEEE Floating-Point</TD>
    <TD width="45%">Physical Constants</TD></TR>
  <TR>
    <TD width="5%"></TD>
    <TD width="45%">Basis Splines</TD>
    <TD width="45%">Wavelets</TD></TR></TBODY></TABLE>
<P>The use of these routines is described in this manual. Each chapter provides 
 detailed definitions of the functions, followed by example programs and 
 references to the articles on which the algorithms are based. </P>
<P>Where possible the routines have been based on reliable public-domain 
 packages such as FFTPACK and QUADPACK, which the developers of GSL have 
 reimplemented in C with modern coding conventions. </P>
<HR>
<A name="GSL-is-Free-Software"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Obtaining-GSL" 
rel="next">Obtaining GSL</A>, Previous: <A accessKey="p" href="#Routines-available-in-GSL" 
rel="previous">Routines available in GSL</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GSL-is-Free-Software-1"></A>
<H3 class="section">1.2 GSL is Free Software</H3><A name="index-free-software_002c-explanation-of"></A>
<P>The subroutines in the GNU Scientific Library are “free software”; this means 
 that everyone is free to use them, and to redistribute them in other free 
 programs. The library is not in the public domain; it is copyrighted and there 
 are conditions on its distribution. These conditions are designed to permit 
 everything that a good cooperating citizen would want to do. What is not 
allowed  is to try to prevent others from further sharing any version of the 
software  that they might get from you. </P>
<P>Specifically, we want to make sure that you have the right to share copies of 
 programs that you are given which use the GNU Scientific Library, that you 
 receive their source code or else can get it if you want it, that you can 
change  these programs or use pieces of them in new free programs, and that you 
know you  can do these things. </P>
<P>To make sure that everyone has such rights, we have to forbid you to deprive 
 anyone else of these rights. For example, if you distribute copies of any code 
 which uses the GNU Scientific Library, you must give the recipients all the 
 rights that you have received. You must make sure that they, too, receive or 
can  get the source code, both to the library and the code which uses it. And 
you  must tell them their rights. This means that the library should not be 
 redistributed in proprietary programs. </P>
<P>Also, for our own protection, we must make certain that everyone finds out 
 that there is no warranty for the GNU Scientific Library. If these programs are 
 modified by someone else and passed on, we want their recipients to know that 
 what they have is not what we distributed, so that any problems introduced by 
 others will not reflect on our reputation. </P>
<P>The precise conditions for the distribution of software related to the GNU 
 Scientific Library are found in the GNU General Public License (see <A href="#GNU-General-Public-License">GNU 
 General Public License</A>). Further information about this license is 
available  from the GNU Project webpage <CITE>Frequently Asked Questions about 
the GNU  GPL</CITE>, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><A 
  href="http://www.gnu.org/copyleft/gpl-faq.html">http://www.gnu.org/copyleft/gpl-faq.html</A></LI></UL>
<P>The Free Software Foundation also operates a license consulting service for 
 commercial users (contact details available from <A 
href="http://www.fsf.org/">http://www.fsf.org/</A>). </P>
<HR>
<A name="Obtaining-GSL"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#No-Warranty" 
rel="next">No Warranty</A>, Previous: <A accessKey="p" href="#GSL-is-Free-Software" 
rel="previous">GSL is Free Software</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Obtaining-GSL-1"></A>
<H3 class="section">1.3 Obtaining GSL</H3><A name="index-obtaining-GSL"></A><A 
name="index-downloading-GSL"></A><A name="index-mailing-list-for-GSL-announcements"></A><A 
name="index-info_002dgsl-mailing-list"></A>
<P>The source code for the library can be obtained in different ways, by copying 
 it from a friend, purchasing it on <SMALL>CDROM</SMALL> or downloading it from 
 the internet. A list of public ftp servers which carry the source code can be 
 found on the GNU website, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><A 
  href="http://www.gnu.org/software/gsl/">http://www.gnu.org/software/gsl/</A></LI></UL>
<P>The preferred platform for the library is a GNU system, which allows it to 
 take advantage of additional features in the GNU C compiler and GNU C library. 
 However, the library is fully portable and should compile on most systems with 
a  C compiler. </P>
<P>Announcements of new releases, updates and other relevant events are made on 
 the <CODE>info-gsl@gnu.org</CODE> mailing list. To subscribe to this low-volume 
 list, send an email of the following form: </P>
<DIV class="example"><PRE class="example">To: info-gsl-request@gnu.org 
Subject: subscribe
</PRE></DIV>
<P>You will receive a response asking you to reply in order to confirm your 
 subscription. </P>
<HR>
<A name="No-Warranty"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reporting-Bugs" 
rel="next">Reporting Bugs</A>, Previous: <A accessKey="p" href="#Obtaining-GSL" 
rel="previous">Obtaining GSL</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="No-Warranty-1"></A>
<H3 class="section">1.4 No Warranty</H3><A 
name="index-warranty-_0028none_0029"></A>
<P>The software described in this manual has no warranty, it is provided “as 
 is”. It is your responsibility to validate the behavior of the routines and 
 their accuracy using the source code provided, or to purchase support and 
 warranties from commercial redistributors. Consult the GNU General Public 
 license for further details (see <A href="#GNU-General-Public-License">GNU 
 General Public License</A>). </P>
<HR>
<A name="Reporting-Bugs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Further-Information" 
rel="next">Further Information</A>, Previous: <A accessKey="p" href="#No-Warranty" 
rel="previous">No Warranty</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reporting-Bugs-1"></A>
<H3 class="section">1.5 Reporting Bugs</H3><A 
name="index-reporting-bugs-in-GSL"></A><A 
name="index-bugs_002c-how-to-report"></A><A name="index-bug_002dgsl-mailing-list"></A><A 
name="index-mailing-list_002c-bug_002dgsl"></A>
<P>A list of known bugs can be found in the <SAMP>BUGS</SAMP> file included in 
 the GSL distribution or online in the GSL bug tracker.<A href="#FOOT1" 
name="DOCF1"><SUP>1</SUP></A> Details of compilation problems can be found in 
the <SAMP>INSTALL</SAMP> file. </P>
<P>If you find a bug which is not listed in these files, please report it to <A 
href="mailto:bug-gsl@gnu.org">bug-gsl@gnu.org</A>. </P>
<P>All bug reports should include: </P>
<UL>
  <LI>The version number of GSL </LI>
  <LI>The hardware and operating system </LI>
  <LI>The compiler used, including version number and compilation options </LI>
  <LI>A description of the bug behavior </LI>
  <LI>A short program which exercises the bug </LI></UL>
<P>It is useful if you can check whether the same problem occurs when the 
 library is compiled without optimization. Thank you. </P>
<P>Any errors or omissions in this manual can also be reported to the same 
 address. </P>
<HR>
<A name="Further-Information"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Conventions-used-in-this-manual" 
rel="next">Conventions used in this manual</A>, Previous: <A accessKey="p" href="#Reporting-Bugs" 
rel="previous">Reporting Bugs</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Further-Information-1"></A>
<H3 class="section">1.6 Further Information</H3><A name="index-mailing-list-archives"></A><A 
name="index-website_002c-developer-information"></A><A name="index-contacting-the-GSL-developers"></A>
<P>Additional information, including online copies of this manual, links to 
 related projects, and mailing list archives are available from the website 
 mentioned above. </P>
<P>Any questions about the use and installation of the library can be asked on 
 the mailing list <CODE>help-gsl@gnu.org</CODE>. To subscribe to this list, send 
 an email of the following form: </P>
<DIV class="example"><PRE class="example">To: help-gsl-request@gnu.org
Subject: subscribe
</PRE></DIV>
<P>This mailing list can be used to ask questions not covered by this manual, 
 and to contact the developers of the library. </P>
<P>If you would like to refer to the GNU Scientific Library in a journal 
 article, the recommended way is to cite this reference manual, e.g. <CITE>M. 
 Galassi et al, GNU Scientific Library Reference Manual (3rd Ed.), ISBN 
 0954612078</CITE>. </P>
<P>If you want to give a url, use “<A 
href="http://www.gnu.org/software/gsl/">http://www.gnu.org/software/gsl/</A>”. 
</P>
<HR>
<A name="Conventions-used-in-this-manual"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Further-Information" 
rel="previous">Further Information</A>, Up: <A accessKey="u" href="#Introduction" 
rel="up">Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Conventions-used-in-this-manual-1"></A>
<H3 class="section">1.7 Conventions used in this manual</H3><A name="index-conventions_002c-used-in-manual"></A><A 
name="index-examples_002c-conventions-used-in"></A><A 
name="index-shell-prompt"></A><A name="index-_0024_002c-shell-prompt"></A>
<P>This manual contains many examples which can be typed at the keyboard. A 
 command entered at the terminal is shown like this, </P>
<DIV class="example"><PRE class="example">$ <I>command</I>
</PRE></DIV><A name="index-dollar-sign-_0024_002c-shell-prompt"></A>
<P>The first character on the line is the terminal prompt, and should not be 
 typed. The dollar sign ‘<SAMP>$</SAMP>’ is used as the standard prompt in this 
 manual, although some systems may use a different character. </P>
<P>The examples assume the use of the GNU operating system. There may be minor 
 differences in the output on other systems. The commands for setting 
environment  variables use the Bourne shell syntax of the standard GNU shell 
 (<CODE>bash</CODE>). </P>
<HR>
<A name="Using-the-library"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Error-Handling" 
rel="next">Error Handling</A>, Previous: <A accessKey="p" href="#Introduction" 
rel="previous">Introduction</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Using-the-library-1"></A>
<H2 class="chapter">2 Using the library</H2><A name="index-usage_002c-compiling-application-programs"></A><A 
name="index-standards-conformance_002c-ANSI-C"></A><A name="index-ANSI-C_002c-use-of"></A><A 
name="index-C-extensions_002c-compatible-use-of"></A><A name="index-compatibility"></A>
<P>This chapter describes how to compile programs that use GSL, and introduces 
 its conventions. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#An-Example-Program">An 
            Example Program</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Compiling-and-Linking">Compiling 
            and Linking</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Shared-Libraries">Shared 
            Libraries</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#ANSI-C-Compliance">ANSI 
            C Compliance</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Inline-functions">Inline 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Long-double">Long 
            double</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Portability-functions">Portability 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Alternative-optimized-functions">Alternative 
            optimized functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Support-for-different-numeric-types">Support 
            for different numeric types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Compatibility-with-C_002b_002b">Compatibility 
            with C++</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Aliasing-of-arrays">Aliasing 
            of arrays</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Thread_002dsafety">Thread-safety</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Deprecated-Functions">Deprecated 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Code-Reuse">Code 
            Reuse</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="An-Example-Program"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Compiling-and-Linking" 
rel="next">Compiling and Linking</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="An-Example-Program-1"></A>
<H3 class="section">2.1 An Example Program</H3>
<P>The following short program demonstrates the use of the library by computing 
 the value of the Bessel function <EM>J_0(x)</EM> for <EM>x=5</EM>, </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_sf_bessel.h&gt;

int
main (void)
{
  double x = 5.0;
  double y = gsl_sf_bessel_J0 (x);
  printf ("J0(%g) = %.18e\n", x, y);
  return 0;
}
</PRE></DIV>
<P>The output is shown below, and should be correct to double-precision 
 accuracy,<A href="#FOOT2" 
name="DOCF2"><SUP>2</SUP></A> </P>
<DIV class="example"><PRE class="verbatim">J0(5) = -1.775967713143382920e-01
</PRE></DIV>
<P>The steps needed to compile this program are described in the following 
 sections. </P>
<HR>
<A name="Compiling-and-Linking"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Shared-Libraries" 
rel="next">Shared Libraries</A>, Previous: <A accessKey="p" href="#An-Example-Program" 
rel="previous">An Example Program</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Compiling-and-Linking-1"></A>
<H3 class="section">2.2 Compiling and Linking</H3><A name="index-compiling-programs_002c-include-paths"></A><A 
name="index-including-GSL-header-files"></A><A name="index-header-files_002c-including"></A>
<P>The library header files are installed in their own <SAMP>gsl</SAMP> 
 directory. You should write any preprocessor include statements with a 
<SAMP>gsl/</SAMP> directory prefix thus, </P>
<DIV class="example"><PRE class="example">#include &lt;gsl/gsl_math.h&gt;
</PRE></DIV>
<P>If the directory is not installed on the standard search path of your 
 compiler you will also need to provide its location to the preprocessor as a 
 command line flag. The default location of the <SAMP>gsl</SAMP> directory is 
<SAMP>/usr/local/include/gsl</SAMP>. A typical compilation command for a source 
 file <SAMP>example.c</SAMP> with the GNU C compiler <CODE>gcc</CODE> is, </P>
<DIV class="example"><PRE class="example">$ gcc -Wall -I/usr/local/include -c example.c
</PRE></DIV>
<P>This results in an object file <SAMP>example.o</SAMP>. The default include 
 path for <CODE>gcc</CODE> searches <SAMP>/usr/local/include</SAMP> 
automatically  so the <CODE>-I</CODE> option can actually be omitted when GSL is 
installed in  its default location. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Linking-programs-with-the-library">Linking 
            programs with the library</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Linking-with-an-alternative-BLAS-library">Linking 
            with an alternative BLAS library</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Linking-programs-with-the-library"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Linking-with-an-alternative-BLAS-library" 
rel="next">Linking with an alternative BLAS library</A>, Up: <A accessKey="u" 
href="#Compiling-and-Linking" 
rel="up">Compiling and Linking</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Linking-programs-with-the-library-1"></A>
<H4 class="subsection">2.2.1 Linking programs with the library</H4><A name="index-compiling-programs_002c-library-paths"></A><A 
name="index-linking-with-GSL-libraries"></A><A name="index-libraries_002c-linking-with"></A>
<P>The library is installed as a single file, <SAMP>libgsl.a</SAMP>. A shared 
 version of the library <SAMP>libgsl.so</SAMP> is also installed on systems that 
 support shared libraries. The default location of these files is 
<SAMP>/usr/local/lib</SAMP>. If this directory is not on the standard search 
 path of your linker you will also need to provide its location as a command 
line  flag. </P>
<P>To link against the library you need to specify both the main library and a 
 supporting <SMALL>CBLAS</SMALL> library, which provides standard basic linear 
 algebra subroutines. A suitable <SMALL>CBLAS</SMALL> implementation is provided 
 in the library <SAMP>libgslcblas.a</SAMP> if your system does not provide one. 
 The following example shows how to link an application with the library, </P>
<DIV class="example"><PRE class="example">$ gcc -L/usr/local/lib example.o -lgsl -lgslcblas -lm
</PRE></DIV>
<P>The default library path for <CODE>gcc</CODE> searches 
<SAMP>/usr/local/lib</SAMP> automatically so the <CODE>-L</CODE> option can be 
 omitted when GSL is installed in its default location. </P>
<P>The option <CODE>-lm</CODE> links with the system math library. On some 
 systems it is not needed.<A href="#FOOT3" 
name="DOCF3"><SUP>3</SUP></A> </P>
<P>For a tutorial introduction to the GNU C Compiler and related programs, see 
<A href="http://www.network-theory.co.uk/gcc/intro/"><CITE>An Introduction to 
 GCC</CITE></A> (ISBN 0954161793).<A href="#FOOT4" 
name="DOCF4"><SUP>4</SUP></A> </P>
<HR>
<A name="Linking-with-an-alternative-BLAS-library"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Linking-programs-with-the-library" 
rel="previous">Linking programs with the library</A>, Up: <A accessKey="u" href="#Compiling-and-Linking" 
rel="up">Compiling and Linking</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Linking-with-an-alternative-BLAS-library-1"></A>
<H4 class="subsection">2.2.2 Linking with an alternative BLAS library</H4>
<P>The following command line shows how you would link the same application with 
 an alternative <SMALL>CBLAS</SMALL> library <SAMP>libcblas.a</SAMP>, </P>
<DIV class="example"><PRE class="example">$ gcc example.o -lgsl -lcblas -lm
</PRE></DIV>
<P>For the best performance an optimized platform-specific <SMALL>CBLAS</SMALL> 
 library should be used for <CODE>-lcblas</CODE>. The library must conform to 
the <SMALL>CBLAS</SMALL> standard. The <SMALL>ATLAS</SMALL> package provides a 
 portable high-performance <SMALL>BLAS</SMALL> library with a 
<SMALL>CBLAS</SMALL> interface. It is free software and should be installed for 
 any work requiring fast vector and matrix operations. The following command 
line  will link with the <SMALL>ATLAS</SMALL> library and its 
<SMALL>CBLAS</SMALL>  interface, </P>
<DIV class="example"><PRE class="example">$ gcc example.o -lgsl -lcblas -latlas -lm
</PRE></DIV>
<P>If the <SMALL>ATLAS</SMALL> library is installed in a non-standard directory 
 use the <CODE>-L</CODE> option to add it to the search path, as described 
above. </P>
<P>For more information about <SMALL>BLAS</SMALL> functions see <A href="#BLAS-Support">BLAS 
 Support</A>. </P>
<HR>
<A name="Shared-Libraries"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#ANSI-C-Compliance" 
rel="next">ANSI C Compliance</A>, Previous: <A accessKey="p" href="#Compiling-and-Linking" 
rel="previous">Compiling and Linking</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Shared-Libraries-1"></A>
<H3 class="section">2.3 Shared Libraries</H3><A 
name="index-shared-libraries"></A><A name="index-libraries_002c-shared"></A><A 
name="index-LD_005fLIBRARY_005fPATH"></A>
<P>To run a program linked with the shared version of the library the operating 
 system must be able to locate the corresponding <SAMP>.so</SAMP> file at 
 runtime. If the library cannot be found, the following error will occur: </P>
<DIV class="example"><PRE class="example">$ ./a.out 
./a.out: error while loading shared libraries: 
libgsl.so.0: cannot open shared object file: No such 
file or directory
</PRE></DIV>
<P>To avoid this error, either modify the system dynamic linker configuration<A 
href="#FOOT5" 
name="DOCF5"><SUP>5</SUP></A> or define the shell variable 
<CODE>LD_LIBRARY_PATH</CODE> to include the directory where the library is 
 installed. </P>
<P>For example, in the Bourne shell (<CODE>/bin/sh</CODE> or 
<CODE>/bin/bash</CODE>), the library search path can be set with the following 
 commands: </P>
<DIV class="example"><PRE class="example">$ LD_LIBRARY_PATH=/usr/local/lib
$ export LD_LIBRARY_PATH
$ ./example
</PRE></DIV>
<P>In the C-shell (<CODE>/bin/csh</CODE> or <CODE>/bin/tcsh</CODE>) the 
 equivalent command is, </P>
<DIV class="example"><PRE class="example">% setenv LD_LIBRARY_PATH /usr/local/lib
</PRE></DIV>
<P>The standard prompt for the C-shell in the example above is the percent 
 character ‘<SAMP>%</SAMP>’, and should not be typed as part of the command. 
</P>
<P>To save retyping these commands each session they can be placed in an 
 individual or system-wide login file. </P>
<P>To compile a statically linked version of the program, use the 
<CODE>-static</CODE> flag in <CODE>gcc</CODE>, </P>
<DIV class="example"><PRE class="example">$ gcc -static example.o -lgsl -lgslcblas -lm
</PRE></DIV>
<HR>
<A name="ANSI-C-Compliance"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Inline-functions" 
rel="next">Inline functions</A>, Previous: <A accessKey="p" href="#Shared-Libraries" 
rel="previous">Shared Libraries</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="ANSI-C-Compliance-1"></A>
<H3 class="section">2.4 ANSI C Compliance</H3>
<P>The library is written in ANSI C and is intended to conform to the ANSI C 
 standard (C89). It should be portable to any system with a working ANSI C 
 compiler. </P>
<P>The library does not rely on any non-ANSI extensions in the interface it 
 exports to the user. Programs you write using GSL can be ANSI compliant. 
 Extensions which can be used in a way compatible with pure ANSI C are 
supported,  however, via conditional compilation. This allows the library to 
take advantage  of compiler extensions on those platforms which support them. 
</P>
<P>When an ANSI C feature is known to be broken on a particular system the 
 library will exclude any related functions at compile-time. This should make it 
 impossible to link a program that would use these functions and give incorrect 
 results. </P>
<P>To avoid namespace conflicts all exported function names and variables have 
 the prefix <CODE>gsl_</CODE>, while exported macros have the prefix 
<CODE>GSL_</CODE>. </P>
<HR>
<A name="Inline-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Long-double" 
rel="next">Long double</A>, Previous: <A accessKey="p" href="#ANSI-C-Compliance" 
rel="previous">ANSI C Compliance</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Inline-functions-1"></A>
<H3 class="section">2.5 Inline functions</H3><A 
name="index-HAVE_005fINLINE-1"></A><A 
name="index-GSL_005fC99_005fINLINE-1"></A><A 
name="index-inline-functions"></A><A name="index-HAVE_005fINLINE"></A><A name="index-GSL_005fC99_005fINLINE"></A><A 
name="index-C99_002c-inline-keyword"></A><A name="index-extern-inline"></A>
<P>The <CODE>inline</CODE> keyword is not part of the original ANSI C standard 
 (C89) so the library does not export any inline function definitions by 
default.  Inline functions were introduced officially in the newer C99 standard 
but most  C89 compilers have also included <CODE>inline</CODE> as an extension 
for a long  time. </P>
<P>To allow the use of inline functions, the library provides optional inline 
 versions of performance-critical routines by conditional compilation in the 
 exported header files. The inline versions of these functions can be included 
by  defining the macro <CODE>HAVE_INLINE</CODE> when compiling an application, 
</P>
<DIV class="example"><PRE class="example">$ gcc -Wall -c -DHAVE_INLINE example.c
</PRE></DIV>
<P>If you use <CODE>autoconf</CODE> this macro can be defined automatically. If 
 you do not define the macro <CODE>HAVE_INLINE</CODE> then the slower 
non-inlined  versions of the functions will be used instead. </P>
<P>By default, the actual form of the inline keyword is <CODE>extern 
 inline</CODE>, which is a <CODE>gcc</CODE> extension that eliminates 
unnecessary  function definitions. If the form <CODE>extern inline</CODE> causes 
problems  with other compilers a stricter autoconf test can be used, see <A 
href="#Autoconf-Macros">Autoconf 
 Macros</A>. </P>
<P>When compiling with <CODE>gcc</CODE> in C99 mode (<CODE>gcc -std=c99</CODE>) 
 the header files automatically switch to C99-compatible inline function 
 declarations instead of <CODE>extern inline</CODE>. With other C99 compilers, 
 define the macro <CODE>GSL_C99_INLINE</CODE> to use these declarations. </P>
<HR>
<A name="Long-double"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Portability-functions" 
rel="next">Portability functions</A>, Previous: <A accessKey="p" href="#Inline-functions" 
rel="previous">Inline functions</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Long-double-1"></A>
<H3 class="section">2.6 Long double</H3><A name="index-long-double"></A>
<P>In general, the algorithms in the library are written for double precision 
 only. The <CODE>long double</CODE> type is not supported for actual 
computation. </P>
<P>One reason for this choice is that the precision of <CODE>long double</CODE> 
 is platform dependent. The IEEE standard only specifies the minimum precision 
of  extended precision numbers, while the precision of <CODE>double</CODE> is 
the  same on all platforms. </P>
<P>However, it is sometimes necessary to interact with external data in 
 long-double format, so the vector and matrix datatypes include long-double 
 versions. </P>
<P>It should be noted that in some system libraries the <CODE>stdio.h</CODE> 
 formatted input/output functions <CODE>printf</CODE> and <CODE>scanf</CODE> are 
 not implemented correctly for <CODE>long double</CODE>. Undefined or incorrect 
 results are avoided by testing these functions during the 
<CODE>configure</CODE>  stage of library compilation and eliminating certain GSL 
functions which depend  on them if necessary. The corresponding line in the 
<CODE>configure</CODE>  output looks like this, </P>
<DIV class="example"><PRE class="example">checking whether printf works with long double... no
</PRE></DIV>
<P>Consequently when <CODE>long double</CODE> formatted input/output does not 
 work on a given system it should be impossible to link a program which uses GSL 
 functions dependent on this. </P>
<P>If it is necessary to work on a system which does not support formatted 
<CODE>long double</CODE> input/output then the options are to use binary formats 
 or to convert <CODE>long double</CODE> results into <CODE>double</CODE> for 
 reading and writing. </P>
<HR>
<A name="Portability-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Alternative-optimized-functions" 
rel="next">Alternative optimized functions</A>, Previous: <A accessKey="p" href="#Long-double" 
rel="previous">Long double</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Portability-functions-1"></A>
<H3 class="section">2.7 Portability functions</H3>
<P>To help in writing portable applications GSL provides some implementations of 
 functions that are found in other libraries, such as the BSD math library. You 
 can write your application to use the native versions of these functions, and 
 substitute the GSL versions via a preprocessor macro if they are unavailable on 
 another platform. </P>
<P>For example, after determining whether the BSD function <CODE>hypot</CODE> is 
 available you can include the following macro definitions in a file 
<SAMP>config.h</SAMP> with your application, </P>
<DIV class="example"><PRE class="example">/* Substitute gsl_hypot for missing system hypot */

#ifndef HAVE_HYPOT
#define hypot gsl_hypot
#endif
</PRE></DIV>
<P>The application source files can then use the include command <CODE>#include 
&lt; config.h&gt;</CODE> to replace each occurrence of <CODE>hypot</CODE> by 
<CODE>gsl_hypot</CODE> when <CODE>hypot</CODE> is not available. This 
 substitution can be made automatically if you use <CODE>autoconf</CODE>, see <A 
href="#Autoconf-Macros">Autoconf 
 Macros</A>. </P>
<P>In most circumstances the best strategy is to use the native versions of 
 these functions when available, and fall back to GSL versions otherwise, since 
 this allows your application to take advantage of any platform-specific 
 optimizations in the system library. This is the strategy used within GSL 
 itself. </P>
<HR>
<A name="Alternative-optimized-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Support-for-different-numeric-types" 
rel="next">Support for different numeric types</A>, Previous: <A accessKey="p" 
href="#Portability-functions" 
rel="previous">Portability functions</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Alternative-optimized-functions-1"></A>
<H3 class="section">2.8 Alternative optimized functions</H3><A name="index-alternative-optimized-functions"></A><A 
name="index-optimized-functions_002c-alternatives"></A>
<P>The main implementation of some functions in the library will not be optimal 
 on all architectures. For example, there are several ways to compute a Gaussian 
 random variate and their relative speeds are platform-dependent. In cases like 
 this the library provides alternative implementations of these functions with 
 the same interface. If you write your application using calls to the standard 
 implementation you can select an alternative version later via a preprocessor 
 definition. It is also possible to introduce your own optimized functions this 
 way while retaining portability. The following lines demonstrate the use of a 
 platform-dependent choice of methods for sampling from the Gaussian 
 distribution, </P>
<DIV class="example"><PRE class="example">#ifdef SPARC
#define gsl_ran_gaussian gsl_ran_gaussian_ratio_method
#endif
#ifdef INTEL
#define gsl_ran_gaussian my_gaussian
#endif
</PRE></DIV>
<P>These lines would be placed in the configuration header file 
<SAMP>config.h</SAMP> of the application, which should then be included by all 
 the source files. Note that the alternative implementations will not produce 
 bit-for-bit identical results, and in the case of random number distributions 
 will produce an entirely different stream of random variates. </P>
<HR>
<A name="Support-for-different-numeric-types"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Compatibility-with-C_002b_002b" 
rel="next">Compatibility with C++</A>, Previous: <A accessKey="p" href="#Alternative-optimized-functions" 
rel="previous">Alternative optimized functions</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Support-for-different-numeric-types-1"></A>
<H3 class="section">2.9 Support for different numeric types</H3>
<P>Many functions in the library are defined for different numeric types. This 
 feature is implemented by varying the name of the function with a type-related 
 modifier—a primitive form of C++ templates. The modifier is inserted into the 
 function name after the initial module prefix. The following table shows the 
 function names defined for all the numeric types of an imaginary module 
<CODE>gsl_foo</CODE> with function <CODE>fn</CODE>, </P>
<DIV class="example"><PRE class="example">gsl_foo_fn               double        
gsl_foo_long_double_fn   long double   
gsl_foo_float_fn         float         
gsl_foo_long_fn          long          
gsl_foo_ulong_fn         unsigned long 
gsl_foo_int_fn           int           
gsl_foo_uint_fn          unsigned int  
gsl_foo_short_fn         short         
gsl_foo_ushort_fn        unsigned short
gsl_foo_char_fn          char          
gsl_foo_uchar_fn         unsigned char 
</PRE></DIV>
<P>The normal numeric precision <CODE>double</CODE> is considered the default 
 and does not require a suffix. For example, the function 
<CODE>gsl_stats_mean</CODE> computes the mean of double precision numbers, while 
 the function <CODE>gsl_stats_int_mean</CODE> computes the mean of integers. 
</P>
<P>A corresponding scheme is used for library defined types, such as 
<CODE>gsl_vector</CODE> and <CODE>gsl_matrix</CODE>. In this case the modifier 
 is appended to the type name. For example, if a module defines a new 
 type-dependent struct or typedef <CODE>gsl_foo</CODE> it is modified for other 
 types in the following way, </P>
<DIV class="example"><PRE class="example">gsl_foo                  double        
gsl_foo_long_double      long double   
gsl_foo_float            float         
gsl_foo_long             long          
gsl_foo_ulong            unsigned long 
gsl_foo_int              int           
gsl_foo_uint             unsigned int  
gsl_foo_short            short         
gsl_foo_ushort           unsigned short
gsl_foo_char             char          
gsl_foo_uchar            unsigned char 
</PRE></DIV>
<P>When a module contains type-dependent definitions the library provides 
 individual header files for each type. The filenames are modified as shown in 
 the below. For convenience the default header includes the definitions for all 
 the types. To include only the double precision header file, or any other 
 specific type, use its individual filename. </P>
<DIV class="example"><PRE class="example">#include &lt;gsl/gsl_foo.h&gt;               All types
#include &lt;gsl/gsl_foo_double.h&gt;        double        
#include &lt;gsl/gsl_foo_long_double.h&gt;   long double   
#include &lt;gsl/gsl_foo_float.h&gt;         float         
#include &lt;gsl/gsl_foo_long.h&gt;          long          
#include &lt;gsl/gsl_foo_ulong.h&gt;         unsigned long 
#include &lt;gsl/gsl_foo_int.h&gt;           int           
#include &lt;gsl/gsl_foo_uint.h&gt;          unsigned int  
#include &lt;gsl/gsl_foo_short.h&gt;         short         
#include &lt;gsl/gsl_foo_ushort.h&gt;        unsigned short
#include &lt;gsl/gsl_foo_char.h&gt;          char          
#include &lt;gsl/gsl_foo_uchar.h&gt;         unsigned char 
</PRE></DIV>
<HR>
<A name="Compatibility-with-C_002b_002b"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Aliasing-of-arrays" 
rel="next">Aliasing of arrays</A>, Previous: <A accessKey="p" href="#Support-for-different-numeric-types" 
rel="previous">Support for different numeric types</A>, Up: <A accessKey="u" 
href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Compatibility-with-C_002b_002b-1"></A>
<H3 class="section">2.10 Compatibility with C++</H3><A name="index-C_002b_002b_002c-compatibility"></A><A 
name="index-exceptions_002c-C_002b_002b"></A>
<P>The library header files automatically define functions to have <CODE>extern 
 "C"</CODE> linkage when included in C++ programs. This allows the functions to 
 be called directly from C++. </P>
<P>To use C++ exception handling within user-defined functions passed to the 
 library as parameters, the library must be built with the additional 
<CODE>CFLAGS</CODE> compilation option <SAMP>-fexceptions</SAMP>. </P>
<HR>
<A name="Aliasing-of-arrays"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Thread_002dsafety" 
rel="next">Thread-safety</A>, Previous: <A accessKey="p" href="#Compatibility-with-C_002b_002b" 
rel="previous">Compatibility with C++</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Aliasing-of-arrays-1"></A>
<H3 class="section">2.11 Aliasing of arrays</H3><A name="index-aliasing-of-arrays"></A>
<P>The library assumes that arrays, vectors and matrices passed as modifiable 
 arguments are not aliased and do not overlap with each other. This removes the 
 need for the library to handle overlapping memory regions as a special case, 
and  allows additional optimizations to be used. If overlapping memory regions 
are  passed as modifiable arguments then the results of such functions will be 
 undefined. If the arguments will not be modified (for example, if a function 
 prototype declares them as <CODE>const</CODE> arguments) then overlapping or 
 aliased memory regions can be safely used. </P>
<HR>
<A name="Thread_002dsafety"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Deprecated-Functions" 
rel="next">Deprecated Functions</A>, Previous: <A accessKey="p" href="#Aliasing-of-arrays" 
rel="previous">Aliasing of arrays</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Thread_002dsafety-1"></A>
<H3 class="section">2.12 Thread-safety</H3>
<P>The library can be used in multi-threaded programs. All the functions are 
 thread-safe, in the sense that they do not use static variables. Memory is 
 always associated with objects and not with functions. For functions which use 
<EM>workspace</EM> objects as temporary storage the workspaces should be 
 allocated on a per-thread basis. For functions which use <EM>table</EM> objects 
 as read-only memory the tables can be used by multiple threads simultaneously. 
 Table arguments are always declared <CODE>const</CODE> in function prototypes, 
 to indicate that they may be safely accessed by different threads. </P>
<P>There are a small number of static global variables which are used to control 
 the overall behavior of the library (e.g. whether to use range-checking, the 
 function to call on fatal error, etc). These variables are set directly by the 
 user, so they should be initialized once at program startup and not modified by 
 different threads. </P>
<HR>
<A name="Deprecated-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Code-Reuse" 
rel="next">Code Reuse</A>, Previous: <A accessKey="p" href="#Thread_002dsafety" 
rel="previous">Thread-safety</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Deprecated-Functions-1"></A>
<H3 class="section">2.13 Deprecated Functions</H3><A name="index-deprecated-functions"></A>
<P>From time to time, it may be necessary for the definitions of some functions 
 to be altered or removed from the library. In these circumstances the functions 
 will first be declared <EM>deprecated</EM> and then removed from subsequent 
 versions of the library. Functions that are deprecated can be disabled in the 
 current release by setting the preprocessor definition 
<CODE>GSL_DISABLE_DEPRECATED</CODE>. This allows existing code to be tested for 
 forwards compatibility. </P>
<HR>
<A name="Code-Reuse"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Deprecated-Functions" 
rel="previous">Deprecated Functions</A>, Up: <A accessKey="u" href="#Using-the-library" 
rel="up">Using the library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Code-Reuse-1"></A>
<H3 class="section">2.14 Code Reuse</H3><A name="index-code-reuse-in-applications"></A><A 
name="index-source-code_002c-reuse-in-applications"></A>
<P>Where possible the routines in the library have been written to avoid 
 dependencies between modules and files. This should make it possible to extract 
 individual functions for use in your own applications, without needing to have 
 the whole library installed. You may need to define certain macros such as 
<CODE>GSL_ERROR</CODE> and remove some <CODE>#include</CODE> statements in order 
 to compile the files as standalone units. Reuse of the library code in this way 
 is encouraged, subject to the terms of the GNU General Public License. </P>
<HR>
<A name="Error-Handling"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Mathematical-Functions" 
rel="next">Mathematical Functions</A>, Previous: <A accessKey="p" href="#Using-the-library" 
rel="previous">Using the library</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-Handling-1"></A>
<H2 class="chapter">3 Error Handling</H2><A name="index-Errors"></A><A name="index-error-handling"></A>
<P>This chapter describes the way that GSL functions report and handle errors. 
 By examining the status information returned by every function you can 
determine  whether it succeeded or failed, and if it failed you can find out 
what the  precise cause of failure was. You can also define your own error 
handling  functions to modify the default behavior of the library. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_errno.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Error-Reporting">Error 
            Reporting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Error-Codes">Error 
            Codes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Error-Handlers">Error 
            Handlers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Using-GSL-error-reporting-in-your-own-functions">Using 
            GSL error reporting in your own functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Error-Reporting-Examples">Error 
            Reporting Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Error-Reporting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Error-Codes" 
rel="next">Error Codes</A>, Up: <A accessKey="u" href="#Error-Handling" 
rel="up">Error Handling</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-Reporting-1"></A>
<H3 class="section">3.1 Error Reporting</H3>
<P>The library follows the thread-safe error reporting conventions of the 
<SMALL>POSIX</SMALL> Threads library. Functions return a non-zero error code to 
 indicate an error and <CODE>0</CODE> to indicate success. </P>
<DIV class="example"><PRE class="example">int status = gsl_function (...)

if (status) { /* an error occurred */
  .....       
  /* status value specifies the type of error */
}
</PRE></DIV>
<P>The routines report an error whenever they cannot perform the task requested 
 of them. For example, a root-finding function would return a non-zero error 
code  if could not converge to the requested accuracy, or exceeded a limit on 
the  number of iterations. Situations like this are a normal occurrence when 
using  any mathematical library and you should check the return status of the 
functions  that you call. </P>
<P>Whenever a routine reports an error the return value specifies the type of 
 error. The return value is analogous to the value of the variable 
<CODE>errno</CODE> in the C library. The caller can examine the return code and 
 decide what action to take, including ignoring the error if it is not 
considered  serious. </P>
<P>In addition to reporting errors by return codes the library also has an error 
 handler function <CODE>gsl_error</CODE>. This function is called by other 
 library functions when they report an error, just before they return to the 
 caller. The default behavior of the error handler is to print a message and 
 abort the program, </P>
<DIV class="example"><PRE class="example">gsl: file.c:67: ERROR: invalid argument supplied by user
Default GSL error handler invoked.
Aborted
</PRE></DIV>
<P>The purpose of the <CODE>gsl_error</CODE> handler is to provide a function 
 where a breakpoint can be set that will catch library errors when running under 
 the debugger. It is not intended for use in production programs, which should 
 handle any errors using the return codes. </P>
<HR>
<A name="Error-Codes"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Error-Handlers" 
rel="next">Error Handlers</A>, Previous: <A accessKey="p" href="#Error-Reporting" 
rel="previous">Error Reporting</A>, Up: <A accessKey="u" href="#Error-Handling" 
rel="up">Error Handling</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-Codes-1"></A>
<H3 class="section">3.2 Error Codes</H3><A name="index-error-codes_002c-reserved"></A>
<P>The error code numbers returned by library functions are defined in the file 
<SAMP>gsl_errno.h</SAMP>. They all have the prefix <CODE>GSL_</CODE> and expand 
 to non-zero constant integer values. Error codes above 1024 are reserved for 
 applications, and are not used by the library. Many of the error codes use the 
 same base name as the corresponding error code in the C library. Here are some 
 of the most common error codes, </P><A name="index-error-codes"></A>
<DL>
  <DT><A name="index-GSL_005fEDOM"></A>Macro: 
  <EM>int</EM><STRONG>GSL_EDOM</STRONG></DT>
  <DD>
  <P>Domain error; used by mathematical functions when an argument value does   
  not fall into the domain over which the function is defined (like EDOM in the  
   C library) </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fERANGE"></A>Macro: 
  <EM>int</EM><STRONG>GSL_ERANGE</STRONG></DT>
  <DD>
  <P>Range error; used by mathematical functions when the result value is not   
  representable because of overflow or underflow (like ERANGE in the C library)  
   </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fENOMEM"></A>Macro: 
  <EM>int</EM><STRONG>GSL_ENOMEM</STRONG></DT>
  <DD>
  <P>No memory available. The system cannot allocate more virtual memory because 
    its capacity is full (like ENOMEM in the C library). This error is reported  
   when a GSL routine encounters problems when trying to allocate memory with   
  <CODE>malloc</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fEINVAL"></A>Macro: 
  <EM>int</EM><STRONG>GSL_EINVAL</STRONG></DT>
  <DD>
  <P>Invalid argument. This is used to indicate various kinds of problems with   
  passing the wrong argument to a library function (like EINVAL in the C   
  library). </P></DD></DL>
<P>The error codes can be converted into an error message using the function 
<CODE>gsl_strerror</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fstrerror"></A>Function: <EM>const char 
  *</EM><STRONG>gsl_strerror</STRONG> <EM>(const int 
  <VAR>gsl_errno</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to a string describing the error code   
  <VAR>gsl_errno</VAR>. For example, </P>
  <DIV class="example"><PRE class="example">printf ("error: %s\n", gsl_strerror (status));
</PRE></DIV>
  <P>would print an error message like <CODE>error: output range error</CODE>   
  for a status value of <CODE>GSL_ERANGE</CODE>. </P></DD></DL>
<HR>
<A name="Error-Handlers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Using-GSL-error-reporting-in-your-own-functions" 
rel="next">Using GSL error reporting in your own functions</A>, Previous: <A 
accessKey="p" href="#Error-Codes" 
rel="previous">Error Codes</A>, Up: <A accessKey="u" href="#Error-Handling" 
rel="up">Error Handling</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-Handlers-1"></A>
<H3 class="section">3.3 Error Handlers</H3><A name="index-Error-handlers"></A>
<P>The default behavior of the GSL error handler is to print a short message and 
 call <CODE>abort</CODE>. When this default is in use programs will stop with a 
 core-dump whenever a library routine reports an error. This is intended as a 
 fail-safe default for programs which do not check the return status of library 
 routines (we don’t encourage you to write programs this way). </P>
<P>If you turn off the default error handler it is your responsibility to check 
 the return values of routines and handle them yourself. You can also customize 
 the error behavior by providing a new error handler. For example, an 
alternative  error handler could log all errors to a file, ignore certain error 
conditions  (such as underflows), or start the debugger and attach it to the 
current process  when an error occurs. </P>
<P>All GSL error handlers have the type <CODE>gsl_error_handler_t</CODE>, which 
 is defined in <SAMP>gsl_errno.h</SAMP>, </P>
<DL>
  <DT><A name="index-gsl_005ferror_005fhandler_005ft"></A>Data Type:   
  <STRONG>gsl_error_handler_t</STRONG></DT>
  <DD>
  <P>This is the type of GSL error handler functions. An error handler will be   
  passed four arguments which specify the reason for the error (a string), the   
  name of the source file in which it occurred (also a string), the line number  
   in that file (an integer) and the error number (an integer). The source file  
   and line number are set at compile time using the <CODE>__FILE__</CODE> and   
  <CODE>__LINE__</CODE> directives in the preprocessor. An error handler   
  function returns type <CODE>void</CODE>. Error handler functions should be   
  defined like this, </P>
  <DIV class="example"><PRE class="example">void handler (const char * reason, 
              const char * file, 
              int line, 
              int gsl_errno)
</PRE></DIV></DD></DL>
<P>To request the use of your own error handler you need to call the function 
<CODE>gsl_set_error_handler</CODE> which is also declared in 
<SAMP>gsl_errno.h</SAMP>, </P>
<DL>
  <DT><A name="index-gsl_005fset_005ferror_005fhandler"></A>Function:   
  <EM>gsl_error_handler_t *</EM> 
  <STRONG>gsl_set_error_handler</STRONG><EM>(gsl_error_handler_t * 
  <VAR>new_handler</VAR>)</EM></DT>
  <DD>
  <P>This function sets a new error handler, <VAR>new_handler</VAR>, for the GSL 
    library routines. The previous handler is returned (so that you can restore 
  it   later). Note that the pointer to a user defined error handler function is 
    stored in a static variable, so there can be only one error handler per   
  program. This function should be not be used in multi-threaded programs except 
    to set up a program-wide error handler from a master thread. The following   
  example shows how to set and restore a new error handler, </P>
  <DIV class="example"><PRE class="example">/* save original handler, install new handler */
old_handler = gsl_set_error_handler (&amp;my_handler); 

/* code uses new handler */
.....     

/* restore original handler */
gsl_set_error_handler (old_handler); 
</PRE></DIV>
  <P>To use the default behavior (<CODE>abort</CODE> on error) set the error   
  handler to <CODE>NULL</CODE>, </P>
  <DIV class="example"><PRE class="example">old_handler = gsl_set_error_handler (NULL); 
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fset_005ferror_005fhandler_005foff"></A>Function:   
  <EM>gsl_error_handler_t *</EM> 
  <STRONG>gsl_set_error_handler_off</STRONG><EM>()</EM></DT>
  <DD>
  <P>This function turns off the error handler by defining an error handler   
  which does nothing. This will cause the program to continue after any error,   
  so the return values from any library routines must be checked. This is the   
  recommended behavior for production programs. The previous handler is returned 
    (so that you can restore it later). </P></DD></DL>
<P>The error behavior can be changed for specific applications by recompiling 
 the library with a customized definition of the <CODE>GSL_ERROR</CODE> macro in 
 the file <SAMP>gsl_errno.h</SAMP>. </P>
<HR>
<A name="Using-GSL-error-reporting-in-your-own-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Error-Reporting-Examples" 
rel="next">Error Reporting Examples</A>, Previous: <A accessKey="p" href="#Error-Handlers" 
rel="previous">Error Handlers</A>, Up: <A accessKey="u" href="#Error-Handling" 
rel="up">Error Handling</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Using-GSL-error-reporting-in-your-own-functions-1"></A>
<H3 class="section">3.4 Using GSL error reporting in your own functions</H3><A 
name="index-error-handling-macros"></A>
<P>If you are writing numerical functions in a program which also uses GSL code 
 you may find it convenient to adopt the same error reporting conventions as in 
 the library. </P>
<P>To report an error you need to call the function <CODE>gsl_error</CODE> with 
 a string describing the error and then return an appropriate error code from 
<CODE>gsl_errno.h</CODE>, or a special value, such as <CODE>NaN</CODE>. For 
 convenience the file <SAMP>gsl_errno.h</SAMP> defines two macros which carry 
out  these steps: </P>
<DL>
  <DT><A name="index-GSL_005fERROR"></A>Macro: 
  <STRONG>GSL_ERROR</STRONG><EM>(<VAR>reason</VAR>, 
  <VAR>gsl_errno</VAR>)</EM></DT>
  <DD>
  <P>This macro reports an error using the GSL conventions and returns a status  
   value of <CODE>gsl_errno</CODE>. It expands to the following code fragment,   
  </P>
  <DIV class="example"><PRE class="example">gsl_error (reason, __FILE__, __LINE__, gsl_errno);
return gsl_errno;
</PRE></DIV>
  <P>The macro definition in <SAMP>gsl_errno.h</SAMP> actually wraps the code in 
    a <CODE>do { ... } while (0)</CODE> block to prevent possible parsing   
  problems. </P></DD></DL>
<P>Here is an example of how the macro could be used to report that a routine 
 did not achieve a requested tolerance. To report the error the routine needs to 
 return the error code <CODE>GSL_ETOL</CODE>. </P>
<DIV class="example"><PRE class="example">if (residual &gt; tolerance) 
  {
    GSL_ERROR("residual exceeds tolerance", GSL_ETOL);
  }
</PRE></DIV>
<DL>
  <DT><A name="index-GSL_005fERROR_005fVAL"></A>Macro:   
  <STRONG>GSL_ERROR_VAL</STRONG> <EM>(<VAR>reason</VAR>, <VAR>gsl_errno</VAR>,   
  <VAR>value</VAR>)</EM></DT>
  <DD>
  <P>This macro is the same as <CODE>GSL_ERROR</CODE> but returns a user-defined 
    value of <VAR>value</VAR> instead of an error code. It can be used for   
  mathematical functions that return a floating point value. </P></DD></DL>
<P>The following example shows how to return a <CODE>NaN</CODE> at a 
 mathematical singularity using the <CODE>GSL_ERROR_VAL</CODE> macro, </P>
<DIV class="example"><PRE class="example">if (x == 0) 
  {
    GSL_ERROR_VAL("argument lies on singularity", 
                  GSL_ERANGE, GSL_NAN);
  }
</PRE></DIV>
<HR>
<A name="Error-Reporting-Examples"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Using-GSL-error-reporting-in-your-own-functions" 
rel="previous">Using GSL error reporting in your own functions</A>, Up: <A 
accessKey="u" href="#Error-Handling" 
rel="up">Error Handling</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples"></A>
<H3 class="section">3.5 Examples</H3>
<P>Here is an example of some code which checks the return value of a function 
 where an error might be reported, </P>
<DIV class="example"><PRE class="example">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_fft_complex.h&gt;

...
  int status;
  size_t n = 37;

  gsl_set_error_handler_off();

  status = gsl_fft_complex_radix2_forward (data, stride, n);

  if (status) {
    if (status == GSL_EINVAL) {
       fprintf (stderr, "invalid argument, n=%d\n", n);
    } else {
       fprintf (stderr, "failed, gsl_errno=%d\n", 
                        status);
    }
    exit (-1);
  }
...
</PRE></DIV>
<P>The function <CODE>gsl_fft_complex_radix2</CODE> only accepts integer lengths 
 which are a power of two. If the variable <CODE>n</CODE> is not a power of two 
 then the call to the library function will return <CODE>GSL_EINVAL</CODE>, 
 indicating that the length argument is invalid. The function call to 
<CODE>gsl_set_error_handler_off</CODE> stops the default error handler from 
 aborting the program. The <CODE>else</CODE> clause catches any other possible 
 errors. </P>
<HR>
<A name="Mathematical-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Numbers" 
rel="next">Complex Numbers</A>, Previous: <A accessKey="p" href="#Error-Handling" 
rel="previous">Error Handling</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mathematical-Functions-1"></A>
<H2 class="chapter">4 Mathematical Functions</H2><A name="index-elementary-functions"></A><A 
name="index-mathematical-functions_002c-elementary"></A>
<P>This chapter describes basic mathematical functions. Some of these functions 
 are present in system libraries, but the alternative versions given here can be 
 used as a substitute when the system functions are not available. </P>
<P>The functions and macros described in this chapter are defined in the header 
 file <SAMP>gsl_math.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Mathematical-Constants">Mathematical 
            Constants</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Elementary-Functions">Elementary 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Small-integer-powers">Small 
            integer powers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Testing-the-Sign-of-Numbers">Testing 
            the Sign of Numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Testing-for-Odd-and-Even-Numbers">Testing 
            for Odd and Even Numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Approximate-Comparison-of-Floating-Point-Numbers">Approximate 
            Comparison of Floating Point Numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Mathematical-Constants"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Infinities-and-Not_002da_002dnumber" 
rel="next">Infinities and Not-a-number</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mathematical-Constants-1"></A>
<H3 class="section">4.1 Mathematical Constants</H3><A name="index-mathematical-constants_002c-defined-as-macros"></A><A 
name="index-numerical-constants_002c-defined-as-macros"></A><A name="index-constants_002c-mathematical_002d_002d_002ddefined-as-macros"></A><A 
name="index-macros-for-mathematical-constants"></A>
<P>The library ensures that the standard <SMALL>BSD</SMALL> mathematical 
 constants are defined. For reference, here is a list of the constants: </P>
<DL compact="">
  <DT><CODE>M_E</CODE></DT>
  <DD><A name="index-e_002c-defined-as-a-macro"></A>
  <P>The base of exponentials, <EM>e</EM> </P></DD>
  <DT><CODE>M_LOG2E</CODE></DT>
  <DD>
  <P>The base-2 logarithm of <EM>e</EM>, <EM>\log_2 (e)</EM> </P></DD>
  <DT><CODE>M_LOG10E</CODE></DT>
  <DD>
  <P>The base-10 logarithm of <EM>e</EM>, <EM>\log_10 (e)</EM> </P></DD>
  <DT><CODE>M_SQRT2</CODE></DT>
  <DD>
  <P>The square root of two, <EM>\sqrt 2</EM> </P></DD>
  <DT><CODE>M_SQRT1_2</CODE></DT>
  <DD>
  <P>The square root of one-half, <EM>\sqrt{1/2}</EM> </P></DD>
  <DT><CODE>M_SQRT3</CODE></DT>
  <DD>
  <P>The square root of three, <EM>\sqrt 3</EM> </P></DD>
  <DT><CODE>M_PI</CODE></DT>
  <DD><A name="index-pi_002c-defined-as-a-macro"></A>
  <P>The constant pi, <EM>\pi</EM> </P></DD>
  <DT><CODE>M_PI_2</CODE></DT>
  <DD>
  <P>Pi divided by two, <EM>\pi/2</EM> </P></DD>
  <DT><CODE>M_PI_4</CODE></DT>
  <DD>
  <P>Pi divided by four, <EM>\pi/4</EM> </P></DD>
  <DT><CODE>M_SQRTPI</CODE></DT>
  <DD>
  <P>The square root of pi, <EM>\sqrt\pi</EM> </P></DD>
  <DT><CODE>M_2_SQRTPI</CODE></DT>
  <DD>
  <P>Two divided by the square root of pi, <EM>2/\sqrt\pi</EM> </P></DD>
  <DT><CODE>M_1_PI</CODE></DT>
  <DD>
  <P>The reciprocal of pi, <EM>1/\pi</EM> </P></DD>
  <DT><CODE>M_2_PI</CODE></DT>
  <DD>
  <P>Twice the reciprocal of pi, <EM>2/\pi</EM> </P></DD>
  <DT><CODE>M_LN10</CODE></DT>
  <DD>
  <P>The natural logarithm of ten, <EM>\ln(10)</EM> </P></DD>
  <DT><CODE>M_LN2</CODE></DT>
  <DD>
  <P>The natural logarithm of two, <EM>\ln(2)</EM> </P></DD>
  <DT><CODE>M_LNPI</CODE></DT>
  <DD>
  <P>The natural logarithm of pi, <EM>\ln(\pi)</EM> </P></DD>
  <DT><CODE>M_EULER</CODE></DT>
  <DD><A name="index-Euler_0027s-constant_002c-defined-as-a-macro"></A>
  <P>Euler’s constant, <EM>\gamma</EM> </P></DD></DL>
<HR>
<A name="Infinities-and-Not_002da_002dnumber"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Elementary-Functions" 
rel="next">Elementary Functions</A>, Previous: <A accessKey="p" href="#Mathematical-Constants" 
rel="previous">Mathematical Constants</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Infinities-and-Not_002da_002dnumber-1"></A>
<H3 class="section">4.2 Infinities and Not-a-number</H3><A name="index-infinity_002c-defined-as-a-macro"></A><A 
name="index-IEEE-infinity_002c-defined-as-a-macro"></A><A name="index-NaN_002c-defined-as-a-macro"></A><A 
name="index-Not_002da_002dnumber_002c-defined-as-a-macro"></A><A name="index-IEEE-NaN_002c-defined-as-a-macro"></A>
<DL>
  <DT><A name="index-GSL_005fPOSINF"></A>Macro: <STRONG>GSL_POSINF</STRONG></DT>
  <DD>
  <P>This macro contains the IEEE representation of positive infinity,   
  <EM>+\infty</EM>. It is computed from the expression <CODE>+1.0/0.0</CODE>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fNEGINF"></A>Macro: <STRONG>GSL_NEGINF</STRONG></DT>
  <DD>
  <P>This macro contains the IEEE representation of negative infinity,   
  <EM>-\infty</EM>. It is computed from the expression <CODE>-1.0/0.0</CODE>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fNAN"></A>Macro: <STRONG>GSL_NAN</STRONG></DT>
  <DD>
  <P>This macro contains the IEEE representation of the Not-a-Number symbol,   
  <CODE>NaN</CODE>. It is computed from the ratio <CODE>0.0/0.0</CODE>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fisnan"></A>Function: 
  <EM>int</EM><STRONG>gsl_isnan</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if <VAR>x</VAR> is not-a-number. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fisinf"></A>Function: 
  <EM>int</EM><STRONG>gsl_isinf</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns <EM>+1</EM> if <VAR>x</VAR> is positive infinity,   
  <EM>-1</EM> if <VAR>x</VAR> is negative infinity and 0 otherwise.<A href="#FOOT6" 
  name="DOCF6"><SUP>6</SUP></A> </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffinite"></A>Function: 
  <EM>int</EM><STRONG>gsl_finite</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if <VAR>x</VAR> is a real number, and 0 if it is   
  infinite or not-a-number. </P></DD></DL>
<HR>
<A name="Elementary-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Small-integer-powers" 
rel="next">Small integer powers</A>, Previous: <A accessKey="p" href="#Infinities-and-Not_002da_002dnumber" 
rel="previous">Infinities and Not-a-number</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Elementary-Functions-1"></A>
<H3 class="section">4.3 Elementary Functions</H3>
<P>The following routines provide portable implementations of functions found in 
 the BSD math library. When native versions are not available the functions 
 described here can be used instead. The substitution can be made automatically 
 if you use <CODE>autoconf</CODE> to compile your application (see <A href="#Portability-functions">Portability 
 functions</A>). </P>
<DL>
  <DT><A name="index-gsl_005flog1p"></A>Function: 
  <EM>double</EM><STRONG>gsl_log1p</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-log1p"></A><A name="index-logarithm_002c-computed-accurately-near-1"></A>
  <P>This function computes the value of <EM>\log(1+x)</EM> in a way that is   
  accurate for small <VAR>x</VAR>. It provides an alternative to the BSD math   
  function <CODE>log1p(x)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fexpm1"></A>Function: 
  <EM>double</EM><STRONG>gsl_expm1</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-expm1"></A><A name="index-exponential_002c-difference-from-1-computed-accurately"></A>
  <P>This function computes the value of <EM>\exp(x)-1</EM> in a way that is   
  accurate for small <VAR>x</VAR>. It provides an alternative to the BSD math   
  function <CODE>expm1(x)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhypot"></A>Function: 
  <EM>double</EM><STRONG>gsl_hypot</STRONG> <EM>(const double <VAR>x</VAR>, 
  const double   <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-hypot"></A><A name="index-euclidean-distance-function_002c-hypot"></A><A 
  name="index-length_002c-computed-accurately-using-hypot"></A>
  <P>This function computes the value of <EM>\sqrt{x^2 + y^2}</EM> in a way that 
    avoids overflow. It provides an alternative to the BSD math function   
  <CODE>hypot(x,y)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhypot3"></A>Function: 
  <EM>double</EM><STRONG>gsl_hypot3</STRONG> <EM>(const double <VAR>x</VAR>, 
  const double   <VAR>y</VAR>, const double <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-euclidean-distance-function_002c-hypot-1"></A><A name="index-length_002c-computed-accurately-using-hypot-1"></A>
  <P>This function computes the value of <EM>\sqrt{x^2 + y^2 + z^2}</EM> in a   
  way that avoids overflow. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005facosh"></A>Function: 
  <EM>double</EM><STRONG>gsl_acosh</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-acosh"></A><A 
  name="index-hyperbolic-cosine_002c-inverse"></A><A name="index-inverse-hyperbolic-cosine"></A>
  <P>This function computes the value of <EM>\arccosh(x)</EM>. It provides an   
  alternative to the standard math function <CODE>acosh(x)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fasinh"></A>Function: 
  <EM>double</EM><STRONG>gsl_asinh</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-asinh"></A><A 
  name="index-hyperbolic-sine_002c-inverse"></A><A name="index-inverse-hyperbolic-sine"></A>
  <P>This function computes the value of <EM>\arcsinh(x)</EM>. It provides an   
  alternative to the standard math function <CODE>asinh(x)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fatanh"></A>Function: 
  <EM>double</EM><STRONG>gsl_atanh</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-atanh"></A><A 
  name="index-hyperbolic-tangent_002c-inverse"></A><A name="index-inverse-hyperbolic-tangent"></A>
  <P>This function computes the value of <EM>\arctanh(x)</EM>. It provides an   
  alternative to the standard math function <CODE>atanh(x)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fldexp"></A>Function: 
  <EM>double</EM><STRONG>gsl_ldexp</STRONG> <EM>(double <VAR>x</VAR>, int   
  <VAR>e</VAR>)</EM></DT>
  <DD><A name="index-ldexp"></A>
  <P>This function computes the value of <EM>x * 2^e</EM>. It provides an   
  alternative to the standard math function <CODE>ldexp(x,e)</CODE>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffrexp"></A>Function: 
  <EM>double</EM><STRONG>gsl_frexp</STRONG> <EM>(double <VAR>x</VAR>, int *   
  <VAR>e</VAR>)</EM></DT>
  <DD><A name="index-frexp"></A>
  <P>This function splits the number <EM>x</EM> into its normalized fraction   
  <EM>f</EM> and exponent <EM>e</EM>, such that <EM>x = f * 2^e</EM> and <EM>0.5 
    &lt;= f &lt; 1</EM>. The function returns <EM>f</EM> and stores the exponent 
    in <EM>e</EM>. If <EM>x</EM> is zero, both <EM>f</EM> and <EM>e</EM> are set 
    to zero. This function provides an alternative to the standard math function 
    <CODE>frexp(x, e)</CODE>. </P></DD></DL>
<HR>
<A name="Small-integer-powers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Testing-the-Sign-of-Numbers" 
rel="next">Testing the Sign of Numbers</A>, Previous: <A accessKey="p" href="#Elementary-Functions" 
rel="previous">Elementary Functions</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Small-integer-powers-1"></A>
<H3 class="section">4.4 Small integer powers</H3>
<P>A common complaint about the standard C library is its lack of a function for 
 calculating (small) integer powers. GSL provides some simple functions to fill 
 this gap. For reasons of efficiency, these functions do not check for overflow 
 or underflow conditions. </P>
<DL>
  <DT><A name="index-gsl_005fpow_005fint"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_int</STRONG> <EM>(double <VAR>x</VAR>, int   
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005fuint"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_uint</STRONG> <EM>(double <VAR>x</VAR>, 
  unsigned int   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These routines computes the power <EM>x^n</EM> for integer <VAR>n</VAR>.   
  The power is computed efficiently—for example, <EM>x^8</EM> is computed as   
  <EM>((x^2)^2)^2</EM>, requiring only 3 multiplications. A version of this   
  function which also computes the numerical error in the result is available as 
    <CODE>gsl_sf_pow_int_e</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpow_005f2"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_2</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f3"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_3</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f4"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_4</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f5"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_5</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f6"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_6</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f7"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_7</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f8"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_8</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fpow_005f9"></A>Function: 
  <EM>double</EM><STRONG>gsl_pow_9</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions can be used to compute small integer powers <EM>x^2</EM>,   
  <EM>x^3</EM>, etc. efficiently. The functions will be inlined when   
  <CODE>HAVE_INLINE</CODE> is defined, so that use of these functions should be  
   as efficient as explicitly writing the corresponding product expression.   
  </P></DD></DL>
<DIV class="example"><PRE class="example">#include &lt;gsl/gsl_math.h&gt;
double y = gsl_pow_4 (3.141)  /* compute 3.141**4 */
</PRE></DIV>
<HR>
<A name="Testing-the-Sign-of-Numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Testing-for-Odd-and-Even-Numbers" 
rel="next">Testing for Odd and Even Numbers</A>, Previous: <A accessKey="p" 
href="#Small-integer-powers" 
rel="previous">Small integer powers</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Testing-the-Sign-of-Numbers-1"></A>
<H3 class="section">4.5 Testing the Sign of Numbers</H3>
<DL>
  <DT><A name="index-GSL_005fSIGN"></A>Macro: 
  <STRONG>GSL_SIGN</STRONG><EM>(x)</EM></DT>
  <DD>
  <P>This macro returns the sign of <VAR>x</VAR>. It is defined as <CODE>((x)   
  &gt;= 0 ? 1 : -1)</CODE>. Note that with this definition the sign of zero is   
  positive (regardless of its <SMALL>IEEE</SMALL> sign bit). </P></DD></DL>
<HR>
<A name="Testing-for-Odd-and-Even-Numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Maximum-and-Minimum-functions" 
rel="next">Maximum and Minimum functions</A>, Previous: <A accessKey="p" href="#Testing-the-Sign-of-Numbers" 
rel="previous">Testing the Sign of Numbers</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Testing-for-Odd-and-Even-Numbers-1"></A>
<H3 class="section">4.6 Testing for Odd and Even Numbers</H3>
<DL>
  <DT><A name="index-GSL_005fIS_005fODD"></A>Macro: 
  <STRONG>GSL_IS_ODD</STRONG><EM>(n)</EM></DT>
  <DD>
  <P>This macro evaluates to 1 if <VAR>n</VAR> is odd and 0 if <VAR>n</VAR> is   
  even. The argument <VAR>n</VAR> must be of integer type. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fIS_005fEVEN"></A>Macro: 
  <STRONG>GSL_IS_EVEN</STRONG><EM>(n)</EM></DT>
  <DD>
  <P>This macro is the opposite of <CODE>GSL_IS_ODD(n)</CODE>. It evaluates to 1 
    if <VAR>n</VAR> is even and 0 if <VAR>n</VAR> is odd. The argument   
  <VAR>n</VAR> must be of integer type. </P></DD></DL>
<HR>
<A name="Maximum-and-Minimum-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Approximate-Comparison-of-Floating-Point-Numbers" 
rel="next">Approximate Comparison of Floating Point Numbers</A>, Previous: <A 
accessKey="p" href="#Testing-for-Odd-and-Even-Numbers" 
rel="previous">Testing for Odd and Even Numbers</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Maximum-and-Minimum-functions-1"></A>
<H3 class="section">4.7 Maximum and Minimum functions</H3>
<P>Note that the following macros perform multiple evaluations of their 
 arguments, so they should not be used with arguments that have side effects 
 (such as a call to a random number generator). </P>
<DL>
  <DT><A name="index-GSL_005fMAX"></A>Macro: <STRONG>GSL_MAX</STRONG> <EM>(a,   
  b)</EM></DT>
  <DD><A name="index-maximum-of-two-numbers"></A>
  <P>This macro returns the maximum of <VAR>a</VAR> and <VAR>b</VAR>. It is   
  defined as <CODE>((a) &gt; (b) ? (a):(b))</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fMIN"></A>Macro: <STRONG>GSL_MIN</STRONG> <EM>(a,   
  b)</EM></DT>
  <DD><A name="index-minimum-of-two-numbers"></A>
  <P>This macro returns the minimum of <VAR>a</VAR> and <VAR>b</VAR>. It is   
  defined as <CODE>((a) &lt; (b) ? (a):(b))</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fMAX_005fDBL"></A>Function: <EM>extern inline   
  double</EM> <STRONG>GSL_MAX_DBL</STRONG> <EM>(double <VAR>a</VAR>, double   
  <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum of the double precision numbers   
  <VAR>a</VAR> and <VAR>b</VAR> using an inline function. The use of a function  
   allows for type checking of the arguments as an extra safety feature. On   
  platforms where inline functions are not available the macro   
  <CODE>GSL_MAX</CODE> will be automatically substituted. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fMIN_005fDBL"></A>Function: <EM>extern inline   
  double</EM> <STRONG>GSL_MIN_DBL</STRONG> <EM>(double <VAR>a</VAR>, double   
  <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum of the double precision numbers   
  <VAR>a</VAR> and <VAR>b</VAR> using an inline function. The use of a function  
   allows for type checking of the arguments as an extra safety feature. On   
  platforms where inline functions are not available the macro   
  <CODE>GSL_MIN</CODE> will be automatically substituted. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fMAX_005fINT"></A>Function: <EM>extern inline 
  int</EM><STRONG>GSL_MAX_INT</STRONG> <EM>(int <VAR>a</VAR>, int 
  <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-GSL_005fMIN_005fINT"></A>Function: <EM>extern inline 
  int</EM><STRONG>GSL_MIN_INT</STRONG> <EM>(int <VAR>a</VAR>, int 
  <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions return the maximum or minimum of the integers <VAR>a</VAR>  
   and <VAR>b</VAR> using an inline function. On platforms where inline 
  functions   are not available the macros <CODE>GSL_MAX</CODE> or 
  <CODE>GSL_MIN</CODE> will   be automatically substituted. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fMAX_005fLDBL"></A>Function: <EM>extern inline long  
   double</EM> <STRONG>GSL_MAX_LDBL</STRONG> <EM>(long double <VAR>a</VAR>, long 
    double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-GSL_005fMIN_005fLDBL"></A>Function: <EM>extern inline long  
   double</EM> <STRONG>GSL_MIN_LDBL</STRONG> <EM>(long double <VAR>a</VAR>, long 
    double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions return the maximum or minimum of the long doubles   
  <VAR>a</VAR> and <VAR>b</VAR> using an inline function. On platforms where   
  inline functions are not available the macros <CODE>GSL_MAX</CODE> or   
  <CODE>GSL_MIN</CODE> will be automatically substituted. </P></DD></DL>
<HR>
<A name="Approximate-Comparison-of-Floating-Point-Numbers"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Maximum-and-Minimum-functions" 
rel="previous">Maximum and Minimum functions</A>, Up: <A accessKey="u" href="#Mathematical-Functions" 
rel="up">Mathematical Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Approximate-Comparison-of-Floating-Point-Numbers-1"></A>
<H3 class="section">4.8 Approximate Comparison of Floating Point Numbers</H3>
<P>It is sometimes useful to be able to compare two floating point numbers 
 approximately, to allow for rounding and truncation errors. The following 
 function implements the approximate floating-point comparison algorithm 
proposed  by D.E. Knuth in Section 4.2.2 of <CITE>Seminumerical 
Algorithms</CITE> (3rd  edition). </P>
<DL>
  <DT><A name="index-gsl_005ffcmp"></A>Function: 
  <EM>int</EM><STRONG>gsl_fcmp</STRONG> <EM>(double <VAR>x</VAR>, double 
  <VAR>y</VAR>,   double <VAR>epsilon</VAR>)</EM></DT>
  <DD><A name="index-approximate-comparison-of-floating-point-numbers"></A><A 
  name="index-safe-comparison-of-floating-point-numbers"></A><A name="index-floating-point-numbers_002c-approximate-comparison"></A>
  <P>This function determines whether <EM>x</EM> and <EM>y</EM> are   
  approximately equal to a relative accuracy <VAR>epsilon</VAR>. </P>
  <P>The relative accuracy is measured using an interval of size <EM>2   
  \delta</EM>, where <EM>\delta = 2^k \epsilon</EM> and <EM>k</EM> is the   
  maximum base-2 exponent of <EM>x</EM> and <EM>y</EM> as computed by the   
  function <CODE>frexp</CODE>. </P>
  <P>If <EM>x</EM> and <EM>y</EM> lie within this interval, they are considered  
   approximately equal and the function returns 0. Otherwise if <EM>x &lt;   
  y</EM>, the function returns <EM>-1</EM>, or if <EM>x &gt; y</EM>, the   
  function returns <EM>+1</EM>. </P>
  <P>Note that <EM>x</EM> and <EM>y</EM> are compared to relative accuracy, so   
  this function is not suitable for testing whether a value is approximately   
  zero. </P>
  <P>The implementation is based on the package <CODE>fcmp</CODE> by T.C.   
  Belding. </P></DD></DL>
<HR>
<A name="Complex-Numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Polynomials" 
rel="next">Polynomials</A>, Previous: <A accessKey="p" href="#Mathematical-Functions" 
rel="previous">Mathematical Functions</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-Numbers-1"></A>
<H2 class="chapter">5 Complex Numbers</H2><A name="index-complex-numbers"></A>
<P>The functions described in this chapter provide support for complex numbers. 
 The algorithms take care to avoid unnecessary intermediate underflows and 
 overflows, allowing the functions to be evaluated over as much of the complex 
 plane as possible. </P>
<P>For multiple-valued functions the branch cuts have been chosen to follow the 
 conventions of Abramowitz and Stegun in the <CITE>Handbook of Mathematical 
 Functions</CITE>. The functions return principal values which are the same as 
 those in GNU Calc, which in turn are the same as those in <CITE>Common Lisp, 
The  Language (Second Edition)</CITE><A href="#FOOT7" 
name="DOCF7"><SUP>7</SUP></A> and the HP-28/48 series of calculators. </P>
<P>The complex types are defined in the header file <SAMP>gsl_complex.h</SAMP>, 
 while the corresponding complex functions and arithmetic operations are defined 
 in <SAMP>gsl_complex_math.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Complex-Number-References-and-Further-Reading">Complex 
            Number References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Representation-of-complex-numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Properties-of-complex-numbers" 
rel="next">Properties of complex numbers</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Representation-of-complex-numbers-1"></A>
<H3 class="section">5.1 Representation of complex numbers</H3><A name="index-representations-of-complex-numbers"></A><A 
name="index-polar-form-of-complex-numbers"></A><A 
name="index-gsl_005fcomplex"></A>
<P>Complex numbers are represented using the type <CODE>gsl_complex</CODE>. The 
 internal representation of this type may vary across platforms and should not 
be  accessed directly. The functions and macros described below allow complex 
 numbers to be manipulated in a portable way. </P>
<P>For reference, the default form of the <CODE>gsl_complex</CODE> type is given 
 by the following struct, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  double dat[2];
} gsl_complex;
</PRE></DIV>
<P>The real and imaginary part are stored in contiguous elements of a two 
 element array. This eliminates any padding between the real and imaginary 
parts, <CODE>dat[0]</CODE> and <CODE>dat[1]</CODE>, allowing the struct to be 
mapped  correctly onto packed complex arrays. </P>
<DL>
  <DT><A name="index-gsl_005fcomplex_005frect"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_rect</STRONG> <EM>(double 
  <VAR>x</VAR>, double   <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function uses the rectangular Cartesian components   
  (<VAR>x</VAR>,<VAR>y</VAR>) to return the complex number <EM>z = x + i y</EM>. 
    An inline version of this function is used when <CODE>HAVE_INLINE</CODE> is  
   defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fpolar"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_polar</STRONG> <EM>(double 
  <VAR>r</VAR>, double   <VAR>theta</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex number <EM>z = r \exp(i \theta) = r   
  (\cos(\theta) + i \sin(\theta))</EM> from the polar representation   
  (<VAR>r</VAR>,<VAR>theta</VAR>). </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fREAL"></A>Macro: 
  <STRONG>GSL_REAL</STRONG><EM>(<VAR>z</VAR>)</EM></DT>
  <DT><A name="index-GSL_005fIMAG"></A>Macro: 
  <STRONG>GSL_IMAG</STRONG><EM>(<VAR>z</VAR>)</EM></DT>
  <DD>
  <P>These macros return the real and imaginary parts of the complex number   
  <VAR>z</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fSET_005fCOMPLEX"></A>Macro:   
  <STRONG>GSL_SET_COMPLEX</STRONG> <EM>(<VAR>zp</VAR>, <VAR>x</VAR>,   
  <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This macro uses the Cartesian components (<VAR>x</VAR>,<VAR>y</VAR>) to set 
    the real and imaginary parts of the complex number pointed to by   
  <VAR>zp</VAR>. For example, </P>
  <DIV class="example"><PRE class="example">GSL_SET_COMPLEX(&amp;z, 3, 4)
</PRE></DIV>
  <P>sets <VAR>z</VAR> to be <EM>3 + 4i</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-GSL_005fSET_005fREAL"></A>Macro:   
  <STRONG>GSL_SET_REAL</STRONG> <EM>(<VAR>zp</VAR>,<VAR>x</VAR>)</EM></DT>
  <DT><A name="index-GSL_005fSET_005fIMAG"></A>Macro:   
  <STRONG>GSL_SET_IMAG</STRONG> <EM>(<VAR>zp</VAR>,<VAR>y</VAR>)</EM></DT>
  <DD>
  <P>These macros allow the real and imaginary parts of the complex number   
  pointed to by <VAR>zp</VAR> to be set independently. </P></DD></DL>
<HR>
<A name="Properties-of-complex-numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-arithmetic-operators" 
rel="next">Complex arithmetic operators</A>, Previous: <A accessKey="p" href="#Representation-of-complex-numbers" 
rel="previous">Representation of complex numbers</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Properties-of-complex-numbers-1"></A>
<H3 class="section">5.2 Properties of complex numbers</H3>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farg"></A>Function: 
  <EM>double</EM><STRONG>gsl_complex_arg</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-argument-of-complex-number"></A>
  <P>This function returns the argument of the complex number <VAR>z</VAR>,   
  <EM>\arg(z)</EM>, where <EM>-\pi &lt; \arg(z) &lt;= \pi</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fabs"></A>Function: 
  <EM>double</EM><STRONG>gsl_complex_abs</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-magnitude-of-complex-number"></A>
  <P>This function returns the magnitude of the complex number <VAR>z</VAR>,   
  <EM>|z|</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fabs2"></A>Function: 
  <EM>double</EM><STRONG>gsl_complex_abs2</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the squared magnitude of the complex number   
  <VAR>z</VAR>, <EM>|z|^2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005flogabs"></A>Function: 
  <EM>double</EM><STRONG>gsl_complex_logabs</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the natural logarithm of the magnitude of the complex 
    number <VAR>z</VAR>, <EM>\log|z|</EM>. It allows an accurate evaluation of   
  <EM>\log|z|</EM> when <EM>|z|</EM> is close to one. The direct evaluation of   
  <CODE>log(gsl_complex_abs(z))</CODE> would lead to a loss of precision in this 
    case. </P></DD></DL>
<HR>
<A name="Complex-arithmetic-operators"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Elementary-Complex-Functions" 
rel="next">Elementary Complex Functions</A>, Previous: <A accessKey="p" href="#Properties-of-complex-numbers" 
rel="previous">Properties of complex numbers</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-arithmetic-operators-1"></A>
<H3 class="section">5.3 Complex arithmetic operators</H3><A name="index-complex-arithmetic"></A>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fadd"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_add</STRONG> <EM>(gsl_complex 
  <VAR>a</VAR>, gsl_complex   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the sum of the complex numbers <VAR>a</VAR> and   
  <VAR>b</VAR>, <EM>z=a+b</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsub"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_sub</STRONG> <EM>(gsl_complex 
  <VAR>a</VAR>, gsl_complex   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the difference of the complex numbers <VAR>a</VAR>   
  and <VAR>b</VAR>, <EM>z=a-b</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fmul"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_mul</STRONG> <EM>(gsl_complex 
  <VAR>a</VAR>, gsl_complex   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the product of the complex numbers <VAR>a</VAR> and   
  <VAR>b</VAR>, <EM>z=ab</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fdiv"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_div</STRONG> <EM>(gsl_complex 
  <VAR>a</VAR>, gsl_complex   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the quotient of the complex numbers <VAR>a</VAR> and  
   <VAR>b</VAR>, <EM>z=a/b</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fadd_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_add_real</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns the sum of the complex number <VAR>a</VAR> and the   
  real number <VAR>x</VAR>, <EM>z=a+x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsub_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_sub_real</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns the difference of the complex number <VAR>a</VAR> and 
    the real number <VAR>x</VAR>, <EM>z=a-x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fmul_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_mul_real</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns the product of the complex number <VAR>a</VAR> and   
  the real number <VAR>x</VAR>, <EM>z=ax</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fdiv_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_div_real</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns the quotient of the complex number <VAR>a</VAR> and   
  the real number <VAR>x</VAR>, <EM>z=a/x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fadd_005fimag"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_add_imag</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function returns the sum of the complex number <VAR>a</VAR> and the   
  imaginary number <EM>i</EM><VAR>y</VAR>, <EM>z=a+iy</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsub_005fimag"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_sub_imag</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function returns the difference of the complex number <VAR>a</VAR> and 
    the imaginary number <EM>i</EM><VAR>y</VAR>, <EM>z=a-iy</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fmul_005fimag"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_mul_imag</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function returns the product of the complex number <VAR>a</VAR> and   
  the imaginary number <EM>i</EM><VAR>y</VAR>, <EM>z=a*(iy)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fdiv_005fimag"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_div_imag</STRONG> <EM>(gsl_complex   
  <VAR>a</VAR>, double <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function returns the quotient of the complex number <VAR>a</VAR> and   
  the imaginary number <EM>i</EM><VAR>y</VAR>, <EM>z=a/(iy)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fconjugate"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_conjugate</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-conjugate-of-complex-number"></A>
  <P>This function returns the complex conjugate of the complex number   
  <VAR>z</VAR>, <EM>z^* = x - i y</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005finverse"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_inverse</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the inverse, or reciprocal, of the complex number   
  <VAR>z</VAR>, <EM>1/z = (x - i y)/(x^2 + y^2)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fnegative"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_negative</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the negative of the complex number <VAR>z</VAR>,   
  <EM>-z = (-x) + i(-y)</EM>. </P></DD></DL>
<HR>
<A name="Elementary-Complex-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Trigonometric-Functions" 
rel="next">Complex Trigonometric Functions</A>, Previous: <A accessKey="p" href="#Complex-arithmetic-operators" 
rel="previous">Complex arithmetic operators</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Elementary-Complex-Functions-1"></A>
<H3 class="section">5.4 Elementary Complex Functions</H3>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsqrt"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_sqrt</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-square-root-of-complex-number"></A>
  <P>This function returns the square root of the complex number <VAR>z</VAR>,   
  <EM>\sqrt z</EM>. The branch cut is the negative real axis. The result always  
   lies in the right half of the complex plane. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsqrt_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_sqrt_real</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex square root of the real number   
  <VAR>x</VAR>, where <VAR>x</VAR> may be negative. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fpow"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_pow</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>, gsl_complex   <VAR>a</VAR>)</EM></DT>
  <DD><A name="index-power-of-complex-number"></A><A name="index-exponentiation-of-complex-number"></A>
  <P>The function returns the complex number <VAR>z</VAR> raised to the complex  
   power <VAR>a</VAR>, <EM>z^a</EM>. This is computed as 
  <EM>\exp(\log(z)*a)</EM>   using complex logarithms and complex exponentials. 
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fpow_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_pow_real</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex number <VAR>z</VAR> raised to the real   
  power <VAR>x</VAR>, <EM>z^x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fexp"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_exp</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex exponential of the complex number   
  <VAR>z</VAR>, <EM>\exp(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005flog"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_log</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-complex-number"></A>
  <P>This function returns the complex natural logarithm (base <EM>e</EM>) of   
  the complex number <VAR>z</VAR>, <EM>\log(z)</EM>. The branch cut is the   
  negative real axis. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005flog10"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_log10</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex base-10 logarithm of the complex number   
  <VAR>z</VAR>, <EM>\log_10 (z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005flog_005fb"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_log_b</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>, gsl_complex <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex base-<VAR>b</VAR> logarithm of the   
  complex number <VAR>z</VAR>, <EM>\log_b(z)</EM>. This quantity is computed as  
   the ratio <EM>\log(z)/\log(b)</EM>. </P></DD></DL>
<HR>
<A name="Complex-Trigonometric-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Inverse-Complex-Trigonometric-Functions" 
rel="next">Inverse Complex Trigonometric Functions</A>, Previous: <A accessKey="p" 
href="#Elementary-Complex-Functions" 
rel="previous">Elementary Complex Functions</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-Trigonometric-Functions-1"></A>
<H3 class="section">5.5 Complex Trigonometric Functions</H3><A name="index-trigonometric-functions-of-complex-numbers"></A>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsin"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_sin</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-sin_002c-of-complex-number"></A>
  <P>This function returns the complex sine of the complex number <VAR>z</VAR>,  
   <EM>\sin(z) = (\exp(iz) - \exp(-iz))/(2i)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fcos"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_cos</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-cosine-of-complex-number"></A>
  <P>This function returns the complex cosine of the complex number   
  <VAR>z</VAR>, <EM>\cos(z) = (\exp(iz) + \exp(-iz))/2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005ftan"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_tan</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-tangent-of-complex-number"></A>
  <P>This function returns the complex tangent of the complex number   
  <VAR>z</VAR>, <EM>\tan(z) = \sin(z)/\cos(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsec"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_sec</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex secant of the complex number   
  <VAR>z</VAR>, <EM>\sec(z) = 1/\cos(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fcsc"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_csc</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex cosecant of the complex number   
  <VAR>z</VAR>, <EM>\csc(z) = 1/\sin(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fcot"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_cot</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex cotangent of the complex number   
  <VAR>z</VAR>, <EM>\cot(z) = 1/\tan(z)</EM>. </P></DD></DL>
<HR>
<A name="Inverse-Complex-Trigonometric-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Hyperbolic-Functions" 
rel="next">Complex Hyperbolic Functions</A>, Previous: <A accessKey="p" href="#Complex-Trigonometric-Functions" 
rel="previous">Complex Trigonometric Functions</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Inverse-Complex-Trigonometric-Functions-1"></A>
<H3 class="section">5.6 Inverse Complex Trigonometric Functions</H3><A name="index-inverse-complex-trigonometric-functions"></A>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farcsin"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arcsin</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arcsine of the complex number   
  <VAR>z</VAR>, <EM>\arcsin(z)</EM>. The branch cuts are on the real axis, less  
   than <EM>-1</EM> and greater than <EM>1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farcsin_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arcsin_real</STRONG> <EM>(double   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arcsine of the real number <VAR>z</VAR>,  
   <EM>\arcsin(z)</EM>. For <EM>z</EM> between <EM>-1</EM> and <EM>1</EM>, the   
  function returns a real value in the range <EM>[-\pi/2,\pi/2]</EM>. For   
  <EM>z</EM> less than <EM>-1</EM> the result has a real part of <EM>-\pi/2</EM> 
    and a positive imaginary part. For <EM>z</EM> greater than <EM>1</EM> the   
  result has a real part of <EM>\pi/2</EM> and a negative imaginary part.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccos"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccos</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arccosine of the complex number   
  <VAR>z</VAR>, <EM>\arccos(z)</EM>. The branch cuts are on the real axis, less  
   than <EM>-1</EM> and greater than <EM>1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccos_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccos_real</STRONG> <EM>(double   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arccosine of the real number   
  <VAR>z</VAR>, <EM>\arccos(z)</EM>. For <EM>z</EM> between <EM>-1</EM> and   
  <EM>1</EM>, the function returns a real value in the range <EM>[0,\pi]</EM>.   
  For <EM>z</EM> less than <EM>-1</EM> the result has a real part of   
  <EM>\pi</EM> and a negative imaginary part. For <EM>z</EM> greater than   
  <EM>1</EM> the result is purely imaginary and positive. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farctan"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arctan</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arctangent of the complex number   
  <VAR>z</VAR>, <EM>\arctan(z)</EM>. The branch cuts are on the imaginary axis,  
   below <EM>-i</EM> and above <EM>i</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farcsec"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arcsec</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arcsecant of the complex number   
  <VAR>z</VAR>, <EM>\arcsec(z) = \arccos(1/z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farcsec_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arcsec_real</STRONG> <EM>(double   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arcsecant of the real number   
  <VAR>z</VAR>, <EM>\arcsec(z) = \arccos(1/z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccsc"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccsc</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arccosecant of the complex number   
  <VAR>z</VAR>, <EM>\arccsc(z) = \arcsin(1/z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccsc_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccsc_real</STRONG> <EM>(double   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arccosecant of the real number   
  <VAR>z</VAR>, <EM>\arccsc(z) = \arcsin(1/z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccot"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccot</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex arccotangent of the complex number   
  <VAR>z</VAR>, <EM>\arccot(z) = \arctan(1/z)</EM>. </P></DD></DL>
<HR>
<A name="Complex-Hyperbolic-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Inverse-Complex-Hyperbolic-Functions" 
rel="next">Inverse Complex Hyperbolic Functions</A>, Previous: <A accessKey="p" 
href="#Inverse-Complex-Trigonometric-Functions" 
rel="previous">Inverse Complex Trigonometric Functions</A>, Up: <A accessKey="u" 
href="#Complex-Numbers" rel="up">Complex 
Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-Hyperbolic-Functions-1"></A>
<H3 class="section">5.7 Complex Hyperbolic Functions</H3><A name="index-hyperbolic-functions_002c-complex-numbers"></A>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsinh"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_sinh</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic sine of the complex number   
  <VAR>z</VAR>, <EM>\sinh(z) = (\exp(z) - \exp(-z))/2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fcosh"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_cosh</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic cosine of the complex number   
  <VAR>z</VAR>, <EM>\cosh(z) = (\exp(z) + \exp(-z))/2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005ftanh"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_tanh</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic tangent of the complex number  
   <VAR>z</VAR>, <EM>\tanh(z) = \sinh(z)/\cosh(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fsech"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_sech</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic secant of the complex number   
  <VAR>z</VAR>, <EM>\sech(z) = 1/\cosh(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fcsch"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_csch</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic cosecant of the complex number 
    <VAR>z</VAR>, <EM>\csch(z) = 1/\sinh(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005fcoth"></A>Function: 
  <EM>gsl_complex</EM><STRONG>gsl_complex_coth</STRONG> <EM>(gsl_complex 
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic cotangent of the complex   
  number <VAR>z</VAR>, <EM>\coth(z) = 1/\tanh(z)</EM>. </P></DD></DL>
<HR>
<A name="Inverse-Complex-Hyperbolic-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Number-References-and-Further-Reading" 
rel="next">Complex Number References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Complex-Hyperbolic-Functions" 
rel="previous">Complex Hyperbolic Functions</A>, Up: <A accessKey="u" href="#Complex-Numbers" 
rel="up">Complex Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Inverse-Complex-Hyperbolic-Functions-1"></A>
<H3 class="section">5.8 Inverse Complex Hyperbolic Functions</H3><A name="index-inverse-hyperbolic-functions_002c-complex-numbers"></A>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farcsinh"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arcsinh</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arcsine of the complex number  
   <VAR>z</VAR>, <EM>\arcsinh(z)</EM>. The branch cuts are on the imaginary 
  axis,   below <EM>-i</EM> and above <EM>i</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccosh"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccosh</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arccosine of the complex   
  number <VAR>z</VAR>, <EM>\arccosh(z)</EM>. The branch cut is on the real axis, 
    less than <EM>1</EM>. Note that in this case we use the negative square root 
    in formula 4.6.21 of Abramowitz &amp; Stegun giving   
  <EM>\arccosh(z)=\log(z-\sqrt{z^2-1})</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccosh_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccosh_real</STRONG> <EM>(double   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arccosine of the real number   
  <VAR>z</VAR>, <EM>\arccosh(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farctanh"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arctanh</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arctangent of the complex   
  number <VAR>z</VAR>, <EM>\arctanh(z)</EM>. The branch cuts are on the real   
  axis, less than <EM>-1</EM> and greater than <EM>1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farctanh_005freal"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arctanh_real</STRONG> <EM>(double   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arctangent of the real number  
   <VAR>z</VAR>, <EM>\arctanh(z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farcsech"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arcsech</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arcsecant of the complex   
  number <VAR>z</VAR>, <EM>\arcsech(z) = \arccosh(1/z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccsch"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccsch</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arccosecant of the complex   
  number <VAR>z</VAR>, <EM>\arccsch(z) = \arcsin(1/z)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcomplex_005farccoth"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_arccoth</STRONG> <EM>(gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function returns the complex hyperbolic arccotangent of the complex   
  number <VAR>z</VAR>, <EM>\arccoth(z) = \arctanh(1/z)</EM>. </P></DD></DL>
<HR>
<A name="Complex-Number-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Inverse-Complex-Hyperbolic-Functions" 
rel="previous">Inverse Complex Hyperbolic Functions</A>, Up: <A accessKey="u" 
href="#Complex-Numbers" rel="up">Complex 
Numbers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading"></A>
<H3 class="section">5.9 References and Further Reading</H3>
<P>The implementations of the elementary and trigonometric functions are based 
 on the following papers, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->T. E. Hull, Thomas F. Fairgrieve, Ping Tak Peter Tang,   
  “Implementing Complex Elementary Functions Using Exception Handling”,   
  <CITE>ACM Transactions on Mathematical Software</CITE>, Volume 20 (1994), pp   
  215–244, Corrigenda, p553 </LI>
  <LI><!-- /@w -->T. E. Hull, Thomas F. Fairgrieve, Ping Tak Peter Tang,   
  “Implementing the complex arcsin and arccosine functions using exception   
  handling”, <CITE>ACM Transactions on Mathematical Software</CITE>, Volume 23   
  (1997) pp 299–335 </LI></UL>
<P>The general formulas and details of branch cuts can be found in the following 
 books, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Abramowitz and Stegun, <CITE>Handbook of Mathematical   
  Functions</CITE>, “Circular Functions in Terms of Real and Imaginary Parts”,   
  Formulas 4.3.55–58, “Inverse Circular Functions in Terms of Real and Imaginary 
    Parts”, Formulas 4.4.37–39, “Hyperbolic Functions in Terms of Real and   
  Imaginary Parts”, Formulas 4.5.49–52, “Inverse Hyperbolic Functions—relation   
  to Inverse Circular Functions”, Formulas 4.6.14–19. </LI>
  <LI><!-- /@w -->Dave Gillespie, <CITE>Calc Manual</CITE>, Free Software   
  Foundation, ISBN 1-882114-18-3 </LI></UL>
<HR>
<A name="Polynomials"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Special-Functions" 
rel="next">Special Functions</A>, Previous: <A accessKey="p" href="#Complex-Numbers" 
rel="previous">Complex Numbers</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Polynomials-1"></A>
<H2 class="chapter">6 Polynomials</H2><A 
name="index-polynomials_002c-roots-of"></A>
<P>This chapter describes functions for evaluating and solving polynomials. 
 There are routines for finding real and complex roots of quadratic and cubic 
 equations using analytic methods. An iterative polynomial solver is also 
 available for finding the roots of general polynomials with real coefficients 
 (of any order). The functions are declared in the header file 
<SAMP>gsl_poly.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Quadratic-Equations">Quadratic 
            Equations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Cubic-Equations">Cubic 
            Equations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#General-Polynomial-Equations">General 
            Polynomial Equations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Roots-of-Polynomials-Examples">Roots 
            of Polynomials Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Roots-of-Polynomials-References-and-Further-Reading">Roots 
            of Polynomials References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Polynomial-Evaluation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Divided-Difference-Representation-of-Polynomials" 
rel="next">Divided Difference Representation of Polynomials</A>, Up: <A 
accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Polynomial-Evaluation-1"></A>
<H3 class="section">6.1 Polynomial Evaluation</H3><A name="index-polynomial-evaluation"></A><A 
name="index-evaluation-of-polynomials"></A>
<P>The functions described here evaluate the polynomial <EM>P(x) = c[0] + c[1] x 
 + c[2] x^2 + \dots + c[len-1] x^{len-1}</EM> using Horner’s method for 
 stability. Inline versions of these functions are used when 
<CODE>HAVE_INLINE</CODE> is defined. </P>
<DL>
  <DT><A name="index-gsl_005fpoly_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_poly_eval</STRONG> <EM>(const double 
  <VAR>c</VAR>[], const int   <VAR>len</VAR>, const double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates a polynomial with real coefficients for the real   
  variable <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005fcomplex_005feval"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_poly_complex_eval</STRONG> <EM>(const double  
   <VAR>c</VAR>[], const int <VAR>len</VAR>, const gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates a polynomial with real coefficients for the complex 
    variable <VAR>z</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fcomplex_005fpoly_005fcomplex_005feval"></A>Function:   
  <EM>gsl_complex</EM> <STRONG>gsl_complex_poly_complex_eval</STRONG> <EM>(const 
    gsl_complex <VAR>c</VAR>[], const int <VAR>len</VAR>, const gsl_complex   
  <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates a polynomial with complex coefficients for the   
  complex variable <VAR>z</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005feval_005fderivs"></A>Function: 
  <EM>int</EM><STRONG>gsl_poly_eval_derivs</STRONG> <EM>(const double 
  <VAR>c</VAR>[], const   size_t <VAR>lenc</VAR>, const double <VAR>x</VAR>, 
  double <VAR>res</VAR>[],   const size_t <VAR>lenres</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates a polynomial and its derivatives storing the   
  results in the array <VAR>res</VAR> of size <VAR>lenres</VAR>. The output   
  array contains the values of <EM>d^k P/d x^k</EM> for the specified value of   
  <VAR>x</VAR> starting with <EM>k = 0</EM>. </P></DD></DL>
<HR>
<A name="Divided-Difference-Representation-of-Polynomials"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Quadratic-Equations" 
rel="next">Quadratic Equations</A>, Previous: <A accessKey="p" href="#Polynomial-Evaluation" 
rel="previous">Polynomial Evaluation</A>, Up: <A accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Divided-Difference-Representation-of-Polynomials-1"></A>
<H3 class="section">6.2 Divided Difference Representation of Polynomials</H3><A 
name="index-divided-differences_002c-polynomials"></A><A name="index-evaluation-of-polynomials_002c-in-divided-difference-form"></A>
<P>The functions described here manipulate polynomials stored in Newton’s 
 divided-difference representation. The use of divided-differences is described 
 in Abramowitz &amp; Stegun sections 25.1.4 and 25.2.26, and Burden and Faires, 
 chapter 3, and discussed briefly below. </P>
<P>Given a function <EM>f(x)</EM>, an <EM>n</EM>th degree interpolating 
 polynomial <EM>P_{n}(x)</EM> can be constructed which agrees with <EM>f</EM> at 
<EM>n+1</EM> distinct points <EM>x_0,x_1,...,x_{n}</EM>. This polynomial can be 
 written in a form known as Newton’s divided-difference representation: </P>
<DIV class="example"><PRE class="example">P_n(x) = f(x_0) + \sum_(k=1)^n [x_0,x_1,...,x_k] (x-x_0)(x-x_1)...(x-x_(k-1))
</PRE></DIV>
<P>where the divided differences <EM>[x_0,x_1,...,x_k]</EM> are defined in 
 section 25.1.4 of Abramowitz and Stegun. Additionally, it is possible to 
 construct an interpolating polynomial of degree <EM>2n+1</EM> which also 
matches  the first derivatives of <EM>f</EM> at the points 
<EM>x_0,x_1,...,x_n</EM>. This  is called the Hermite interpolating polynomial 
and is defined as </P>
<DIV class="example"><PRE class="example">H_(2n+1)(x) = f(z_0) + \sum_(k=1)^(2n+1) [z_0,z_1,...,z_k] (x-z_0)(x-z_1)...(x-z_(k-1))
</PRE></DIV>
<P>where the elements of <EM>z = \{x_0,x_0,x_1,x_1,...,x_n,x_n\}</EM> are 
 defined by <EM>z_{2k} = z_{2k+1} = x_k</EM>. The divided-differences 
<EM>[z_0,z_1,...,z_k]</EM> are discussed in Burden and Faires, section 3.4. </P>
<DL>
  <DT><A name="index-gsl_005fpoly_005fdd_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_poly_dd_init</STRONG> <EM>(double <VAR>dd</VAR>[], 
  const double   <VAR>xa</VAR>[], const double <VAR>ya</VAR>[], size_t   
  <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function computes a divided-difference representation of the   
  interpolating polynomial for the points (<VAR>x</VAR>, <VAR>y</VAR>) stored in 
    the arrays <VAR>xa</VAR> and <VAR>ya</VAR> of length <VAR>size</VAR>. On   
  output the divided-differences of (<VAR>xa</VAR>,<VAR>ya</VAR>) are stored in  
   the array <VAR>dd</VAR>, also of length <VAR>size</VAR>. Using the notation   
  above, <EM>dd[k] = [x_0,x_1,...,x_k]</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005fdd_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_poly_dd_eval</STRONG> <EM>(const double 
  <VAR>dd</VAR>[], const   double <VAR>xa</VAR>[], const size_t <VAR>size</VAR>, 
  const double   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates the polynomial stored in divided-difference form in 
    the arrays <VAR>dd</VAR> and <VAR>xa</VAR> of length <VAR>size</VAR> at the  
   point <VAR>x</VAR>. An inline version of this function is used when   
  <CODE>HAVE_INLINE</CODE> is defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005fdd_005ftaylor"></A>Function: 
  <EM>int</EM><STRONG>gsl_poly_dd_taylor</STRONG> <EM>(double <VAR>c</VAR>[], 
  double   <VAR>xp</VAR>, const double <VAR>dd</VAR>[], const double 
  <VAR>xa</VAR>[],   size_t <VAR>size</VAR>, double <VAR>w</VAR>[])</EM></DT>
  <DD>
  <P>This function converts the divided-difference representation of a   
  polynomial to a Taylor expansion. The divided-difference representation is   
  supplied in the arrays <VAR>dd</VAR> and <VAR>xa</VAR> of length   
  <VAR>size</VAR>. On output the Taylor coefficients of the polynomial expanded  
   about the point <VAR>xp</VAR> are stored in the array <VAR>c</VAR> also of   
  length <VAR>size</VAR>. A workspace of length <VAR>size</VAR> must be provided 
    in the array <VAR>w</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005fdd_005fhermite_005finit"></A>Function:   
  <EM>int</EM> <STRONG>gsl_poly_dd_hermite_init</STRONG> <EM>(double   
  <VAR>dd</VAR>[], double <VAR>za</VAR>[], const double <VAR>xa</VAR>[], const   
  double <VAR>ya</VAR>[], const double <VAR>dya</VAR>[], const size_t   
  <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function computes a divided-difference representation of the   
  interpolating Hermite polynomial for the points (<VAR>x</VAR>, <VAR>y</VAR>)   
  stored in the arrays <VAR>xa</VAR> and <VAR>ya</VAR> of length   
  <VAR>size</VAR>. Hermite interpolation constructs polynomials which also match 
    first derivatives <EM>dy/dx</EM> which are provided in the array   
  <VAR>dya</VAR> also of length <VAR>size</VAR>. The first derivatives can be   
  incorported into the usual divided-difference algorithm by forming a new   
  dataset <EM>z = \{x_0,x_0,x_1,x_1,...\}</EM>, which is stored in the array   
  <VAR>za</VAR> of length 2*<VAR>size</VAR> on output. On output the   
  divided-differences of the Hermite representation are stored in the array   
  <VAR>dd</VAR>, also of length 2*<VAR>size</VAR>. Using the notation above,   
  <EM>dd[k] = [z_0,z_1,...,z_k]</EM>. The resulting Hermite polynomial can be   
  evaluated by calling <CODE>gsl_poly_dd_eval</CODE> and using <VAR>za</VAR> for 
    the input argument <VAR>xa</VAR>. </P></DD></DL>
<HR>
<A name="Quadratic-Equations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Cubic-Equations" 
rel="next">Cubic Equations</A>, Previous: <A accessKey="p" href="#Divided-Difference-Representation-of-Polynomials" 
rel="previous">Divided Difference Representation of Polynomials</A>, Up: <A 
accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Quadratic-Equations-1"></A>
<H3 class="section">6.3 Quadratic Equations</H3><A name="index-quadratic-equation_002c-solving"></A>
<DL>
  <DT><A name="index-gsl_005fpoly_005fsolve_005fquadratic"></A>Function:   
  <EM>int</EM> <STRONG>gsl_poly_solve_quadratic</STRONG> <EM>(double   
  <VAR>a</VAR>, double <VAR>b</VAR>, double <VAR>c</VAR>, double *   
  <VAR>x0</VAR>, double * <VAR>x1</VAR>)</EM></DT>
  <DD>
  <P>This function finds the real roots of the quadratic equation, </P>
  <DIV class="example"><PRE class="example">a x^2 + b x + c = 0
</PRE></DIV>
  <P>The number of real roots (either zero, one or two) is returned, and their   
  locations are stored in <VAR>x0</VAR> and <VAR>x1</VAR>. If no real roots are  
   found then <VAR>x0</VAR> and <VAR>x1</VAR> are not modified. If one real root 
    is found (i.e. if <EM>a=0</EM>) then it is stored in <VAR>x0</VAR>. When two 
    real roots are found they are stored in <VAR>x0</VAR> and <VAR>x1</VAR> in   
  ascending order. The case of coincident roots is not considered special. For   
  example <EM>(x-1)^2=0</EM> will have two roots, which happen to have exactly   
  equal values. </P>
  <P>The number of roots found depends on the sign of the discriminant <EM>b^2 - 
    4 a c</EM>. This will be subject to rounding and cancellation errors when   
  computed in double precision, and will also be subject to errors if the   
  coefficients of the polynomial are inexact. These errors may cause a discrete  
   change in the number of roots. However, for polynomials with small integer   
  coefficients the discriminant can always be computed exactly. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fpoly_005fcomplex_005fsolve_005fquadratic"></A>Function:   
  <EM>int</EM> <STRONG>gsl_poly_complex_solve_quadratic</STRONG> <EM>(double   
  <VAR>a</VAR>, double <VAR>b</VAR>, double <VAR>c</VAR>, gsl_complex *   
  <VAR>z0</VAR>, gsl_complex * <VAR>z1</VAR>)</EM></DT>
  <DD>
  <P>This function finds the complex roots of the quadratic equation, </P>
  <DIV class="example"><PRE class="example">a z^2 + b z + c = 0
</PRE></DIV>
  <P>The number of complex roots is returned (either one or two) and the   
  locations of the roots are stored in <VAR>z0</VAR> and <VAR>z1</VAR>. The   
  roots are returned in ascending order, sorted first by their real components   
  and then by their imaginary components. If only one real root is found (i.e.   
  if <EM>a=0</EM>) then it is stored in <VAR>z0</VAR>. </P></DD></DL>
<HR>
<A name="Cubic-Equations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#General-Polynomial-Equations" 
rel="next">General Polynomial Equations</A>, Previous: <A accessKey="p" href="#Quadratic-Equations" 
rel="previous">Quadratic Equations</A>, Up: <A accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Cubic-Equations-1"></A>
<H3 class="section">6.4 Cubic Equations</H3><A name="index-cubic-equation_002c-solving"></A>
<DL>
  <DT><A name="index-gsl_005fpoly_005fsolve_005fcubic"></A>Function: 
  <EM>int</EM><STRONG>gsl_poly_solve_cubic</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>c</VAR>, double * <VAR>x0</VAR>, double *   
  <VAR>x1</VAR>, double * <VAR>x2</VAR>)</EM></DT>
  <DD>
  <P>This function finds the real roots of the cubic equation, </P>
  <DIV class="example"><PRE class="example">x^3 + a x^2 + b x + c = 0
</PRE></DIV>
  <P>with a leading coefficient of unity. The number of real roots (either one   
  or three) is returned, and their locations are stored in <VAR>x0</VAR>,   
  <VAR>x1</VAR> and <VAR>x2</VAR>. If one real root is found then only   
  <VAR>x0</VAR> is modified. When three real roots are found they are stored in  
   <VAR>x0</VAR>, <VAR>x1</VAR> and <VAR>x2</VAR> in ascending order. The case 
  of   coincident roots is not considered special. For example, the equation   
  <EM>(x-1)^3=0</EM> will have three roots with exactly equal values. As in the  
   quadratic case, finite precision may cause equal or closely-spaced real roots 
    to move off the real axis into the complex plane, leading to a discrete 
  change   in the number of real roots. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005fcomplex_005fsolve_005fcubic"></A>Function: 
    <EM>int</EM> <STRONG>gsl_poly_complex_solve_cubic</STRONG> <EM>(double   
  <VAR>a</VAR>, double <VAR>b</VAR>, double <VAR>c</VAR>, gsl_complex *   
  <VAR>z0</VAR>, gsl_complex * <VAR>z1</VAR>, gsl_complex *   
  <VAR>z2</VAR>)</EM></DT>
  <DD>
  <P>This function finds the complex roots of the cubic equation, </P>
  <DIV class="example"><PRE class="example">z^3 + a z^2 + b z + c = 0
</PRE></DIV>
  <P>The number of complex roots is returned (always three) and the locations of 
    the roots are stored in <VAR>z0</VAR>, <VAR>z1</VAR> and <VAR>z2</VAR>. The  
   roots are returned in ascending order, sorted first by their real components  
   and then by their imaginary components. </P></DD></DL>
<HR>
<A name="General-Polynomial-Equations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Roots-of-Polynomials-Examples" 
rel="next">Roots of Polynomials Examples</A>, Previous: <A accessKey="p" href="#Cubic-Equations" 
rel="previous">Cubic Equations</A>, Up: <A accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="General-Polynomial-Equations-1"></A>
<H3 class="section">6.5 General Polynomial Equations</H3><A name="index-general-polynomial-equations_002c-solving"></A>
<P>The roots of polynomial equations cannot be found analytically beyond the 
 special cases of the quadratic, cubic and quartic equation. The algorithm 
 described in this section uses an iterative method to find the approximate 
 locations of roots of higher order polynomials. </P>
<DL>
  <DT><A 
  name="index-gsl_005fpoly_005fcomplex_005fworkspace_005falloc"></A>Function:   
  <EM>gsl_poly_complex_workspace 
  *</EM><STRONG>gsl_poly_complex_workspace_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fpoly_005fcomplex_005fworkspace"></A>
  <P>This function allocates space for a <CODE>gsl_poly_complex_workspace</CODE> 
    struct and a workspace suitable for solving a polynomial with <VAR>n</VAR>   
  coefficients using the routine <CODE>gsl_poly_complex_solve</CODE>. </P>
  <P>The function returns a pointer to the newly allocated   
  <CODE>gsl_poly_complex_workspace</CODE> if no errors were detected, and a null 
    pointer in the case of error. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fpoly_005fcomplex_005fworkspace_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_poly_complex_workspace_free</STRONG><EM>(gsl_poly_complex_workspace 
  * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the workspace   
  <VAR>w</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpoly_005fcomplex_005fsolve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_poly_complex_solve</STRONG> <EM>(const double *   
  <VAR>a</VAR>, size_t <VAR>n</VAR>, gsl_poly_complex_workspace * <VAR>w</VAR>,  
   gsl_complex_packed_ptr <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function computes the roots of the general polynomial <EM>P(x) = a_0 + 
    a_1 x + a_2 x^2 + ... + a_{n-1} x^{n-1}</EM> using balanced-QR reduction of  
   the companion matrix. The parameter <VAR>n</VAR> specifies the length of the  
   coefficient array. The coefficient of the highest order term must be 
  non-zero.   The function requires a workspace <VAR>w</VAR> of the appropriate 
  size. The   <EM>n-1</EM> roots are returned in the packed complex array 
  <VAR>z</VAR> of   length <EM>2(n-1)</EM>, alternating real and imaginary 
  parts. </P>
  <P>The function returns <CODE>GSL_SUCCESS</CODE> if all the roots are found.   
  If the QR reduction does not converge, the error handler is invoked with an   
  error code of <CODE>GSL_EFAILED</CODE>. Note that due to finite precision,   
  roots of higher multiplicity are returned as a cluster of simple roots with   
  reduced accuracy. The solution of polynomials with higher-order roots requires 
    specialized algorithms that take the multiplicity structure into account 
  (see   e.g. Z. Zeng, Algorithm 835, ACM Transactions on Mathematical Software, 
  Volume   30, Issue 2 (2004), pp 218–236). </P></DD></DL>
<HR>
<A name="Roots-of-Polynomials-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Roots-of-Polynomials-References-and-Further-Reading" 
rel="next">Roots of Polynomials References and Further Reading</A>, Previous: <A 
accessKey="p" href="#General-Polynomial-Equations" 
rel="previous">General Polynomial Equations</A>, Up: <A accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-1"></A>
<H3 class="section">6.6 Examples</H3>
<P>To demonstrate the use of the general polynomial solver we will take the 
 polynomial <EM>P(x) = x^5 - 1</EM> which has the following roots, </P>
<DIV class="example"><PRE class="example">1, e^{2\pi i /5}, e^{4\pi i /5}, e^{6\pi i /5}, e^{8\pi i /5}
</PRE></DIV>
<P>The following program will find these roots. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_poly.h&gt;

int
main (void)
{
  int i;
  /* coefficients of P(x) =  -1 + x^5  */
  double a[6] = { -1, 0, 0, 0, 0, 1 };  
  double z[10];

  gsl_poly_complex_workspace * w 
      = gsl_poly_complex_workspace_alloc (6);
  
  gsl_poly_complex_solve (a, 6, w, z);

  gsl_poly_complex_workspace_free (w);

  for (i = 0; i &lt; 5; i++)
    {
      printf ("z%d = %+.18f %+.18f\n", 
              i, z[2*i], z[2*i+1]);
    }

  return 0;
}
</PRE></DIV>
<P>The output of the program is, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">z0 = -0.809016994374947451 +0.587785252292473137
z1 = -0.809016994374947451 -0.587785252292473137
z2 = +0.309016994374947451 +0.951056516295153642
z3 = +0.309016994374947451 -0.951056516295153642
z4 = +1.000000000000000000 +0.000000000000000000
</PRE></DIV>
<P>which agrees with the analytic result, <EM>z_n = \exp(2 \pi n i/5)</EM>. </P>
<HR>
<A name="Roots-of-Polynomials-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Roots-of-Polynomials-Examples" 
rel="previous">Roots of Polynomials Examples</A>, Up: <A accessKey="u" href="#Polynomials" 
rel="up">Polynomials</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-1"></A>
<H3 class="section">6.7 References and Further Reading</H3>
<P>The balanced-QR method and its error analysis are described in the following 
 papers, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->R.S. Martin, G. Peters and J.H. Wilkinson, “The QR Algorithm   
  for Real Hessenberg Matrices”, <CITE>Numerische Mathematik</CITE>, 14 (1970),  
   219–231. </LI>
  <LI><!-- /@w -->B.N. Parlett and C. Reinsch, “Balancing a Matrix for   
  Calculation of Eigenvalues and Eigenvectors”, <CITE>Numerische   
  Mathematik</CITE>, 13 (1969), 293–304. </LI>
  <LI><!-- /@w -->A. Edelman and H. Murakami, “Polynomial roots from companion   
  matrix eigenvalues”, <CITE>Mathematics of Computation</CITE>, Vol. 64, No. 210 
    (1995), 763–776. </LI></UL>
<P>The formulas for divided differences are given in the following texts, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Abramowitz and Stegun, <CITE>Handbook of Mathematical   
  Functions</CITE>, Sections 25.1.4 and 25.2.26. </LI>
  <LI><!-- /@w -->R. L. Burden and J. D. Faires, <CITE>Numerical   
  Analysis</CITE>, 9th edition, ISBN 0-538-73351-9, 2011. </LI></UL>
<HR>
<A name="Special-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Vectors-and-Matrices" 
rel="next">Vectors and Matrices</A>, Previous: <A accessKey="p" href="#Polynomials" 
rel="previous">Polynomials</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Special-Functions-1"></A>
<H2 class="chapter">7 Special Functions</H2><A 
name="index-special-functions"></A>
<P>This chapter describes the GSL special function library. The library includes 
 routines for calculating the values of Airy functions, Bessel functions, 
Clausen  functions, Coulomb wave functions, Coupling coefficients, the Dawson 
function,  Debye functions, Dilogarithms, Elliptic integrals, Jacobi elliptic 
functions,  Error functions, Exponential integrals, Fermi-Dirac functions, Gamma 
functions,  Gegenbauer functions, Hypergeometric functions, Laguerre functions, 
Legendre  functions and Spherical Harmonics, the Psi (Digamma) Function, 
Synchrotron  functions, Transport functions, Trigonometric functions and Zeta 
functions. Each  routine also computes an estimate of the numerical error in the 
calculated value  of the function. </P>
<P>The functions in this chapter are declared in individual header files, such 
 as <SAMP>gsl_sf_airy.h</SAMP>, <SAMP>gsl_sf_bessel.h</SAMP>, etc. The complete 
 set of header files can be included using the file <SAMP>gsl_sf.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Special-Function-Usage">Special 
            Function Usage</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#The-gsl_005fsf_005fresult-struct">The 
            gsl_sf_result struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Special-Function-Modes">Special 
            Function Modes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Airy-Functions-and-Derivatives">Airy 
            Functions and Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Bessel-Functions">Bessel 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Clausen-Functions">Clausen 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Coulomb-Functions">Coulomb 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Coupling-Coefficients">Coupling 
            Coefficients</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Dawson-Function">Dawson 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Debye-Functions">Debye 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Dilogarithm">Dilogarithm</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Elementary-Operations">Elementary 
            Operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Elliptic-Integrals">Elliptic 
            Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Elliptic-Functions-_0028Jacobi_0029">Elliptic 
            Functions (Jacobi)</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Error-Functions">Error 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Exponential-Functions">Exponential 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Exponential-Integrals">Exponential 
            Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Fermi_002dDirac-Function">Fermi-Dirac 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Gamma-and-Beta-Functions">Gamma 
            and Beta Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Laguerre-Functions">Laguerre 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Lambert-W-Functions">Lambert 
            W Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Legendre-Functions-and-Spherical-Harmonics">Legendre 
            Functions and Spherical Harmonics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Mathieu-Functions">Mathieu 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Power-Function">Power 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Psi-_0028Digamma_0029-Function">Psi 
            (Digamma) Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Synchrotron-Functions">Synchrotron 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Transport-Functions">Transport 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Trigonometric-Functions">Trigonometric 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Zeta-Functions">Zeta 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Special-Functions-Examples">Special 
            Functions Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Special-Functions-References-and-Further-Reading">Special 
            Functions References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Special-Function-Usage"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-gsl_005fsf_005fresult-struct" 
rel="next">The gsl_sf_result struct</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Usage"></A>
<H3 class="section">7.1 Usage</H3>
<P>The special functions are available in two calling conventions, a <EM>natural 
 form</EM> which returns the numerical value of the function and an 
<EM>error-handling form</EM> which returns an error code. The two types of 
 function provide alternative ways of accessing the same underlying code. </P>
<P>The <EM>natural form</EM> returns only the value of the function and can be 
 used directly in mathematical expressions. For example, the following function 
 call will compute the value of the Bessel function <EM>J_0(x)</EM>, </P>
<DIV class="example"><PRE class="example">double y = gsl_sf_bessel_J0 (x);
</PRE></DIV>
<P>There is no way to access an error code or to estimate the error using this 
 method. To allow access to this information the alternative error-handling form 
 stores the value and error in a modifiable argument, </P>
<DIV class="example"><PRE class="example">gsl_sf_result result;
int status = gsl_sf_bessel_J0_e (x, &amp;result);
</PRE></DIV>
<P>The error-handling functions have the suffix <CODE>_e</CODE>. The returned 
 status value indicates error conditions such as overflow, underflow or loss of 
 precision. If there are no errors the error-handling functions return 
<CODE>GSL_SUCCESS</CODE>. </P>
<HR>
<A name="The-gsl_005fsf_005fresult-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Special-Function-Modes" 
rel="next">Special Function Modes</A>, Previous: <A accessKey="p" href="#Special-Function-Usage" 
rel="previous">Special Function Usage</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-gsl_005fsf_005fresult-struct-1"></A>
<H3 class="section">7.2 The gsl_sf_result struct</H3><A name="index-gsl_005fsf_005fresult"></A><A 
name="index-gsl_005fsf_005fresult_005fe10"></A><A name="index-gsl_005fsf_005fresult-1"></A><A 
name="index-gsl_005fsf_005fresult_005fe10-1"></A>
<P>The error handling form of the special functions always calculate an error 
 estimate along with the value of the result. Therefore, structures are provided 
 for amalgamating a value and error estimate. These structures are declared in 
 the header file <SAMP>gsl_sf_result.h</SAMP>. </P>
<P>The <CODE>gsl_sf_result</CODE> struct contains value and error fields. </P>
<DIV class="example"><PRE class="example">typedef struct
{
  double val;
  double err;
} gsl_sf_result;
</PRE></DIV>
<P>The field <VAR>val</VAR> contains the value and the field <VAR>err</VAR> 
 contains an estimate of the absolute error in the value. </P>
<P>In some cases, an overflow or underflow can be detected and handled by a 
 function. In this case, it may be possible to return a scaling exponent as well 
 as an error/value pair in order to save the result from exceeding the dynamic 
 range of the built-in types. The <CODE>gsl_sf_result_e10</CODE> struct contains 
 value and error fields as well as an exponent field such that the actual result 
 is obtained as <CODE>result * 10^(e10)</CODE>. </P>
<DIV class="example"><PRE class="example">typedef struct
{
  double val;
  double err;
  int    e10;
} gsl_sf_result_e10;
</PRE></DIV>
<HR>
<A name="Special-Function-Modes"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Airy-Functions-and-Derivatives" 
rel="next">Airy Functions and Derivatives</A>, Previous: <A accessKey="p" href="#The-gsl_005fsf_005fresult-struct" 
rel="previous">The gsl_sf_result struct</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Modes"></A>
<H3 class="section">7.3 Modes</H3>
<P>The goal of the library is to achieve double precision accuracy wherever 
 possible. However the cost of evaluating some special functions to double 
 precision can be significant, particularly where very high order terms are 
 required. In these cases a <CODE>mode</CODE> argument allows the accuracy of 
the  function to be reduced in order to improve performance. The following 
precision  levels are available for the mode argument, </P>
<DL compact="">
  <DT><CODE>GSL_PREC_DOUBLE</CODE></DT>
  <DD>
  <P>Double-precision, a relative accuracy of approximately <EM>2 * 10^-16</EM>. 
    </P></DD>
  <DT><CODE>GSL_PREC_SINGLE</CODE></DT>
  <DD>
  <P>Single-precision, a relative accuracy of approximately <EM>10^-7</EM>.   
  </P></DD>
  <DT><CODE>GSL_PREC_APPROX</CODE></DT>
  <DD>
  <P>Approximate values, a relative accuracy of approximately <EM>5 *   
  10^-4</EM>. </P></DD></DL>
<P>The approximate mode provides the fastest evaluation at the lowest accuracy. 
</P>
<HR>
<A name="Airy-Functions-and-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Bessel-Functions" 
rel="next">Bessel Functions</A>, Previous: <A accessKey="p" href="#Special-Function-Modes" 
rel="previous">Special Function Modes</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Airy-Functions-and-Derivatives-1"></A>
<H3 class="section">7.4 Airy Functions and Derivatives</H3><A name="index-Airy-functions"></A><A 
name="index-Ai_0028x_0029"></A><A name="index-Bi_0028x_0029"></A>
<P>The Airy functions <EM>Ai(x)</EM> and <EM>Bi(x)</EM> are defined by the 
 integral representations, </P>
<DIV class="example"><PRE class="example">Ai(x) = (1/\pi) \int_0^\infty \cos((1/3) t^3 + xt) dt
Bi(x) = (1/\pi) \int_0^\infty (e^(-(1/3) t^3 + xt) + \sin((1/3) t^3 + xt)) dt
</PRE></DIV>
<P>For further information see Abramowitz &amp; Stegun, Section 10.4. The Airy 
 functions are defined in the header file <SAMP>gsl_sf_airy.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Airy-Functions">Airy 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Zeros-of-Airy-Functions">Zeros 
            of Airy Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Zeros-of-Derivatives-of-Airy-Functions">Zeros 
            of Derivatives of Airy Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Airy-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Derivatives-of-Airy-Functions" 
rel="next">Derivatives of Airy Functions</A>, Up: <A accessKey="u" href="#Airy-Functions-and-Derivatives" 
rel="up">Airy Functions and Derivatives</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Airy-Functions-1"></A>
<H4 class="subsection">7.4.1 Airy Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fAi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_airy_Ai</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_mode_t   <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fAi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_airy_Ai_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_mode_t   <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Airy function <EM>Ai(x)</EM> with an accuracy   
  specified by <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fBi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_airy_Bi</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_mode_t   <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fBi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_airy_Bi_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_mode_t   <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Airy function <EM>Bi(x)</EM> with an accuracy   
  specified by <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fAi_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_Ai_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fAi_005fscaled_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_airy_Ai_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute a scaled version of the Airy function <EM>S_A(x)   
  Ai(x)</EM>. For <EM>x&gt;0</EM> the scaling factor <EM>S_A(x)</EM> is   
  <EM>\exp(+(2/3) x^(3/2))</EM>, and is 1 for <EM>x&lt;0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fBi_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_Bi_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fBi_005fscaled_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_airy_Bi_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute a scaled version of the Airy function <EM>S_B(x)   
  Bi(x)</EM>. For <EM>x&gt;0</EM> the scaling factor <EM>S_B(x)</EM> is   
  <EM>exp(-(2/3) x^(3/2))</EM>, and is 1 for <EM>x&lt;0</EM>. </P></DD></DL>
<HR>
<A name="Derivatives-of-Airy-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Zeros-of-Airy-Functions" 
rel="next">Zeros of Airy Functions</A>, Previous: <A accessKey="p" href="#Airy-Functions" 
rel="previous">Airy Functions</A>, Up: <A accessKey="u" href="#Airy-Functions-and-Derivatives" 
rel="up">Airy Functions and Derivatives</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Derivatives-of-Airy-Functions-1"></A>
<H4 class="subsection">7.4.2 Derivatives of Airy Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fAi_005fderiv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_Ai_deriv</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fAi_005fderiv_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_airy_Ai_deriv_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_mode_t <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Airy function derivative <EM>Ai'(x)</EM> with an 
    accuracy specified by <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fBi_005fderiv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_Bi_deriv</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fBi_005fderiv_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_airy_Bi_deriv_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_mode_t <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Airy function derivative <EM>Bi'(x)</EM> with an 
    accuracy specified by <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fAi_005fderiv_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_Ai_deriv_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fAi_005fderiv_005fscaled_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_airy_Ai_deriv_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled Airy function derivative <EM>S_A(x)   
  Ai'(x)</EM>. For <EM>x&gt;0</EM> the scaling factor <EM>S_A(x)</EM> is   
  <EM>\exp(+(2/3) x^(3/2))</EM>, and is 1 for <EM>x&lt;0</EM>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fBi_005fderiv_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_Bi_deriv_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fBi_005fderiv_005fscaled_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_airy_Bi_deriv_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled Airy function derivative <EM>S_B(x)   
  Bi'(x)</EM>. For <EM>x&gt;0</EM> the scaling factor <EM>S_B(x)</EM> is   
  <EM>exp(-(2/3) x^(3/2))</EM>, and is 1 for <EM>x&lt;0</EM>. </P></DD></DL>
<HR>
<A name="Zeros-of-Airy-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Zeros-of-Derivatives-of-Airy-Functions" 
rel="next">Zeros of Derivatives of Airy Functions</A>, Previous: <A accessKey="p" 
href="#Derivatives-of-Airy-Functions" 
rel="previous">Derivatives of Airy Functions</A>, Up: <A accessKey="u" href="#Airy-Functions-and-Derivatives" 
rel="up">Airy Functions and Derivatives</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Zeros-of-Airy-Functions-1"></A>
<H4 class="subsection">7.4.3 Zeros of Airy Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fzero_005fAi"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_zero_Ai</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fzero_005fAi_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_airy_zero_Ai_e</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th zero of the Airy 
    function <EM>Ai(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fairy_005fzero_005fBi"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_zero_Bi</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fairy_005fzero_005fBi_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_airy_zero_Bi_e</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th zero of the Airy 
    function <EM>Bi(x)</EM>. </P></DD></DL>
<HR>
<A name="Zeros-of-Derivatives-of-Airy-Functions"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Zeros-of-Airy-Functions" 
rel="previous">Zeros of Airy Functions</A>, Up: <A accessKey="u" href="#Airy-Functions-and-Derivatives" 
rel="up">Airy Functions and Derivatives</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Zeros-of-Derivatives-of-Airy-Functions-1"></A>
<H4 class="subsection">7.4.4 Zeros of Derivatives of Airy Functions</H4>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fzero_005fAi_005fderiv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_zero_Ai_deriv</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fzero_005fAi_005fderiv_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_airy_zero_Ai_deriv_e</STRONG> <EM>(unsigned int  
   <VAR>s</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th zero of the Airy 
    function derivative <EM>Ai'(x)</EM>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fzero_005fBi_005fderiv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_airy_zero_Bi_deriv</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fairy_005fzero_005fBi_005fderiv_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_airy_zero_Bi_deriv_e</STRONG> <EM>(unsigned int  
   <VAR>s</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th zero of the Airy 
    function derivative <EM>Bi'(x)</EM>. </P></DD></DL>
<HR>
<A name="Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Clausen-Functions" 
rel="next">Clausen Functions</A>, Previous: <A accessKey="p" href="#Airy-Functions-and-Derivatives" 
rel="previous">Airy Functions and Derivatives</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Bessel-Functions-1"></A>
<H3 class="section">7.5 Bessel Functions</H3><A 
name="index-Bessel-functions"></A>
<P>The routines described in this section compute the Cylindrical Bessel 
 functions <EM>J_n(x)</EM>, <EM>Y_n(x)</EM>, Modified cylindrical Bessel 
 functions <EM>I_n(x)</EM>, <EM>K_n(x)</EM>, Spherical Bessel functions 
<EM>j_l(x)</EM>, <EM>y_l(x)</EM>, and Modified Spherical Bessel functions 
<EM>i_l(x)</EM>, <EM>k_l(x)</EM>. For more information see Abramowitz &amp; 
 Stegun, Chapters 9 and 10. The Bessel functions are defined in the header file 
<SAMP>gsl_sf_bessel.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Irregular-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Bessel Functions - Fractional Order</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Regular-Cylindrical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Irregular-Cylindrical-Bessel-Functions" 
rel="next">Irregular Cylindrical Bessel Functions</A>, Up: <A accessKey="u" 
href="#Bessel-Functions" rel="up">Bessel 
Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Regular-Cylindrical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.1 Regular Cylindrical Bessel Functions</H4><A name="index-Cylindrical-Bessel-Functions"></A><A 
name="index-Regular-Cylindrical-Bessel-Functions"></A><A name="index-J_0028x_0029_002c-Bessel-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJ0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_J0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJ0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_J0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular cylindrical Bessel function of zeroth   
  order, <EM>J_0(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJ1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_J1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJ1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_J1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular cylindrical Bessel function of first   
  order, <EM>J_1(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Jn</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Jn_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular cylindrical Bessel function of order   
  <VAR>n</VAR>, <EM>J_n(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJn_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Jn_array</STRONG> <EM>(int <VAR>nmin</VAR>, 
    int <VAR>nmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the regular cylindrical Bessel   
  functions <EM>J_n(x)</EM> for <EM>n</EM> from <VAR>nmin</VAR> to   
  <VAR>nmax</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. The values are computed using recurrence relations   
  for efficiency, and therefore may differ slightly from the exact values.   
  </P></DD></DL>
<HR>
<A name="Irregular-Cylindrical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Regular-Modified-Cylindrical-Bessel-Functions" 
rel="next">Regular Modified Cylindrical Bessel Functions</A>, Previous: <A 
accessKey="p" href="#Regular-Cylindrical-Bessel-Functions" 
rel="previous">Regular Cylindrical Bessel Functions</A>, Up: <A accessKey="u" 
href="#Bessel-Functions" rel="up">Bessel 
Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Irregular-Cylindrical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.2 Irregular Cylindrical Bessel Functions</H4><A name="index-Irregular-Cylindrical-Bessel-Functions"></A><A 
name="index-Y_0028x_0029_002c-Bessel-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fY0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Y0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fY0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Y0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular cylindrical Bessel function of zeroth  
   order, <EM>Y_0(x)</EM>, for <EM>x&gt;0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fY1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Y1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fY1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Y1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular cylindrical Bessel function of first   
  order, <EM>Y_1(x)</EM>, for <EM>x&gt;0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fYn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Yn</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fYn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Yn_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular cylindrical Bessel function of order   
  <VAR>n</VAR>, <EM>Y_n(x)</EM>, for <EM>x&gt;0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fYn_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Yn_array</STRONG> <EM>(int <VAR>nmin</VAR>, 
    int <VAR>nmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the irregular cylindrical Bessel   
  functions <EM>Y_n(x)</EM> for <EM>n</EM> from <VAR>nmin</VAR> to   
  <VAR>nmax</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. The domain of the function is <EM>x&gt;0</EM>. The   
  values are computed using recurrence relations for efficiency, and therefore   
  may differ slightly from the exact values. </P></DD></DL>
<HR>
<A name="Regular-Modified-Cylindrical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Irregular-Modified-Cylindrical-Bessel-Functions" 
rel="next">Irregular Modified Cylindrical Bessel Functions</A>, Previous: <A 
accessKey="p" href="#Irregular-Cylindrical-Bessel-Functions" 
rel="previous">Irregular Cylindrical Bessel Functions</A>, Up: <A accessKey="u" 
href="#Bessel-Functions" rel="up">Bessel 
Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Regular-Modified-Cylindrical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.3 Regular Modified Cylindrical Bessel 
Functions</H4><A name="index-Modified-Cylindrical-Bessel-Functions"></A><A name="index-Regular-Modified-Cylindrical-Bessel-Functions"></A><A 
name="index-I_0028x_0029_002c-Bessel-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fI0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_I0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fI0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_I0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular modified cylindrical Bessel function of  
   zeroth order, <EM>I_0(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fI1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_I1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fI1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_I1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular modified cylindrical Bessel function of  
   first order, <EM>I_1(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fIn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_In</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fIn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_In_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular modified cylindrical Bessel function of  
   order <VAR>n</VAR>, <EM>I_n(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fIn_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_In_array</STRONG> <EM>(int <VAR>nmin</VAR>, 
    int <VAR>nmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the regular modified cylindrical Bessel 
    functions <EM>I_n(x)</EM> for <EM>n</EM> from <VAR>nmin</VAR> to   
  <VAR>nmax</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. The start of the range <VAR>nmin</VAR> must be   
  positive or zero. The values are computed using recurrence relations for   
  efficiency, and therefore may differ slightly from the exact values. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fI0_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_I0_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fI0_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_I0_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified cylindrical Bessel   
  function of zeroth order <EM>\exp(-|x|) I_0(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fI1_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_I1_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fI1_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_I1_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified cylindrical Bessel   
  function of first order <EM>\exp(-|x|) I_1(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fIn_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_In_scaled</STRONG> <EM>(int   
  <VAR>n</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fIn_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_In_scaled_e</STRONG> <EM>(int <VAR>n</VAR>, 
    double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified cylindrical Bessel   
  function of order <VAR>n</VAR>, <EM>\exp(-|x|) I_n(x)</EM> </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fIn_005fscaled_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_In_scaled_array</STRONG> <EM>(int   
  <VAR>nmin</VAR>, int <VAR>nmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the scaled regular cylindrical Bessel   
  functions <EM>\exp(-|x|) I_n(x)</EM> for <EM>n</EM> from <VAR>nmin</VAR> to   
  <VAR>nmax</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. The start of the range <VAR>nmin</VAR> must be   
  positive or zero. The values are computed using recurrence relations for   
  efficiency, and therefore may differ slightly from the exact values. 
</P></DD></DL>
<HR>
<A name="Irregular-Modified-Cylindrical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Regular-Spherical-Bessel-Functions" 
rel="next">Regular Spherical Bessel Functions</A>, Previous: <A accessKey="p" 
href="#Regular-Modified-Cylindrical-Bessel-Functions" 
rel="previous">Regular Modified Cylindrical Bessel Functions</A>, Up: <A 
accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Irregular-Modified-Cylindrical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.4 Irregular Modified Cylindrical Bessel 
 Functions</H4><A 
name="index-Irregular-Modified-Cylindrical-Bessel-Functions"></A><A name="index-K_0028x_0029_002c-Bessel-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fK0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_K0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fK0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_K0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular modified cylindrical Bessel function   
  of zeroth order, <EM>K_0(x)</EM>, for <EM>x &gt; 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fK1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_K1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fK1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_K1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular modified cylindrical Bessel function   
  of first order, <EM>K_1(x)</EM>, for <EM>x &gt; 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Kn</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Kn_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular modified cylindrical Bessel function   
  of order <VAR>n</VAR>, <EM>K_n(x)</EM>, for <EM>x &gt; 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKn_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Kn_array</STRONG> <EM>(int <VAR>nmin</VAR>, 
    int <VAR>nmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the irregular modified cylindrical   
  Bessel functions <EM>K_n(x)</EM> for <EM>n</EM> from <VAR>nmin</VAR> to   
  <VAR>nmax</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. The start of the range <VAR>nmin</VAR> must be   
  positive or zero. The domain of the function is <EM>x&gt;0</EM>. The values   
  are computed using recurrence relations for efficiency, and therefore may   
  differ slightly from the exact values. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fK0_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_K0_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fK0_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_K0_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified cylindrical Bessel   
  function of zeroth order <EM>\exp(x) K_0(x)</EM> for <EM>x&gt;0</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fK1_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_K1_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>) </EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fK1_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_K1_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified cylindrical Bessel   
  function of first order <EM>\exp(x) K_1(x)</EM> for <EM>x&gt;0</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKn_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_Kn_scaled</STRONG> <EM>(int   
  <VAR>n</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fKn_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Kn_scaled_e</STRONG> <EM>(int <VAR>n</VAR>, 
    double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified cylindrical Bessel   
  function of order <VAR>n</VAR>, <EM>\exp(x) K_n(x)</EM>, for <EM>x&gt;0</EM>.  
   </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fKn_005fscaled_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Kn_scaled_array</STRONG> <EM>(int   
  <VAR>nmin</VAR>, int <VAR>nmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the scaled irregular cylindrical Bessel 
    functions <EM>\exp(x) K_n(x)</EM> for <EM>n</EM> from <VAR>nmin</VAR> to   
  <VAR>nmax</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. The start of the range <VAR>nmin</VAR> must be   
  positive or zero. The domain of the function is <EM>x&gt;0</EM>. The values   
  are computed using recurrence relations for efficiency, and therefore may   
  differ slightly from the exact values. </P></DD></DL>
<HR>
<A name="Regular-Spherical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Irregular-Spherical-Bessel-Functions" 
rel="next">Irregular Spherical Bessel Functions</A>, Previous: <A accessKey="p" 
href="#Irregular-Modified-Cylindrical-Bessel-Functions" 
rel="previous">Irregular Modified Cylindrical Bessel Functions</A>, Up: <A 
accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Regular-Spherical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.5 Regular Spherical Bessel Functions</H4><A name="index-Spherical-Bessel-Functions"></A><A 
name="index-Regular-Spherical-Bessel-Functions"></A><A name="index-j_0028x_0029_002c-Bessel-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fj0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_j0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fj0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_j0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular spherical Bessel function of zeroth   
  order, <EM>j_0(x) = \sin(x)/x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fj1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_j1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fj1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_j1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular spherical Bessel function of first   
  order, <EM>j_1(x) = (\sin(x)/x - \cos(x))/x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fj2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_j2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fj2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_j2_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular spherical Bessel function of second   
  order, <EM>j_2(x) = ((3/x^2 - 1)\sin(x) - 3\cos(x)/x)/x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fjl"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_jl</STRONG> <EM>(int <VAR>l</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fjl_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_jl_e</STRONG> <EM>(int <VAR>l</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular spherical Bessel function of order   
  <VAR>l</VAR>, <EM>j_l(x)</EM>, for <EM>l &gt;= 0</EM> and <EM>x &gt;= 0</EM>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fjl_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_jl_array</STRONG> <EM>(int <VAR>lmax</VAR>, 
    double <VAR>x</VAR>, double <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the regular spherical Bessel functions  
   <EM>j_l(x)</EM> for <EM>l</EM> from 0 to <VAR>lmax</VAR> inclusive for   
  <EM>lmax &gt;= 0</EM> and <EM>x &gt;= 0</EM>, storing the results in the array 
    <VAR>result_array</VAR>. The values are computed using recurrence relations  
   for efficiency, and therefore may differ slightly from the exact values.   
  </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fjl_005fsteed_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_jl_steed_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, double <VAR>x</VAR>, double *   
  <VAR>result_array</VAR>)</EM></DT>
  <DD>
  <P>This routine uses Steed’s method to compute the values of the regular   
  spherical Bessel functions <EM>j_l(x)</EM> for <EM>l</EM> from 0 to   
  <VAR>lmax</VAR> inclusive for <EM>lmax &gt;= 0</EM> and <EM>x &gt;= 0</EM>,   
  storing the results in the array <VAR>result_array</VAR>. The Steed/Barnett   
  algorithm is described in <CITE>Comp. Phys. Comm.</CITE> 21, 297 (1981).   
  Steed’s method is more stable than the recurrence used in the other functions  
   but is also slower. </P></DD></DL>
<HR>
<A name="Irregular-Spherical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Regular-Modified-Spherical-Bessel-Functions" 
rel="next">Regular Modified Spherical Bessel Functions</A>, Previous: <A 
accessKey="p" href="#Regular-Spherical-Bessel-Functions" 
rel="previous">Regular Spherical Bessel Functions</A>, Up: <A accessKey="u" 
href="#Bessel-Functions" rel="up">Bessel 
Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Irregular-Spherical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.6 Irregular Spherical Bessel Functions</H4><A name="index-Irregular-Spherical-Bessel-Functions"></A><A 
name="index-y_0028x_0029_002c-Bessel-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fy0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_y0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fy0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_y0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular spherical Bessel function of zeroth   
  order, <EM>y_0(x) = -\cos(x)/x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fy1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_y1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fy1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_y1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular spherical Bessel function of first   
  order, <EM>y_1(x) = -(\cos(x)/x + \sin(x))/x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fy2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_y2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fy2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_y2_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular spherical Bessel function of second   
  order, <EM>y_2(x) = (-3/x^3 + 1/x)\cos(x) - (3/x^2)\sin(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fyl"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_yl</STRONG> <EM>(int <VAR>l</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fyl_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_yl_e</STRONG> <EM>(int <VAR>l</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular spherical Bessel function of order   
  <VAR>l</VAR>, <EM>y_l(x)</EM>, for <EM>l &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fyl_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_yl_array</STRONG> <EM>(int <VAR>lmax</VAR>, 
    double <VAR>x</VAR>, double <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the irregular spherical Bessel   
  functions <EM>y_l(x)</EM> for <EM>l</EM> from 0 to <VAR>lmax</VAR> inclusive   
  for <EM>lmax &gt;= 0</EM>, storing the results in the array   
  <VAR>result_array</VAR>. The values are computed using recurrence relations   
  for efficiency, and therefore may differ slightly from the exact values.   
  </P></DD></DL>
<HR>
<A name="Regular-Modified-Spherical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Irregular-Modified-Spherical-Bessel-Functions" 
rel="next">Irregular Modified Spherical Bessel Functions</A>, Previous: <A 
accessKey="p" href="#Irregular-Spherical-Bessel-Functions" 
rel="previous">Irregular Spherical Bessel Functions</A>, Up: <A accessKey="u" 
href="#Bessel-Functions" rel="up">Bessel 
Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Regular-Modified-Spherical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.7 Regular Modified Spherical Bessel Functions</H4><A 
name="index-Modified-Spherical-Bessel-Functions"></A><A name="index-Regular-Modified-Spherical-Bessel-Functions"></A><A 
name="index-i_0028x_0029_002c-Bessel-Functions"></A>
<P>The regular modified spherical Bessel functions <EM>i_l(x)</EM> are related 
 to the modified Bessel functions of fractional order, <EM>i_l(x) = 
 \sqrt{\pi/(2x)} I_{l+1/2}(x)</EM> </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fi0_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_i0_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fi0_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_i0_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified spherical Bessel   
  function of zeroth order, <EM>\exp(-|x|) i_0(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fi1_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_i1_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fi1_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_i1_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified spherical Bessel   
  function of first order, <EM>\exp(-|x|) i_1(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fi2_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_i2_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fi2_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_i2_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified spherical Bessel   
  function of second order, <EM>\exp(-|x|) i_2(x) </EM></P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fil_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_il_scaled</STRONG> <EM>(int   
  <VAR>l</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fil_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_il_scaled_e</STRONG> <EM>(int <VAR>l</VAR>, 
    double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified spherical Bessel   
  function of order <VAR>l</VAR>, <EM>\exp(-|x|) i_l(x) </EM></P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fil_005fscaled_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_il_scaled_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the scaled regular modified spherical   
  Bessel functions <EM>\exp(-|x|) i_l(x)</EM> for <EM>l</EM> from 0 to   
  <VAR>lmax</VAR> inclusive for <EM>lmax &gt;= 0</EM>, storing the results in   
  the array <VAR>result_array</VAR>. The values are computed using recurrence   
  relations for efficiency, and therefore may differ slightly from the exact   
  values. </P></DD></DL>
<HR>
<A name="Irregular-Modified-Spherical-Bessel-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Regular-Bessel-Function-_002d-Fractional-Order" 
rel="next">Regular Bessel Function - Fractional Order</A>, Previous: <A 
accessKey="p" href="#Regular-Modified-Spherical-Bessel-Functions" 
rel="previous">Regular Modified Spherical Bessel Functions</A>, Up: <A 
accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Irregular-Modified-Spherical-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.8 Irregular Modified Spherical Bessel 
Functions</H4><A 
name="index-Irregular-Modified-Spherical-Bessel-Functions"></A><A name="index-k_0028x_0029_002c-Bessel-Functions"></A>
<P>The irregular modified spherical Bessel functions <EM>k_l(x)</EM> are related 
 to the irregular modified Bessel functions of fractional order, <EM>k_l(x) = 
 \sqrt{\pi/(2x)} K_{l+1/2}(x)</EM>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fk0_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_k0_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fk0_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_k0_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified spherical Bessel   
  function of zeroth order, <EM>\exp(x) k_0(x)</EM>, for <EM>x&gt;0</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fk1_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_k1_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fk1_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_k1_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified spherical Bessel   
  function of first order, <EM>\exp(x) k_1(x)</EM>, for <EM>x&gt;0</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fk2_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_k2_scaled</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fk2_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_k2_scaled_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified spherical Bessel   
  function of second order, <EM>\exp(x) k_2(x)</EM>, for <EM>x&gt;0</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fkl_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_kl_scaled</STRONG> <EM>(int   
  <VAR>l</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fkl_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_kl_scaled_e</STRONG> <EM>(int <VAR>l</VAR>, 
    double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified spherical Bessel   
  function of order <VAR>l</VAR>, <EM>\exp(x) k_l(x)</EM>, for <EM>x&gt;0</EM>.  
   </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fkl_005fscaled_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_kl_scaled_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This routine computes the values of the scaled irregular modified spherical 
    Bessel functions <EM>\exp(x) k_l(x)</EM> for <EM>l</EM> from 0 to   
  <VAR>lmax</VAR> inclusive for <EM>lmax &gt;= 0</EM> and <EM>x&gt;0</EM>,   
  storing the results in the array <VAR>result_array</VAR>. The values are   
  computed using recurrence relations for efficiency, and therefore may differ   
  slightly from the exact values. </P></DD></DL>
<HR>
<A name="Regular-Bessel-Function-_002d-Fractional-Order"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Irregular-Bessel-Functions-_002d-Fractional-Order" 
rel="next">Irregular Bessel Functions - Fractional Order</A>, Previous: <A 
accessKey="p" href="#Irregular-Modified-Spherical-Bessel-Functions" 
rel="previous">Irregular Modified Spherical Bessel Functions</A>, Up: <A 
accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Regular-Bessel-Function_002d_002d_002dFractional-Order"></A>
<H4 class="subsection">7.5.9 Regular Bessel Function—Fractional Order</H4><A 
name="index-Fractional-Order-Bessel-Functions"></A><A name="index-Bessel-Functions_002c-Fractional-Order"></A><A 
name="index-Regular-Bessel-Functions_002c-Fractional-Order"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJnu"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Jnu</STRONG> <EM>(double <VAR>nu</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fJnu_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Jnu_e</STRONG> <EM>(double <VAR>nu</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular cylindrical Bessel function of   
  fractional order <EM>\nu</EM>, <EM>J_\nu(x)</EM>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fsequence_005fJnu_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_sequence_Jnu_e</STRONG> <EM>(double   
  <VAR>nu</VAR>, gsl_mode_t <VAR>mode</VAR>, size_t <VAR>size</VAR>, double   
  <VAR>v</VAR>[])</EM></DT>
  <DD>
  <P>This function computes the regular cylindrical Bessel function of   
  fractional order <EM>\nu</EM>, <EM>J_\nu(x)</EM>, evaluated at a series of   
  <EM>x</EM> values. The array <VAR>v</VAR> of length <VAR>size</VAR> contains   
  the <EM>x</EM> values. They are assumed to be strictly ordered and positive.   
  The array is over-written with the values of <EM>J_\nu(x_i)</EM>. </P></DD></DL>
<HR>
<A name="Irregular-Bessel-Functions-_002d-Fractional-Order"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order" 
rel="next">Regular Modified Bessel Functions - Fractional Order</A>, Previous: 
<A accessKey="p" href="#Regular-Bessel-Function-_002d-Fractional-Order" 
rel="previous">Regular Bessel Function - Fractional Order</A>, Up: <A accessKey="u" 
href="#Bessel-Functions" rel="up">Bessel 
Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Irregular-Bessel-Functions_002d_002d_002dFractional-Order"></A>
<H4 class="subsection">7.5.10 Irregular Bessel Functions—Fractional Order</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fYnu"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Ynu</STRONG> <EM>(double <VAR>nu</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fYnu_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Ynu_e</STRONG> <EM>(double <VAR>nu</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular cylindrical Bessel function of   
  fractional order <EM>\nu</EM>, <EM>Y_\nu(x)</EM>. </P></DD></DL>
<HR>
<A name="Regular-Modified-Bessel-Functions-_002d-Fractional-Order"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order" 
rel="next">Irregular Modified Bessel Functions - Fractional Order</A>, Previous: 
<A accessKey="p" href="#Irregular-Bessel-Functions-_002d-Fractional-Order" 
rel="previous">Irregular Bessel Functions - Fractional Order</A>, Up: <A 
accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Regular-Modified-Bessel-Functions_002d_002d_002dFractional-Order"></A>
<H4 class="subsection">7.5.11 Regular Modified Bessel Functions—Fractional 
 Order</H4><A 
name="index-Modified-Bessel-Functions_002c-Fractional-Order"></A><A name="index-Regular-Modified-Bessel-Functions_002c-Fractional-Order"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fInu"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Inu</STRONG> <EM>(double <VAR>nu</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fInu_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Inu_e</STRONG> <EM>(double <VAR>nu</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular modified Bessel function of fractional   
  order <EM>\nu</EM>, <EM>I_\nu(x)</EM> for <EM>x&gt;0</EM>, <EM>\nu&gt;0</EM>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fInu_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_Inu_scaled</STRONG> <EM>(double   
  <VAR>nu</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fInu_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Inu_scaled_e</STRONG> <EM>(double   
  <VAR>nu</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled regular modified Bessel function of   
  fractional order <EM>\nu</EM>, <EM>\exp(-|x|)I_\nu(x)</EM> for   
  <EM>x&gt;0</EM>, <EM>\nu&gt;0</EM>. </P></DD></DL>
<HR>
<A name="Irregular-Modified-Bessel-Functions-_002d-Fractional-Order"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Zeros-of-Regular-Bessel-Functions" 
rel="next">Zeros of Regular Bessel Functions</A>, Previous: <A accessKey="p" 
href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order" 
rel="previous">Regular Modified Bessel Functions - Fractional Order</A>, Up: <A 
accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Irregular-Modified-Bessel-Functions_002d_002d_002dFractional-Order"></A>
<H4 class="subsection">7.5.12 Irregular Modified Bessel Functions—Fractional 
 Order</H4><A name="index-Irregular-Modified-Bessel-Functions_002c-Fractional-Order"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKnu"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_bessel_Knu</STRONG> <EM>(double <VAR>nu</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKnu_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Knu_e</STRONG> <EM>(double <VAR>nu</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular modified Bessel function of fractional 
    order <EM>\nu</EM>, <EM>K_\nu(x)</EM> for <EM>x&gt;0</EM>, 
  <EM>\nu&gt;0</EM>.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005flnKnu"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_lnKnu</STRONG> <EM>(double   
  <VAR>nu</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005flnKnu_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_lnKnu_e</STRONG> <EM>(double <VAR>nu</VAR>, 
    double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the logarithm of the irregular modified Bessel   
  function of fractional order <EM>\nu</EM>, <EM>\ln(K_\nu(x))</EM> for   
  <EM>x&gt;0</EM>, <EM>\nu&gt;0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fKnu_005fscaled"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_Knu_scaled</STRONG> <EM>(double   
  <VAR>nu</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fbessel_005fKnu_005fscaled_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_bessel_Knu_scaled_e</STRONG> <EM>(double   
  <VAR>nu</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the scaled irregular modified Bessel function of   
  fractional order <EM>\nu</EM>, <EM>\exp(+|x|) K_\nu(x)</EM> for   
  <EM>x&gt;0</EM>, <EM>\nu&gt;0</EM>. </P></DD></DL>
<HR>
<A name="Zeros-of-Regular-Bessel-Functions"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order" 
rel="previous">Irregular Modified Bessel Functions - Fractional Order</A>, Up: 
<A accessKey="u" href="#Bessel-Functions" 
rel="up">Bessel Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Zeros-of-Regular-Bessel-Functions-1"></A>
<H4 class="subsection">7.5.13 Zeros of Regular Bessel Functions</H4><A name="index-Zeros-of-Regular-Bessel-Functions"></A><A 
name="index-Regular-Bessel-Functions_002c-Zeros-of"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fzero_005fJ0"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_zero_J0</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fzero_005fJ0_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_bessel_zero_J0_e</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th positive zero of 
    the Bessel function <EM>J_0(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fzero_005fJ1"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_zero_J1</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fzero_005fJ1_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_bessel_zero_J1_e</STRONG> <EM>(unsigned int   
  <VAR>s</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th positive zero of 
    the Bessel function <EM>J_1(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fbessel_005fzero_005fJnu"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_bessel_zero_Jnu</STRONG> <EM>(double   
  <VAR>nu</VAR>, unsigned int <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbessel_005fzero_005fJnu_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_bessel_zero_Jnu_e</STRONG> <EM>(double   
  <VAR>nu</VAR>, unsigned int <VAR>s</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the location of the <VAR>s</VAR>-th positive zero of 
    the Bessel function <EM>J_\nu(x)</EM>. The current implementation does not   
  support negative values of <VAR>nu</VAR>. </P></DD></DL>
<HR>
<A name="Clausen-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Coulomb-Functions" 
rel="next">Coulomb Functions</A>, Previous: <A accessKey="p" href="#Bessel-Functions" 
rel="previous">Bessel Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Clausen-Functions-1"></A>
<H3 class="section">7.6 Clausen Functions</H3><A 
name="index-Clausen-functions"></A>
<P>The Clausen function is defined by the following integral, </P>
<DIV class="example"><PRE class="example">Cl_2(x) = - \int_0^x dt \log(2 \sin(t/2))
</PRE></DIV>
<P>It is related to the dilogarithm by <EM>Cl_2(\theta) = \Im 
 Li_2(\exp(i\theta))</EM>. The Clausen functions are declared in the header file 
<SAMP>gsl_sf_clausen.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fclausen"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_clausen</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fclausen_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_clausen_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Clausen integral <EM>Cl_2(x)</EM>. </P></DD></DL>
<HR>
<A name="Coulomb-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Coupling-Coefficients" 
rel="next">Coupling Coefficients</A>, Previous: <A accessKey="p" href="#Clausen-Functions" 
rel="previous">Clausen Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Coulomb-Functions-1"></A>
<H3 class="section">7.7 Coulomb Functions</H3><A name="index-Coulomb-wave-functions"></A><A 
name="index-hydrogen-atom"></A>
<P>The prototypes of the Coulomb functions are declared in the header file 
<SAMP>gsl_sf_coulomb.h</SAMP>. Both bound state and scattering solutions are 
 available. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Normalized-Hydrogenic-Bound-States">Normalized 
            Hydrogenic Bound States</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Coulomb-Wave-Functions">Coulomb 
            Wave Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Coulomb-Wave-Function-Normalization-Constant">Coulomb 
            Wave Function Normalization Constant</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Normalized-Hydrogenic-Bound-States"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Coulomb-Wave-Functions" 
rel="next">Coulomb Wave Functions</A>, Up: <A accessKey="u" href="#Coulomb-Functions" 
rel="up">Coulomb Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Normalized-Hydrogenic-Bound-States-1"></A>
<H4 class="subsection">7.7.1 Normalized Hydrogenic Bound States</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fhydrogenicR_005f1"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_hydrogenicR_1</STRONG> <EM>(double   
  <VAR>Z</VAR>, double <VAR>r</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhydrogenicR_005f1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hydrogenicR_1_e</STRONG> <EM>(double <VAR>Z</VAR>, 
    double <VAR>r</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the lowest-order normalized hydrogenic bound state   
  radial wavefunction <EM>R_1 := 2Z \sqrt{Z} \exp(-Z r)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhydrogenicR"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hydrogenicR</STRONG> <EM>(int <VAR>n</VAR>, int 
  <VAR>l</VAR>,   double <VAR>Z</VAR>, double <VAR>r</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhydrogenicR_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_hydrogenicR_e</STRONG> <EM>(int <VAR>n</VAR>, int 
  <VAR>l</VAR>,   double <VAR>Z</VAR>, double <VAR>r</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the <VAR>n</VAR>-th normalized hydrogenic bound   
  state radial wavefunction, </P>
  <DIV class="example"><PRE class="example">R_n := 2 (Z^{3/2}/n^2) \sqrt{(n-l-1)!/(n+l)!} \exp(-Z r/n) (2Zr/n)^l
          L^{2l+1}_{n-l-1}(2Zr/n).  
</PRE></DIV>
  <P>where <EM>L^a_b(x)</EM> is the generalized Laguerre polynomial (see <A 
  href="#Laguerre-Functions">Laguerre 
    Functions</A>). The normalization is chosen such that the wavefunction   
  <EM>\psi</EM> is given by <EM>\psi(n,l,r) = R_n Y_{lm}</EM>. </P></DD></DL>
<HR>
<A name="Coulomb-Wave-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Coulomb-Wave-Function-Normalization-Constant" 
rel="next">Coulomb Wave Function Normalization Constant</A>, Previous: <A 
accessKey="p" href="#Normalized-Hydrogenic-Bound-States" 
rel="previous">Normalized Hydrogenic Bound States</A>, Up: <A accessKey="u" 
href="#Coulomb-Functions" 
rel="up">Coulomb Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Coulomb-Wave-Functions-1"></A>
<H4 class="subsection">7.7.2 Coulomb Wave Functions</H4>
<P>The Coulomb wave functions <EM>F_L(\eta,x)</EM>, <EM>G_L(\eta,x)</EM> are 
 described in Abramowitz &amp; Stegun, Chapter 14. Because there can be a large 
 dynamic range of values for these functions, overflows are handled gracefully. 
 If an overflow occurs, <CODE>GSL_EOVRFLW</CODE> is signalled and exponent(s) 
are  returned through the modifiable parameters <VAR>exp_F</VAR>, 
<VAR>exp_G</VAR>.  The full solution can be reconstructed from the following 
relations, </P>
<DIV class="example"><PRE class="example">F_L(eta,x)  =  fc[k_L] * exp(exp_F)
G_L(eta,x)  =  gc[k_L] * exp(exp_G)

F_L'(eta,x) = fcp[k_L] * exp(exp_F)
G_L'(eta,x) = gcp[k_L] * exp(exp_G)
</PRE></DIV>
<DL>
  <DT><A name="index-gsl_005fsf_005fcoulomb_005fwave_005fFG_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_coulomb_wave_FG_e</STRONG> <EM>(double   
  <VAR>eta</VAR>, double <VAR>x</VAR>, double <VAR>L_F</VAR>, int <VAR>k</VAR>,  
   gsl_sf_result * <VAR>F</VAR>, gsl_sf_result * <VAR>Fp</VAR>, gsl_sf_result *  
   <VAR>G</VAR>, gsl_sf_result * <VAR>Gp</VAR>, double * <VAR>exp_F</VAR>, 
  double   * <VAR>exp_G</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Coulomb wave functions <EM>F_L(\eta,x)</EM>,   
  <EM>G_{L-k}(\eta,x)</EM> and their derivatives <EM>F'_L(\eta,x)</EM>,   
  <EM>G'_{L-k}(\eta,x)</EM> with respect to <EM>x</EM>. The parameters are   
  restricted to <EM>L, L-k &gt; -1/2</EM>, <EM>x &gt; 0</EM> and integer   
  <EM>k</EM>. Note that <EM>L</EM> itself is not restricted to being an integer. 
    The results are stored in the parameters <VAR>F</VAR>, <VAR>G</VAR> for the  
   function values and <VAR>Fp</VAR>, <VAR>Gp</VAR> for the derivative values. 
  If   an overflow occurs, <CODE>GSL_EOVRFLW</CODE> is returned and scaling 
  exponents   are stored in the modifiable parameters <VAR>exp_F</VAR>, 
  <VAR>exp_G</VAR>.   </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fcoulomb_005fwave_005fF_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coulomb_wave_F_array</STRONG> <EM>(double   
  <VAR>L_min</VAR>, int <VAR>kmax</VAR>, double <VAR>eta</VAR>, double   
  <VAR>x</VAR>, double <VAR>fc_array</VAR>[], double *   
  <VAR>F_exponent</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Coulomb wave function <EM>F_L(\eta,x)</EM> for   
  <EM>L = Lmin \dots Lmin + kmax</EM>, storing the results in   
  <VAR>fc_array</VAR>. In the case of overflow the exponent is stored in   
  <VAR>F_exponent</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fcoulomb_005fwave_005fFG_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coulomb_wave_FG_array</STRONG> <EM>(double   
  <VAR>L_min</VAR>, int <VAR>kmax</VAR>, double <VAR>eta</VAR>, double   
  <VAR>x</VAR>, double <VAR>fc_array</VAR>[], double <VAR>gc_array</VAR>[],   
  double * <VAR>F_exponent</VAR>, double * <VAR>G_exponent</VAR>)</EM></DT>
  <DD>
  <P>This function computes the functions <EM>F_L(\eta,x)</EM>,   
  <EM>G_L(\eta,x)</EM> for <EM>L = Lmin \dots Lmin + kmax</EM> storing the   
  results in <VAR>fc_array</VAR> and <VAR>gc_array</VAR>. In the case of   
  overflow the exponents are stored in <VAR>F_exponent</VAR> and   
  <VAR>G_exponent</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fcoulomb_005fwave_005fFGp_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coulomb_wave_FGp_array</STRONG> <EM>(double   
  <VAR>L_min</VAR>, int <VAR>kmax</VAR>, double <VAR>eta</VAR>, double   
  <VAR>x</VAR>, double <VAR>fc_array</VAR>[], double <VAR>fcp_array</VAR>[],   
  double <VAR>gc_array</VAR>[], double <VAR>gcp_array</VAR>[], double *   
  <VAR>F_exponent</VAR>, double * <VAR>G_exponent</VAR>)</EM></DT>
  <DD>
  <P>This function computes the functions <EM>F_L(\eta,x)</EM>,   
  <EM>G_L(\eta,x)</EM> and their derivatives <EM>F'_L(\eta,x)</EM>,   
  <EM>G'_L(\eta,x)</EM> for <EM>L = Lmin \dots Lmin + kmax</EM> storing the   
  results in <VAR>fc_array</VAR>, <VAR>gc_array</VAR>, <VAR>fcp_array</VAR> and  
   <VAR>gcp_array</VAR>. In the case of overflow the exponents are stored in   
  <VAR>F_exponent</VAR> and <VAR>G_exponent</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fcoulomb_005fwave_005fsphF_005farray"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_coulomb_wave_sphF_array</STRONG> <EM>(double   
  <VAR>L_min</VAR>, int <VAR>kmax</VAR>, double <VAR>eta</VAR>, double   
  <VAR>x</VAR>, double <VAR>fc_array</VAR>[], double   
  <VAR>F_exponent</VAR>[])</EM></DT>
  <DD>
  <P>This function computes the Coulomb wave function divided by the argument   
  <EM>F_L(\eta, x)/x</EM> for <EM>L = Lmin \dots Lmin + kmax</EM>, storing the   
  results in <VAR>fc_array</VAR>. In the case of overflow the exponent is stored 
    in <VAR>F_exponent</VAR>. This function reduces to spherical Bessel 
  functions   in the limit <EM>\eta \to 0</EM>. </P></DD></DL>
<HR>
<A name="Coulomb-Wave-Function-Normalization-Constant"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Coulomb-Wave-Functions" 
rel="previous">Coulomb Wave Functions</A>, Up: <A accessKey="u" href="#Coulomb-Functions" 
rel="up">Coulomb Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Coulomb-Wave-Function-Normalization-Constant-1"></A>
<H4 class="subsection">7.7.3 Coulomb Wave Function Normalization Constant</H4>
<P>The Coulomb wave function normalization constant is defined in Abramowitz 
 14.1.7. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fcoulomb_005fCL_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coulomb_CL_e</STRONG> <EM>(double <VAR>L</VAR>,   
  double <VAR>eta</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Coulomb wave function normalization constant   
  <EM>C_L(\eta)</EM> for <EM>L &gt; -1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fcoulomb_005fCL_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coulomb_CL_array</STRONG> <EM>(double   
  <VAR>Lmin</VAR>, int <VAR>kmax</VAR>, double <VAR>eta</VAR>, double   
  <VAR>cl</VAR>[])</EM></DT>
  <DD>
  <P>This function computes the Coulomb wave function normalization constant   
  <EM>C_L(\eta)</EM> for <EM>L = Lmin \dots Lmin + kmax</EM>, <EM>Lmin &gt;   
  -1</EM>. </P></DD></DL>
<HR>
<A name="Coupling-Coefficients"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Dawson-Function" 
rel="next">Dawson Function</A>, Previous: <A accessKey="p" href="#Coulomb-Functions" 
rel="previous">Coulomb Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Coupling-Coefficients-1"></A>
<H3 class="section">7.8 Coupling Coefficients</H3><A name="index-coupling-coefficients"></A><A 
name="index-3_002dj-symbols"></A><A name="index-6_002dj-symbols"></A><A name="index-9_002dj-symbols"></A><A 
name="index-Wigner-coefficients"></A><A name="index-Racah-coefficients"></A>
<P>The Wigner 3-j, 6-j and 9-j symbols give the coupling coefficients for 
 combined angular momentum vectors. Since the arguments of the standard coupling 
 coefficient functions are integer or half-integer, the arguments of the 
 following functions are, by convention, integers equal to twice the actual spin 
 value. For information on the 3-j coefficients see Abramowitz &amp; Stegun, 
 Section 27.9. The functions described in this section are declared in the 
header  file <SAMP>gsl_sf_coupling.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#g_t3_002dj-Symbols">3-j 
            Symbols</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#g_t6_002dj-Symbols">6-j 
            Symbols</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#g_t9_002dj-Symbols">9-j 
            Symbols</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="g_t3_002dj-Symbols"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t6_002dj-Symbols" 
rel="next">6-j Symbols</A>, Up: <A accessKey="u" href="#Coupling-Coefficients" 
rel="up">Coupling Coefficients</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t3_002dj-Symbols-1"></A>
<H4 class="subsection">7.8.1 3-j Symbols</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fcoupling_005f3j"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_coupling_3j</STRONG> <EM>(int <VAR>two_ja</VAR>, 
  int   <VAR>two_jb</VAR>, int <VAR>two_jc</VAR>, int <VAR>two_ma</VAR>, int   
  <VAR>two_mb</VAR>, int <VAR>two_mc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fcoupling_005f3j_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coupling_3j_e</STRONG> <EM>(int <VAR>two_ja</VAR>, 
    int <VAR>two_jb</VAR>, int <VAR>two_jc</VAR>, int <VAR>two_ma</VAR>, int   
  <VAR>two_mb</VAR>, int <VAR>two_mc</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Wigner 3-j coefficient, </P>
  <DIV class="example"><PRE class="example">(ja jb jc
 ma mb mc)
</PRE></DIV>
  <P>where the arguments are given in half-integer units, <EM>ja</EM> =   
  <VAR>two_ja</VAR>/2, <EM>ma</EM> = <VAR>two_ma</VAR>/2, etc. </P></DD></DL>
<HR>
<A name="g_t6_002dj-Symbols"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t9_002dj-Symbols" 
rel="next">9-j Symbols</A>, Previous: <A accessKey="p" href="#g_t3_002dj-Symbols" 
rel="previous">3-j Symbols</A>, Up: <A accessKey="u" href="#Coupling-Coefficients" 
rel="up">Coupling Coefficients</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t6_002dj-Symbols-1"></A>
<H4 class="subsection">7.8.2 6-j Symbols</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fcoupling_005f6j"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_coupling_6j</STRONG> <EM>(int <VAR>two_ja</VAR>, 
  int   <VAR>two_jb</VAR>, int <VAR>two_jc</VAR>, int <VAR>two_jd</VAR>, int   
  <VAR>two_je</VAR>, int <VAR>two_jf</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fcoupling_005f6j_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coupling_6j_e</STRONG> <EM>(int <VAR>two_ja</VAR>, 
    int <VAR>two_jb</VAR>, int <VAR>two_jc</VAR>, int <VAR>two_jd</VAR>, int   
  <VAR>two_je</VAR>, int <VAR>two_jf</VAR>, gsl_sf_result * <VAR>result</VAR>)   
  </EM></DT>
  <DD>
  <P>These routines compute the Wigner 6-j coefficient, </P>
  <DIV class="example"><PRE class="example">{ja jb jc
 jd je jf}
</PRE></DIV>
  <P>where the arguments are given in half-integer units, <EM>ja</EM> =   
  <VAR>two_ja</VAR>/2, <EM>ma</EM> = <VAR>two_ma</VAR>/2, etc. </P></DD></DL>
<HR>
<A name="g_t9_002dj-Symbols"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#g_t6_002dj-Symbols" 
rel="previous">6-j Symbols</A>, Up: <A accessKey="u" href="#Coupling-Coefficients" 
rel="up">Coupling Coefficients</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t9_002dj-Symbols-1"></A>
<H4 class="subsection">7.8.3 9-j Symbols</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fcoupling_005f9j"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_coupling_9j</STRONG> <EM>(int <VAR>two_ja</VAR>, 
  int   <VAR>two_jb</VAR>, int <VAR>two_jc</VAR>, int <VAR>two_jd</VAR>, int   
  <VAR>two_je</VAR>, int <VAR>two_jf</VAR>, int <VAR>two_jg</VAR>, int   
  <VAR>two_jh</VAR>, int <VAR>two_ji</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fcoupling_005f9j_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_coupling_9j_e</STRONG> <EM>(int <VAR>two_ja</VAR>, 
    int <VAR>two_jb</VAR>, int <VAR>two_jc</VAR>, int <VAR>two_jd</VAR>, int   
  <VAR>two_je</VAR>, int <VAR>two_jf</VAR>, int <VAR>two_jg</VAR>, int   
  <VAR>two_jh</VAR>, int <VAR>two_ji</VAR>, gsl_sf_result * <VAR>result</VAR>)   
  </EM></DT>
  <DD>
  <P>These routines compute the Wigner 9-j coefficient, </P>
  <DIV class="example"><PRE class="example">{ja jb jc
 jd je jf
 jg jh ji}
</PRE></DIV>
  <P>where the arguments are given in half-integer units, <EM>ja</EM> =   
  <VAR>two_ja</VAR>/2, <EM>ma</EM> = <VAR>two_ma</VAR>/2, etc. </P></DD></DL>
<HR>
<A name="Dawson-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Debye-Functions" 
rel="next">Debye Functions</A>, Previous: <A accessKey="p" href="#Coupling-Coefficients" 
rel="previous">Coupling Coefficients</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Dawson-Function-1"></A>
<H3 class="section">7.9 Dawson Function</H3><A name="index-Dawson-function"></A>
<P>The Dawson integral is defined by <EM>\exp(-x^2) \int_0^x dt \exp(t^2)</EM>. 
 A table of Dawson’s integral can be found in Abramowitz &amp; Stegun, Table 
7.5.  The Dawson functions are declared in the header file 
<SAMP>gsl_sf_dawson.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fdawson"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_dawson</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdawson_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_dawson_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the value of Dawson’s integral for <VAR>x</VAR>.   
  </P></DD></DL>
<HR>
<A name="Debye-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Dilogarithm" 
rel="next">Dilogarithm</A>, Previous: <A accessKey="p" href="#Dawson-Function" 
rel="previous">Dawson Function</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Debye-Functions-1"></A>
<H3 class="section">7.10 Debye Functions</H3><A 
name="index-Debye-functions"></A>
<P>The Debye functions <EM>D_n(x)</EM> are defined by the following integral, 
</P>
<DIV class="example"><PRE class="example">D_n(x) = n/x^n \int_0^x dt (t^n/(e^t - 1))
</PRE></DIV>
<P>For further information see Abramowitz &amp; Stegun, Section 27.1. The Debye 
 functions are declared in the header file <SAMP>gsl_sf_debye.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fdebye_005f1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_debye_1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdebye_005f1_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_debye_1_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the first-order Debye function <EM>D_1(x) = (1/x)   
  \int_0^x dt (t/(e^t - 1))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fdebye_005f2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_debye_2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdebye_005f2_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_debye_2_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the second-order Debye function <EM>D_2(x) = (2/x^2) 
    \int_0^x dt (t^2/(e^t - 1))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fdebye_005f3"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_debye_3</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdebye_005f3_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_debye_3_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the third-order Debye function <EM>D_3(x) = (3/x^3)  
   \int_0^x dt (t^3/(e^t - 1))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fdebye_005f4"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_debye_4</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdebye_005f4_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_debye_4_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the fourth-order Debye function <EM>D_4(x) = (4/x^4) 
    \int_0^x dt (t^4/(e^t - 1))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fdebye_005f5"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_debye_5</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdebye_005f5_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_debye_5_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the fifth-order Debye function <EM>D_5(x) = (5/x^5)  
   \int_0^x dt (t^5/(e^t - 1))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fdebye_005f6"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_debye_6</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdebye_005f6_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_debye_6_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the sixth-order Debye function <EM>D_6(x) = (6/x^6)  
   \int_0^x dt (t^6/(e^t - 1))</EM>. </P></DD></DL>
<HR>
<A name="Dilogarithm"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Elementary-Operations" 
rel="next">Elementary Operations</A>, Previous: <A accessKey="p" href="#Debye-Functions" 
rel="previous">Debye Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Dilogarithm-1"></A>
<H3 class="section">7.11 Dilogarithm</H3><A name="index-dilogarithm"></A>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_sf_dilog.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Real-Argument">Real 
            Argument</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Complex-Argument">Complex 
            Argument</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Real-Argument"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Argument" 
rel="next">Complex Argument</A>, Up: <A accessKey="u" href="#Dilogarithm" 
rel="up">Dilogarithm</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Real-Argument-1"></A>
<H4 class="subsection">7.11.1 Real Argument</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fdilog"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_dilog</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdilog_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_dilog_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the dilogarithm for a real argument. In Lewin’s   
  notation this is <EM>Li_2(x)</EM>, the real part of the dilogarithm of a real  
   <EM>x</EM>. It is defined by the integral representation <EM>Li_2(x) = - \Re  
   \int_0^x ds \log(1-s) / s</EM>. Note that <EM>\Im(Li_2(x)) = 0</EM> for <EM>x 
    &lt;= 1</EM>, and <EM>-\pi\log(x)</EM> for <EM>x &gt; 1</EM>. </P>
  <P>Note that Abramowitz &amp; Stegun refer to the Spence integral   
  <EM>S(x)=Li_2(1-x)</EM> as the dilogarithm rather than <EM>Li_2(x)</EM>.   
  </P></DD></DL>
<HR>
<A name="Complex-Argument"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Real-Argument" 
rel="previous">Real Argument</A>, Up: <A accessKey="u" href="#Dilogarithm" 
rel="up">Dilogarithm</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-Argument-1"></A>
<H4 class="subsection">7.11.2 Complex Argument</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fcomplex_005fdilog_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_complex_dilog_e</STRONG> <EM>(double <VAR>r</VAR>, 
    double <VAR>theta</VAR>, gsl_sf_result * <VAR>result_re</VAR>, gsl_sf_result 
  *   <VAR>result_im</VAR>)</EM></DT>
  <DD>
  <P>This function computes the full complex-valued dilogarithm for the complex  
   argument <EM>z = r \exp(i \theta)</EM>. The real and imaginary parts of the   
  result are returned in <VAR>result_re</VAR>, <VAR>result_im</VAR>. 
</P></DD></DL>
<HR>
<A name="Elementary-Operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Elliptic-Integrals" 
rel="next">Elliptic Integrals</A>, Previous: <A accessKey="p" href="#Dilogarithm" 
rel="previous">Dilogarithm</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Elementary-Operations-1"></A>
<H3 class="section">7.12 Elementary Operations</H3><A name="index-elementary-operations"></A><A 
name="index-multiplication"></A>
<P>The following functions allow for the propagation of errors when combining 
 quantities by multiplication. The functions are declared in the header file 
<SAMP>gsl_sf_elementary.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fmultiply_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_multiply_e</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies <VAR>x</VAR> and <VAR>y</VAR> storing the product  
   and its associated error in <VAR>result</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fmultiply_005ferr_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_multiply_err_e</STRONG> <EM>(double <VAR>x</VAR>,  
   double <VAR>dx</VAR>, double <VAR>y</VAR>, double <VAR>dy</VAR>, 
  gsl_sf_result   * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies <VAR>x</VAR> and <VAR>y</VAR> with associated   
  absolute errors <VAR>dx</VAR> and <VAR>dy</VAR>. The product <EM>xy +/- xy   
  \sqrt((dx/x)^2 +(dy/y)^2)</EM> is stored in <VAR>result</VAR>. </P></DD></DL>
<HR>
<A name="Elliptic-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Elliptic-Functions-_0028Jacobi_0029" 
rel="next">Elliptic Functions (Jacobi)</A>, Previous: <A accessKey="p" href="#Elementary-Operations" 
rel="previous">Elementary Operations</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Elliptic-Integrals-1"></A>
<H3 class="section">7.13 Elliptic Integrals</H3><A name="index-elliptic-integrals"></A>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_sf_ellint.h</SAMP>. Further information about the elliptic integrals 
 can be found in Abramowitz &amp; Stegun, Chapter 17. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Definition-of-Legendre-Forms">Definition 
            of Legendre Forms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Definition-of-Carlson-Forms">Definition 
            of Carlson Forms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Carlson-Forms">Carlson 
            Forms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Definition-of-Legendre-Forms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Definition-of-Carlson-Forms" 
rel="next">Definition of Carlson Forms</A>, Up: <A accessKey="u" href="#Elliptic-Integrals" 
rel="up">Elliptic Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Definition-of-Legendre-Forms-1"></A>
<H4 class="subsection">7.13.1 Definition of Legendre Forms</H4><A name="index-Legendre-forms-of-elliptic-integrals"></A>
<P>The Legendre forms of elliptic integrals <EM>F(\phi,k)</EM>, 
<EM>E(\phi,k)</EM> and <EM>\Pi(\phi,k,n)</EM> are defined by, </P>
<DIV class="example"><PRE class="example">  F(\phi,k) = \int_0^\phi dt 1/\sqrt((1 - k^2 \sin^2(t)))

  E(\phi,k) = \int_0^\phi dt   \sqrt((1 - k^2 \sin^2(t)))

Pi(\phi,k,n) = \int_0^\phi dt 1/((1 + n \sin^2(t))\sqrt(1 - k^2 \sin^2(t)))
</PRE></DIV>
<P>The complete Legendre forms are denoted by <EM>K(k) = F(\pi/2, k)</EM> and 
<EM>E(k) = E(\pi/2, k)</EM>. </P>
<P>The notation used here is based on Carlson, <CITE>Numerische 
 Mathematik</CITE> 33 (1979) 1 and differs slightly from that used by Abramowitz 
&amp; Stegun, where the functions are given in terms of the parameter <EM>m = 
 k^2</EM> and <EM>n</EM> is replaced by <EM>-n</EM>. </P>
<HR>
<A name="Definition-of-Carlson-Forms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Legendre-Form-of-Complete-Elliptic-Integrals" 
rel="next">Legendre Form of Complete Elliptic Integrals</A>, Previous: <A 
accessKey="p" href="#Definition-of-Legendre-Forms" 
rel="previous">Definition of Legendre Forms</A>, Up: <A accessKey="u" href="#Elliptic-Integrals" 
rel="up">Elliptic Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Definition-of-Carlson-Forms-1"></A>
<H4 class="subsection">7.13.2 Definition of Carlson Forms</H4><A name="index-Carlson-forms-of-Elliptic-integrals"></A>
<P>The Carlson symmetric forms of elliptical integrals <EM>RC(x,y)</EM>, 
<EM>RD(x,y,z)</EM>, <EM>RF(x,y,z)</EM> and <EM>RJ(x,y,z,p)</EM> are defined by, 
</P>
<DIV class="example"><PRE class="example">    RC(x,y) = 1/2 \int_0^\infty dt (t+x)^(-1/2) (t+y)^(-1)

  RD(x,y,z) = 3/2 \int_0^\infty dt (t+x)^(-1/2) (t+y)^(-1/2) (t+z)^(-3/2)

  RF(x,y,z) = 1/2 \int_0^\infty dt (t+x)^(-1/2) (t+y)^(-1/2) (t+z)^(-1/2)

RJ(x,y,z,p) = 3/2 \int_0^\infty dt 
                 (t+x)^(-1/2) (t+y)^(-1/2) (t+z)^(-1/2) (t+p)^(-1)
</PRE></DIV>
<HR>
<A name="Legendre-Form-of-Complete-Elliptic-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Legendre-Form-of-Incomplete-Elliptic-Integrals" 
rel="next">Legendre Form of Incomplete Elliptic Integrals</A>, Previous: <A 
accessKey="p" href="#Definition-of-Carlson-Forms" 
rel="previous">Definition of Carlson Forms</A>, Up: <A accessKey="u" href="#Elliptic-Integrals" 
rel="up">Elliptic Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Legendre-Form-of-Complete-Elliptic-Integrals-1"></A>
<H4 class="subsection">7.13.3 Legendre Form of Complete Elliptic Integrals</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fKcomp"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_ellint_Kcomp</STRONG> <EM>(double <VAR>k</VAR>, 
    gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fKcomp_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_Kcomp_e</STRONG> <EM>(double <VAR>k</VAR>,  
   gsl_mode_t <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete elliptic integral <EM>K(k)</EM> to the  
   accuracy specified by the mode variable <VAR>mode</VAR>. Note that Abramowitz 
    &amp; Stegun define this function in terms of the parameter <EM>m = 
  k^2</EM>.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fEcomp"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_ellint_Ecomp</STRONG> <EM>(double <VAR>k</VAR>, 
    gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fEcomp_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_Ecomp_e</STRONG> <EM>(double <VAR>k</VAR>,  
   gsl_mode_t <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete elliptic integral <EM>E(k)</EM> to the  
   accuracy specified by the mode variable <VAR>mode</VAR>. Note that Abramowitz 
    &amp; Stegun define this function in terms of the parameter <EM>m = 
  k^2</EM>.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fPcomp"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_ellint_Pcomp</STRONG> <EM>(double <VAR>k</VAR>, 
    double <VAR>n</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fPcomp_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_Pcomp_e</STRONG> <EM>(double <VAR>k</VAR>,  
   double <VAR>n</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete elliptic integral <EM>\Pi(k,n)</EM> to  
   the accuracy specified by the mode variable <VAR>mode</VAR>. Note that   
  Abramowitz &amp; Stegun define this function in terms of the parameters <EM>m  
   = k^2</EM> and <EM>\sin^2(\alpha) = k^2</EM>, with the change of sign <EM>n   
  \to -n</EM>. </P></DD></DL>
<HR>
<A name="Legendre-Form-of-Incomplete-Elliptic-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Carlson-Forms" 
rel="next">Carlson Forms</A>, Previous: <A accessKey="p" href="#Legendre-Form-of-Complete-Elliptic-Integrals" 
rel="previous">Legendre Form of Complete Elliptic Integrals</A>, Up: <A 
accessKey="u" href="#Elliptic-Integrals" 
rel="up">Elliptic Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Legendre-Form-of-Incomplete-Elliptic-Integrals-1"></A>
<H4 class="subsection">7.13.4 Legendre Form of Incomplete Elliptic 
Integrals</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fF"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_F</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fF_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_ellint_F_e</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral <EM>F(\phi,k)</EM>  
   to the accuracy specified by the mode variable <VAR>mode</VAR>. Note that   
  Abramowitz &amp; Stegun define this function in terms of the parameter <EM>m = 
    k^2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fE"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_E</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fE_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_ellint_E_e</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral <EM>E(\phi,k)</EM>  
   to the accuracy specified by the mode variable <VAR>mode</VAR>. Note that   
  Abramowitz &amp; Stegun define this function in terms of the parameter <EM>m = 
    k^2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_P</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, double <VAR>n</VAR>, gsl_mode_t 
  <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fP_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_ellint_P_e</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, double <VAR>n</VAR>, gsl_mode_t <VAR>mode</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral   
  <EM>\Pi(\phi,k,n)</EM> to the accuracy specified by the mode variable   
  <VAR>mode</VAR>. Note that Abramowitz &amp; Stegun define this function in   
  terms of the parameters <EM>m = k^2</EM> and <EM>\sin^2(\alpha) = k^2</EM>,   
  with the change of sign <EM>n \to -n</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fD"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_D</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fD_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_ellint_D_e</STRONG> <EM>(double <VAR>phi</VAR>, 
  double   <VAR>k</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the incomplete elliptic integral <EM>D(\phi,k)</EM> 
    which is defined through the Carlson form <EM>RD(x,y,z)</EM> by the 
  following   relation, </P>
  <DIV class="example"><PRE class="example">D(\phi,k) = (1/3)(\sin(\phi))^3 RD (1-\sin^2(\phi), 1-k^2 \sin^2(\phi), 1).
</PRE></DIV></DD></DL>
<HR>
<A name="Carlson-Forms"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Legendre-Form-of-Incomplete-Elliptic-Integrals" 
rel="previous">Legendre Form of Incomplete Elliptic Integrals</A>, Up: <A 
accessKey="u" href="#Elliptic-Integrals" 
rel="up">Elliptic Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Carlson-Forms-1"></A>
<H4 class="subsection">7.13.5 Carlson Forms</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fRC"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_RC</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>, gsl_mode_t <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fRC_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_RC_e</STRONG> <EM>(double <VAR>x</VAR>,   
  double <VAR>y</VAR>, gsl_mode_t <VAR>mode</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral <EM>RC(x,y)</EM> to 
    the accuracy specified by the mode variable <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fRD"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_RD</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>, double <VAR>z</VAR>, gsl_mode_t 
  <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fRD_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_RD_e</STRONG> <EM>(double <VAR>x</VAR>,   
  double <VAR>y</VAR>, double <VAR>z</VAR>, gsl_mode_t <VAR>mode</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral <EM>RD(x,y,z)</EM>  
   to the accuracy specified by the mode variable <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fRF"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_RF</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>, double <VAR>z</VAR>, gsl_mode_t 
  <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fRF_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_RF_e</STRONG> <EM>(double <VAR>x</VAR>,   
  double <VAR>y</VAR>, double <VAR>z</VAR>, gsl_mode_t <VAR>mode</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral <EM>RF(x,y,z)</EM>  
   to the accuracy specified by the mode variable <VAR>mode</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fellint_005fRJ"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_ellint_RJ</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>, double <VAR>z</VAR>, double <VAR>p</VAR>, gsl_mode_t   
  <VAR>mode</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fellint_005fRJ_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_ellint_RJ_e</STRONG> <EM>(double <VAR>x</VAR>,   
  double <VAR>y</VAR>, double <VAR>z</VAR>, double <VAR>p</VAR>, gsl_mode_t   
  <VAR>mode</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete elliptic integral   
  <EM>RJ(x,y,z,p)</EM> to the accuracy specified by the mode variable   
  <VAR>mode</VAR>. </P></DD></DL>
<HR>
<A name="Elliptic-Functions-_0028Jacobi_0029"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Error-Functions" 
rel="next">Error Functions</A>, Previous: <A accessKey="p" href="#Elliptic-Integrals" 
rel="previous">Elliptic Integrals</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Elliptic-Functions-_0028Jacobi_0029-1"></A>
<H3 class="section">7.14 Elliptic Functions (Jacobi)</H3><A name="index-Jacobi-elliptic-functions"></A><A 
name="index-elliptic-functions-_0028Jacobi_0029"></A>
<P>The Jacobian Elliptic functions are defined in Abramowitz &amp; Stegun, 
 Chapter 16. The functions are declared in the header file 
<SAMP>gsl_sf_elljac.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005felljac_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_elljac_e</STRONG> <EM>(double <VAR>u</VAR>, double  
   <VAR>m</VAR>, double * <VAR>sn</VAR>, double * <VAR>cn</VAR>, double *   
  <VAR>dn</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Jacobian elliptic functions <EM>sn(u|m)</EM>,   
  <EM>cn(u|m)</EM>, <EM>dn(u|m)</EM> by descending Landen transformations.   
  </P></DD></DL>
<HR>
<A name="Error-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Exponential-Functions" 
rel="next">Exponential Functions</A>, Previous: <A accessKey="p" href="#Elliptic-Functions-_0028Jacobi_0029" 
rel="previous">Elliptic Functions (Jacobi)</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-Functions-1"></A>
<H3 class="section">7.15 Error Functions</H3><A 
name="index-error-function"></A><A name="index-erf_0028x_0029"></A><A name="index-erfc_0028x_0029"></A>
<P>The error function is described in Abramowitz &amp; Stegun, Chapter 7. The 
 functions in this section are declared in the header file 
<SAMP>gsl_sf_erf.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Error-Function">Error 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Complementary-Error-Function">Complementary 
            Error Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Log-Complementary-Error-Function">Log 
            Complementary Error Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Probability-functions">Probability 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Error-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complementary-Error-Function" 
rel="next">Complementary Error Function</A>, Up: <A accessKey="u" href="#Error-Functions" 
rel="up">Error Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-Function-1"></A>
<H4 class="subsection">7.15.1 Error Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005ferf"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_erf</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ferf_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_erf_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the error function <EM>erf(x)</EM>, where <EM>erf(x) 
    = (2/\sqrt(\pi)) \int_0^x dt \exp(-t^2)</EM>. </P></DD></DL>
<HR>
<A name="Complementary-Error-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Log-Complementary-Error-Function" 
rel="next">Log Complementary Error Function</A>, Previous: <A accessKey="p" 
href="#Error-Function" rel="previous">Error 
Function</A>, Up: <A accessKey="u" href="#Error-Functions" 
rel="up">Error Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complementary-Error-Function-1"></A>
<H4 class="subsection">7.15.2 Complementary Error Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005ferfc"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_erfc</STRONG> <EM>(double 
<VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ferfc_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_erfc_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complementary error function <EM>erfc(x) = 1 -   
  erf(x) = (2/\sqrt(\pi)) \int_x^\infty \exp(-t^2)</EM>. </P></DD></DL>
<HR>
<A name="Log-Complementary-Error-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Probability-functions" 
rel="next">Probability functions</A>, Previous: <A accessKey="p" href="#Complementary-Error-Function" 
rel="previous">Complementary Error Function</A>, Up: <A accessKey="u" href="#Error-Functions" 
rel="up">Error Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Log-Complementary-Error-Function-1"></A>
<H4 class="subsection">7.15.3 Log Complementary Error Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005flog_005ferfc"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_log_erfc</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flog_005ferfc_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_log_erfc_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the logarithm of the complementary error function   
  <EM>\log(\erfc(x))</EM>. </P></DD></DL>
<HR>
<A name="Probability-functions"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Log-Complementary-Error-Function" 
rel="previous">Log Complementary Error Function</A>, Up: <A accessKey="u" href="#Error-Functions" 
rel="up">Error Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Probability-functions-1"></A>
<H4 class="subsection">7.15.4 Probability functions</H4>
<P>The probability functions for the Normal or Gaussian distribution are 
 described in Abramowitz &amp; Stegun, Section 26.2. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005ferf_005fZ"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_erf_Z</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ferf_005fZ_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_erf_Z_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Gaussian probability density function <EM>Z(x) = 
    (1/\sqrt{2\pi}) \exp(-x^2/2)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ferf_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_erf_Q</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ferf_005fQ_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_erf_Q_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the upper tail of the Gaussian probability function  
   <EM>Q(x) = (1/\sqrt{2\pi}) \int_x^\infty dt \exp(-t^2/2)</EM>. </P></DD></DL><A 
name="index-hazard-function_002c-normal-distribution"></A><A name="index-Mills_0027-ratio_002c-inverse"></A>
<P>The <EM>hazard function</EM> for the normal distribution, also known as the 
 inverse Mills’ ratio, is defined as, </P>
<DIV class="example"><PRE class="example">h(x) = Z(x)/Q(x) = \sqrt{2/\pi} \exp(-x^2 / 2) / \erfc(x/\sqrt 2)
</PRE></DIV>
<P>It decreases rapidly as <EM>x</EM> approaches <EM>-\infty</EM> and asymptotes 
 to <EM>h(x) \sim x</EM> as <EM>x</EM> approaches <EM>+\infty</EM>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fhazard"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hazard</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhazard_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_hazard_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the hazard function for the normal distribution.   
  </P></DD></DL>
<HR>
<A name="Exponential-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Exponential-Integrals" 
rel="next">Exponential Integrals</A>, Previous: <A accessKey="p" href="#Error-Functions" 
rel="previous">Error Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Exponential-Functions-1"></A>
<H3 class="section">7.16 Exponential Functions</H3><A name="index-exponential-function"></A><A 
name="index-exp"></A>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_sf_exp.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Exponential-Function">Exponential 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Exponentiation-With-Error-Estimate">Exponentiation 
            With Error Estimate</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Exponential-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Relative-Exponential-Functions" 
rel="next">Relative Exponential Functions</A>, Up: <A accessKey="u" href="#Exponential-Functions" 
rel="up">Exponential Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Exponential-Function-1"></A>
<H4 class="subsection">7.16.1 Exponential Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_exp</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexp_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exp_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines provide an exponential function <EM>\exp(x)</EM> using GSL   
  semantics and error checking. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp_005fe10_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exp_e10_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result_e10   * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function computes the exponential <EM>\exp(x)</EM> using the   
  <CODE>gsl_sf_result_e10</CODE> type to return a result with extended range.   
  This function may be useful if the value of <EM>\exp(x)</EM> would overflow   
  the numeric range of <CODE>double</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp_005fmult"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_exp_mult</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexp_005fmult_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exp_mult_e</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>y</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines exponentiate <VAR>x</VAR> and multiply by the factor   
  <VAR>y</VAR> to return the product <EM>y \exp(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp_005fmult_005fe10_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_exp_mult_e10_e</STRONG> <EM>(const double   
  <VAR>x</VAR>, const double <VAR>y</VAR>, gsl_sf_result_e10 *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function computes the product <EM>y \exp(x)</EM> using the   
  <CODE>gsl_sf_result_e10</CODE> type to return a result with extended numeric   
  range. </P></DD></DL>
<HR>
<A name="Relative-Exponential-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Exponentiation-With-Error-Estimate" 
rel="next">Exponentiation With Error Estimate</A>, Previous: <A accessKey="p" 
href="#Exponential-Function" 
rel="previous">Exponential Function</A>, Up: <A accessKey="u" href="#Exponential-Functions" 
rel="up">Exponential Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Relative-Exponential-Functions-1"></A>
<H4 class="subsection">7.16.2 Relative Exponential Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fexpm1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_expm1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexpm1_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_expm1_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the quantity <EM>\exp(x)-1</EM> using an algorithm   
  that is accurate for small <EM>x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexprel"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_exprel</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexprel_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exprel_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the quantity <EM>(\exp(x)-1)/x</EM> using an   
  algorithm that is accurate for small <EM>x</EM>. For small <EM>x</EM> the   
  algorithm is based on the expansion <EM>(\exp(x)-1)/x = 1 + x/2 + x^2/(2*3) +  
   x^3/(2*3*4) + \dots</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexprel_005f2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_exprel_2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexprel_005f2_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exprel_2_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the quantity <EM>2(\exp(x)-1-x)/x^2</EM> using an   
  algorithm that is accurate for small <EM>x</EM>. For small <EM>x</EM> the   
  algorithm is based on the expansion <EM>2(\exp(x)-1-x)/x^2 = 1 + x/3 +   
  x^2/(3*4) + x^3/(3*4*5) + \dots</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexprel_005fn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_exprel_n</STRONG> <EM>(int <VAR>n</VAR>, double  
   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexprel_005fn_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exprel_n_e</STRONG> <EM>(int <VAR>n</VAR>, double 
  <VAR>x</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the <EM>N</EM>-relative exponential, which is the   
  <VAR>n</VAR>-th generalization of the functions <CODE>gsl_sf_exprel</CODE> and 
    <CODE>gsl_sf_exprel_2</CODE>. The <EM>N</EM>-relative exponential is given 
  by,   </P>
  <DIV class="example"><PRE class="example">exprel_N(x) = N!/x^N (\exp(x) - \sum_{k=0}^{N-1} x^k/k!)
            = 1 + x/(N+1) + x^2/((N+1)(N+2)) + ...
            = 1F1 (1,1+N,x)
</PRE></DIV></DD></DL>
<HR>
<A name="Exponentiation-With-Error-Estimate"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Relative-Exponential-Functions" 
rel="previous">Relative Exponential Functions</A>, Up: <A accessKey="u" href="#Exponential-Functions" 
rel="up">Exponential Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Exponentiation-With-Error-Estimate-1"></A>
<H4 class="subsection">7.16.3 Exponentiation With Error Estimate</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp_005ferr_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_exp_err_e</STRONG> <EM>(double <VAR>x</VAR>, double 
    <VAR>dx</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function exponentiates <VAR>x</VAR> with an associated absolute error  
   <VAR>dx</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp_005ferr_005fe10_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_exp_err_e10_e</STRONG> <EM>(double <VAR>x</VAR>,   
  double <VAR>dx</VAR>, gsl_sf_result_e10 * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This function exponentiates a quantity <VAR>x</VAR> with an associated   
  absolute error <VAR>dx</VAR> using the <CODE>gsl_sf_result_e10</CODE> type to  
   return a result with extended range. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexp_005fmult_005ferr_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_exp_mult_err_e</STRONG> <EM>(double <VAR>x</VAR>,  
   double <VAR>dx</VAR>, double <VAR>y</VAR>, double <VAR>dy</VAR>, 
  gsl_sf_result   * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the product <EM>y \exp(x)</EM> for the quantities   
  <VAR>x</VAR>, <VAR>y</VAR> with associated absolute errors <VAR>dx</VAR>,   
  <VAR>dy</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fexp_005fmult_005ferr_005fe10_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_exp_mult_err_e10_e</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>dx</VAR>, double <VAR>y</VAR>, double <VAR>dy</VAR>, 
    gsl_sf_result_e10 * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the product <EM>y \exp(x)</EM> for the quantities   
  <VAR>x</VAR>, <VAR>y</VAR> with associated absolute errors <VAR>dx</VAR>,   
  <VAR>dy</VAR> using the <CODE>gsl_sf_result_e10</CODE> type to return a result 
    with extended range. </P></DD></DL>
<HR>
<A name="Exponential-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fermi_002dDirac-Function" 
rel="next">Fermi-Dirac Function</A>, Previous: <A accessKey="p" href="#Exponential-Functions" 
rel="previous">Exponential Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Exponential-Integrals-1"></A>
<H3 class="section">7.17 Exponential Integrals</H3><A name="index-exponential-integrals"></A><A 
name="index-integrals_002c-exponential"></A>
<P>Information on the exponential integrals can be found in Abramowitz &amp; 
 Stegun, Chapter 5. These functions are declared in the header file 
<SAMP>gsl_sf_expint.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Exponential-Integral">Exponential 
            Integral</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Ei_0028x_0029">Ei(x)</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Ei_005f3_0028x_0029">Ei_3(x)</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Arctangent-Integral">Arctangent 
            Integral</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Exponential-Integral"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Ei_0028x_0029" 
rel="next">Ei(x)</A>, Up: <A accessKey="u" href="#Exponential-Integrals" 
rel="up">Exponential Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Exponential-Integral-1"></A>
<H4 class="subsection">7.17.1 Exponential Integral</H4><A name="index-E1_0028x_0029_002c-E2_0028x_0029_002c-Ei_0028x_0029"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fexpint_005fE1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_expint_E1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexpint_005fE1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_expint_E1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the exponential integral <EM>E_1(x)</EM>, </P>
  <DIV class="example"><PRE class="example">E_1(x) := \Re \int_1^\infty dt \exp(-xt)/t.
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexpint_005fE2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_expint_E2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexpint_005fE2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_expint_E2_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the second-order exponential integral   
  <EM>E_2(x)</EM>, </P>
  <DIV class="example"><PRE class="example">E_2(x) := \Re \int_1^\infty dt \exp(-xt)/t^2.
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fexpint_005fEn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_expint_En</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexpint_005fEn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_expint_En_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the exponential integral <EM>E_n(x)</EM> of order   
  <EM>n</EM>, </P>
  <DIV class="example"><PRE class="example">E_n(x) := \Re \int_1^\infty dt \exp(-xt)/t^n.
</PRE></DIV></DD></DL>
<HR>
<A name="Ei_0028x_0029"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Hyperbolic-Integrals" 
rel="next">Hyperbolic Integrals</A>, Previous: <A accessKey="p" href="#Exponential-Integral" 
rel="previous">Exponential Integral</A>, Up: <A accessKey="u" href="#Exponential-Integrals" 
rel="up">Exponential Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Ei_0028x_0029-1"></A>
<H4 class="subsection">7.17.2 Ei(x)</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fexpint_005fEi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_expint_Ei</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexpint_005fEi_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_expint_Ei_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the exponential integral <EM>Ei(x)</EM>, </P>
  <DIV class="example"><PRE class="example">Ei(x) := - PV(\int_{-x}^\infty dt \exp(-t)/t)
</PRE></DIV>
  <P>where <EM>PV</EM> denotes the principal value of the integral. </P></DD></DL>
<HR>
<A name="Hyperbolic-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Ei_005f3_0028x_0029" 
rel="next">Ei_3(x)</A>, Previous: <A accessKey="p" href="#Ei_0028x_0029" 
rel="previous">Ei(x)</A>, Up: <A accessKey="u" href="#Exponential-Integrals" 
rel="up">Exponential Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Hyperbolic-Integrals-1"></A>
<H4 class="subsection">7.17.3 Hyperbolic Integrals</H4><A name="index-hyperbolic-integrals"></A><A 
name="index-Shi_0028x_0029"></A><A name="index-Chi_0028x_0029"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fShi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_Shi</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fShi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_Shi_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the integral <EM>Shi(x) = \int_0^x dt   
  \sinh(t)/t</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fChi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_Chi</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fChi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_Chi_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the integral <EM>Chi(x) := \Re[ \gamma_E + \log(x) + 
    \int_0^x dt (\cosh(t)-1)/t] </EM>, where <EM>\gamma_E</EM> is the Euler   
  constant (available as the macro <CODE>M_EULER</CODE>). </P></DD></DL>
<HR>
<A name="Ei_005f3_0028x_0029"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Trigonometric-Integrals" 
rel="next">Trigonometric Integrals</A>, Previous: <A accessKey="p" href="#Hyperbolic-Integrals" 
rel="previous">Hyperbolic Integrals</A>, Up: <A accessKey="u" href="#Exponential-Integrals" 
rel="up">Exponential Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Ei_005f3_0028x_0029-1"></A>
<H4 class="subsection">7.17.4 Ei_3(x)</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fexpint_005f3"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_expint_3</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fexpint_005f3_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_expint_3_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the third-order exponential integral <EM>Ei_3(x) =   
  \int_0^xdt \exp(-t^3)</EM> for <EM>x &gt;= 0</EM>. </P></DD></DL>
<HR>
<A name="Trigonometric-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Arctangent-Integral" 
rel="next">Arctangent Integral</A>, Previous: <A accessKey="p" href="#Ei_005f3_0028x_0029" 
rel="previous">Ei_3(x)</A>, Up: <A accessKey="u" href="#Exponential-Integrals" 
rel="up">Exponential Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Trigonometric-Integrals-1"></A>
<H4 class="subsection">7.17.5 Trigonometric Integrals</H4><A name="index-trigonometric-integrals"></A><A 
name="index-Si_0028x_0029"></A><A name="index-Ci_0028x_0029"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fSi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_Si</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fSi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_Si_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Sine integral <EM>Si(x) = \int_0^x dt   
  \sin(t)/t</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fCi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_Ci</STRONG> <EM>(const double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fCi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_Ci_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Cosine integral <EM>Ci(x) = -\int_x^\infty dt   
  \cos(t)/t</EM> for <EM>x &gt; 0</EM>. </P></DD></DL>
<HR>
<A name="Arctangent-Integral"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Trigonometric-Integrals" 
rel="previous">Trigonometric Integrals</A>, Up: <A accessKey="u" href="#Exponential-Integrals" 
rel="up">Exponential Integrals</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Arctangent-Integral-1"></A>
<H4 class="subsection">7.17.6 Arctangent Integral</H4><A name="index-arctangent-integral"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fatanint"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_atanint</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fatanint_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_atanint_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Arctangent integral, which is defined as   
  <EM>AtanInt(x) = \int_0^x dt \arctan(t)/t</EM>. </P></DD></DL>
<HR>
<A name="Fermi_002dDirac-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Gamma-and-Beta-Functions" 
rel="next">Gamma and Beta Functions</A>, Previous: <A accessKey="p" href="#Exponential-Integrals" 
rel="previous">Exponential Integrals</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Fermi_002dDirac-Function-1"></A>
<H3 class="section">7.18 Fermi-Dirac Function</H3><A name="index-Fermi_002dDirac-function"></A>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_sf_fermi_dirac.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Incomplete-Fermi_002dDirac-Integrals">Incomplete 
            Fermi-Dirac Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Complete-Fermi_002dDirac-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Incomplete-Fermi_002dDirac-Integrals" 
rel="next">Incomplete Fermi-Dirac Integrals</A>, Up: <A accessKey="u" href="#Fermi_002dDirac-Function" 
rel="up">Fermi-Dirac Function</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Complete-Fermi_002dDirac-Integrals-1"></A>
<H4 class="subsection">7.18.1 Complete Fermi-Dirac Integrals</H4><A name="index-complete-Fermi_002dDirac-integrals"></A><A 
name="index-Fj_0028x_0029_002c-Fermi_002dDirac-integral"></A>
<P>The complete Fermi-Dirac integral <EM>F_j(x)</EM> is given by, </P>
<DIV class="example"><PRE class="example">F_j(x)   := (1/\Gamma(j+1)) \int_0^\infty dt (t^j / (\exp(t-x) + 1))
</PRE></DIV>
<P>Note that the Fermi-Dirac integral is sometimes defined without the 
 normalisation factor in other texts. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005fm1"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_m1</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005fm1_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_m1_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral with an index of   
  <EM>-1</EM>. This integral is given by <EM>F_{-1}(x) = e^x / (1 + e^x)</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f0"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_0</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_0_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral with an index of   
  <EM>0</EM>. This integral is given by <EM>F_0(x) = \ln(1 + e^x)</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f1"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_1</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_1_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral with an index of   
  <EM>1</EM>, <EM>F_1(x) = \int_0^\infty dt (t /(\exp(t-x)+1))</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f2"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_2</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_2_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral with an index of   
  <EM>2</EM>, <EM>F_2(x) = (1/2) \int_0^\infty dt (t^2 /(\exp(t-x)+1))</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005fint"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_int</STRONG> <EM>(int <VAR>j</VAR>, 
    double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005fint_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_int_e</STRONG> <EM>(int 
  <VAR>j</VAR>,   double <VAR>x</VAR>, gsl_sf_result * 
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral with an integer   
  index of <EM>j</EM>, <EM>F_j(x) = (1/\Gamma(j+1)) \int_0^\infty dt (t^j   
  /(\exp(t-x)+1))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005fmhalf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_mhalf</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005ffermi_005fdirac_005fmhalf_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_mhalf_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral   
  <EM>F_{-1/2}(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005fhalf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_half</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005ffermi_005fdirac_005fhalf_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_half_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral   
  <EM>F_{1/2}(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005f3half"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_3half</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005ffermi_005fdirac_005f3half_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_3half_e</STRONG> <EM>(double   
  <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the complete Fermi-Dirac integral   
  <EM>F_{3/2}(x)</EM>. </P></DD></DL>
<HR>
<A name="Incomplete-Fermi_002dDirac-Integrals"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Complete-Fermi_002dDirac-Integrals" 
rel="previous">Complete Fermi-Dirac Integrals</A>, Up: <A accessKey="u" href="#Fermi_002dDirac-Function" 
rel="up">Fermi-Dirac Function</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Incomplete-Fermi_002dDirac-Integrals-1"></A>
<H4 class="subsection">7.18.2 Incomplete Fermi-Dirac Integrals</H4><A name="index-incomplete-Fermi_002dDirac-integral"></A><A 
name="index-Fj_0028x_002cb_0029_002c-incomplete-Fermi_002dDirac-integral"></A>
<P>The incomplete Fermi-Dirac integral <EM>F_j(x,b)</EM> is given by, </P>
<DIV class="example"><PRE class="example">F_j(x,b)   := (1/\Gamma(j+1)) \int_b^\infty dt (t^j / (\Exp(t-x) + 1))
</PRE></DIV>
<DL>
  <DT><A name="index-gsl_005fsf_005ffermi_005fdirac_005finc_005f0"></A>Function: 
    <EM>double</EM> <STRONG>gsl_sf_fermi_dirac_inc_0</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005ffermi_005fdirac_005finc_005f0_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_fermi_dirac_inc_0_e</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>b</VAR>, gsl_sf_result * 
<VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the incomplete Fermi-Dirac integral with an index of 
    zero, <EM>F_0(x,b) = \ln(1 + e^{b-x}) - (b-x)</EM>. </P></DD></DL>
<HR>
<A name="Gamma-and-Beta-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Gegenbauer-Functions" 
rel="next">Gegenbauer Functions</A>, Previous: <A accessKey="p" href="#Fermi_002dDirac-Function" 
rel="previous">Fermi-Dirac Function</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Gamma-and-Beta-Functions-1"></A>
<H3 class="section">7.19 Gamma and Beta Functions</H3>
<P>This following routines compute the gamma and beta functions in their full 
 and incomplete forms, as well as various kinds of factorials. The functions 
 described in this section are declared in the header file 
<SAMP>gsl_sf_gamma.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Gamma-Functions">Gamma 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Factorials">Factorials</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Beta-Functions">Beta 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Incomplete-Beta-Function">Incomplete 
            Beta Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Gamma-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Factorials" 
rel="next">Factorials</A>, Up: <A accessKey="u" href="#Gamma-and-Beta-Functions" 
rel="up">Gamma and Beta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Gamma-Functions-1"></A>
<H4 class="subsection">7.19.1 Gamma Functions</H4><A name="index-gamma-functions"></A>
<P>The Gamma function is defined by the following integral, </P>
<DIV class="example"><PRE class="example">\Gamma(x) = \int_0^\infty dt  t^{x-1} \exp(-t)
</PRE></DIV>
<P>It is related to the factorial function by <EM>\Gamma(n)=(n-1)!</EM> for 
 positive integer <EM>n</EM>. Further information on the Gamma function can be 
 found in Abramowitz &amp; Stegun, Chapter 6. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fgamma"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gamma</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgamma_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_gamma_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Gamma function <EM>\Gamma(x)</EM>, subject to   
  <EM>x</EM> not being a negative integer or zero. The function is computed   
  using the real Lanczos method. The maximum value of <EM>x</EM> such that   
  <EM>\Gamma(x)</EM> is not considered an overflow is given by the macro   
  <CODE>GSL_SF_GAMMA_XMAX</CODE> and is 171.0. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flngamma"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lngamma</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flngamma_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lngamma_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-Gamma-function"></A>
  <P>These routines compute the logarithm of the Gamma function,   
  <EM>\log(\Gamma(x))</EM>, subject to <EM>x</EM> not being a negative integer   
  or zero. For <EM>x&lt;0</EM> the real part of <EM>\log(\Gamma(x))</EM> is   
  returned, which is equivalent to <EM>\log(|\Gamma(x)|)</EM>. The function is   
  computed using the real Lanczos method. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flngamma_005fsgn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_lngamma_sgn_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result_lg</VAR>, double * <VAR>sgn</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the sign of the gamma function and the logarithm of   
  its magnitude, subject to <EM>x</EM> not being a negative integer or zero. The 
    function is computed using the real Lanczos method. The value of the gamma   
  function and its error can be reconstructed using the relation <EM>\Gamma(x) = 
    sgn * \exp(result\_lg)</EM>, taking into account the two components of   
  <VAR>result_lg</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fgammastar"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gammastar</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgammastar_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_gammastar_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-Regulated-Gamma-function"></A>
  <P>These routines compute the regulated Gamma Function <EM>\Gamma^*(x)</EM>   
  for <EM>x &gt; 0</EM>. The regulated gamma function is given by, </P>
  <DIV class="example"><PRE class="example">\Gamma^*(x) = \Gamma(x)/(\sqrt{2\pi} x^{(x-1/2)} \exp(-x))
            = (1 + (1/12x) + ...)  for x \to \infty
</PRE></DIV>
  <P>and is a useful suggestion of Temme. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fgammainv"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gammainv</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgammainv_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_gammainv_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-Reciprocal-Gamma-function"></A>
  <P>These routines compute the reciprocal of the gamma function,   
  <EM>1/\Gamma(x)</EM> using the real Lanczos method. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flngamma_005fcomplex_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_lngamma_complex_e</STRONG> <EM>(double   
  <VAR>zr</VAR>, double <VAR>zi</VAR>, gsl_sf_result * <VAR>lnr</VAR>,   
  gsl_sf_result * <VAR>arg</VAR>)</EM></DT>
  <DD><A name="index-Complex-Gamma-function"></A>
  <P>This routine computes <EM>\log(\Gamma(z))</EM> for complex <EM>z=z_r+i   
  z_i</EM> and <EM>z</EM> not a negative integer or zero, using the complex   
  Lanczos method. The returned parameters are <EM>lnr = \log|\Gamma(z)|</EM> and 
    <EM>arg = \arg(\Gamma(z))</EM> in <EM>(-\pi,\pi]</EM>. Note that the phase   
  part (<VAR>arg</VAR>) is not well-determined when <EM>|z|</EM> is very large,  
   due to inevitable roundoff in restricting to <EM>(-\pi,\pi]</EM>. This will   
  result in a <CODE>GSL_ELOSS</CODE> error when it occurs. The absolute value   
  part (<VAR>lnr</VAR>), however, never suffers from loss of precision. 
</P></DD></DL>
<HR>
<A name="Factorials"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Pochhammer-Symbol" 
rel="next">Pochhammer Symbol</A>, Previous: <A accessKey="p" href="#Gamma-Functions" 
rel="previous">Gamma Functions</A>, Up: <A accessKey="u" href="#Gamma-and-Beta-Functions" 
rel="up">Gamma and Beta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Factorials-1"></A>
<H4 class="subsection">7.19.2 Factorials</H4><A name="index-factorial"></A>
<P>Although factorials can be computed from the Gamma function, using the 
 relation <EM>n! = \Gamma(n+1)</EM> for non-negative integer <EM>n</EM>, it is 
 usually more efficient to call the functions in this section, particularly for 
 small values of <EM>n</EM>, whose factorial values are maintained in hardcoded 
 tables. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005ffact"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_fact</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ffact_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_fact_e</STRONG> <EM>(unsigned int <VAR>n</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-factorial-1"></A>
  <P>These routines compute the factorial <EM>n!</EM>. The factorial is related  
   to the Gamma function by <EM>n! = \Gamma(n+1)</EM>. The maximum value of   
  <EM>n</EM> such that <EM>n!</EM> is not considered an overflow is given by the 
    macro <CODE>GSL_SF_FACT_NMAX</CODE> and is 170. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fdoublefact"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_doublefact</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fdoublefact_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_doublefact_e</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-double-factorial"></A>
  <P>These routines compute the double factorial <EM>n!! = n(n-2)(n-4)   
  \dots</EM>. The maximum value of <EM>n</EM> such that <EM>n!!</EM> is not   
  considered an overflow is given by the macro   
  <CODE>GSL_SF_DOUBLEFACT_NMAX</CODE> and is 297. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flnfact"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lnfact</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flnfact_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lnfact_e</STRONG> <EM>(unsigned int <VAR>n</VAR>, 
  gsl_sf_result   * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-factorial"></A>
  <P>These routines compute the logarithm of the factorial of <VAR>n</VAR>,   
  <EM>\log(n!)</EM>. The algorithm is faster than computing   
  <EM>\ln(\Gamma(n+1))</EM> via <CODE>gsl_sf_lngamma</CODE> for <EM>n &lt;   
  170</EM>, but defers for larger <VAR>n</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flndoublefact"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lndoublefact</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flndoublefact_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lndoublefact_e</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-double-factorial"></A>
  <P>These routines compute the logarithm of the double factorial of   
  <VAR>n</VAR>, <EM>\log(n!!)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fchoose"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_choose</STRONG> <EM>(unsigned int <VAR>n</VAR>, 
  unsigned int   <VAR>m</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fchoose_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_choose_e</STRONG> <EM>(unsigned int <VAR>n</VAR>, 
  unsigned int   <VAR>m</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-combinatorial-factor-C_0028m_002cn_0029"></A>
  <P>These routines compute the combinatorial factor <CODE>n choose 
  m</CODE><EM>= n!/(m!(n-m)!)</EM> </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flnchoose"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lnchoose</STRONG> <EM>(unsigned int 
  <VAR>n</VAR>, unsigned int   <VAR>m</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flnchoose_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lnchoose_e</STRONG> <EM>(unsigned int <VAR>n</VAR>, 
  unsigned   int <VAR>m</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-combinatorial-factor-C_0028m_002cn_0029"></A>
  <P>These routines compute the logarithm of <CODE>n choose m</CODE>. This is   
  equivalent to the sum <EM>\log(n!) - \log(m!) - \log((n-m)!)</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ftaylorcoeff"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_taylorcoeff</STRONG> <EM>(int <VAR>n</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ftaylorcoeff_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_taylorcoeff_e</STRONG> <EM>(int <VAR>n</VAR>, 
  double   <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-Taylor-coefficients_002c-computation-of"></A>
  <P>These routines compute the Taylor coefficient <EM>x^n / n!</EM> for <EM>x   
  &gt;= 0</EM>, <EM>n &gt;= 0</EM>. </P></DD></DL>
<HR>
<A name="Pochhammer-Symbol"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Incomplete-Gamma-Functions" 
rel="next">Incomplete Gamma Functions</A>, Previous: <A accessKey="p" href="#Factorials" 
rel="previous">Factorials</A>, Up: <A accessKey="u" href="#Gamma-and-Beta-Functions" 
rel="up">Gamma and Beta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Pochhammer-Symbol-1"></A>
<H4 class="subsection">7.19.3 Pochhammer Symbol</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fpoch"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_poch</STRONG> <EM>(double <VAR>a</VAR>, double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpoch_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_poch_e</STRONG> <EM>(double <VAR>a</VAR>, double 
  <VAR>x</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-Pochhammer-symbol"></A><A name="index-Apell-symbol_002c-see-Pochhammer-symbol"></A>
  <P>These routines compute the Pochhammer symbol <EM>(a)_x = \Gamma(a +   
  x)/\Gamma(a)</EM>. The Pochhammer symbol is also known as the Apell symbol and 
    sometimes written as <EM>(a,x)</EM>. When <EM>a</EM> and <EM>a+x</EM> are   
  negative integers or zero, the limiting value of the ratio is returned.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flnpoch"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lnpoch</STRONG> <EM>(double <VAR>a</VAR>, double 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flnpoch_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lnpoch_e</STRONG> <EM>(double <VAR>a</VAR>, double  
   <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-Pochhammer-symbol"></A>
  <P>These routines compute the logarithm of the Pochhammer symbol,   
  <EM>\log((a)_x) = \log(\Gamma(a + x)/\Gamma(a))</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flnpoch_005fsgn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_lnpoch_sgn_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>, double *   
  <VAR>sgn</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the sign of the Pochhammer symbol and the logarithm  
   of its magnitude. The computed parameters are <EM>result = \log(|(a)_x|)</EM> 
    with a corresponding error term, and <EM>sgn = \sgn((a)_x)</EM> where   
  <EM>(a)_x = \Gamma(a + x)/\Gamma(a)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fpochrel"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_pochrel</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpochrel_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_pochrel_e</STRONG> <EM>(double <VAR>a</VAR>, double 
    <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-relative-Pochhammer-symbol"></A>
  <P>These routines compute the relative Pochhammer symbol <EM>((a)_x -   
  1)/x</EM> where <EM>(a)_x = \Gamma(a + x)/\Gamma(a)</EM>. </P></DD></DL>
<HR>
<A name="Incomplete-Gamma-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Beta-Functions" 
rel="next">Beta Functions</A>, Previous: <A accessKey="p" href="#Pochhammer-Symbol" 
rel="previous">Pochhammer Symbol</A>, Up: <A accessKey="u" href="#Gamma-and-Beta-Functions" 
rel="up">Gamma and Beta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Incomplete-Gamma-Functions-1"></A>
<H4 class="subsection">7.19.4 Incomplete Gamma Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fgamma_005finc"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gamma_inc</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgamma_005finc_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gamma_inc_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-non_002dnormalized-incomplete-Gamma-function"></A><A name="index-unnormalized-incomplete-Gamma-function"></A>
  <P>These functions compute the unnormalized incomplete Gamma Function   
  <EM>\Gamma(a,x) = \int_x^\infty dt t^{a-1} \exp(-t)</EM> for <EM>a</EM> real   
  and <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fgamma_005finc_005fQ"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_gamma_inc_Q</STRONG> <EM>(double <VAR>a</VAR>,  
   double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgamma_005finc_005fQ_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gamma_inc_Q_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-incomplete-Gamma-function"></A>
  <P>These routines compute the normalized incomplete Gamma Function <EM>Q(a,x)  
   = 1/\Gamma(a) \int_x^\infty dt t^{a-1} \exp(-t)</EM> for <EM>a &gt; 0</EM>,   
  <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fgamma_005finc_005fP"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_gamma_inc_P</STRONG> <EM>(double <VAR>a</VAR>,  
   double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgamma_005finc_005fP_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gamma_inc_P_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-complementary-incomplete-Gamma-function"></A>
  <P>These routines compute the complementary normalized incomplete Gamma   
  Function <EM>P(a,x) = 1 - Q(a,x) = 1/\Gamma(a) \int_0^x dt t^{a-1}   
  \exp(-t)</EM> for <EM>a &gt; 0</EM>, <EM>x &gt;= 0</EM>. </P>
  <P>Note that Abramowitz &amp; Stegun call <EM>P(a,x)</EM> the incomplete gamma 
    function (section 6.5). </P></DD></DL>
<HR>
<A name="Beta-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Incomplete-Beta-Function" 
rel="next">Incomplete Beta Function</A>, Previous: <A accessKey="p" href="#Incomplete-Gamma-Functions" 
rel="previous">Incomplete Gamma Functions</A>, Up: <A accessKey="u" href="#Gamma-and-Beta-Functions" 
rel="up">Gamma and Beta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Beta-Functions-1"></A>
<H4 class="subsection">7.19.5 Beta Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fbeta"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_beta</STRONG> <EM>(double <VAR>a</VAR>, double   
  <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbeta_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_beta_e</STRONG> <EM>(double <VAR>a</VAR>, double 
  <VAR>b</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-Beta-function"></A>
  <P>These routines compute the Beta Function, <EM>B(a,b) =   
  \Gamma(a)\Gamma(b)/\Gamma(a+b)</EM> subject to <EM>a</EM> and <EM>b</EM> not   
  being negative integers. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flnbeta"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lnbeta</STRONG> <EM>(double <VAR>a</VAR>, double 
    <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flnbeta_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lnbeta_e</STRONG> <EM>(double <VAR>a</VAR>, double  
   <VAR>b</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-Beta-function"></A>
  <P>These routines compute the logarithm of the Beta Function,   
  <EM>\log(B(a,b))</EM> subject to <EM>a</EM> and <EM>b</EM> not being negative  
   integers. </P></DD></DL>
<HR>
<A name="Incomplete-Beta-Function"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Beta-Functions" 
rel="previous">Beta Functions</A>, Up: <A accessKey="u" href="#Gamma-and-Beta-Functions" 
rel="up">Gamma and Beta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Incomplete-Beta-Function-1"></A>
<H4 class="subsection">7.19.6 Incomplete Beta Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fbeta_005finc"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_beta_inc</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fbeta_005finc_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_beta_inc_e</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>x</VAR>, gsl_sf_result * 
  <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-incomplete-Beta-function_002c-normalized"></A><A name="index-normalized-incomplete-Beta-function"></A><A 
  name="index-Beta-function_002c-incomplete-normalized"></A>
  <P>These routines compute the normalized incomplete Beta function   
  <EM>I_x(a,b)=B_x(a,b)/B(a,b)</EM> where <EM>B_x(a,b) = \int_0^x t^{a-1}   
  (1-t)^{b-1} dt</EM> for <EM>0 &lt;= x &lt;= 1</EM>. For <EM>a &gt; 0</EM>,   
  <EM>b &gt; 0</EM> the value is computed using a continued fraction expansion.  
   For all other values it is computed using the relation <EM>I_x(a,b,x) = (1/a) 
    x^a 2F1(a,1-b,a+1,x)/B(a,b)</EM>. </P></DD></DL>
<HR>
<A name="Gegenbauer-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Hypergeometric-Functions" 
rel="next">Hypergeometric Functions</A>, Previous: <A accessKey="p" href="#Gamma-and-Beta-Functions" 
rel="previous">Gamma and Beta Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Gegenbauer-Functions-1"></A>
<H3 class="section">7.20 Gegenbauer Functions</H3><A name="index-Gegenbauer-functions"></A>
<P>The Gegenbauer polynomials are defined in Abramowitz &amp; Stegun, Chapter 
 22, where they are known as Ultraspherical polynomials. The functions described 
 in this section are declared in the header file 
<SAMP>gsl_sf_gegenbauer.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005f1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gegenpoly_1</STRONG> <EM>(double 
  <VAR>lambda</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005f2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gegenpoly_2</STRONG> <EM>(double 
  <VAR>lambda</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005f3"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gegenpoly_3</STRONG> <EM>(double 
  <VAR>lambda</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005f1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gegenpoly_1_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005f2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gegenpoly_2_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005f3_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gegenpoly_3_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions evaluate the Gegenbauer polynomials   
  <EM>C^{(\lambda)}_n(x)</EM> using explicit representations for <EM>n =1, 2,   
  3</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005fn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_gegenpoly_n</STRONG> <EM>(int <VAR>n</VAR>, 
  double   <VAR>lambda</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005fn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gegenpoly_n_e</STRONG> <EM>(int <VAR>n</VAR>,   
  double <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions evaluate the Gegenbauer polynomial   
  <EM>C^{(\lambda)}_n(x)</EM> for a specific value of <VAR>n</VAR>,   
  <VAR>lambda</VAR>, <VAR>x</VAR> subject to <EM>\lambda &gt; -1/2</EM>, <EM>n   
  &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fgegenpoly_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_gegenpoly_array</STRONG> <EM>(int <VAR>nmax</VAR>, 
    double <VAR>lambda</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This function computes an array of Gegenbauer polynomials   
  <EM>C^{(\lambda)}_n(x)</EM> for <EM>n = 0, 1, 2, \dots, nmax</EM>, subject to  
   <EM>\lambda &gt; -1/2</EM>, <EM>nmax &gt;= 0</EM>. </P></DD></DL>
<HR>
<A name="Hypergeometric-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Laguerre-Functions" 
rel="next">Laguerre Functions</A>, Previous: <A accessKey="p" href="#Gegenbauer-Functions" 
rel="previous">Gegenbauer Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Hypergeometric-Functions-1"></A>
<H3 class="section">7.21 Hypergeometric Functions</H3><A name="index-hypergeometric-functions"></A><A 
name="index-confluent-hypergeometric-functions"></A>
<P>Hypergeometric functions are described in Abramowitz &amp; Stegun, Chapters 
 13 and 15. These functions are declared in the header file 
<SAMP>gsl_sf_hyperg.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f0F1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hyperg_0F1</STRONG> <EM>(double <VAR>c</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f0F1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_0F1_e</STRONG> <EM>(double <VAR>c</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the hypergeometric function <EM>0F1(c,x)</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f1F1_005fint"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_hyperg_1F1_int</STRONG> <EM>(int <VAR>m</VAR>,  
   int <VAR>n</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f1F1_005fint_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_hyperg_1F1_int_e</STRONG> <EM>(int <VAR>m</VAR>,  
   int <VAR>n</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the confluent hypergeometric function <EM>1F1(m,n,x) 
    = M(m,n,x)</EM> for integer parameters <VAR>m</VAR>, <VAR>n</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f1F1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hyperg_1F1</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f1F1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_1F1_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>b</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the confluent hypergeometric function <EM>1F1(a,b,x) 
    = M(a,b,x)</EM> for general parameters <VAR>a</VAR>, <VAR>b</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005fU_005fint"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_hyperg_U_int</STRONG> <EM>(int <VAR>m</VAR>,   
  int <VAR>n</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005fU_005fint_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_U_int_e</STRONG> <EM>(int <VAR>m</VAR>, int 
    <VAR>n</VAR>, double <VAR>x</VAR>, gsl_sf_result * 
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the confluent hypergeometric function   
  <EM>U(m,n,x)</EM> for integer parameters <VAR>m</VAR>, <VAR>n</VAR>. 
</P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fhyperg_005fU_005fint_005fe10_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_U_int_e10_e</STRONG> <EM>(int <VAR>m</VAR>, 
    int <VAR>n</VAR>, double <VAR>x</VAR>, gsl_sf_result_e10 *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the confluent hypergeometric function   
  <EM>U(m,n,x)</EM> for integer parameters <VAR>m</VAR>, <VAR>n</VAR> using the  
   <CODE>gsl_sf_result_e10</CODE> type to return a result with extended range.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005fU"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hyperg_U</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005fU_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_hyperg_U_e</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>x</VAR>, gsl_sf_result * 
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the confluent hypergeometric function   
  <EM>U(a,b,x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005fU_005fe10_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_U_e10_e</STRONG> <EM>(double <VAR>a</VAR>,  
   double <VAR>b</VAR>, double <VAR>x</VAR>, gsl_sf_result_e10 *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the confluent hypergeometric function   
  <EM>U(a,b,x)</EM> using the <CODE>gsl_sf_result_e10</CODE> type to return a   
  result with extended range. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hyperg_2F1</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>c</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_2F1_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>b</VAR>, double <VAR>c</VAR>, double <VAR>x</VAR>, gsl_sf_result * 
    <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Gauss hypergeometric function <EM>2F1(a,b,c,x) = 
    F(a,b,c,x)</EM> for <EM>|x| &lt; 1</EM>. </P>
  <P>If the arguments <EM>(a,b,c,x)</EM> are too close to a singularity then the 
    function can return the error code <CODE>GSL_EMAXITER</CODE> when the series 
    approximation converges too slowly. This occurs in the region of 
  <EM>x=1</EM>,   <EM>c - a - b = m</EM> for integer m. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F1_005fconj"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_hyperg_2F1_conj</STRONG> <EM>(double   
  <VAR>aR</VAR>, double <VAR>aI</VAR>, double <VAR>c</VAR>, double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F1_005fconj_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_hyperg_2F1_conj_e</STRONG> <EM>(double   
  <VAR>aR</VAR>, double <VAR>aI</VAR>, double <VAR>c</VAR>, double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Gauss hypergeometric function <EM>2F1(a_R + i   
  a_I, a_R - i a_I, c, x)</EM> with complex parameters for <EM>|x| &lt; 1</EM>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F1_005frenorm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_hyperg_2F1_renorm</STRONG> <EM>(double   
  <VAR>a</VAR>, double <VAR>b</VAR>, double <VAR>c</VAR>, double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fhyperg_005f2F1_005frenorm_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_2F1_renorm_e</STRONG> <EM>(double   
  <VAR>a</VAR>, double <VAR>b</VAR>, double <VAR>c</VAR>, double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the renormalized Gauss hypergeometric function   
  <EM>2F1(a,b,c,x) / \Gamma(c)</EM> for <EM>|x| &lt; 1</EM>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005fhyperg_005f2F1_005fconj_005frenorm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_hyperg_2F1_conj_renorm</STRONG> <EM>(double   
  <VAR>aR</VAR>, double <VAR>aI</VAR>, double <VAR>c</VAR>, double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fhyperg_005f2F1_005fconj_005frenorm_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_hyperg_2F1_conj_renorm_e</STRONG> <EM>(double   
  <VAR>aR</VAR>, double <VAR>aI</VAR>, double <VAR>c</VAR>, double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the renormalized Gauss hypergeometric function   
  <EM>2F1(a_R + i a_I, a_R - i a_I, c, x) / \Gamma(c)</EM> for <EM>|x| &lt;   
  1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hyperg_2F0</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>b</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhyperg_005f2F0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_hyperg_2F0_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>b</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the hypergeometric function <EM>2F0(a,b,x)</EM>. The 
    series representation is a divergent hypergeometric series. However, for 
  <EM>x   &lt; 0</EM> we have <EM>2F0(a,b,x) = (-1/x)^a 
  U(a,1+a-b,-1/x)</EM></P></DD></DL>
<HR>
<A name="Laguerre-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Lambert-W-Functions" 
rel="next">Lambert W Functions</A>, Previous: <A accessKey="p" href="#Hypergeometric-Functions" 
rel="previous">Hypergeometric Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Laguerre-Functions-1"></A>
<H3 class="section">7.22 Laguerre Functions</H3><A name="index-Laguerre-functions"></A><A 
name="index-confluent-hypergeometric-function"></A>
<P>The generalized Laguerre polynomials are defined in terms of confluent 
 hypergeometric functions as <EM>L^a_n(x) = ((a+1)_n / n!) 1F1(-n,a+1,x)</EM>, 
 and are sometimes referred to as the associated Laguerre polynomials. They are 
 related to the plain Laguerre polynomials <EM>L_n(x)</EM> by <EM>L^0_n(x) = 
 L_n(x)</EM> and <EM>L^k_n(x) = (-1)^k (d^k/dx^k) L_(n+k)(x)</EM>. For more 
 information see Abramowitz &amp; Stegun, Chapter 22. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_sf_laguerre.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005flaguerre_005f1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_laguerre_1</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flaguerre_005f2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_laguerre_2</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flaguerre_005f3"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_laguerre_3</STRONG> <EM>(double <VAR>a</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flaguerre_005f1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_laguerre_1_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flaguerre_005f2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_laguerre_2_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flaguerre_005f3_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_laguerre_3_e</STRONG> <EM>(double <VAR>a</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines evaluate the generalized Laguerre polynomials   
  <EM>L^a_1(x)</EM>, <EM>L^a_2(x)</EM>, <EM>L^a_3(x)</EM> using explicit   
  representations. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flaguerre_005fn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_laguerre_n</STRONG> <EM>(const int <VAR>n</VAR>, 
  const double   <VAR>a</VAR>, const double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flaguerre_005fn_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_laguerre_n_e</STRONG> <EM>(int <VAR>n</VAR>,   
  double <VAR>a</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines evaluate the generalized Laguerre polynomials   
  <EM>L^a_n(x)</EM> for <EM>a &gt; -1</EM>, <EM>n &gt;= 0</EM>. </P></DD></DL>
<HR>
<A name="Lambert-W-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Legendre-Functions-and-Spherical-Harmonics" 
rel="next">Legendre Functions and Spherical Harmonics</A>, Previous: <A 
accessKey="p" href="#Laguerre-Functions" 
rel="previous">Laguerre Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Lambert-W-Functions-1"></A>
<H3 class="section">7.23 Lambert W Functions</H3><A 
name="index-W-function"></A><A name="index-Lambert-function"></A>
<P>Lambert’s W functions, <EM>W(x)</EM>, are defined to be solutions of the 
 equation <EM>W(x) \exp(W(x)) = x</EM>. This function has multiple branches for 
<EM>x &lt; 0</EM>; however, it has only two real-valued branches. We define 
<EM>W_0(x)</EM> to be the principal branch, where <EM>W &gt; -1</EM> for <EM>x 
&lt; 0</EM>, and <EM>W_{-1}(x)</EM> to be the other real branch, where <EM>W 
&lt; -1</EM> for <EM>x &lt; 0</EM>. The Lambert functions are declared in the 
 header file <SAMP>gsl_sf_lambert.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005flambert_005fW0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lambert_W0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flambert_005fW0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_lambert_W0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These compute the principal branch of the Lambert W function,   
  <EM>W_0(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flambert_005fWm1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lambert_Wm1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flambert_005fWm1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_lambert_Wm1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These compute the secondary real-valued branch of the Lambert W function,   
  <EM>W_{-1}(x)</EM>. </P></DD></DL>
<HR>
<A name="Legendre-Functions-and-Spherical-Harmonics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Logarithm-and-Related-Functions" 
rel="next">Logarithm and Related Functions</A>, Previous: <A accessKey="p" href="#Lambert-W-Functions" 
rel="previous">Lambert W Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Legendre-Functions-and-Spherical-Harmonics-1"></A>
<H3 class="section">7.24 Legendre Functions and Spherical Harmonics</H3><A name="index-Legendre-polynomials"></A><A 
name="index-Legendre-functions"></A><A name="index-spherical-harmonics"></A><A 
name="index-conical-functions"></A><A name="index-hyperbolic-space"></A>
<P>The Legendre Functions and Legendre Polynomials are described in Abramowitz 
&amp; Stegun, Chapter 8. These functions are declared in the header file 
<SAMP>gsl_sf_legendre.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Legendre-Polynomials">Legendre 
            Polynomials</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Conical-Functions">Conical 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Legendre-Polynomials"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics" 
rel="next">Associated Legendre Polynomials and Spherical Harmonics</A>, Up: <A 
accessKey="u" href="#Legendre-Functions-and-Spherical-Harmonics" 
rel="up">Legendre Functions and Spherical Harmonics</A> &nbsp; [<A title="Index" 
href="#Function-Index" rel="index">Index</A>]</P></DIV><A 
name="Legendre-Polynomials-1"></A>
<H4 class="subsection">7.24.1 Legendre Polynomials</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fP1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_P1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fP2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_P2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fP3"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_P3</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fP1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_P1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fP2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_P2_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fP3_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_P3_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions evaluate the Legendre polynomials <EM>P_l(x)</EM> using   
  explicit representations for <EM>l=1, 2, 3</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fPl"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_Pl</STRONG> <EM>(int <VAR>l</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fPl_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Pl_e</STRONG> <EM>(int <VAR>l</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions evaluate the Legendre polynomial <EM>P_l(x)</EM> for a   
  specific value of <VAR>l</VAR>, <VAR>x</VAR> subject to <EM>l &gt;= 0</EM>,   
  <EM>|x| &lt;= 1</EM> </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fPl_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Pl_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fPl_005fderiv_005farray"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_legendre_Pl_deriv_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, double <VAR>x</VAR>, double <VAR>result_array</VAR>[], double 
    <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions compute arrays of Legendre polynomials <EM>P_l(x)</EM> and  
   derivatives <EM>dP_l(x)/dx</EM>, for <EM>l = 0, \dots, lmax</EM>, <EM>|x|   
  &lt;= 1</EM> </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fQ0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_Q0</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fQ0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Q0_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Legendre function <EM>Q_0(x)</EM> for <EM>x &gt; 
    -1</EM>, <EM>x != 1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fQ1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_Q1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fQ1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Q1_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Legendre function <EM>Q_1(x)</EM> for <EM>x &gt; 
    -1</EM>, <EM>x != 1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fQl"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_legendre_Ql</STRONG> <EM>(int <VAR>l</VAR>, 
  double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fQl_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Ql_e</STRONG> <EM>(int <VAR>l</VAR>,   
  double <VAR>x</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Legendre function <EM>Q_l(x)</EM> for <EM>x &gt; 
    -1</EM>, <EM>x != 1</EM> and <EM>l &gt;= 0</EM>. </P></DD></DL>
<HR>
<A name="Associated-Legendre-Polynomials-and-Spherical-Harmonics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Conical-Functions" 
rel="next">Conical Functions</A>, Previous: <A accessKey="p" href="#Legendre-Polynomials" 
rel="previous">Legendre Polynomials</A>, Up: <A accessKey="u" href="#Legendre-Functions-and-Spherical-Harmonics" 
rel="up">Legendre Functions and Spherical Harmonics</A> &nbsp; [<A title="Index" 
href="#Function-Index" rel="index">Index</A>]</P></DIV><A 
name="Associated-Legendre-Polynomials-and-Spherical-Harmonics-1"></A>
<H4 class="subsection">7.24.2 Associated Legendre Polynomials and Spherical 
 Harmonics</H4>
<P>The following functions compute the associated Legendre polynomials 
<EM>P_l^m(x)</EM> which are solutions of the differential equation </P>
<DIV class="example"><PRE class="example">(1 - x^2) d^2 P_l^m(x) / dx^2 P_l^m(x) - 2x d/dx P_l^m(x) +
( l(l+1) - m^2 / (1 - x^2) ) P_l^m(x) = 0
</PRE></DIV>
<P>where the degree <EM>l</EM> and order <EM>m</EM> satisfy <EM>0 \le l</EM> and 
<EM>0 \le m \le l</EM>. The functions <EM>P_l^m(x)</EM> grow combinatorially 
 with <EM>l</EM> and can overflow for <EM>l</EM> larger than about 150. 
 Alternatively, one may calculate normalized associated Legendre polynomials. 
 There are a number of different normalization conventions, and these functions 
 can be stably computed up to degree and order 2700. The following 
normalizations  are provided: </P>
<DL compact="">
  <DT><CODE>Schmidt semi-normalization</CODE></DT>
  <DD>
  <P>Schmidt semi-normalized associated Legendre polynomials are often used in   
  the magnetics community and are defined as </P>
  <DIV class="example"><PRE class="example">S_l^0(x) = P_l^0(x)
S_l^m(x) = (-1)^m \sqrt((2(l-m)! / (l+m)!)) P_l^m(x), m &gt; 0 
</PRE></DIV>
  <P>The factor of <EM>(-1)^m</EM> is called the Condon-Shortley phase factor   
  and can be excluded if desired by setting the parameter <CODE>csphase =   
  1</CODE> in the functions below. </P></DD>
  <DT><CODE>Spherical Harmonic Normalization</CODE></DT>
  <DD>
  <P>The associated Legendre polynomials suitable for calculating spherical   
  harmonics are defined as </P>
  <DIV class="example"><PRE class="example">Y_l^m(x) = (-1)^m \sqrt((2l + 1) * (l-m)! / (4 \pi) / (l+m)!) P_l^m(x)
</PRE></DIV>
  <P>where again the phase factor <EM>(-1)^m</EM> can be included or excluded if 
    desired. </P></DD>
  <DT><CODE>Full Normalization</CODE></DT>
  <DD>
  <P>The fully normalized associated Legendre polynomials are defined as </P>
  <DIV class="example"><PRE class="example">N_l^m(x) = (-1)^m \sqrt((l + 1/2) * (l-m)! / (l+m)!) P_l^m(x)
</PRE></DIV>
  <P>and have the property </P>
  <DIV class="example"><PRE class="example">\int_(-1)^1 ( N_l^m(x) )^2 dx = 1
</PRE></DIV></DD></DL>
<P>The normalized associated Legendre routines below use a recurrence relation 
 which is stable up to a degree and order of about 2700. Beyond this, the 
 computed functions could suffer from underflow leading to incorrect results. 
 Routines are provided to compute first and second derivatives 
<EM>dP_l^m(x)/dx</EM> and <EM>d^2 P_l^m(x)/dx^2</EM> as well as their alternate 
 versions <EM>d P_l^m(\cos{\theta})/d\theta</EM> and <EM>d^2 
 P_l^m(\cos{\theta})/d\theta^2</EM>. While there is a simple scaling 
relationship  between the two forms, the derivatives involving <EM>\theta</EM> 
are heavily  used in spherical harmonic expansions and so these routines are 
also provided. </P>
<P>In the functions below, a parameter of type <CODE>gsl_sf_legendre_t</CODE> 
 specifies the type of normalization to use. The possible values are </P>
<DL compact="">
  <DT><CODE>GSL_SF_LEGENDRE_NONE</CODE></DT>
  <DD>
  <P>This specifies the computation of the unnormalized associated Legendre   
  polynomials <EM>P_l^m(x)</EM>. </P></DD>
  <DT><CODE>GSL_SF_LEGENDRE_SCHMIDT</CODE></DT>
  <DD>
  <P>This specifies the computation of the Schmidt semi-normalized associated   
  Legendre polynomials <EM>S_l^m(x)</EM>. </P></DD>
  <DT><CODE>GSL_SF_LEGENDRE_SPHARM</CODE></DT>
  <DD>
  <P>This specifies the computation of the spherical harmonic associated   
  Legendre polynomials <EM>Y_l^m(x)</EM>. </P></DD>
  <DT><CODE>GSL_SF_LEGENDRE_FULL</CODE></DT>
  <DD>
  <P>This specifies the computation of the fully normalized associated Legendre  
   polynomials <EM>N_l^m(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005farray"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_legendre_array</STRONG> <EM>(const 
  gsl_sf_legendre_t   <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const 
  double <VAR>x</VAR>,   double <VAR>result_array</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005farray_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_array_e</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, const double <VAR>csphase</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions calculate all normalized associated Legendre polynomials   
  for <EM>0 \le l \le lmax</EM> and <EM>0 \le m \le l</EM> for <EM>|x| &lt;=   
  1</EM>. The <VAR>norm</VAR> parameter specifies which normalization is used.   
  The normalized <EM>P_l^m(x)</EM> values are stored in <VAR>result_array</VAR>, 
    whose minimum size can be obtained from calling   
  <CODE>gsl_sf_legendre_array_n</CODE>. The array index of <EM>P_l^m(x)</EM> is  
   obtained from calling <CODE>gsl_sf_legendre_array_index(l, m)</CODE>. To   
  include or exclude the Condon-Shortley phase factor of <EM>(-1)^m</EM>, set   
  the parameter <VAR>csphase</VAR> to either <EM>-1</EM> or <EM>1</EM>   
  respectively in the <CODE>_e</CODE> function. This factor is included by   
  default. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fderiv_005farray"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_legendre_deriv_array</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, double <VAR>result_array</VAR>[], double   
  <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fderiv_005farray_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_deriv_array_e</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, const double <VAR>csphase</VAR>, double   
  <VAR>result_array</VAR>[], double <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions calculate all normalized associated Legendre functions and  
   their first derivatives up to degree <VAR>lmax</VAR> for <EM>|x| &lt; 1</EM>. 
    The parameter <VAR>norm</VAR> specifies the normalization used. The 
  normalized   <EM>P_l^m(x)</EM> values and their derivatives 
  <EM>dP_l^m(x)/dx</EM> are   stored in <VAR>result_array</VAR> and 
  <VAR>result_deriv_array</VAR>   respectively. To include or exclude the 
  Condon-Shortley phase factor of   <EM>(-1)^m</EM>, set the parameter 
  <VAR>csphase</VAR> to either <EM>-1</EM> or   <EM>1</EM> respectively in the 
  <CODE>_e</CODE> function. This factor is   included by default. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fderiv_005falt_005farray"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_deriv_alt_array</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, double <VAR>result_array</VAR>[], double   
  <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fderiv_005falt_005farray_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_deriv_alt_array_e</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, const double <VAR>csphase</VAR>, double   
  <VAR>result_array</VAR>[], double <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions calculate all normalized associated Legendre functions and  
   their (alternate) first derivatives up to degree <VAR>lmax</VAR> for <EM>|x|  
   &lt; 1</EM>. The normalized <EM>P_l^m(x)</EM> values and their derivatives   
  <EM>dP_l^m(\cos{\theta})/d\theta</EM> are stored in <VAR>result_array</VAR>   
  and <VAR>result_deriv_array</VAR> respectively. To include or exclude the   
  Condon-Shortley phase factor of <EM>(-1)^m</EM>, set the parameter   
  <VAR>csphase</VAR> to either <EM>-1</EM> or <EM>1</EM> respectively in the   
  <CODE>_e</CODE> function. This factor is included by default. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fderiv2_005farray"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_deriv2_array</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, double <VAR>result_array</VAR>[], double   
  <VAR>result_deriv_array</VAR>[], double   
  <VAR>result_deriv2_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fderiv2_005farray_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_legendre_deriv2_array_e</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, const double <VAR>csphase</VAR>, double   
  <VAR>result_array</VAR>[], double <VAR>result_deriv_array</VAR>[], double   
  <VAR>result_deriv2_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions calculate all normalized associated Legendre functions and  
   their first and second derivatives up to degree <VAR>lmax</VAR> for <EM>|x|   
  &lt; 1</EM>. The parameter <VAR>norm</VAR> specifies the normalization used.   
  The normalized <EM>P_l^m(x)</EM>, their first derivatives   
  <EM>dP_l^m(x)/dx</EM>, and their second derivatives <EM>d^2 P_l^m(x)/dx^2</EM> 
    are stored in <VAR>result_array</VAR>, <VAR>result_deriv_array</VAR>, and   
  <VAR>result_deriv2_array</VAR> respectively. To include or exclude the   
  Condon-Shortley phase factor of <EM>(-1)^m</EM>, set the parameter   
  <VAR>csphase</VAR> to either <EM>-1</EM> or <EM>1</EM> respectively in the   
  <CODE>_e</CODE> function. This factor is included by default. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fderiv2_005falt_005farray"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_deriv2_alt_array</STRONG> <EM>(const   
  gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double  
   <VAR>x</VAR>, double <VAR>result_array</VAR>[], double   
  <VAR>result_deriv_array</VAR>[], double   
  <VAR>result_deriv2_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fderiv2_005falt_005farray_005fe"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_deriv2_alt_array_e</STRONG> <EM>(const  
   gsl_sf_legendre_t <VAR>norm</VAR>, const size_t <VAR>lmax</VAR>, const double 
    <VAR>x</VAR>, const double <VAR>csphase</VAR>, double   
  <VAR>result_array</VAR>[], double <VAR>result_deriv_array</VAR>[], double   
  <VAR>result_deriv2_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions calculate all normalized associated Legendre functions and  
   their (alternate) first and second derivatives up to degree <VAR>lmax</VAR>   
  for <EM>|x| &lt; 1</EM>. The parameter <VAR>norm</VAR> specifies the   
  normalization used. The normalized <EM>P_l^m(x)</EM>, their first derivatives  
   <EM>dP_l^m(\cos{\theta})/d\theta</EM>, and their second derivatives <EM>d^2   
  P_l^m(\cos{\theta})/d\theta^2</EM> are stored in <VAR>result_array</VAR>,   
  <VAR>result_deriv_array</VAR>, and <VAR>result_deriv2_array</VAR>   
  respectively. To include or exclude the Condon-Shortley phase factor of   
  <EM>(-1)^m</EM>, set the parameter <VAR>csphase</VAR> to either <EM>-1</EM> or 
    <EM>1</EM> respectively in the <CODE>_e</CODE> function. This factor is   
  included by default. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005farray_005fn"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_sf_legendre_array_n</STRONG> <EM>(const size_t   
  <VAR>lmax</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum array size for maximum degree   
  <VAR>lmax</VAR> needed for the array versions of the associated Legendre   
  functions. Size is calculated as the total number of <EM>P_l^m(x)</EM>   
  functions, plus extra space for precomputing multiplicative factors used in   
  the recurrence relations. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005farray_005findex"></A>Function:  
   <EM>size_t</EM> <STRONG>gsl_sf_legendre_array_index</STRONG> <EM>(const 
  size_t   <VAR>l</VAR>, const size_t <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index into <VAR>result_array</VAR>,   
  <VAR>result_deriv_array</VAR>, or <VAR>result_deriv2_array</VAR> corresponding 
    to <EM>P_l^m(x)</EM>, <EM>P_l^{'m}(x)</EM>, or <EM>P_l^{''m}(x)</EM>. The   
  index is given by <EM>l(l+1)/2 + m</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fPlm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_legendre_Plm</STRONG> <EM>(int <VAR>l</VAR>,   
  int <VAR>m</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fPlm_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Plm_e</STRONG> <EM>(int <VAR>l</VAR>, int 
    <VAR>m</VAR>, double <VAR>x</VAR>, gsl_sf_result * 
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the associated Legendre polynomial <EM>P_l^m(x)</EM> 
    for <EM>m &gt;= 0</EM>, <EM>l &gt;= m</EM>, <EM>|x| &lt;= 1</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fsphPlm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_legendre_sphPlm</STRONG> <EM>(int <VAR>l</VAR>, 
    int <VAR>m</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fsphPlm_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_sphPlm_e</STRONG> <EM>(int <VAR>l</VAR>,  
   int <VAR>m</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the normalized associated Legendre polynomial   
  <EM>\sqrt{(2l+1)/(4\pi)} \sqrt{(l-m)!/(l+m)!} P_l^m(x)</EM> suitable for use   
  in spherical harmonics. The parameters must satisfy <EM>m &gt;= 0</EM>, <EM>l  
   &gt;= m</EM>, <EM>|x| &lt;= 1</EM>. Theses routines avoid the overflows that  
   occur for the standard normalization of <EM>P_l^m(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fPlm_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_Plm_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, int <VAR>m</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fPlm_005fderiv_005farray"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_Plm_deriv_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, int <VAR>m</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[], double <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions are now deprecated and will be removed in a future release; 
    see <CODE>gsl_sf_legendre_array</CODE> and   
  <CODE>gsl_sf_legendre_deriv_array</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fsphPlm_005farray"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_sphPlm_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, int <VAR>m</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005flegendre_005fsphPlm_005fderiv_005farray"></A>Function: 
    <EM>int</EM> <STRONG>gsl_sf_legendre_sphPlm_deriv_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, int <VAR>m</VAR>, double <VAR>x</VAR>, double   
  <VAR>result_array</VAR>[], double <VAR>result_deriv_array</VAR>[])</EM></DT>
  <DD>
  <P>These functions are now deprecated and will be removed in a future release; 
    see <CODE>gsl_sf_legendre_array</CODE> and   
  <CODE>gsl_sf_legendre_deriv_array</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005farray_005fsize"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_array_size</STRONG> <EM>(const int   
  <VAR>lmax</VAR>, const int <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function is now deprecated and will be removed in a future release.   
  </P></DD></DL>
<HR>
<A name="Conical-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Radial-Functions-for-Hyperbolic-Space" 
rel="next">Radial Functions for Hyperbolic Space</A>, Previous: <A accessKey="p" 
href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics" 
rel="previous">Associated Legendre Polynomials and Spherical Harmonics</A>, Up: 
<A accessKey="u" href="#Legendre-Functions-and-Spherical-Harmonics" 
rel="up">Legendre Functions and Spherical Harmonics</A> &nbsp; [<A title="Index" 
href="#Function-Index" rel="index">Index</A>]</P></DIV><A 
name="Conical-Functions-1"></A>
<H4 class="subsection">7.24.3 Conical Functions</H4>
<P>The Conical Functions <EM>P^\mu_{-(1/2)+i\lambda}(x)</EM> and 
<EM>Q^\mu_{-(1/2)+i\lambda}</EM> are described in Abramowitz &amp; Stegun, 
 Section 8.12. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fconicalP_005fhalf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_conicalP_half</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fconicalP_005fhalf_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_conicalP_half_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the irregular Spherical Conical Function   
  <EM>P^{1/2}_{-1/2 + i \lambda}(x)</EM> for <EM>x &gt; -1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fconicalP_005fmhalf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_conicalP_mhalf</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fconicalP_005fmhalf_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_conicalP_mhalf_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the regular Spherical Conical Function   
  <EM>P^{-1/2}_{-1/2 + i \lambda}(x)</EM> for <EM>x &gt; -1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fconicalP_005f0"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_conicalP_0</STRONG> <EM>(double 
  <VAR>lambda</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fconicalP_005f0_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_conicalP_0_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the conical function <EM>P^0_{-1/2 + i   
  \lambda}(x)</EM> for <EM>x &gt; -1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fconicalP_005f1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_conicalP_1</STRONG> <EM>(double 
  <VAR>lambda</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fconicalP_005f1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_conicalP_1_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the conical function <EM>P^1_{-1/2 + i   
  \lambda}(x)</EM> for <EM>x &gt; -1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fconicalP_005fsph_005freg"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_conicalP_sph_reg</STRONG> <EM>(int   
  <VAR>l</VAR>, double <VAR>lambda</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fconicalP_005fsph_005freg_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_conicalP_sph_reg_e</STRONG> <EM>(int <VAR>l</VAR>, 
    double <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Regular Spherical Conical Function   
  <EM>P^{-1/2-l}_{-1/2 + i \lambda}(x)</EM> for <EM>x &gt; -1</EM>, <EM>l &gt;=  
   -1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fconicalP_005fcyl_005freg"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_conicalP_cyl_reg</STRONG> <EM>(int   
  <VAR>m</VAR>, double <VAR>lambda</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fconicalP_005fcyl_005freg_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_conicalP_cyl_reg_e</STRONG> <EM>(int <VAR>m</VAR>, 
    double <VAR>lambda</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Regular Cylindrical Conical Function   
  <EM>P^{-m}_{-1/2 + i \lambda}(x)</EM> for <EM>x &gt; -1</EM>, <EM>m &gt;=   
  -1</EM>. </P></DD></DL>
<HR>
<A name="Radial-Functions-for-Hyperbolic-Space"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Conical-Functions" 
rel="previous">Conical Functions</A>, Up: <A accessKey="u" href="#Legendre-Functions-and-Spherical-Harmonics" 
rel="up">Legendre Functions and Spherical Harmonics</A> &nbsp; [<A title="Index" 
href="#Function-Index" rel="index">Index</A>]</P></DIV><A 
name="Radial-Functions-for-Hyperbolic-Space-1"></A>
<H4 class="subsection">7.24.4 Radial Functions for Hyperbolic Space</H4>
<P>The following spherical functions are specializations of Legendre functions 
 which give the regular eigenfunctions of the Laplacian on a 3-dimensional 
 hyperbolic space <EM>H3d</EM>. Of particular interest is the flat limit, 
<EM>\lambda \to \infty</EM>, <EM>\eta \to 0</EM>, <EM>\lambda\eta</EM> fixed. 
</P>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d_005f0"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_legendre_H3d_0</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>eta</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d_005f0_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_legendre_H3d_0_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>eta</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the zeroth radial eigenfunction of the Laplacian on  
   the 3-dimensional hyperbolic space, <EM>L^{H3d}_0(\lambda,\eta) :=   
  \sin(\lambda\eta)/(\lambda\sinh(\eta))</EM> for <EM>\eta &gt;= 0</EM>. In the  
   flat limit this takes the form <EM>L^{H3d}_0(\lambda,\eta) =   
  j_0(\lambda\eta)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d_005f1"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_legendre_H3d_1</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>eta</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d_005f1_005fe"></A>Function:  
   <EM>int</EM> <STRONG>gsl_sf_legendre_H3d_1_e</STRONG> <EM>(double   
  <VAR>lambda</VAR>, double <VAR>eta</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the first radial eigenfunction of the Laplacian on   
  the 3-dimensional hyperbolic space, <EM>L^{H3d}_1(\lambda,\eta) :=   
  1/\sqrt{\lambda^2 + 1} \sin(\lambda \eta)/(\lambda \sinh(\eta)) (\coth(\eta) - 
    \lambda \cot(\lambda\eta))</EM> for <EM>\eta &gt;= 0</EM>. In the flat limit 
    this takes the form <EM>L^{H3d}_1(\lambda,\eta) = j_1(\lambda\eta)</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_legendre_H3d</STRONG> <EM>(int <VAR>l</VAR>,   
  double <VAR>lambda</VAR>, double <VAR>eta</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_H3d_e</STRONG> <EM>(int <VAR>l</VAR>,   
  double <VAR>lambda</VAR>, double <VAR>eta</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the <VAR>l</VAR>-th radial eigenfunction of the   
  Laplacian on the 3-dimensional hyperbolic space <EM>\eta &gt;= 0</EM>, <EM>l   
  &gt;= 0</EM>. In the flat limit this takes the form   
  <EM>L^{H3d}_l(\lambda,\eta) = j_l(\lambda\eta)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flegendre_005fH3d_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_legendre_H3d_array</STRONG> <EM>(int   
  <VAR>lmax</VAR>, double <VAR>lambda</VAR>, double <VAR>eta</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>This function computes an array of radial eigenfunctions   
  <EM>L^{H3d}_l(\lambda, \eta)</EM> for <EM>0 &lt;= l &lt;= lmax</EM>. 
</P></DD></DL>
<HR>
<A name="Logarithm-and-Related-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Mathieu-Functions" 
rel="next">Mathieu Functions</A>, Previous: <A accessKey="p" href="#Legendre-Functions-and-Spherical-Harmonics" 
rel="previous">Legendre Functions and Spherical Harmonics</A>, Up: <A accessKey="u" 
href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Logarithm-and-Related-Functions-1"></A>
<H3 class="section">7.25 Logarithm and Related Functions</H3><A name="index-logarithm-and-related-functions"></A>
<P>Information on the properties of the Logarithm function can be found in 
 Abramowitz &amp; Stegun, Chapter 4. The functions described in this section are 
 declared in the header file <SAMP>gsl_sf_log.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005flog"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_log</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flog_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_log_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the logarithm of <VAR>x</VAR>, <EM>\log(x)</EM>, for 
    <EM>x &gt; 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flog_005fabs"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_log_abs</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flog_005fabs_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_log_abs_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the logarithm of the magnitude of <VAR>x</VAR>,   
  <EM>\log(|x|)</EM>, for <EM>x \ne 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fcomplex_005flog_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_complex_log_e</STRONG> <EM>(double <VAR>zr</VAR>,  
   double <VAR>zi</VAR>, gsl_sf_result * <VAR>lnr</VAR>, gsl_sf_result *   
  <VAR>theta</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the complex logarithm of <EM>z = z_r + i z_i</EM>.   
  The results are returned as <VAR>lnr</VAR>, <VAR>theta</VAR> such that   
  <EM>\exp(lnr + i \theta) = z_r + i z_i</EM>, where <EM>\theta</EM> lies in the 
    range <EM>[-\pi,\pi]</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flog_005f1plusx"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_log_1plusx</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flog_005f1plusx_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_log_1plusx_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute <EM>\log(1 + x)</EM> for <EM>x &gt; -1</EM> using an 
    algorithm that is accurate for small <EM>x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flog_005f1plusx_005fmx"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_log_1plusx_mx</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flog_005f1plusx_005fmx_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_log_1plusx_mx_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute <EM>\log(1 + x) - x</EM> for <EM>x &gt; -1</EM>   
  using an algorithm that is accurate for small <EM>x</EM>. </P></DD></DL>
<HR>
<A name="Mathieu-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Power-Function" 
rel="next">Power Function</A>, Previous: <A accessKey="p" href="#Logarithm-and-Related-Functions" 
rel="previous">Logarithm and Related Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mathieu-Functions-1"></A>
<H3 class="section">7.26 Mathieu Functions</H3><A 
name="index-Mathieu-functions"></A>
<P>The routines described in this section compute the angular and radial Mathieu 
 functions, and their characteristic values. Mathieu functions are the solutions 
 of the following two differential equations: </P>
<DIV class="example"><PRE class="example">d^2y/dv^2 + (a - 2q\cos 2v)y = 0
d^2f/du^2 - (a - 2q\cosh 2u)f = 0
</PRE></DIV>
<P>The angular Mathieu functions <EM>ce_r(x,q)</EM>, <EM>se_r(x,q)</EM> are the 
 even and odd periodic solutions of the first equation, which is known as 
 Mathieu’s equation. These exist only for the discrete sequence of 
characteristic  values <EM>a=a_r(q)</EM> (even-periodic) and <EM>a=b_r(q)</EM> 
(odd-periodic). </P>
<P>The radial Mathieu functions <EM>Mc^{(j)}_{r}(z,q)</EM>, 
<EM>Ms^{(j)}_{r}(z,q)</EM> are the solutions of the second equation, which is 
 referred to as Mathieu’s modified equation. The radial Mathieu functions of the 
 first, second, third and fourth kind are denoted by the parameter <EM>j</EM>, 
 which takes the value 1, 2, 3 or 4. </P>
<P>For more information on the Mathieu functions, see Abramowitz and Stegun, 
 Chapter 20. These functions are defined in the header file 
<SAMP>gsl_sf_mathieu.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Mathieu-Function-Workspace">Mathieu 
            Function Workspace</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Mathieu-Function-Workspace"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Mathieu-Function-Characteristic-Values" 
rel="next">Mathieu Function Characteristic Values</A>, Up: <A accessKey="u" 
href="#Mathieu-Functions" 
rel="up">Mathieu Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mathieu-Function-Workspace-1"></A>
<H4 class="subsection">7.26.1 Mathieu Function Workspace</H4>
<P>The Mathieu functions can be computed for a single order or for multiple 
 orders, using array-based routines. The array-based routines require a 
 preallocated workspace. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005falloc"></A>Function:   
  <EM>gsl_sf_mathieu_workspace *</EM> 
  <STRONG>gsl_sf_mathieu_alloc</STRONG><EM>(size_t <VAR>n</VAR>, double 
  <VAR>qmax</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fsf_005fmathieu_005fworkspace"></A>
  <P>This function returns a workspace for the array versions of the Mathieu   
  routines. The arguments <VAR>n</VAR> and <VAR>qmax</VAR> specify the maximum   
  order and <EM>q</EM>-value of Mathieu functions which can be computed with   
  this workspace. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_sf_mathieu_free</STRONG> 
  <EM>(gsl_sf_mathieu_workspace *   <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function frees the workspace <VAR>work</VAR>. </P></DD></DL>
<HR>
<A name="Mathieu-Function-Characteristic-Values"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Angular-Mathieu-Functions" 
rel="next">Angular Mathieu Functions</A>, Previous: <A accessKey="p" href="#Mathieu-Function-Workspace" 
rel="previous">Mathieu Function Workspace</A>, Up: <A accessKey="u" href="#Mathieu-Functions" 
rel="up">Mathieu Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mathieu-Function-Characteristic-Values-1"></A>
<H4 class="subsection">7.26.2 Mathieu Function Characteristic Values</H4><A 
name="index-Mathieu-Function-Characteristic-Values"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fa"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_mathieu_a</STRONG> <EM>(int <VAR>n</VAR>, double   
  <VAR>q</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fa_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_a_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>q</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fb"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_mathieu_b</STRONG> <EM>(int <VAR>n</VAR>, double   
  <VAR>q</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fb_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_b_e</STRONG> <EM>(int <VAR>n</VAR>, double 
    <VAR>q</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the characteristic values <EM>a_n(q)</EM>,   
  <EM>b_n(q)</EM> of the Mathieu functions <EM>ce_n(q,x)</EM> and   
  <EM>se_n(q,x)</EM>, respectively. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fa_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_a_array</STRONG> <EM>(int   
  <VAR>order_min</VAR>, int <VAR>order_max</VAR>, double <VAR>q</VAR>,   
  gsl_sf_mathieu_workspace * <VAR>work</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fb_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_b_array</STRONG> <EM>(int   
  <VAR>order_min</VAR>, int <VAR>order_max</VAR>, double <VAR>q</VAR>,   
  gsl_sf_mathieu_workspace * <VAR>work</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>These routines compute a series of Mathieu characteristic values   
  <EM>a_n(q)</EM>, <EM>b_n(q)</EM> for <EM>n</EM> from <VAR>order_min</VAR> to   
  <VAR>order_max</VAR> inclusive, storing the results in the array   
  <VAR>result_array</VAR>. </P></DD></DL>
<HR>
<A name="Angular-Mathieu-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Radial-Mathieu-Functions" 
rel="next">Radial Mathieu Functions</A>, Previous: <A accessKey="p" href="#Mathieu-Function-Characteristic-Values" 
rel="previous">Mathieu Function Characteristic Values</A>, Up: <A accessKey="u" 
href="#Mathieu-Functions" 
rel="up">Mathieu Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Angular-Mathieu-Functions-1"></A>
<H4 class="subsection">7.26.3 Angular Mathieu Functions</H4><A name="index-Angular-Mathieu-Functions"></A><A 
name="index-ce_0028q_002cx_0029_002c-Mathieu-function"></A><A name="index-se_0028q_002cx_0029_002c-Mathieu-function"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fce"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_mathieu_ce</STRONG> <EM>(int <VAR>n</VAR>, double 
  <VAR>q</VAR>,   double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fce_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_ce_e</STRONG> <EM>(int <VAR>n</VAR>,   
  double <VAR>q</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fse"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_mathieu_se</STRONG> <EM>(int <VAR>n</VAR>, double 
  <VAR>q</VAR>,   double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fse_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_se_e</STRONG> <EM>(int <VAR>n</VAR>,   
  double <VAR>q</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the angular Mathieu functions <EM>ce_n(q,x)</EM> and 
    <EM>se_n(q,x)</EM>, respectively. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fce_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_ce_array</STRONG> <EM>(int   
  <VAR>nmin</VAR>, int <VAR>nmax</VAR>, double <VAR>q</VAR>, double   
  <VAR>x</VAR>, gsl_sf_mathieu_workspace * <VAR>work</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fse_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_se_array</STRONG> <EM>(int   
  <VAR>nmin</VAR>, int <VAR>nmax</VAR>, double <VAR>q</VAR>, double   
  <VAR>x</VAR>, gsl_sf_mathieu_workspace * <VAR>work</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>These routines compute a series of the angular Mathieu functions   
  <EM>ce_n(q,x)</EM> and <EM>se_n(q,x)</EM> of order <EM>n</EM> from   
  <VAR>nmin</VAR> to <VAR>nmax</VAR> inclusive, storing the results in the array 
    <VAR>result_array</VAR>. </P></DD></DL>
<HR>
<A name="Radial-Mathieu-Functions"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Angular-Mathieu-Functions" 
rel="previous">Angular Mathieu Functions</A>, Up: <A accessKey="u" href="#Mathieu-Functions" 
rel="up">Mathieu Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Radial-Mathieu-Functions-1"></A>
<H4 class="subsection">7.26.4 Radial Mathieu Functions</H4><A name="index-Radial-Mathieu-Functions"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fMc"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_mathieu_Mc</STRONG> <EM>(int <VAR>j</VAR>, int 
  <VAR>n</VAR>,   double <VAR>q</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fMc_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_Mc_e</STRONG> <EM>(int <VAR>j</VAR>, int   
  <VAR>n</VAR>, double <VAR>q</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fMs"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_mathieu_Ms</STRONG> <EM>(int <VAR>j</VAR>, int 
  <VAR>n</VAR>,   double <VAR>q</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fMs_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_Ms_e</STRONG> <EM>(int <VAR>j</VAR>, int   
  <VAR>n</VAR>, double <VAR>q</VAR>, double <VAR>x</VAR>, gsl_sf_result *   
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the radial <VAR>j</VAR>-th kind Mathieu functions   
  <EM>Mc_n^{(j)}(q,x)</EM> and <EM>Ms_n^{(j)}(q,x)</EM> of order <VAR>n</VAR>.   
  </P>
  <P>The allowed values of <VAR>j</VAR> are 1 and 2. The functions for <EM>j =   
  3,4</EM> can be computed as <EM>M_n^{(3)} = M_n^{(1)} + iM_n^{(2)}</EM> and   
  <EM>M_n^{(4)} = M_n^{(1)} - iM_n^{(2)}</EM>, where <EM>M_n^{(j)} =   
  Mc_n^{(j)}</EM> or <EM>Ms_n^{(j)}</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fMc_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_Mc_array</STRONG> <EM>(int <VAR>j</VAR>,   
  int <VAR>nmin</VAR>, int <VAR>nmax</VAR>, double <VAR>q</VAR>, double   
  <VAR>x</VAR>, gsl_sf_mathieu_workspace * <VAR>work</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fsf_005fmathieu_005fMs_005farray"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_mathieu_Ms_array</STRONG> <EM>(int <VAR>j</VAR>,   
  int <VAR>nmin</VAR>, int <VAR>nmax</VAR>, double <VAR>q</VAR>, double   
  <VAR>x</VAR>, gsl_sf_mathieu_workspace * <VAR>work</VAR>, double   
  <VAR>result_array</VAR>[])</EM></DT>
  <DD>
  <P>These routines compute a series of the radial Mathieu functions of kind   
  <VAR>j</VAR>, with order from <VAR>nmin</VAR> to <VAR>nmax</VAR> inclusive,   
  storing the results in the array <VAR>result_array</VAR>. </P></DD></DL>
<HR>
<A name="Power-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Psi-_0028Digamma_0029-Function" 
rel="next">Psi (Digamma) Function</A>, Previous: <A accessKey="p" href="#Mathieu-Functions" 
rel="previous">Mathieu Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Power-Function-1"></A>
<H3 class="section">7.27 Power Function</H3><A 
name="index-power-function"></A><A name="index-integer-powers"></A>
<P>The following functions are equivalent to the function 
<CODE>gsl_pow_int</CODE> (see <A href="#Small-integer-powers">Small 
 integer powers</A>) with an error estimate. These functions are declared in the 
 header file <SAMP>gsl_sf_pow_int.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fpow_005fint"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_pow_int</STRONG> <EM>(double <VAR>x</VAR>, int   
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpow_005fint_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_pow_int_e</STRONG> <EM>(double <VAR>x</VAR>, int 
  <VAR>n</VAR>,   gsl_sf_result * <VAR>result</VAR>) </EM></DT>
  <DD>
  <P>These routines compute the power <EM>x^n</EM> for integer <VAR>n</VAR>. The 
    power is computed using the minimum number of multiplications. For example,  
   <EM>x^8</EM> is computed as <EM>((x^2)^2)^2</EM>, requiring only 3   
  multiplications. For reasons of efficiency, these functions do not check for   
  overflow or underflow conditions. </P></DD></DL>
<DIV class="example"><PRE class="example">#include &lt;gsl/gsl_sf_pow_int.h&gt;
/* compute 3.0**12 */
double y = gsl_sf_pow_int(3.0, 12); 
</PRE></DIV>
<HR>
<A name="Psi-_0028Digamma_0029-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Synchrotron-Functions" 
rel="next">Synchrotron Functions</A>, Previous: <A accessKey="p" href="#Power-Function" 
rel="previous">Power Function</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Psi-_0028Digamma_0029-Function-1"></A>
<H3 class="section">7.28 Psi (Digamma) Function</H3><A 
name="index-psi-function"></A><A name="index-digamma-function"></A><A name="index-polygamma-functions"></A>
<P>The polygamma functions of order <EM>n</EM> are defined by </P>
<DIV class="example"><PRE class="example">\psi^{(n)}(x) = (d/dx)^n \psi(x) = (d/dx)^{n+1} \log(\Gamma(x))
</PRE></DIV>
<P>where <EM>\psi(x) = \Gamma'(x)/\Gamma(x)</EM> is known as the digamma 
 function. These functions are declared in the header file 
<SAMP>gsl_sf_psi.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Digamma-Function">Digamma 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Trigamma-Function">Trigamma 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Polygamma-Function">Polygamma 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Digamma-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Trigamma-Function" 
rel="next">Trigamma Function</A>, Up: <A accessKey="u" href="#Psi-_0028Digamma_0029-Function" 
rel="up">Psi (Digamma) Function</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Digamma-Function-1"></A>
<H4 class="subsection">7.28.1 Digamma Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fpsi_005fint"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_psi_int</STRONG> <EM>(int 
<VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpsi_005fint_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_psi_int_e</STRONG> <EM>(int <VAR>n</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the digamma function <EM>\psi(n)</EM> for positive   
  integer <VAR>n</VAR>. The digamma function is also called the Psi function.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fpsi"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_psi</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpsi_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_psi_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the digamma function <EM>\psi(x)</EM> for general   
  <EM>x</EM>, <EM>x \ne 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fpsi_005f1piy"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_psi_1piy</STRONG> <EM>(double 
  <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpsi_005f1piy_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_psi_1piy_e</STRONG> <EM>(double <VAR>y</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the real part of the digamma function on the line   
  <EM>1+i y</EM>, <EM>\Re[\psi(1 + i y)]</EM>. </P></DD></DL>
<HR>
<A name="Trigamma-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Polygamma-Function" 
rel="next">Polygamma Function</A>, Previous: <A accessKey="p" href="#Digamma-Function" 
rel="previous">Digamma Function</A>, Up: <A accessKey="u" href="#Psi-_0028Digamma_0029-Function" 
rel="up">Psi (Digamma) Function</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Trigamma-Function-1"></A>
<H4 class="subsection">7.28.2 Trigamma Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fpsi_005f1_005fint"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_psi_1_int</STRONG> <EM>(int   
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpsi_005f1_005fint_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_psi_1_int_e</STRONG> <EM>(int <VAR>n</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Trigamma function <EM>\psi'(n)</EM> for positive 
    integer <EM>n</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fpsi_005f1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_psi_1</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpsi_005f1_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_psi_1_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Trigamma function <EM>\psi'(x)</EM> for general  
   <EM>x</EM>. </P></DD></DL>
<HR>
<A name="Polygamma-Function"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Trigamma-Function" 
rel="previous">Trigamma Function</A>, Up: <A accessKey="u" href="#Psi-_0028Digamma_0029-Function" 
rel="up">Psi (Digamma) Function</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Polygamma-Function-1"></A>
<H4 class="subsection">7.28.3 Polygamma Function</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fpsi_005fn"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_psi_n</STRONG> <EM>(int <VAR>n</VAR>, double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fpsi_005fn_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_psi_n_e</STRONG> <EM>(int <VAR>n</VAR>, double 
  <VAR>x</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the polygamma function <EM>\psi^{(n)}(x)</EM> for   
  <EM>n &gt;= 0</EM>, <EM>x &gt; 0</EM>. </P></DD></DL>
<HR>
<A name="Synchrotron-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Transport-Functions" 
rel="next">Transport Functions</A>, Previous: <A accessKey="p" href="#Psi-_0028Digamma_0029-Function" 
rel="previous">Psi (Digamma) Function</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Synchrotron-Functions-1"></A>
<H3 class="section">7.29 Synchrotron Functions</H3><A name="index-synchrotron-functions"></A>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_sf_synchrotron.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fsynchrotron_005f1"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_synchrotron_1</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fsynchrotron_005f1_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_synchrotron_1_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the first synchrotron function <EM>x \int_x^\infty   
  dt K_{5/3}(t)</EM> for <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fsynchrotron_005f2"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_synchrotron_2</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fsynchrotron_005f2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_synchrotron_2_e</STRONG> <EM>(double <VAR>x</VAR>, 
    gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the second synchrotron function <EM>x   
  K_{2/3}(x)</EM> for <EM>x &gt;= 0</EM>. </P></DD></DL>
<HR>
<A name="Transport-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Trigonometric-Functions" 
rel="next">Trigonometric Functions</A>, Previous: <A accessKey="p" href="#Synchrotron-Functions" 
rel="previous">Synchrotron Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Transport-Functions-1"></A>
<H3 class="section">7.30 Transport Functions</H3><A name="index-transport-functions"></A>
<P>The transport functions <EM>J(n,x)</EM> are defined by the integral 
 representations <EM>J(n,x) := \int_0^x dt t^n e^t /(e^t - 1)^2</EM>. They are 
 declared in the header file <SAMP>gsl_sf_transport.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005ftransport_005f2"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_transport_2</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ftransport_005f2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_transport_2_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the transport function <EM>J(2,x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ftransport_005f3"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_transport_3</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ftransport_005f3_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_transport_3_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the transport function <EM>J(3,x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ftransport_005f4"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_transport_4</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ftransport_005f4_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_transport_4_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the transport function <EM>J(4,x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005ftransport_005f5"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_transport_5</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005ftransport_005f5_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_transport_5_e</STRONG> <EM>(double <VAR>x</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the transport function <EM>J(5,x)</EM>. </P></DD></DL>
<HR>
<A name="Trigonometric-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Zeta-Functions" 
rel="next">Zeta Functions</A>, Previous: <A accessKey="p" href="#Transport-Functions" 
rel="previous">Transport Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Trigonometric-Functions-1"></A>
<H3 class="section">7.31 Trigonometric Functions</H3><A name="index-trigonometric-functions"></A>
<P>The library includes its own trigonometric functions in order to provide 
 consistency across platforms and reliable error estimates. These functions are 
 declared in the header file <SAMP>gsl_sf_trig.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Conversion-Functions">Conversion 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Restriction-Functions">Restriction 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Trigonometric-Functions-With-Error-Estimates">Trigonometric 
            Functions With Error Estimates</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Circular-Trigonometric-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Trigonometric-Functions-for-Complex-Arguments" 
rel="next">Trigonometric Functions for Complex Arguments</A>, Up: <A accessKey="u" 
href="#Trigonometric-Functions" 
rel="up">Trigonometric Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Circular-Trigonometric-Functions-1"></A>
<H4 class="subsection">7.31.1 Circular Trigonometric Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fsin"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_sin</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fsin_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_sin_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-sine-function_002c-special-functions"></A>
  <P>These routines compute the sine function <EM>\sin(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fcos"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_cos</STRONG> <EM>(double <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fcos_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_cos_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-cosine-function_002c-special-functions"></A>
  <P>These routines compute the cosine function <EM>\cos(x)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fhypot"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hypot</STRONG> <EM>(double <VAR>x</VAR>, double  
   <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhypot_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_hypot_e</STRONG> <EM>(double <VAR>x</VAR>, double 
  <VAR>y</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-hypot-function_002c-special-functions"></A>
  <P>These routines compute the hypotenuse function <EM>\sqrt{x^2 + y^2}</EM>   
  avoiding overflow and underflow. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fsinc"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_sinc</STRONG> <EM>(double 
<VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fsinc_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_sinc_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-complex-sinc-function_002c-special-functions"></A>
  <P>These routines compute <EM>\sinc(x) = \sin(\pi x) / (\pi x)</EM> for any   
  value of <VAR>x</VAR>. </P></DD></DL>
<HR>
<A name="Trigonometric-Functions-for-Complex-Arguments"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Hyperbolic-Trigonometric-Functions" 
rel="next">Hyperbolic Trigonometric Functions</A>, Previous: <A accessKey="p" 
href="#Circular-Trigonometric-Functions" 
rel="previous">Circular Trigonometric Functions</A>, Up: <A accessKey="u" href="#Trigonometric-Functions" 
rel="up">Trigonometric Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Trigonometric-Functions-for-Complex-Arguments-1"></A>
<H4 class="subsection">7.31.2 Trigonometric Functions for Complex Arguments</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fcomplex_005fsin_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_complex_sin_e</STRONG> <EM>(double <VAR>zr</VAR>,  
   double <VAR>zi</VAR>, gsl_sf_result * <VAR>szr</VAR>, gsl_sf_result *   
  <VAR>szi</VAR>)</EM></DT>
  <DD><A name="index-complex-sine-function_002c-special-functions"></A>
  <P>This function computes the complex sine, <EM>\sin(z_r + i z_i)</EM> storing 
    the real and imaginary parts in <VAR>szr</VAR>, <VAR>szi</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fcomplex_005fcos_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_complex_cos_e</STRONG> <EM>(double <VAR>zr</VAR>,  
   double <VAR>zi</VAR>, gsl_sf_result * <VAR>czr</VAR>, gsl_sf_result *   
  <VAR>czi</VAR>)</EM></DT>
  <DD><A name="index-complex-cosine-function_002c-special-functions"></A>
  <P>This function computes the complex cosine, <EM>\cos(z_r + i z_i)</EM>   
  storing the real and imaginary parts in <VAR>czr</VAR>, <VAR>czi</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fcomplex_005flogsin_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_complex_logsin_e</STRONG> <EM>(double   
  <VAR>zr</VAR>, double <VAR>zi</VAR>, gsl_sf_result * <VAR>lszr</VAR>,   
  gsl_sf_result * <VAR>lszi</VAR>)</EM></DT>
  <DD><A name="index-complex-log-sine-function_002c-special-functions"></A>
  <P>This function computes the logarithm of the complex sine, <EM>\log(\sin(z_r 
    + i z_i))</EM> storing the real and imaginary parts in <VAR>lszr</VAR>,   
  <VAR>lszi</VAR>. </P></DD></DL>
<HR>
<A name="Hyperbolic-Trigonometric-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Conversion-Functions" 
rel="next">Conversion Functions</A>, Previous: <A accessKey="p" href="#Trigonometric-Functions-for-Complex-Arguments" 
rel="previous">Trigonometric Functions for Complex Arguments</A>, Up: <A 
accessKey="u" href="#Trigonometric-Functions" 
rel="up">Trigonometric Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Hyperbolic-Trigonometric-Functions-1"></A>
<H4 class="subsection">7.31.3 Hyperbolic Trigonometric Functions</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005flnsinh"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lnsinh</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flnsinh_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lnsinh_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-sinh-function_002c-special-functions"></A>
  <P>These routines compute <EM>\log(\sinh(x))</EM> for <EM>x &gt; 0</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005flncosh"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_lncosh</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005flncosh_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_lncosh_e</STRONG> <EM>(double <VAR>x</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-logarithm-of-cosh-function_002c-special-functions"></A>
  <P>These routines compute <EM>\log(\cosh(x))</EM> for any <VAR>x</VAR>.   
  </P></DD></DL>
<HR>
<A name="Conversion-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Restriction-Functions" 
rel="next">Restriction Functions</A>, Previous: <A accessKey="p" href="#Hyperbolic-Trigonometric-Functions" 
rel="previous">Hyperbolic Trigonometric Functions</A>, Up: <A accessKey="u" 
href="#Trigonometric-Functions" 
rel="up">Trigonometric Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Conversion-Functions-1"></A>
<H4 class="subsection">7.31.4 Conversion Functions</H4><A name="index-polar-to-rectangular-conversion"></A><A 
name="index-rectangular-to-polar-conversion"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fpolar_005fto_005frect"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_polar_to_rect</STRONG> <EM>(double <VAR>r</VAR>,   
  double <VAR>theta</VAR>, gsl_sf_result * <VAR>x</VAR>, gsl_sf_result *   
  <VAR>y</VAR>); </EM></DT>
  <DD>
  <P>This function converts the polar coordinates   
  (<VAR>r</VAR>,<VAR>theta</VAR>) to rectilinear coordinates   
  (<VAR>x</VAR>,<VAR>y</VAR>), <EM>x = r\cos(\theta)</EM>, <EM>y =   
  r\sin(\theta)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005frect_005fto_005fpolar"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_rect_to_polar</STRONG> <EM>(double <VAR>x</VAR>,   
  double <VAR>y</VAR>, gsl_sf_result * <VAR>r</VAR>, gsl_sf_result *   
  <VAR>theta</VAR>)</EM></DT>
  <DD>
  <P>This function converts the rectilinear coordinates   
  (<VAR>x</VAR>,<VAR>y</VAR>) to polar coordinates   
  (<VAR>r</VAR>,<VAR>theta</VAR>), such that <EM>x = r\cos(\theta)</EM>, <EM>y = 
    r\sin(\theta)</EM>. The argument <VAR>theta</VAR> lies in the range 
  <EM>[-\pi,   \pi]</EM>. </P></DD></DL>
<HR>
<A name="Restriction-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Trigonometric-Functions-With-Error-Estimates" 
rel="next">Trigonometric Functions With Error Estimates</A>, Previous: <A 
accessKey="p" href="#Conversion-Functions" 
rel="previous">Conversion Functions</A>, Up: <A accessKey="u" href="#Trigonometric-Functions" 
rel="up">Trigonometric Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Restriction-Functions-1"></A>
<H4 class="subsection">7.31.5 Restriction Functions</H4><A name="index-angular-reduction"></A><A 
name="index-reduction-of-angular-variables"></A>
<DL>
  <DT><A name="index-gsl_005fsf_005fangle_005frestrict_005fsymm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_angle_restrict_symm</STRONG> <EM>(double   
  <VAR>theta</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fangle_005frestrict_005fsymm_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_angle_restrict_symm_e</STRONG> <EM>(double *   
  <VAR>theta</VAR>)</EM></DT>
  <DD>
  <P>These routines force the angle <VAR>theta</VAR> to lie in the range   
  <EM>(-\pi,\pi]</EM>. </P>
  <P>Note that the mathematical value of <EM>\pi</EM> is slightly greater than   
  <CODE>M_PI</CODE>, so the machine numbers <CODE>M_PI</CODE> and   
  <CODE>-M_PI</CODE> are included in the range. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fangle_005frestrict_005fpos"></A>Function:   
  <EM>double</EM> <STRONG>gsl_sf_angle_restrict_pos</STRONG> <EM>(double   
  <VAR>theta</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsf_005fangle_005frestrict_005fpos_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_angle_restrict_pos_e</STRONG> <EM>(double *   
  <VAR>theta</VAR>)</EM></DT>
  <DD>
  <P>These routines force the angle <VAR>theta</VAR> to lie in the range <EM>[0, 
    2\pi)</EM>. </P>
  <P>Note that the mathematical value of <EM>2\pi</EM> is slightly greater than  
   <CODE>2*M_PI</CODE>, so the machine number <CODE>2*M_PI</CODE> is included in 
    the range. </P></DD></DL>
<HR>
<A name="Trigonometric-Functions-With-Error-Estimates"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Restriction-Functions" 
rel="previous">Restriction Functions</A>, Up: <A accessKey="u" href="#Trigonometric-Functions" 
rel="up">Trigonometric Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Trigonometric-Functions-With-Error-Estimates-1"></A>
<H4 class="subsection">7.31.6 Trigonometric Functions With Error Estimates</H4>
<DL>
  <DT><A name="index-gsl_005fsf_005fsin_005ferr_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_sin_err_e</STRONG> <EM>(double <VAR>x</VAR>, double 
    <VAR>dx</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the sine of an angle <VAR>x</VAR> with an associated  
   absolute error <VAR>dx</VAR>, <EM>\sin(x \pm dx)</EM>. Note that this 
  function   is provided in the error-handling form only since its purpose is to 
  compute   the propagated error. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fcos_005ferr_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_cos_err_e</STRONG> <EM>(double <VAR>x</VAR>, double 
    <VAR>dx</VAR>, gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>This routine computes the cosine of an angle <VAR>x</VAR> with an   
  associated absolute error <VAR>dx</VAR>, <EM>\cos(x \pm dx)</EM>. Note that   
  this function is provided in the error-handling form only since its purpose is 
    to compute the propagated error. </P></DD></DL>
<HR>
<A name="Zeta-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Special-Functions-Examples" 
rel="next">Special Functions Examples</A>, Previous: <A accessKey="p" href="#Trigonometric-Functions" 
rel="previous">Trigonometric Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Zeta-Functions-1"></A>
<H3 class="section">7.32 Zeta Functions</H3><A name="index-Zeta-functions"></A>
<P>The Riemann zeta function is defined in Abramowitz &amp; Stegun, Section 
 23.2. The functions described in this section are declared in the header file 
<SAMP>gsl_sf_zeta.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Riemann-Zeta-Function">Riemann 
            Zeta Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Riemann-Zeta-Function-Minus-One">Riemann 
            Zeta Function Minus One</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Hurwitz-Zeta-Function">Hurwitz 
            Zeta Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Eta-Function">Eta 
            Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Riemann-Zeta-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Riemann-Zeta-Function-Minus-One" 
rel="next">Riemann Zeta Function Minus One</A>, Up: <A accessKey="u" href="#Zeta-Functions" 
rel="up">Zeta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Riemann-Zeta-Function-1"></A>
<H4 class="subsection">7.32.1 Riemann Zeta Function</H4><A name="index-Riemann-Zeta-Function"></A>
<P>The Riemann zeta function is defined by the infinite sum <EM>\zeta(s) = 
 \sum_{k=1}^\infty k^{-s}</EM>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fzeta_005fint"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_zeta_int</STRONG> <EM>(int 
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fzeta_005fint_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_zeta_int_e</STRONG> <EM>(int <VAR>n</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Riemann zeta function <EM>\zeta(n)</EM> for   
  integer <VAR>n</VAR>, <EM>n \ne 1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fzeta"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_zeta</STRONG> <EM>(double 
<VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fzeta_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_zeta_e</STRONG> <EM>(double <VAR>s</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Riemann zeta function <EM>\zeta(s)</EM> for   
  arbitrary <VAR>s</VAR>, <EM>s \ne 1</EM>. </P></DD></DL>
<HR>
<A name="Riemann-Zeta-Function-Minus-One"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Hurwitz-Zeta-Function" 
rel="next">Hurwitz Zeta Function</A>, Previous: <A accessKey="p" href="#Riemann-Zeta-Function" 
rel="previous">Riemann Zeta Function</A>, Up: <A accessKey="u" href="#Zeta-Functions" 
rel="up">Zeta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Riemann-Zeta-Function-Minus-One-1"></A>
<H4 class="subsection">7.32.2 Riemann Zeta Function Minus One</H4>
<P>For large positive argument, the Riemann zeta function approaches one. In 
 this region the fractional part is interesting, and therefore we need a 
function  to evaluate it explicitly. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fzetam1_005fint"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_zetam1_int</STRONG> <EM>(int 
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fzetam1_005fint_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sf_zetam1_int_e</STRONG> <EM>(int <VAR>n</VAR>,   
  gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute <EM>\zeta(n) - 1</EM> for integer <VAR>n</VAR>,   
  <EM>n \ne 1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005fzetam1"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_zetam1</STRONG> <EM>(double 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fzetam1_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_zetam1_e</STRONG> <EM>(double <VAR>s</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute <EM>\zeta(s) - 1</EM> for arbitrary <VAR>s</VAR>,   
  <EM>s \ne 1</EM>. </P></DD></DL>
<HR>
<A name="Hurwitz-Zeta-Function"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Eta-Function" 
rel="next">Eta Function</A>, Previous: <A accessKey="p" href="#Riemann-Zeta-Function-Minus-One" 
rel="previous">Riemann Zeta Function Minus One</A>, Up: <A accessKey="u" href="#Zeta-Functions" 
rel="up">Zeta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Hurwitz-Zeta-Function-1"></A>
<H4 class="subsection">7.32.3 Hurwitz Zeta Function</H4><A name="index-Hurwitz-Zeta-Function"></A>
<P>The Hurwitz zeta function is defined by <EM>\zeta(s,q) = \sum_0^\infty 
 (k+q)^{-s}</EM>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005fhzeta"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_hzeta</STRONG> <EM>(double <VAR>s</VAR>, double  
   <VAR>q</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005fhzeta_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_hzeta_e</STRONG> <EM>(double <VAR>s</VAR>, double 
  <VAR>q</VAR>,   gsl_sf_result * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the Hurwitz zeta function <EM>\zeta(s,q)</EM> for   
  <EM>s &gt; 1</EM>, <EM>q &gt; 0</EM>. </P></DD></DL>
<HR>
<A name="Eta-Function"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Hurwitz-Zeta-Function" 
rel="previous">Hurwitz Zeta Function</A>, Up: <A accessKey="u" href="#Zeta-Functions" 
rel="up">Zeta Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Eta-Function-1"></A>
<H4 class="subsection">7.32.4 Eta Function</H4><A name="index-Eta-Function"></A>
<P>The eta function is defined by <EM>\eta(s) = (1-2^{1-s}) \zeta(s)</EM>. </P>
<DL>
  <DT><A name="index-gsl_005fsf_005feta_005fint"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_eta_int</STRONG> <EM>(int 
<VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005feta_005fint_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_eta_int_e</STRONG> <EM>(int <VAR>n</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the eta function <EM>\eta(n)</EM> for integer   
  <VAR>n</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsf_005feta"></A>Function: 
  <EM>double</EM><STRONG>gsl_sf_eta</STRONG> <EM>(double <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsf_005feta_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_sf_eta_e</STRONG> <EM>(double <VAR>s</VAR>, 
  gsl_sf_result *   <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These routines compute the eta function <EM>\eta(s)</EM> for arbitrary   
  <VAR>s</VAR>. </P></DD></DL>
<HR>
<A name="Special-Functions-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Special-Functions-References-and-Further-Reading" 
rel="next">Special Functions References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Zeta-Functions" 
rel="previous">Zeta Functions</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-2"></A>
<H3 class="section">7.33 Examples</H3>
<P>The following example demonstrates the use of the error handling form of the 
 special functions, in this case to compute the Bessel function 
<EM>J_0(5.0)</EM>, </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_sf_bessel.h&gt;

int
main (void)
{
  double x = 5.0;
  gsl_sf_result result;

  double expected = -0.17759677131433830434739701;
  
  int status = gsl_sf_bessel_J0_e (x, &amp;result);

  printf ("status  = %s\n", gsl_strerror(status));
  printf ("J0(5.0) = %.18f\n"
          "      +/- % .18f\n", 
          result.val, result.err);
  printf ("exact   = %.18f\n", expected);
  return status;
}
</PRE></DIV>
<P>Here are the results of running the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">status  = success
J0(5.0) = -0.177596771314338292 
      +/-  0.000000000000000193
exact   = -0.177596771314338292
</PRE></DIV>
<P>The next program computes the same quantity using the natural form of the 
 function. In this case the error term <VAR>result.err</VAR> and return status 
 are not accessible. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_sf_bessel.h&gt;

int
main (void)
{
  double x = 5.0;
  double expected = -0.17759677131433830434739701;
  
  double y = gsl_sf_bessel_J0 (x);

  printf ("J0(5.0) = %.18f\n", y);
  printf ("exact   = %.18f\n", expected);
  return 0;
}
</PRE></DIV>
<P>The results of the function are the same, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">J0(5.0) = -0.177596771314338292
exact   = -0.177596771314338292
</PRE></DIV>
<HR>
<A name="Special-Functions-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Special-Functions-Examples" 
rel="previous">Special Functions Examples</A>, Up: <A accessKey="u" href="#Special-Functions" 
rel="up">Special Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-2"></A>
<H3 class="section">7.34 References and Further Reading</H3>
<P>The library follows the conventions of <CITE>Abramowitz &amp; Stegun</CITE> 
 where possible, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Abramowitz &amp; Stegun (eds.), <CITE>Handbook of Mathematical 
    Functions</CITE> </LI></UL>
<P>The following papers contain information on the algorithms used to compute 
 the special functions, <A name="index-MISCFUN"></A></P>
<UL class="no-bullet">
  <LI><!-- /@w -->Allan J. MacLeod, MISCFUN: A software package to compute   
  uncommon special functions. <CITE>ACM Trans. Math. Soft.</CITE>, vol. 22,   
  1996, 288–301 </LI>
  <LI><!-- /@w -->G.N. Watson, A Treatise on the Theory of Bessel Functions, 2nd 
    Edition (Cambridge University Press, 1944). </LI>
  <LI><!-- /@w -->G. Nemeth, Mathematical Approximations of Special Functions,   
  Nova Science Publishers, ISBN 1-56072-052-2 </LI>
  <LI><!-- /@w -->B.C. Carlson, Special Functions of Applied Mathematics (1977)  
   </LI>
  <LI><!-- /@w -->N. M. Temme, Special Functions: An Introduction to the   
  Classical Functions of Mathematical Physics (1996), ISBN 978-0471113133. </LI>
  <LI><!-- /@w -->W.J. Thompson, Atlas for Computing Mathematical Functions,   
  John Wiley &amp; Sons, New York (1997). </LI>
  <LI><!-- /@w -->Y.Y. Luke, Algorithms for the Computation of Mathematical   
  Functions, Academic Press, New York (1977). </LI>
  <LI><!-- /@w -->S. A. Holmes and W. E. Featherstone, A unified approach to the 
    Clenshaw summation and the recursive computation of very high degree and 
  order   normalised associated Legendre functions, Journal of Geodesy, 76, pg. 
  279-299,   2002. </LI></UL>
<HR>
<A name="Vectors-and-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutations" 
rel="next">Permutations</A>, Previous: <A accessKey="p" href="#Special-Functions" 
rel="previous">Special Functions</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Vectors-and-Matrices-1"></A>
<H2 class="chapter">8 Vectors and Matrices</H2><A name="index-blocks"></A><A 
name="index-vectors"></A><A name="index-matrices"></A>
<P>The functions described in this chapter provide a simple vector and matrix 
 interface to ordinary C arrays. The memory management of these arrays is 
 implemented using a single underlying type, known as a block. By writing your 
 functions in terms of vectors and matrices you can pass a single structure 
 containing both data and dimensions as an argument without needing additional 
 function parameters. The structures are compatible with the vector and matrix 
 formats used by <SMALL>BLAS</SMALL> routines. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Data-types">Data 
            types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Blocks">Blocks</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Vectors">Vectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Matrices">Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Vector-and-Matrix-References-and-Further-Reading">Vector 
            and Matrix References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Data-types"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Blocks" 
rel="next">Blocks</A>, Up: <A accessKey="u" href="#Vectors-and-Matrices" 
rel="up">Vectors and Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Data-types-1"></A>
<H3 class="section">8.1 Data types</H3>
<P>All the functions are available for each of the standard data-types. The 
 versions for <CODE>double</CODE> have the prefix <CODE>gsl_block</CODE>, 
<CODE>gsl_vector</CODE> and <CODE>gsl_matrix</CODE>. Similarly the versions for 
 single-precision <CODE>float</CODE> arrays have the prefix 
<CODE>gsl_block_float</CODE>, <CODE>gsl_vector_float</CODE> and 
<CODE>gsl_matrix_float</CODE>. The full list of available types is given below, 
</P>
<DIV class="example"><PRE class="example">gsl_block                       double         
gsl_block_float                 float         
gsl_block_long_double           long double   
gsl_block_int                   int           
gsl_block_uint                  unsigned int  
gsl_block_long                  long          
gsl_block_ulong                 unsigned long 
gsl_block_short                 short         
gsl_block_ushort                unsigned short
gsl_block_char                  char          
gsl_block_uchar                 unsigned char 
gsl_block_complex               complex double        
gsl_block_complex_float         complex float         
gsl_block_complex_long_double   complex long double   
</PRE></DIV>
<P>Corresponding types exist for the <CODE>gsl_vector</CODE> and 
<CODE>gsl_matrix</CODE> functions. </P>
<HR>
<A name="Blocks"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Vectors" 
rel="next">Vectors</A>, Previous: <A accessKey="p" href="#Data-types" 
rel="previous">Data types</A>, Up: <A accessKey="u" href="#Vectors-and-Matrices" 
rel="up">Vectors and Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Blocks-1"></A>
<H3 class="section">8.2 Blocks</H3><A name="index-gsl_005fblock"></A>
<P>For consistency all memory is allocated through a <CODE>gsl_block</CODE> 
 structure. The structure contains two components, the size of an area of memory 
 and a pointer to the memory. The <CODE>gsl_block</CODE> structure looks like 
 this, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t size;
  double * data;
} gsl_block;
</PRE></DIV>
<P>Vectors and matrices are made by <EM>slicing</EM> an underlying block. A 
 slice is a set of elements formed from an initial offset and a combination of 
 indices and step-sizes. In the case of a matrix the step-size for the column 
 index represents the row-length. The step-size for a vector is known as the 
<EM>stride</EM>. </P>
<P>The functions for allocating and deallocating blocks are defined in 
<SAMP>gsl_block.h</SAMP> </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Block-allocation">Block 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Reading-and-writing-blocks">Reading 
            and writing blocks</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Example-programs-for-blocks">Example 
            programs for blocks</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Block-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-blocks" 
rel="next">Reading and writing blocks</A>, Up: <A accessKey="u" href="#Blocks" 
rel="up">Blocks</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Block-allocation-1"></A>
<H4 class="subsection">8.2.1 Block allocation</H4>
<P>The functions for allocating memory to a block follow the style of 
<CODE>malloc</CODE> and <CODE>free</CODE>. In addition they also perform their 
 own error checking. If there is insufficient memory available to allocate a 
 block then the functions call the GSL error handler (with an error number of 
<CODE>GSL_ENOMEM</CODE>) in addition to returning a null pointer. Thus if you 
 use the library error handler to abort your program then it isn’t necessary to 
 check every <CODE>alloc</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fblock_005falloc"></A>Function: <EM>gsl_block 
  *</EM><STRONG>gsl_block_alloc</STRONG> <EM>(size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a block of <VAR>n</VAR> double-precision 
    elements, returning a pointer to the block struct. The block is not   
  initialized and so the values of its elements are undefined. Use the function  
   <CODE>gsl_block_calloc</CODE> if you want to ensure that all the elements are 
    initialized to zero. </P>
  <P>A null pointer is returned if insufficient memory is available to create   
  the block. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblock_005fcalloc"></A>Function: <EM>gsl_block 
  *</EM><STRONG>gsl_block_calloc</STRONG> <EM>(size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a block and initializes all the elements 
    of the block to zero. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblock_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_block_free</STRONG> <EM>(gsl_block * 
  <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory used by a block <VAR>b</VAR> previously   
  allocated with <CODE>gsl_block_alloc</CODE> or <CODE>gsl_block_calloc</CODE>.  
   </P></DD></DL>
<HR>
<A name="Reading-and-writing-blocks"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-blocks" 
rel="next">Example programs for blocks</A>, Previous: <A accessKey="p" href="#Block-allocation" 
rel="previous">Block allocation</A>, Up: <A accessKey="u" href="#Blocks" 
rel="up">Blocks</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-and-writing-blocks-1"></A>
<H4 class="subsection">8.2.2 Reading and writing blocks</H4>
<P>The library provides functions for reading and writing blocks to a file as 
 binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fblock_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_block_fwrite</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const   gsl_block * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the block <VAR>b</VAR> to the stream   
  <VAR>stream</VAR> in binary format. The return value is 0 for success and   
  <CODE>GSL_EFAILED</CODE> if there was a problem writing to the file. Since the 
    data is written in the native binary format it may not be portable between   
  different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblock_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_block_fread</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_block *   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function reads into the block <VAR>b</VAR> from the open stream   
  <VAR>stream</VAR> in binary format. The block <VAR>b</VAR> must be   
  preallocated with the correct length since the function uses the size of   
  <VAR>b</VAR> to determine how many bytes to read. The return value is 0 for   
  success and <CODE>GSL_EFAILED</CODE> if there was a problem reading from the   
  file. The data is assumed to have been written in the native binary format on  
   the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblock_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_block_fprintf</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const   gsl_block * <VAR>b</VAR>, const char * <VAR>format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the block <VAR>b</VAR> line-by-line to 
    the stream <VAR>stream</VAR> using the format specifier <VAR>format</VAR>,   
  which should be one of the <CODE>%g</CODE>, <CODE>%e</CODE> or <CODE>%f</CODE> 
    formats for floating point numbers and <CODE>%d</CODE> for integers. The   
  function returns 0 for success and <CODE>GSL_EFAILED</CODE> if there was a   
  problem writing to the file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblock_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_block_fscanf</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_block *   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the block <VAR>b</VAR>. The block <VAR>b</VAR> must be preallocated with the   
  correct length since the function uses the size of <VAR>b</VAR> to determine   
  how many numbers to read. The function returns 0 for success and   
  <CODE>GSL_EFAILED</CODE> if there was a problem reading from the file.   
  </P></DD></DL>
<HR>
<A name="Example-programs-for-blocks"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Reading-and-writing-blocks" 
rel="previous">Reading and writing blocks</A>, Up: <A accessKey="u" href="#Blocks" 
rel="up">Blocks</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Example-programs-for-blocks-1"></A>
<H4 class="subsection">8.2.3 Example programs for blocks</H4>
<P>The following program shows how to allocate a block, </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_block.h&gt;

int
main (void)
{
  gsl_block * b = gsl_block_alloc (100);
  
  printf ("length of block = %u\n", b-&gt;size);
  printf ("block data address = %#x\n", b-&gt;data);

  gsl_block_free (b);
  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="verbatim">length of block = 100
block data address = 0x804b0d8
</PRE></DIV>
<HR>
<A name="Vectors"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Matrices" 
rel="next">Matrices</A>, Previous: <A accessKey="p" href="#Blocks" 
rel="previous">Blocks</A>, Up: <A accessKey="u" href="#Vectors-and-Matrices" 
rel="up">Vectors and Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Vectors-1"></A>
<H3 class="section">8.3 Vectors</H3><A name="index-vectors-1"></A><A name="index-stride_002c-of-vector-index"></A>
<P>Vectors are defined by a <CODE>gsl_vector</CODE> structure which describes a 
 slice of a block. Different vectors can be created which point to the same 
 block. A vector slice is a set of equally-spaced elements of an area of memory. 
</P><A name="index-gsl_005fvector"></A>
<P>The <CODE>gsl_vector</CODE> structure contains five components, the 
<EM>size</EM>, the <EM>stride</EM>, a pointer to the memory where the elements 
 are stored, <VAR>data</VAR>, a pointer to the block owned by the vector, 
<VAR>block</VAR>, if any, and an ownership flag, <VAR>owner</VAR>. The structure 
 is very simple and looks like this, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t size;
  size_t stride;
  double * data;
  gsl_block * block;
  int owner;
} gsl_vector;
</PRE></DIV>
<P>The <VAR>size</VAR> is simply the number of vector elements. The range of 
 valid indices runs from 0 to <CODE>size-1</CODE>. The <VAR>stride</VAR> is the 
 step-size from one element to the next in physical memory, measured in units of 
 the appropriate datatype. The pointer <VAR>data</VAR> gives the location of the 
 first element of the vector in memory. The pointer <VAR>block</VAR> stores the 
 location of the memory block in which the vector elements are located (if any). 
 If the vector owns this block then the <VAR>owner</VAR> field is set to one and 
 the block will be deallocated when the vector is freed. If the vector points to 
 a block owned by another object then the <VAR>owner</VAR> field is zero and any 
 underlying block will not be deallocated with the vector. </P>
<P>The functions for allocating and accessing vectors are defined in 
<SAMP>gsl_vector.h</SAMP> </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Vector-allocation">Vector 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Accessing-vector-elements">Accessing 
            vector elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Initializing-vector-elements">Initializing 
            vector elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Reading-and-writing-vectors">Reading 
            and writing vectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Vector-views">Vector 
            views</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Copying-vectors">Copying 
            vectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Exchanging-elements">Exchanging 
            elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Vector-operations">Vector 
            operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Vector-properties">Vector 
            properties</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Example-programs-for-vectors">Example 
            programs for vectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Vector-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Accessing-vector-elements" 
rel="next">Accessing vector elements</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Vector-allocation-1"></A>
<H4 class="subsection">8.3.1 Vector allocation</H4>
<P>The functions for allocating memory to a vector follow the style of 
<CODE>malloc</CODE> and <CODE>free</CODE>. In addition they also perform their 
 own error checking. If there is insufficient memory available to allocate a 
 vector then the functions call the GSL error handler (with an error number of 
<CODE>GSL_ENOMEM</CODE>) in addition to returning a null pointer. Thus if you 
 use the library error handler to abort your program then it isn’t necessary to 
 check every <CODE>alloc</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005falloc"></A>Function: <EM>gsl_vector 
  *</EM><STRONG>gsl_vector_alloc</STRONG> <EM>(size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function creates a vector of length <VAR>n</VAR>, returning a pointer  
   to a newly initialized vector struct. A new block is allocated for the   
  elements of the vector, and stored in the <VAR>block</VAR> component of the   
  vector struct. The block is “owned” by the vector, and will be deallocated   
  when the vector is deallocated. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fcalloc"></A>Function: <EM>gsl_vector   
  *</EM> <STRONG>gsl_vector_calloc</STRONG> <EM>(size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a vector of length <VAR>n</VAR> and   
  initializes all the elements of the vector to zero. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_vector_free</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function frees a previously allocated vector <VAR>v</VAR>. If the   
  vector was created using <CODE>gsl_vector_alloc</CODE> then the block   
  underlying the vector will also be deallocated. If the vector has been created 
    from another object then the memory is still owned by that object and will 
  not   be deallocated. </P></DD></DL>
<HR>
<A name="Accessing-vector-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-vector-elements" 
rel="next">Initializing vector elements</A>, Previous: <A accessKey="p" href="#Vector-allocation" 
rel="previous">Vector allocation</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Accessing-vector-elements-1"></A>
<H4 class="subsection">8.3.2 Accessing vector elements</H4><A name="index-vectors_002c-range_002dchecking"></A><A 
name="index-range_002dchecking-for-vectors"></A><A name="index-bounds-checking_002c-extension-to-GCC"></A><A 
name="index-gcc-extensions_002c-range_002dchecking"></A><A name="index-Fortran-range-checking_002c-equivalent-in-gcc"></A>
<P>Unlike <SMALL>FORTRAN</SMALL> compilers, C compilers do not usually provide 
 support for range checking of vectors and matrices.<A href="#FOOT8" 
name="DOCF8"><SUP>8</SUP></A> The functions <CODE>gsl_vector_get</CODE> and 
<CODE>gsl_vector_set</CODE> can perform portable range checking for you and 
 report an error if you attempt to access elements outside the allowed range. 
</P>
<P>The functions for accessing the elements of a vector or matrix are defined in 
<SAMP>gsl_vector.h</SAMP> and declared <CODE>extern inline</CODE> to eliminate 
 function-call overhead. You must compile your program with the preprocessor 
 macro <CODE>HAVE_INLINE</CODE> defined to use these functions. </P><A name="index-GSL_005fRANGE_005fCHECK_005fOFF"></A>
<P>If necessary you can turn off range checking completely without modifying any 
 source files by recompiling your program with the preprocessor definition 
<CODE>GSL_RANGE_CHECK_OFF</CODE>. Provided your compiler supports inline 
 functions the effect of turning off range checking is to replace calls to 
<CODE>gsl_vector_get(v,i)</CODE> by <CODE>v-&gt;data[i*v-&gt;stride]</CODE> and 
 calls to <CODE>gsl_vector_set(v,i,x)</CODE> by 
<CODE>v-&gt;data[i*v-&gt;stride]=x</CODE>. Thus there should be no performance 
 penalty for using the range checking functions when range checking is turned 
 off. </P><A name="index-GSL_005fC99_005fINLINE-2"></A>
<P>If you use a C99 compiler which requires inline functions in header files to 
 be declared <CODE>inline</CODE> instead of <CODE>extern inline</CODE>, define 
 the macro <CODE>GSL_C99_INLINE</CODE> (see <A href="#Inline-functions">Inline 
 functions</A>). With GCC this is selected automatically when compiling in C99 
 mode (<CODE>-std=c99</CODE>). </P><A name="index-gsl_005fcheck_005frange"></A>
<P>If inline functions are not used, calls to the functions 
<CODE>gsl_vector_get</CODE> and <CODE>gsl_vector_set</CODE> will link to the 
 compiled versions of these functions in the library itself. The range checking 
 in these functions is controlled by the global integer variable 
<CODE>gsl_check_range</CODE>. It is enabled by default—to disable it, set 
<CODE>gsl_check_range</CODE> to zero. Due to function-call overhead, there is 
 less benefit in disabling range checking here than for inline functions. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_vector_get</STRONG> <EM>(const gsl_vector * 
  <VAR>v</VAR>, const   size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function returns the <VAR>i</VAR>-th element of a vector <VAR>v</VAR>. 
    If <VAR>i</VAR> lies outside the allowed range of 0 to 
  <EM><VAR>n</VAR>-1</EM>   then the error handler is invoked and 0 is returned. 
  An inline version of this   function is used when <CODE>HAVE_INLINE</CODE> is 
  defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fset"></A>Function: 
  <EM>void</EM><STRONG>gsl_vector_set</STRONG> <EM>(gsl_vector * <VAR>v</VAR>, 
  const size_t   <VAR>i</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function sets the value of the <VAR>i</VAR>-th element of a vector   
  <VAR>v</VAR> to <VAR>x</VAR>. If <VAR>i</VAR> lies outside the allowed range   
  of 0 to <EM><VAR>n</VAR>-1</EM> then the error handler is invoked. An inline   
  version of this function is used when <CODE>HAVE_INLINE</CODE> is defined.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fptr"></A>Function: <EM>double 
  *</EM><STRONG>gsl_vector_ptr</STRONG> <EM>(gsl_vector * <VAR>v</VAR>, size_t   
  <VAR>i</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fvector_005fconst_005fptr"></A>Function: <EM>const   
  double *</EM> <STRONG>gsl_vector_const_ptr</STRONG> <EM>(const gsl_vector *   
  <VAR>v</VAR>, size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the <VAR>i</VAR>-th element of a vector 
    <VAR>v</VAR>. If <VAR>i</VAR> lies outside the allowed range of 0 to   
  <EM><VAR>n</VAR>-1</EM> then the error handler is invoked and a null pointer   
  is returned. Inline versions of these functions are used when   
  <CODE>HAVE_INLINE</CODE> is defined. </P></DD></DL>
<HR>
<A name="Initializing-vector-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-vectors" 
rel="next">Reading and writing vectors</A>, Previous: <A accessKey="p" href="#Accessing-vector-elements" 
rel="previous">Accessing vector elements</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-vector-elements-1"></A>
<H4 class="subsection">8.3.3 Initializing vector elements</H4><A name="index-vectors_002c-initializing"></A><A 
name="index-initializing-vectors"></A>
<DL>
  <DT><A name="index-gsl_005fvector_005fset_005fall"></A>Function: 
  <EM>void</EM><STRONG>gsl_vector_set_all</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function sets all the elements of the vector <VAR>v</VAR> to the value 
    <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fset_005fzero"></A>Function: 
  <EM>void</EM><STRONG>gsl_vector_set_zero</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function sets all the elements of the vector <VAR>v</VAR> to zero.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fset_005fbasis"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_set_basis</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>, size_t   <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function makes a basis vector by setting all the elements of the   
  vector <VAR>v</VAR> to zero except for the <VAR>i</VAR>-th element which is   
  set to one. </P></DD></DL>
<HR>
<A name="Reading-and-writing-vectors"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Vector-views" 
rel="next">Vector views</A>, Previous: <A accessKey="p" href="#Initializing-vector-elements" 
rel="previous">Initializing vector elements</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-and-writing-vectors-1"></A>
<H4 class="subsection">8.3.4 Reading and writing vectors</H4>
<P>The library provides functions for reading and writing vectors to a file as 
 binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_fwrite</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const   gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the vector <VAR>v</VAR> to the stream  
   <VAR>stream</VAR> in binary format. The return value is 0 for success and   
  <CODE>GSL_EFAILED</CODE> if there was a problem writing to the file. Since the 
    data is written in the native binary format it may not be portable between   
  different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_fread</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_vector *   <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function reads into the vector <VAR>v</VAR> from the open stream   
  <VAR>stream</VAR> in binary format. The vector <VAR>v</VAR> must be   
  preallocated with the correct length since the function uses the size of   
  <VAR>v</VAR> to determine how many bytes to read. The return value is 0 for   
  success and <CODE>GSL_EFAILED</CODE> if there was a problem reading from the   
  file. The data is assumed to have been written in the native binary format on  
   the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_fprintf</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const   gsl_vector * <VAR>v</VAR>, const char * <VAR>format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the vector <VAR>v</VAR> line-by-line   
  to the stream <VAR>stream</VAR> using the format specifier <VAR>format</VAR>,  
   which should be one of the <CODE>%g</CODE>, <CODE>%e</CODE> or 
  <CODE>%f</CODE>   formats for floating point numbers and <CODE>%d</CODE> for 
  integers. The   function returns 0 for success and <CODE>GSL_EFAILED</CODE> if 
  there was a   problem writing to the file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_fscanf</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_vector *   <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the vector <VAR>v</VAR>. The vector <VAR>v</VAR> must be preallocated with the 
    correct length since the function uses the size of <VAR>v</VAR> to determine 
    how many numbers to read. The function returns 0 for success and   
  <CODE>GSL_EFAILED</CODE> if there was a problem reading from the file.   
  </P></DD></DL>
<HR>
<A name="Vector-views"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-vectors" 
rel="next">Copying vectors</A>, Previous: <A accessKey="p" href="#Reading-and-writing-vectors" 
rel="previous">Reading and writing vectors</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Vector-views-1"></A>
<H4 class="subsection">8.3.5 Vector views</H4>
<P>In addition to creating vectors from slices of blocks it is also possible to 
 slice vectors and create vector views. For example, a subvector of another 
 vector can be described with a view, or two views can be made which provide 
 access to the even and odd elements of a vector. </P><A name="index-gsl_005fvector_005fview"></A><A 
name="index-gsl_005fvector_005fconst_005fview"></A>
<P>A vector view is a temporary object, stored on the stack, which can be used 
 to operate on a subset of vector elements. Vector views can be defined for both 
 constant and non-constant vectors, using separate types that preserve 
constness.  A vector view has the type <CODE>gsl_vector_view</CODE> and a 
constant vector  view has the type <CODE>gsl_vector_const_view</CODE>. In both 
cases the elements  of the view can be accessed as a <CODE>gsl_vector</CODE> 
using the <CODE>vector</CODE> component of the view object. A pointer to a 
vector of type <CODE>gsl_vector *</CODE> or <CODE>const gsl_vector *</CODE> can 
be obtained by  taking the address of this component with the <CODE>&amp;</CODE> 
operator. </P>
<P>When using this pointer it is important to ensure that the view itself 
 remains in scope—the simplest way to do so is by always writing the pointer as 
<CODE>&amp;</CODE><VAR>view</VAR><CODE>.vector</CODE>, and never storing this 
 value in another variable. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005fsubvector"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_vector_subvector</STRONG> <EM>(gsl_vector 
    * <VAR>v</VAR>, size_t <VAR>offset</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fvector_005fconst_005fsubvector"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_vector_const_subvector</STRONG><EM>(const gsl_vector * 
  <VAR>v</VAR>, size_t <VAR>offset</VAR>, size_t   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of a subvector of another vector   
  <VAR>v</VAR>. The start of the new vector is offset by <VAR>offset</VAR>   
  elements from the start of the original vector. The new vector has   
  <VAR>n</VAR> elements. Mathematically, the <VAR>i</VAR>-th element of the new  
   vector <VAR>v’</VAR> is given by, </P>
  <DIV class="example"><PRE class="example">v'(i) = v-&gt;data[(offset + i)*v-&gt;stride]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n-1</CODE>. </P>
  <P>The <CODE>data</CODE> pointer of the returned vector struct is set to null  
   if the combined parameters (<VAR>offset</VAR>,<VAR>n</VAR>) overrun the end 
  of   the original vector. </P>
  <P>The new vector is only a view of the block underlying the original vector,  
   <VAR>v</VAR>. The block containing the elements of <VAR>v</VAR> is not owned  
   by the new vector. When the view goes out of scope the original vector   
  <VAR>v</VAR> and its block will continue to exist. The original memory can   
  only be deallocated by freeing the original vector. Of course, the original   
  vector should not be deallocated while the view is still in use. </P>
  <P>The function <CODE>gsl_vector_const_subvector</CODE> is equivalent to   
  <CODE>gsl_vector_subvector</CODE> but can be used for vectors which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fvector_005fsubvector_005fwith_005fstride"></A>Function:   
  <EM>gsl_vector_view</EM> 
  <STRONG>gsl_vector_subvector_with_stride</STRONG><EM>(gsl_vector * 
  <VAR>v</VAR>, size_t <VAR>offset</VAR>, size_t   <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fvector_005fconst_005fsubvector_005fwith_005fstride"></A>Function: 
    
  <EM>gsl_vector_const_view</EM><STRONG>gsl_vector_const_subvector_with_stride</STRONG> 
  <EM>(const gsl_vector   * <VAR>v</VAR>, size_t <VAR>offset</VAR>, size_t 
  <VAR>stride</VAR>, size_t   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of a subvector of another vector   
  <VAR>v</VAR> with an additional stride argument. The subvector is formed in   
  the same way as for <CODE>gsl_vector_subvector</CODE> but the new vector has   
  <VAR>n</VAR> elements with a step-size of <VAR>stride</VAR> from one element   
  to the next in the original vector. Mathematically, the <VAR>i</VAR>-th   
  element of the new vector <VAR>v’</VAR> is given by, </P>
  <DIV class="example"><PRE class="example">v'(i) = v-&gt;data[(offset + i*stride)*v-&gt;stride]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n-1</CODE>. </P>
  <P>Note that subvector views give direct access to the underlying elements of  
   the original vector. For example, the following code will zero the even   
  elements of the vector <CODE>v</CODE> of length <CODE>n</CODE>, while leaving  
   the odd elements untouched, </P>
  <DIV class="example"><PRE class="example">gsl_vector_view v_even 
  = gsl_vector_subvector_with_stride (v, 0, 2, n/2);
gsl_vector_set_zero (&amp;v_even.vector);
</PRE></DIV>
  <P>A vector view can be passed to any subroutine which takes a vector argument 
    just as a directly allocated vector would be, using   
  <CODE>&amp;</CODE><VAR>view</VAR><CODE>.vector</CODE>. For example, the   
  following code computes the norm of the odd elements of <CODE>v</CODE> using   
  the <SMALL>BLAS</SMALL> routine <SMALL>DNRM2</SMALL>, </P>
  <DIV class="example"><PRE class="example">gsl_vector_view v_odd 
  = gsl_vector_subvector_with_stride (v, 1, 2, n/2);
double r = gsl_blas_dnrm2 (&amp;v_odd.vector);
</PRE></DIV>
  <P>The function <CODE>gsl_vector_const_subvector_with_stride</CODE> is   
  equivalent to <CODE>gsl_vector_subvector_with_stride</CODE> but can be used   
  for vectors which are declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fcomplex_005freal"></A>Function:   
  <EM>gsl_vector_view</EM> 
  <STRONG>gsl_vector_complex_real</STRONG><EM>(gsl_vector_complex * 
  <VAR>v</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fvector_005fcomplex_005fconst_005freal"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_vector_complex_const_real</STRONG><EM>(const gsl_vector_complex * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the real parts of the complex   
  vector <VAR>v</VAR>. </P>
  <P>The function <CODE>gsl_vector_complex_const_real</CODE> is equivalent to   
  <CODE>gsl_vector_complex_real</CODE> but can be used for vectors which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fcomplex_005fimag"></A>Function:   
  <EM>gsl_vector_view</EM> 
  <STRONG>gsl_vector_complex_imag</STRONG><EM>(gsl_vector_complex * 
  <VAR>v</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fvector_005fcomplex_005fconst_005fimag"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_vector_complex_const_imag</STRONG><EM>(const gsl_vector_complex * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the imaginary parts of the complex  
   vector <VAR>v</VAR>. </P>
  <P>The function <CODE>gsl_vector_complex_const_imag</CODE> is equivalent to   
  <CODE>gsl_vector_complex_imag</CODE> but can be used for vectors which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fview_005farray"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_vector_view_array</STRONG> <EM>(double *  
   <VAR>base</VAR>, size_t <VAR>n</VAR>) </EM></DT>
  <DT><A name="index-gsl_005fvector_005fconst_005fview_005farray"></A>Function:  
   <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_vector_const_view_array</STRONG><EM>(const double * 
  <VAR>base</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of an array. The start of the new   
  vector is given by <VAR>base</VAR> and has <VAR>n</VAR> elements.   
  Mathematically, the <VAR>i</VAR>-th element of the new vector <VAR>v’</VAR> is 
    given by, </P>
  <DIV class="example"><PRE class="example">v'(i) = base[i]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n-1</CODE>. </P>
  <P>The array containing the elements of <VAR>v</VAR> is not owned by the new   
  vector view. When the view goes out of scope the original array will continue  
   to exist. The original memory can only be deallocated by freeing the original 
    pointer <VAR>base</VAR>. Of course, the original array should not be   
  deallocated while the view is still in use. </P>
  <P>The function <CODE>gsl_vector_const_view_array</CODE> is equivalent to   
  <CODE>gsl_vector_view_array</CODE> but can be used for arrays which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fvector_005fview_005farray_005fwith_005fstride"></A>Function: 
    <EM>gsl_vector_view</EM> 
  <STRONG>gsl_vector_view_array_with_stride</STRONG><EM>(double * 
  <VAR>base</VAR>, size_t <VAR>stride</VAR>, size_t   <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fvector_005fconst_005fview_005farray_005fwith_005fstride"></A>Function: 
    
  <EM>gsl_vector_const_view</EM><STRONG>gsl_vector_const_view_array_with_stride</STRONG> 
  <EM>(const double *   <VAR>base</VAR>, size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of an array <VAR>base</VAR> with an   
  additional stride argument. The subvector is formed in the same way as for   
  <CODE>gsl_vector_view_array</CODE> but the new vector has <VAR>n</VAR>   
  elements with a step-size of <VAR>stride</VAR> from one element to the next in 
    the original array. Mathematically, the <VAR>i</VAR>-th element of the new   
  vector <VAR>v’</VAR> is given by, </P>
  <DIV class="example"><PRE class="example">v'(i) = base[i*stride]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n-1</CODE>. </P>
  <P>Note that the view gives direct access to the underlying elements of the   
  original array. A vector view can be passed to any subroutine which takes a   
  vector argument just as a directly allocated vector would be, using   
  <CODE>&amp;</CODE><VAR>view</VAR><CODE>.vector</CODE>. </P>
  <P>The function <CODE>gsl_vector_const_view_array_with_stride</CODE> is   
  equivalent to <CODE>gsl_vector_view_array_with_stride</CODE> but can be used   
  for arrays which are declared <CODE>const</CODE>. </P></DD></DL>
<HR>
<A name="Copying-vectors"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Exchanging-elements" 
rel="next">Exchanging elements</A>, Previous: <A accessKey="p" href="#Vector-views" 
rel="previous">Vector views</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-vectors-1"></A>
<H4 class="subsection">8.3.6 Copying vectors</H4>
<P>Common operations on vectors such as addition and multiplication are 
 available in the <SMALL>BLAS</SMALL> part of the library (see <A href="#BLAS-Support">BLAS 
 Support</A>). However, it is useful to have a small number of utility functions 
 which do not require the full <SMALL>BLAS</SMALL> code. The following functions 
 fall into this category. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_memcpy</STRONG> <EM>(gsl_vector * 
  <VAR>dest</VAR>, const   gsl_vector * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the vector <VAR>src</VAR> into the   
  vector <VAR>dest</VAR>. The two vectors must have the same length. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_swap</STRONG> <EM>(gsl_vector * <VAR>v</VAR>, 
  gsl_vector *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function exchanges the elements of the vectors <VAR>v</VAR> and   
  <VAR>w</VAR> by copying. The two vectors must have the same length. 
</P></DD></DL>
<HR>
<A name="Exchanging-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Vector-operations" 
rel="next">Vector operations</A>, Previous: <A accessKey="p" href="#Copying-vectors" 
rel="previous">Copying vectors</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Exchanging-elements-1"></A>
<H4 class="subsection">8.3.7 Exchanging elements</H4>
<P>The following function can be used to exchange, or permute, the elements of a 
 vector. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005fswap_005felements"></A>Function:   
  <EM>int</EM> <STRONG>gsl_vector_swap_elements</STRONG> <EM>(gsl_vector *   
  <VAR>v</VAR>, size_t <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function exchanges the <VAR>i</VAR>-th and <VAR>j</VAR>-th elements of 
    the vector <VAR>v</VAR> in-place. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005freverse"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_reverse</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function reverses the order of the elements of the vector   
  <VAR>v</VAR>. </P></DD></DL>
<HR>
<A name="Vector-operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Finding-maximum-and-minimum-elements-of-vectors" 
rel="next">Finding maximum and minimum elements of vectors</A>, Previous: <A 
accessKey="p" href="#Exchanging-elements" 
rel="previous">Exchanging elements</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Vector-operations-1"></A>
<H4 class="subsection">8.3.8 Vector operations</H4>
<DL>
  <DT><A name="index-gsl_005fvector_005fadd"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_add</STRONG> <EM>(gsl_vector * <VAR>a</VAR>, 
  const   gsl_vector * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function adds the elements of vector <VAR>b</VAR> to the elements of   
  vector <VAR>a</VAR>. The result <EM>a_i \leftarrow a_i + b_i</EM> is stored in 
    <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The two vectors must have 
  the   same length. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fsub"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_sub</STRONG> <EM>(gsl_vector * <VAR>a</VAR>, 
  const   gsl_vector * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function subtracts the elements of vector <VAR>b</VAR> from the   
  elements of vector <VAR>a</VAR>. The result <EM>a_i \leftarrow a_i - b_i</EM>  
   is stored in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The two vectors 
    must have the same length. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fmul"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_mul</STRONG> <EM>(gsl_vector * <VAR>a</VAR>, 
  const   gsl_vector * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the elements of vector <VAR>a</VAR> by the   
  elements of vector <VAR>b</VAR>. The result <EM>a_i \leftarrow a_i * b_i</EM>  
   is stored in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The two vectors 
    must have the same length. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fdiv"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_div</STRONG> <EM>(gsl_vector * <VAR>a</VAR>, 
  const   gsl_vector * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function divides the elements of vector <VAR>a</VAR> by the elements   
  of vector <VAR>b</VAR>. The result <EM>a_i \leftarrow a_i / b_i</EM> is stored 
    in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The two vectors must 
  have   the same length. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fscale"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_scale</STRONG> <EM>(gsl_vector * <VAR>a</VAR>, 
  const double   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the elements of vector <VAR>a</VAR> by the   
  constant factor <VAR>x</VAR>. The result <EM>a_i \leftarrow x a_i</EM> is   
  stored in <VAR>a</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fadd_005fconstant"></A>Function:   
  <EM>int</EM> <STRONG>gsl_vector_add_constant</STRONG> <EM>(gsl_vector *   
  <VAR>a</VAR>, const double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function adds the constant value <VAR>x</VAR> to the elements of the   
  vector <VAR>a</VAR>. The result <EM>a_i \leftarrow a_i + x</EM> is stored in   
  <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="Finding-maximum-and-minimum-elements-of-vectors"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Vector-properties" 
rel="next">Vector properties</A>, Previous: <A accessKey="p" href="#Vector-operations" 
rel="previous">Vector operations</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Finding-maximum-and-minimum-elements-of-vectors-1"></A>
<H4 class="subsection">8.3.9 Finding maximum and minimum elements of 
vectors</H4>
<P>The following operations are only defined for real vectors. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005fmax"></A>Function: 
  <EM>double</EM><STRONG>gsl_vector_max</STRONG> <EM>(const gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum value in the vector <VAR>v</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fmin"></A>Function: 
  <EM>double</EM><STRONG>gsl_vector_min</STRONG> <EM>(const gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum value in the vector <VAR>v</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fminmax"></A>Function: 
  <EM>void</EM><STRONG>gsl_vector_minmax</STRONG> <EM>(const gsl_vector * 
  <VAR>v</VAR>,   double * <VAR>min_out</VAR>, double * 
  <VAR>max_out</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum and maximum values in the vector   
  <VAR>v</VAR>, storing them in <VAR>min_out</VAR> and <VAR>max_out</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fmax_005findex"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_vector_max_index</STRONG> <EM>(const gsl_vector *  
   <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index of the maximum value in the vector   
  <VAR>v</VAR>. When there are several equal maximum elements then the lowest   
  index is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fmin_005findex"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_vector_min_index</STRONG> <EM>(const gsl_vector *  
   <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index of the minimum value in the vector   
  <VAR>v</VAR>. When there are several equal minimum elements then the lowest   
  index is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fminmax_005findex"></A>Function:   
  <EM>void</EM> <STRONG>gsl_vector_minmax_index</STRONG> <EM>(const gsl_vector * 
    <VAR>v</VAR>, size_t * <VAR>imin</VAR>, size_t * <VAR>imax</VAR>)</EM></DT>
  <DD>
  <P>This function returns the indices of the minimum and maximum values in the  
   vector <VAR>v</VAR>, storing them in <VAR>imin</VAR> and <VAR>imax</VAR>. 
  When   there are several equal minimum or maximum elements then the lowest 
  indices   are returned. </P></DD></DL>
<HR>
<A name="Vector-properties"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-vectors" 
rel="next">Example programs for vectors</A>, Previous: <A accessKey="p" href="#Finding-maximum-and-minimum-elements-of-vectors" 
rel="previous">Finding maximum and minimum elements of vectors</A>, Up: <A 
accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Vector-properties-1"></A>
<H4 class="subsection">8.3.10 Vector properties</H4>
<P>The following functions are defined for real and complex vectors. For complex 
 vectors both the real and imaginary parts must satisfy the conditions. </P>
<DL>
  <DT><A name="index-gsl_005fvector_005fisnull"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_isnull</STRONG> <EM>(const gsl_vector *   
  <VAR>v</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fvector_005fispos"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_ispos</STRONG> <EM>(const gsl_vector *   
  <VAR>v</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fvector_005fisneg"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_isneg</STRONG> <EM>(const gsl_vector *   
  <VAR>v</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fvector_005fisnonneg"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_isnonneg</STRONG> <EM>(const gsl_vector *   
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>These functions return 1 if all the elements of the vector <VAR>v</VAR> are 
    zero, strictly positive, strictly negative, or non-negative respectively, 
  and   0 otherwise. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fvector_005fequal"></A>Function: 
  <EM>int</EM><STRONG>gsl_vector_equal</STRONG> <EM>(const gsl_vector * 
  <VAR>u</VAR>, const   gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if the vectors <VAR>u</VAR> and <VAR>v</VAR> are   
  equal (by comparison of element values) and 0 otherwise. </P></DD></DL>
<HR>
<A name="Example-programs-for-vectors"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Vector-properties" 
rel="previous">Vector properties</A>, Up: <A accessKey="u" href="#Vectors" 
rel="up">Vectors</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Example-programs-for-vectors-1"></A>
<H4 class="subsection">8.3.11 Example programs for vectors</H4>
<P>This program shows how to allocate, initialize and read from a vector using 
 the functions <CODE>gsl_vector_alloc</CODE>, <CODE>gsl_vector_set</CODE> and 
<CODE>gsl_vector_get</CODE>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_vector.h&gt;

int
main (void)
{
  int i;
  gsl_vector * v = gsl_vector_alloc (3);
  
  for (i = 0; i &lt; 3; i++)
    {
      gsl_vector_set (v, i, 1.23 + i);
    }
  
  for (i = 0; i &lt; 100; i++) /* OUT OF RANGE ERROR */
    {
      printf ("v_%d = %g\n", i, gsl_vector_get (v, i));
    }

  gsl_vector_free (v);
  return 0;
}
</PRE></DIV>
<P>Here is the output from the program. The final loop attempts to read outside 
 the range of the vector <CODE>v</CODE>, and the error is trapped by the 
 range-checking code in <CODE>gsl_vector_get</CODE>. </P>
<DIV class="example"><PRE class="example">$ ./a.out
v_0 = 1.23
v_1 = 2.23
v_2 = 3.23
gsl: vector_source.c:12: ERROR: index out of range
Default GSL error handler invoked.
Aborted (core dumped)
</PRE></DIV>
<P>The next program shows how to write a vector to a file. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_vector.h&gt;

int
main (void)
{
  int i; 
  gsl_vector * v = gsl_vector_alloc (100);
  
  for (i = 0; i &lt; 100; i++)
    {
      gsl_vector_set (v, i, 1.23 + i);
    }

  {  
     FILE * f = fopen ("test.dat", "w");
     gsl_vector_fprintf (f, v, "%.5g");
     fclose (f);
  }

  gsl_vector_free (v);
  return 0;
}
</PRE></DIV>
<P>After running this program the file <SAMP>test.dat</SAMP> should contain the 
 elements of <CODE>v</CODE>, written using the format specifier 
<CODE>%.5g</CODE>. The vector could then be read back in using the function 
<CODE>gsl_vector_fscanf (f, v)</CODE> as follows: </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_vector.h&gt;

int
main (void)
{
  int i; 
  gsl_vector * v = gsl_vector_alloc (10);

  {  
     FILE * f = fopen ("test.dat", "r");
     gsl_vector_fscanf (f, v);
     fclose (f);
  }

  for (i = 0; i &lt; 10; i++)
    {
      printf ("%g\n", gsl_vector_get(v, i));
    }

  gsl_vector_free (v);
  return 0;
}
</PRE></DIV>
<HR>
<A name="Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Vector-and-Matrix-References-and-Further-Reading" 
rel="next">Vector and Matrix References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Vectors" 
rel="previous">Vectors</A>, Up: <A accessKey="u" href="#Vectors-and-Matrices" 
rel="up">Vectors and Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Matrices-1"></A>
<H3 class="section">8.4 Matrices</H3><A name="index-matrices-1"></A><A name="index-physical-dimension_002c-matrices"></A><A 
name="index-trailing-dimension_002c-matrices"></A><A name="index-leading-dimension_002c-matrices"></A><A 
name="index-ordering_002c-matrix-elements"></A>
<P>Matrices are defined by a <CODE>gsl_matrix</CODE> structure which describes a 
 generalized slice of a block. Like a vector it represents a set of elements in 
 an area of memory, but uses two indices instead of one. </P><A name="index-gsl_005fmatrix"></A>
<P>The <CODE>gsl_matrix</CODE> structure contains six components, the two 
 dimensions of the matrix, a physical dimension, a pointer to the memory where 
 the elements of the matrix are stored, <VAR>data</VAR>, a pointer to the block 
 owned by the matrix <VAR>block</VAR>, if any, and an ownership flag, 
<VAR>owner</VAR>. The physical dimension determines the memory layout and can 
 differ from the matrix dimension to allow the use of submatrices. The 
<CODE>gsl_matrix</CODE> structure is very simple and looks like this, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t size1;
  size_t size2;
  size_t tda;
  double * data;
  gsl_block * block;
  int owner;
} gsl_matrix;
</PRE></DIV>
<P>Matrices are stored in row-major order, meaning that each row of elements 
 forms a contiguous block in memory. This is the standard “C-language ordering” 
of two-dimensional arrays. Note that <SMALL>FORTRAN</SMALL> stores arrays in 
 column-major order. The number of rows is <VAR>size1</VAR>. The range of valid 
 row indices runs from 0 to <CODE>size1-1</CODE>. Similarly <VAR>size2</VAR> is 
 the number of columns. The range of valid column indices runs from 0 to 
<CODE>size2-1</CODE>. The physical row dimension <VAR>tda</VAR>, or <EM>trailing 
 dimension</EM>, specifies the size of a row of the matrix as laid out in 
memory. </P>
<P>For example, in the following matrix <VAR>size1</VAR> is 3, <VAR>size2</VAR> 
 is 4, and <VAR>tda</VAR> is 8. The physical memory layout of the matrix begins 
 in the top left hand-corner and proceeds from left to right along each row in 
 turn. </P>
<DIV class="example"><PRE class="example">00 01 02 03 XX XX XX XX
10 11 12 13 XX XX XX XX
20 21 22 23 XX XX XX XX
</PRE></DIV>
<P>Each unused memory location is represented by “<CODE>XX</CODE>”. The pointer 
<VAR>data</VAR> gives the location of the first element of the matrix in memory. 
 The pointer <VAR>block</VAR> stores the location of the memory block in which 
 the elements of the matrix are located (if any). If the matrix owns this block 
 then the <VAR>owner</VAR> field is set to one and the block will be deallocated 
 when the matrix is freed. If the matrix is only a slice of a block owned by 
 another object then the <VAR>owner</VAR> field is zero and any underlying block 
 will not be freed. </P>
<P>The functions for allocating and accessing matrices are defined in 
<SAMP>gsl_matrix.h</SAMP> </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Matrix-allocation">Matrix 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Accessing-matrix-elements">Accessing 
            matrix elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Initializing-matrix-elements">Initializing 
            matrix elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Reading-and-writing-matrices">Reading 
            and writing matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Matrix-views">Matrix 
            views</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Creating-row-and-column-views">Creating 
            row and column views</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Copying-matrices">Copying 
            matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Copying-rows-and-columns">Copying 
            rows and columns</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Exchanging-rows-and-columns">Exchanging 
            rows and columns</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Matrix-operations">Matrix 
            operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Matrix-properties">Matrix 
            properties</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Example-programs-for-matrices">Example 
            programs for matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Matrix-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Accessing-matrix-elements" 
rel="next">Accessing matrix elements</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Matrix-allocation-1"></A>
<H4 class="subsection">8.4.1 Matrix allocation</H4>
<P>The functions for allocating memory to a matrix follow the style of 
<CODE>malloc</CODE> and <CODE>free</CODE>. They also perform their own error 
 checking. If there is insufficient memory available to allocate a matrix then 
 the functions call the GSL error handler (with an error number of 
<CODE>GSL_ENOMEM</CODE>) in addition to returning a null pointer. Thus if you 
 use the library error handler to abort your program then it isn’t necessary to 
 check every <CODE>alloc</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005falloc"></A>Function: <EM>gsl_matrix 
  *</EM><STRONG>gsl_matrix_alloc</STRONG> <EM>(size_t <VAR>n1</VAR>, size_t   
  <VAR>n2</VAR>)</EM></DT>
  <DD>
  <P>This function creates a matrix of size <VAR>n1</VAR> rows by <VAR>n2</VAR>  
   columns, returning a pointer to a newly initialized matrix struct. A new 
  block   is allocated for the elements of the matrix, and stored in the   
  <VAR>block</VAR> component of the matrix struct. The block is “owned” by the   
  matrix, and will be deallocated when the matrix is deallocated. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fcalloc"></A>Function: <EM>gsl_matrix   
  *</EM> <STRONG>gsl_matrix_calloc</STRONG> <EM>(size_t <VAR>n1</VAR>, size_t   
  <VAR>n2</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a matrix of size <VAR>n1</VAR> rows by   
  <VAR>n2</VAR> columns and initializes all the elements of the matrix to zero.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_free</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function frees a previously allocated matrix <VAR>m</VAR>. If the   
  matrix was created using <CODE>gsl_matrix_alloc</CODE> then the block   
  underlying the matrix will also be deallocated. If the matrix has been created 
    from another object then the memory is still owned by that object and will 
  not   be deallocated. </P></DD></DL>
<HR>
<A name="Accessing-matrix-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-matrix-elements" 
rel="next">Initializing matrix elements</A>, Previous: <A accessKey="p" href="#Matrix-allocation" 
rel="previous">Matrix allocation</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Accessing-matrix-elements-1"></A>
<H4 class="subsection">8.4.2 Accessing matrix elements</H4><A name="index-matrices_002c-range_002dchecking"></A><A 
name="index-range_002dchecking-for-matrices"></A>
<P>The functions for accessing the elements of a matrix use the same range 
 checking system as vectors. You can turn off range checking by recompiling your 
 program with the preprocessor definition <CODE>GSL_RANGE_CHECK_OFF</CODE>. </P>
<P>The elements of the matrix are stored in “C-order”, where the second index 
 moves continuously through memory. More precisely, the element accessed by the 
 function <CODE>gsl_matrix_get(m,i,j)</CODE> and 
<CODE>gsl_matrix_set(m,i,j,x)</CODE> is </P>
<DIV class="example"><PRE class="example">m-&gt;data[i * m-&gt;tda + j]
</PRE></DIV>
<P>where <VAR>tda</VAR> is the physical row-length of the matrix. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_matrix_get</STRONG> <EM>(const gsl_matrix * 
  <VAR>m</VAR>, const   size_t <VAR>i</VAR>, const size_t 
<VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function returns the <EM>(i,j)</EM>-th element of a matrix   
  <VAR>m</VAR>. If <VAR>i</VAR> or <VAR>j</VAR> lie outside the allowed range of 
    0 to <EM><VAR>n1</VAR>-1</EM> and 0 to <EM><VAR>n2</VAR>-1</EM> then the 
  error   handler is invoked and 0 is returned. An inline version of this 
  function is   used when <CODE>HAVE_INLINE</CODE> is defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fset"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_set</STRONG> <EM>(gsl_matrix * <VAR>m</VAR>, 
  const size_t   <VAR>i</VAR>, const size_t <VAR>j</VAR>, double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function sets the value of the <EM>(i,j)</EM>-th element of a matrix   
  <VAR>m</VAR> to <VAR>x</VAR>. If <VAR>i</VAR> or <VAR>j</VAR> lies outside the 
    allowed range of 0 to <EM><VAR>n1</VAR>-1</EM> and 0 to   
  <EM><VAR>n2</VAR>-1</EM> then the error handler is invoked. An inline version  
   of this function is used when <CODE>HAVE_INLINE</CODE> is defined. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fptr"></A>Function: <EM>double 
  *</EM><STRONG>gsl_matrix_ptr</STRONG> <EM>(gsl_matrix * <VAR>m</VAR>, size_t   
  <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fptr"></A>Function: <EM>const   
  double *</EM> <STRONG>gsl_matrix_const_ptr</STRONG> <EM>(const gsl_matrix *   
  <VAR>m</VAR>, size_t <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the <EM>(i,j)</EM>-th element of a   
  matrix <VAR>m</VAR>. If <VAR>i</VAR> or <VAR>j</VAR> lie outside the allowed   
  range of 0 to <EM><VAR>n1</VAR>-1</EM> and 0 to <EM><VAR>n2</VAR>-1</EM> then  
   the error handler is invoked and a null pointer is returned. Inline versions  
   of these functions are used when <CODE>HAVE_INLINE</CODE> is defined. 
  </P></DD></DL>
<HR>
<A name="Initializing-matrix-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-matrices" 
rel="next">Reading and writing matrices</A>, Previous: <A accessKey="p" href="#Accessing-matrix-elements" 
rel="previous">Accessing matrix elements</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-matrix-elements-1"></A>
<H4 class="subsection">8.4.3 Initializing matrix elements</H4><A name="index-matrices_002c-initializing"></A><A 
name="index-initializing-matrices"></A><A name="index-identity-matrix"></A><A 
name="index-matrix_002c-identity"></A><A name="index-zero-matrix"></A><A name="index-matrix_002c-zero"></A><A 
name="index-constant-matrix"></A><A name="index-matrix_002c-constant"></A>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fset_005fall"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_set_all</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>, double   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function sets all the elements of the matrix <VAR>m</VAR> to the value 
    <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fset_005fzero"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_set_zero</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function sets all the elements of the matrix <VAR>m</VAR> to zero.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fset_005fidentity"></A>Function:   
  <EM>void</EM> <STRONG>gsl_matrix_set_identity</STRONG> <EM>(gsl_matrix *   
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function sets the elements of the matrix <VAR>m</VAR> to the   
  corresponding elements of the identity matrix, <EM>m(i,j) = \delta(i,j)</EM>,  
   i.e. a unit diagonal with all off-diagonal elements zero. This applies to 
  both   square and rectangular matrices. </P></DD></DL>
<HR>
<A name="Reading-and-writing-matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Matrix-views" 
rel="next">Matrix views</A>, Previous: <A accessKey="p" href="#Initializing-matrix-elements" 
rel="previous">Initializing matrix elements</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-and-writing-matrices-1"></A>
<H4 class="subsection">8.4.4 Reading and writing matrices</H4>
<P>The library provides functions for reading and writing matrices to a file as 
 binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_fwrite</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const   gsl_matrix * <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the matrix <VAR>m</VAR> to the stream  
   <VAR>stream</VAR> in binary format. The return value is 0 for success and   
  <CODE>GSL_EFAILED</CODE> if there was a problem writing to the file. Since the 
    data is written in the native binary format it may not be portable between   
  different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_fread</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_matrix *   <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function reads into the matrix <VAR>m</VAR> from the open stream   
  <VAR>stream</VAR> in binary format. The matrix <VAR>m</VAR> must be   
  preallocated with the correct dimensions since the function uses the size of   
  <VAR>m</VAR> to determine how many bytes to read. The return value is 0 for   
  success and <CODE>GSL_EFAILED</CODE> if there was a problem reading from the   
  file. The data is assumed to have been written in the native binary format on  
   the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_fprintf</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const   gsl_matrix * <VAR>m</VAR>, const char * <VAR>format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the matrix <VAR>m</VAR> line-by-line   
  to the stream <VAR>stream</VAR> using the format specifier <VAR>format</VAR>,  
   which should be one of the <CODE>%g</CODE>, <CODE>%e</CODE> or 
  <CODE>%f</CODE>   formats for floating point numbers and <CODE>%d</CODE> for 
  integers. The   function returns 0 for success and <CODE>GSL_EFAILED</CODE> if 
  there was a   problem writing to the file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_fscanf</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_matrix *   <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the matrix <VAR>m</VAR>. The matrix <VAR>m</VAR> must be preallocated with the 
    correct dimensions since the function uses the size of <VAR>m</VAR> to   
  determine how many numbers to read. The function returns 0 for success and   
  <CODE>GSL_EFAILED</CODE> if there was a problem reading from the file.   
  </P></DD></DL>
<HR>
<A name="Matrix-views"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Creating-row-and-column-views" 
rel="next">Creating row and column views</A>, Previous: <A accessKey="p" href="#Reading-and-writing-matrices" 
rel="previous">Reading and writing matrices</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Matrix-views-1"></A>
<H4 class="subsection">8.4.5 Matrix views</H4><A name="index-gsl_005fmatrix_005fview"></A><A 
name="index-gsl_005fmatrix_005fconst_005fview"></A>
<P>A matrix view is a temporary object, stored on the stack, which can be used 
 to operate on a subset of matrix elements. Matrix views can be defined for both 
 constant and non-constant matrices using separate types that preserve 
constness.  A matrix view has the type <CODE>gsl_matrix_view</CODE> and a 
constant matrix  view has the type <CODE>gsl_matrix_const_view</CODE>. In both 
cases the elements  of the view can by accessed using the <CODE>matrix</CODE> 
component of the view  object. A pointer <CODE>gsl_matrix *</CODE> or 
<CODE>const gsl_matrix *</CODE>  can be obtained by taking the address of the 
<CODE>matrix</CODE> component with  the <CODE>&amp;</CODE> operator. In addition 
to matrix views it is also possible  to create vector views of a matrix, such as 
row or column views. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fsubmatrix"></A>Function:   
  <EM>gsl_matrix_view</EM> <STRONG>gsl_matrix_submatrix</STRONG> <EM>(gsl_matrix 
    * <VAR>m</VAR>, size_t <VAR>k1</VAR>, size_t <VAR>k2</VAR>, size_t   
  <VAR>n1</VAR>, size_t <VAR>n2</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fsubmatrix"></A>Function:   
  <EM>gsl_matrix_const_view</EM> 
  <STRONG>gsl_matrix_const_submatrix</STRONG><EM>(const gsl_matrix * 
  <VAR>m</VAR>, size_t <VAR>k1</VAR>, size_t   <VAR>k2</VAR>, size_t 
  <VAR>n1</VAR>, size_t <VAR>n2</VAR>)</EM></DT>
  <DD>
  <P>These functions return a matrix view of a submatrix of the matrix   
  <VAR>m</VAR>. The upper-left element of the submatrix is the element   
  (<VAR>k1</VAR>,<VAR>k2</VAR>) of the original matrix. The submatrix has   
  <VAR>n1</VAR> rows and <VAR>n2</VAR> columns. The physical number of columns   
  in memory given by <VAR>tda</VAR> is unchanged. Mathematically, the   
  <EM>(i,j)</EM>-th element of the new matrix is given by, </P>
  <DIV class="example"><PRE class="example">m'(i,j) = m-&gt;data[(k1*m-&gt;tda + k2) + i*m-&gt;tda + j]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n1-1</CODE> and the index 
    <VAR>j</VAR> runs from 0 to <CODE>n2-1</CODE>. </P>
  <P>The <CODE>data</CODE> pointer of the returned matrix struct is set to null  
   if the combined parameters   
  (<VAR>i</VAR>,<VAR>j</VAR>,<VAR>n1</VAR>,<VAR>n2</VAR>,<VAR>tda</VAR>) overrun 
    the ends of the original matrix. </P>
  <P>The new matrix view is only a view of the block underlying the existing   
  matrix, <VAR>m</VAR>. The block containing the elements of <VAR>m</VAR> is not 
    owned by the new matrix view. When the view goes out of scope the original   
  matrix <VAR>m</VAR> and its block will continue to exist. The original memory  
   can only be deallocated by freeing the original matrix. Of course, the   
  original matrix should not be deallocated while the view is still in use. </P>
  <P>The function <CODE>gsl_matrix_const_submatrix</CODE> is equivalent to   
  <CODE>gsl_matrix_submatrix</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fview_005farray"></A>Function:   
  <EM>gsl_matrix_view</EM> <STRONG>gsl_matrix_view_array</STRONG> <EM>(double *  
   <VAR>base</VAR>, size_t <VAR>n1</VAR>, size_t <VAR>n2</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fview_005farray"></A>Function:  
   <EM>gsl_matrix_const_view</EM> 
  <STRONG>gsl_matrix_const_view_array</STRONG><EM>(const double * 
  <VAR>base</VAR>, size_t <VAR>n1</VAR>, size_t   <VAR>n2</VAR>)</EM></DT>
  <DD>
  <P>These functions return a matrix view of the array <VAR>base</VAR>. The   
  matrix has <VAR>n1</VAR> rows and <VAR>n2</VAR> columns. The physical number   
  of columns in memory is also given by <VAR>n2</VAR>. Mathematically, the   
  <EM>(i,j)</EM>-th element of the new matrix is given by, </P>
  <DIV class="example"><PRE class="example">m'(i,j) = base[i*n2 + j]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n1-1</CODE> and the index 
    <VAR>j</VAR> runs from 0 to <CODE>n2-1</CODE>. </P>
  <P>The new matrix is only a view of the array <VAR>base</VAR>. When the view   
  goes out of scope the original array <VAR>base</VAR> will continue to exist.   
  The original memory can only be deallocated by freeing the original array. Of  
   course, the original array should not be deallocated while the view is still  
   in use. </P>
  <P>The function <CODE>gsl_matrix_const_view_array</CODE> is equivalent to   
  <CODE>gsl_matrix_view_array</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmatrix_005fview_005farray_005fwith_005ftda"></A>Function:  
   <EM>gsl_matrix_view</EM> 
  <STRONG>gsl_matrix_view_array_with_tda</STRONG><EM>(double * <VAR>base</VAR>, 
  size_t <VAR>n1</VAR>, size_t <VAR>n2</VAR>,   size_t <VAR>tda</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fview_005farray_005fwith_005ftda"></A>Function: 
    
  <EM>gsl_matrix_const_view</EM><STRONG>gsl_matrix_const_view_array_with_tda</STRONG> 
  <EM>(const double *   <VAR>base</VAR>, size_t <VAR>n1</VAR>, size_t 
  <VAR>n2</VAR>, size_t   <VAR>tda</VAR>)</EM></DT>
  <DD>
  <P>These functions return a matrix view of the array <VAR>base</VAR> with a   
  physical number of columns <VAR>tda</VAR> which may differ from the   
  corresponding dimension of the matrix. The matrix has <VAR>n1</VAR> rows and   
  <VAR>n2</VAR> columns, and the physical number of columns in memory is given   
  by <VAR>tda</VAR>. Mathematically, the <EM>(i,j)</EM>-th element of the new   
  matrix is given by, </P>
  <DIV class="example"><PRE class="example">m'(i,j) = base[i*tda + j]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n1-1</CODE> and the index 
    <VAR>j</VAR> runs from 0 to <CODE>n2-1</CODE>. </P>
  <P>The new matrix is only a view of the array <VAR>base</VAR>. When the view   
  goes out of scope the original array <VAR>base</VAR> will continue to exist.   
  The original memory can only be deallocated by freeing the original array. Of  
   course, the original array should not be deallocated while the view is still  
   in use. </P>
  <P>The function <CODE>gsl_matrix_const_view_array_with_tda</CODE> is   
  equivalent to <CODE>gsl_matrix_view_array_with_tda</CODE> but can be used for  
   matrices which are declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fview_005fvector"></A>Function:   
  <EM>gsl_matrix_view</EM> 
  <STRONG>gsl_matrix_view_vector</STRONG><EM>(gsl_vector * <VAR>v</VAR>, size_t 
  <VAR>n1</VAR>, size_t   <VAR>n2</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fview_005fvector"></A>Function: 
    <EM>gsl_matrix_const_view</EM> 
  <STRONG>gsl_matrix_const_view_vector</STRONG><EM>(const gsl_vector * 
  <VAR>v</VAR>, size_t <VAR>n1</VAR>, size_t   <VAR>n2</VAR>)</EM></DT>
  <DD>
  <P>These functions return a matrix view of the vector <VAR>v</VAR>. The matrix 
    has <VAR>n1</VAR> rows and <VAR>n2</VAR> columns. The vector must have unit  
   stride. The physical number of columns in memory is also given by   
  <VAR>n2</VAR>. Mathematically, the <EM>(i,j)</EM>-th element of the new matrix 
    is given by, </P>
  <DIV class="example"><PRE class="example">m'(i,j) = v-&gt;data[i*n2 + j]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n1-1</CODE> and the index 
    <VAR>j</VAR> runs from 0 to <CODE>n2-1</CODE>. </P>
  <P>The new matrix is only a view of the vector <VAR>v</VAR>. When the view   
  goes out of scope the original vector <VAR>v</VAR> will continue to exist. The 
    original memory can only be deallocated by freeing the original vector. Of   
  course, the original vector should not be deallocated while the view is still  
   in use. </P>
  <P>The function <CODE>gsl_matrix_const_view_vector</CODE> is equivalent to   
  <CODE>gsl_matrix_view_vector</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmatrix_005fview_005fvector_005fwith_005ftda"></A>Function: 
    <EM>gsl_matrix_view</EM> 
  <STRONG>gsl_matrix_view_vector_with_tda</STRONG><EM>(gsl_vector * 
  <VAR>v</VAR>, size_t <VAR>n1</VAR>, size_t <VAR>n2</VAR>,   size_t 
  <VAR>tda</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fview_005fvector_005fwith_005ftda"></A>Function: 
    
  <EM>gsl_matrix_const_view</EM><STRONG>gsl_matrix_const_view_vector_with_tda</STRONG> 
  <EM>(const gsl_vector *   <VAR>v</VAR>, size_t <VAR>n1</VAR>, size_t 
  <VAR>n2</VAR>, size_t   <VAR>tda</VAR>)</EM></DT>
  <DD>
  <P>These functions return a matrix view of the vector <VAR>v</VAR> with a   
  physical number of columns <VAR>tda</VAR> which may differ from the   
  corresponding matrix dimension. The vector must have unit stride. The matrix   
  has <VAR>n1</VAR> rows and <VAR>n2</VAR> columns, and the physical number of   
  columns in memory is given by <VAR>tda</VAR>. Mathematically, the   
  <EM>(i,j)</EM>-th element of the new matrix is given by, </P>
  <DIV class="example"><PRE class="example">m'(i,j) = v-&gt;data[i*tda + j]
</PRE></DIV>
  <P>where the index <VAR>i</VAR> runs from 0 to <CODE>n1-1</CODE> and the index 
    <VAR>j</VAR> runs from 0 to <CODE>n2-1</CODE>. </P>
  <P>The new matrix is only a view of the vector <VAR>v</VAR>. When the view   
  goes out of scope the original vector <VAR>v</VAR> will continue to exist. The 
    original memory can only be deallocated by freeing the original vector. Of   
  course, the original vector should not be deallocated while the view is still  
   in use. </P>
  <P>The function <CODE>gsl_matrix_const_view_vector_with_tda</CODE> is   
  equivalent to <CODE>gsl_matrix_view_vector_with_tda</CODE> but can be used for 
    matrices which are declared <CODE>const</CODE>. </P></DD></DL>
<HR>
<A name="Creating-row-and-column-views"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-matrices" 
rel="next">Copying matrices</A>, Previous: <A accessKey="p" href="#Matrix-views" 
rel="previous">Matrix views</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Creating-row-and-column-views-1"></A>
<H4 class="subsection">8.4.6 Creating row and column views</H4>
<P>In general there are two ways to access an object, by reference or by 
 copying. The functions described in this section create vector views which 
allow  access to a row or column of a matrix by reference. Modifying elements of 
the  view is equivalent to modifying the matrix, since both the vector view and 
the  matrix point to the same memory block. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005frow"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_matrix_row</STRONG> <EM>(gsl_matrix *   
  <VAR>m</VAR>, size_t <VAR>i</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005frow"></A>Function:   
  <EM>gsl_vector_const_view</EM> <STRONG>gsl_matrix_const_row</STRONG><EM>(const 
  gsl_matrix * <VAR>m</VAR>, size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the <VAR>i</VAR>-th row of the   
  matrix <VAR>m</VAR>. The <CODE>data</CODE> pointer of the new vector is set to 
    null if <VAR>i</VAR> is out of range. </P>
  <P>The function <CODE>gsl_vector_const_row</CODE> is equivalent to   
  <CODE>gsl_matrix_row</CODE> but can be used for matrices which are declared   
  <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fcolumn"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_matrix_column</STRONG> <EM>(gsl_matrix *  
   <VAR>m</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fcolumn"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_matrix_const_column</STRONG><EM>(const gsl_matrix * <VAR>m</VAR>, 
  size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the <VAR>j</VAR>-th column of the   
  matrix <VAR>m</VAR>. The <CODE>data</CODE> pointer of the new vector is set to 
    null if <VAR>j</VAR> is out of range. </P>
  <P>The function <CODE>gsl_vector_const_column</CODE> is equivalent to   
  <CODE>gsl_matrix_column</CODE> but can be used for matrices which are declared 
    <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fsubrow"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_matrix_subrow</STRONG> <EM>(gsl_matrix *  
   <VAR>m</VAR>, size_t <VAR>i</VAR>, size_t <VAR>offset</VAR>, size_t   
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fsubrow"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_matrix_const_subrow</STRONG><EM>(const gsl_matrix * <VAR>m</VAR>, 
  size_t <VAR>i</VAR>, size_t   <VAR>offset</VAR>, size_t 
<VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the <VAR>i</VAR>-th row of the   
  matrix <VAR>m</VAR> beginning at <VAR>offset</VAR> elements past the first   
  column and containing <VAR>n</VAR> elements. The <CODE>data</CODE> pointer of  
   the new vector is set to null if <VAR>i</VAR>, <VAR>offset</VAR>, or   
  <VAR>n</VAR> are out of range. </P>
  <P>The function <CODE>gsl_vector_const_subrow</CODE> is equivalent to   
  <CODE>gsl_matrix_subrow</CODE> but can be used for matrices which are declared 
    <CODE>const</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fsubcolumn"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_matrix_subcolumn</STRONG> <EM>(gsl_matrix 
    * <VAR>m</VAR>, size_t <VAR>j</VAR>, size_t <VAR>offset</VAR>, size_t   
  <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fsubcolumn"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_matrix_const_subcolumn</STRONG><EM>(const gsl_matrix * 
  <VAR>m</VAR>, size_t <VAR>j</VAR>, size_t   <VAR>offset</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the <VAR>j</VAR>-th column of the   
  matrix <VAR>m</VAR> beginning at <VAR>offset</VAR> elements past the first row 
    and containing <VAR>n</VAR> elements. The <CODE>data</CODE> pointer of the 
  new   vector is set to null if <VAR>j</VAR>, <VAR>offset</VAR>, or 
  <VAR>n</VAR> are   out of range. </P>
  <P>The function <CODE>gsl_vector_const_subcolumn</CODE> is equivalent to   
  <CODE>gsl_matrix_subcolumn</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL><A 
name="index-matrix-diagonal"></A><A name="index-diagonal_002c-of-a-matrix"></A>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fdiagonal"></A>Function:   
  <EM>gsl_vector_view</EM> <STRONG>gsl_matrix_diagonal</STRONG> <EM>(gsl_matrix  
   * <VAR>m</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fdiagonal"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_matrix_const_diagonal</STRONG><EM>(const gsl_matrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the diagonal of the matrix   
  <VAR>m</VAR>. The matrix <VAR>m</VAR> is not required to be square. For a   
  rectangular matrix the length of the diagonal is the same as the smaller   
  dimension of the matrix. </P>
  <P>The function <CODE>gsl_matrix_const_diagonal</CODE> is equivalent to   
  <CODE>gsl_matrix_diagonal</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL><A 
name="index-matrix-subdiagonal"></A><A 
name="index-subdiagonal_002c-of-a-matrix"></A>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fsubdiagonal"></A>Function:   
  <EM>gsl_vector_view</EM> 
  <STRONG>gsl_matrix_subdiagonal</STRONG><EM>(gsl_matrix * <VAR>m</VAR>, size_t 
  <VAR>k</VAR>) </EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fsubdiagonal"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_matrix_const_subdiagonal</STRONG><EM>(const gsl_matrix * 
  <VAR>m</VAR>, size_t <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the <VAR>k</VAR>-th subdiagonal of  
   the matrix <VAR>m</VAR>. The matrix <VAR>m</VAR> is not required to be 
  square.   The diagonal of the matrix corresponds to <EM>k = 0</EM>. </P>
  <P>The function <CODE>gsl_matrix_const_subdiagonal</CODE> is equivalent to   
  <CODE>gsl_matrix_subdiagonal</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL><A 
name="index-matrix-superdiagonal"></A><A 
name="index-superdiagonal_002c-matrix"></A>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fsuperdiagonal"></A>Function:   
  <EM>gsl_vector_view</EM> 
  <STRONG>gsl_matrix_superdiagonal</STRONG><EM>(gsl_matrix * <VAR>m</VAR>, 
  size_t <VAR>k</VAR>) </EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fconst_005fsuperdiagonal"></A>Function:   
  <EM>gsl_vector_const_view</EM> 
  <STRONG>gsl_matrix_const_superdiagonal</STRONG><EM>(const gsl_matrix * 
  <VAR>m</VAR>, size_t <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>These functions return a vector view of the <VAR>k</VAR>-th superdiagonal   
  of the matrix <VAR>m</VAR>. The matrix <VAR>m</VAR> is not required to be   
  square. The diagonal of the matrix corresponds to <EM>k = 0</EM>. </P>
  <P>The function <CODE>gsl_matrix_const_superdiagonal</CODE> is equivalent to   
  <CODE>gsl_matrix_superdiagonal</CODE> but can be used for matrices which are   
  declared <CODE>const</CODE>. </P></DD></DL>
<HR>
<A name="Copying-matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-rows-and-columns" 
rel="next">Copying rows and columns</A>, Previous: <A accessKey="p" href="#Creating-row-and-column-views" 
rel="previous">Creating row and column views</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-matrices-1"></A>
<H4 class="subsection">8.4.7 Copying matrices</H4>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_memcpy</STRONG> <EM>(gsl_matrix * 
  <VAR>dest</VAR>, const   gsl_matrix * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the matrix <VAR>src</VAR> into the   
  matrix <VAR>dest</VAR>. The two matrices must have the same size. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_swap</STRONG> <EM>(gsl_matrix * <VAR>m1</VAR>, 
  gsl_matrix *   <VAR>m2</VAR>)</EM></DT>
  <DD>
  <P>This function exchanges the elements of the matrices <VAR>m1</VAR> and   
  <VAR>m2</VAR> by copying. The two matrices must have the same size. 
</P></DD></DL>
<HR>
<A name="Copying-rows-and-columns"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Exchanging-rows-and-columns" 
rel="next">Exchanging rows and columns</A>, Previous: <A accessKey="p" href="#Copying-matrices" 
rel="previous">Copying matrices</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-rows-and-columns-1"></A>
<H4 class="subsection">8.4.8 Copying rows and columns</H4>
<P>The functions described in this section copy a row or column of a matrix into 
 a vector. This allows the elements of the vector and the matrix to be modified 
 independently. Note that if the matrix and the vector point to overlapping 
 regions of memory then the result will be undefined. The same effect can be 
 achieved with more generality using <CODE>gsl_vector_memcpy</CODE> with vector 
 views of rows and columns. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fget_005frow"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_get_row</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>, const   gsl_matrix * <VAR>m</VAR>, size_t 
<VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the <VAR>i</VAR>-th row of the matrix  
   <VAR>m</VAR> into the vector <VAR>v</VAR>. The length of the vector must be   
  the same as the length of the row. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fget_005fcol"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_get_col</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>, const   gsl_matrix * <VAR>m</VAR>, size_t 
<VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the <VAR>j</VAR>-th column of the   
  matrix <VAR>m</VAR> into the vector <VAR>v</VAR>. The length of the vector   
  must be the same as the length of the column. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fset_005frow"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_set_row</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>, size_t   <VAR>i</VAR>, const gsl_vector * 
<VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the vector <VAR>v</VAR> into the   
  <VAR>i</VAR>-th row of the matrix <VAR>m</VAR>. The length of the vector must  
   be the same as the length of the row. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fset_005fcol"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_set_col</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>, size_t   <VAR>j</VAR>, const gsl_vector * 
<VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the vector <VAR>v</VAR> into the   
  <VAR>j</VAR>-th column of the matrix <VAR>m</VAR>. The length of the vector   
  must be the same as the length of the column. </P></DD></DL>
<HR>
<A name="Exchanging-rows-and-columns"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Matrix-operations" 
rel="next">Matrix operations</A>, Previous: <A accessKey="p" href="#Copying-rows-and-columns" 
rel="previous">Copying rows and columns</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Exchanging-rows-and-columns-1"></A>
<H4 class="subsection">8.4.9 Exchanging rows and columns</H4>
<P>The following functions can be used to exchange the rows and columns of a 
 matrix. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fswap_005frows"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_swap_rows</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>, size_t   <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function exchanges the <VAR>i</VAR>-th and <VAR>j</VAR>-th rows of the 
    matrix <VAR>m</VAR> in-place. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fswap_005fcolumns"></A>Function:   
  <EM>int</EM> <STRONG>gsl_matrix_swap_columns</STRONG> <EM>(gsl_matrix *   
  <VAR>m</VAR>, size_t <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function exchanges the <VAR>i</VAR>-th and <VAR>j</VAR>-th columns of  
   the matrix <VAR>m</VAR> in-place. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fswap_005frowcol"></A>Function:   
  <EM>int</EM> <STRONG>gsl_matrix_swap_rowcol</STRONG> <EM>(gsl_matrix *   
  <VAR>m</VAR>, size_t <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function exchanges the <VAR>i</VAR>-th row and <VAR>j</VAR>-th column  
   of the matrix <VAR>m</VAR> in-place. The matrix must be square for this   
  operation to be possible. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ftranspose_005fmemcpy"></A>Function:   
  <EM>int</EM> <STRONG>gsl_matrix_transpose_memcpy</STRONG> <EM>(gsl_matrix *   
  <VAR>dest</VAR>, const gsl_matrix * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function makes the matrix <VAR>dest</VAR> the transpose of the matrix  
   <VAR>src</VAR> by copying the elements of <VAR>src</VAR> into 
  <VAR>dest</VAR>.   This function works for all matrices provided that the 
  dimensions of the   matrix <VAR>dest</VAR> match the transposed dimensions of 
  the matrix   <VAR>src</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005ftranspose"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_transpose</STRONG> <EM>(gsl_matrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function replaces the matrix <VAR>m</VAR> by its transpose by copying  
   the elements of the matrix in-place. The matrix must be square for this   
  operation to be possible. </P></DD></DL>
<HR>
<A name="Matrix-operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Finding-maximum-and-minimum-elements-of-matrices" 
rel="next">Finding maximum and minimum elements of matrices</A>, Previous: <A 
accessKey="p" href="#Exchanging-rows-and-columns" 
rel="previous">Exchanging rows and columns</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Matrix-operations-1"></A>
<H4 class="subsection">8.4.10 Matrix operations</H4>
<P>The following operations are defined for real and complex matrices. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fadd"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_add</STRONG> <EM>(gsl_matrix * <VAR>a</VAR>, 
  const   gsl_matrix * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function adds the elements of matrix <VAR>b</VAR> to the elements of   
  matrix <VAR>a</VAR>. The result <EM>a(i,j) \leftarrow a(i,j) + b(i,j)</EM> is  
   stored in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The two matrices   
  must have the same dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fsub"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_sub</STRONG> <EM>(gsl_matrix * <VAR>a</VAR>, 
  const   gsl_matrix * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function subtracts the elements of matrix <VAR>b</VAR> from the   
  elements of matrix <VAR>a</VAR>. The result <EM>a(i,j) \leftarrow a(i,j) -   
  b(i,j)</EM> is stored in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The  
   two matrices must have the same dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fmul_005felements"></A>Function:   
  <EM>int</EM> <STRONG>gsl_matrix_mul_elements</STRONG> <EM>(gsl_matrix *   
  <VAR>a</VAR>, const gsl_matrix * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the elements of matrix <VAR>a</VAR> by the   
  elements of matrix <VAR>b</VAR>. The result <EM>a(i,j) \leftarrow a(i,j) *   
  b(i,j)</EM> is stored in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The  
   two matrices must have the same dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fdiv_005felements"></A>Function:   
  <EM>int</EM> <STRONG>gsl_matrix_div_elements</STRONG> <EM>(gsl_matrix *   
  <VAR>a</VAR>, const gsl_matrix * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function divides the elements of matrix <VAR>a</VAR> by the elements   
  of matrix <VAR>b</VAR>. The result <EM>a(i,j) \leftarrow a(i,j) / b(i,j)</EM>  
   is stored in <VAR>a</VAR> and <VAR>b</VAR> remains unchanged. The two 
  matrices   must have the same dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fscale"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_scale</STRONG> <EM>(gsl_matrix * <VAR>a</VAR>, 
  const double   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the elements of matrix <VAR>a</VAR> by the   
  constant factor <VAR>x</VAR>. The result <EM>a(i,j) \leftarrow x a(i,j)</EM>   
  is stored in <VAR>a</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fadd_005fconstant"></A>Function:   
  <EM>int</EM> <STRONG>gsl_matrix_add_constant</STRONG> <EM>(gsl_matrix *   
  <VAR>a</VAR>, const double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function adds the constant value <VAR>x</VAR> to the elements of the   
  matrix <VAR>a</VAR>. The result <EM>a(i,j) \leftarrow a(i,j) + x</EM> is   
  stored in <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="Finding-maximum-and-minimum-elements-of-matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Matrix-properties" 
rel="next">Matrix properties</A>, Previous: <A accessKey="p" href="#Matrix-operations" 
rel="previous">Matrix operations</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Finding-maximum-and-minimum-elements-of-matrices-1"></A>
<H4 class="subsection">8.4.11 Finding maximum and minimum elements of 
 matrices</H4>
<P>The following operations are only defined for real matrices. </P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fmax"></A>Function: 
  <EM>double</EM><STRONG>gsl_matrix_max</STRONG> <EM>(const gsl_matrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum value in the matrix <VAR>m</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fmin"></A>Function: 
  <EM>double</EM><STRONG>gsl_matrix_min</STRONG> <EM>(const gsl_matrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum value in the matrix <VAR>m</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fminmax"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_minmax</STRONG> <EM>(const gsl_matrix * 
  <VAR>m</VAR>,   double * <VAR>min_out</VAR>, double * 
  <VAR>max_out</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum and maximum values in the matrix   
  <VAR>m</VAR>, storing them in <VAR>min_out</VAR> and <VAR>max_out</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fmax_005findex"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_max_index</STRONG> <EM>(const gsl_matrix * 
  <VAR>m</VAR>,   size_t * <VAR>imax</VAR>, size_t * <VAR>jmax</VAR>)</EM></DT>
  <DD>
  <P>This function returns the indices of the maximum value in the matrix   
  <VAR>m</VAR>, storing them in <VAR>imax</VAR> and <VAR>jmax</VAR>. When there  
   are several equal maximum elements then the first element found is returned,  
   searching in row-major order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fmin_005findex"></A>Function: 
  <EM>void</EM><STRONG>gsl_matrix_min_index</STRONG> <EM>(const gsl_matrix * 
  <VAR>m</VAR>,   size_t * <VAR>imin</VAR>, size_t * <VAR>jmin</VAR>)</EM></DT>
  <DD>
  <P>This function returns the indices of the minimum value in the matrix   
  <VAR>m</VAR>, storing them in <VAR>imin</VAR> and <VAR>jmin</VAR>. When there  
   are several equal minimum elements then the first element found is returned,  
   searching in row-major order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fminmax_005findex"></A>Function:   
  <EM>void</EM> <STRONG>gsl_matrix_minmax_index</STRONG> <EM>(const gsl_matrix * 
    <VAR>m</VAR>, size_t * <VAR>imin</VAR>, size_t * <VAR>jmin</VAR>, size_t *   
  <VAR>imax</VAR>, size_t * <VAR>jmax</VAR>)</EM></DT>
  <DD>
  <P>This function returns the indices of the minimum and maximum values in the  
   matrix <VAR>m</VAR>, storing them in (<VAR>imin</VAR>,<VAR>jmin</VAR>) and   
  (<VAR>imax</VAR>,<VAR>jmax</VAR>). When there are several equal minimum or   
  maximum elements then the first elements found are returned, searching in   
  row-major order. </P></DD></DL>
<HR>
<A name="Matrix-properties"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-matrices" 
rel="next">Example programs for matrices</A>, Previous: <A accessKey="p" href="#Finding-maximum-and-minimum-elements-of-matrices" 
rel="previous">Finding maximum and minimum elements of matrices</A>, Up: <A 
accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Matrix-properties-1"></A>
<H4 class="subsection">8.4.12 Matrix properties</H4>
<P>The following functions are defined for real and complex matrices. For 
 complex matrices both the real and imaginary parts must satisfy the conditions. 
</P>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fisnull"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_isnull</STRONG> <EM>(const gsl_matrix *   
  <VAR>m</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fispos"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_ispos</STRONG> <EM>(const gsl_matrix *   
  <VAR>m</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fisneg"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_isneg</STRONG> <EM>(const gsl_matrix *   
  <VAR>m</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmatrix_005fisnonneg"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_isnonneg</STRONG> <EM>(const gsl_matrix *   
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>These functions return 1 if all the elements of the matrix <VAR>m</VAR> are 
    zero, strictly positive, strictly negative, or non-negative respectively, 
  and   0 otherwise. To test whether a matrix is positive-definite, use the 
  Cholesky   decomposition (see <A href="#Cholesky-Decomposition">Cholesky 
    Decomposition</A>). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmatrix_005fequal"></A>Function: 
  <EM>int</EM><STRONG>gsl_matrix_equal</STRONG> <EM>(const gsl_matrix * 
  <VAR>a</VAR>, const   gsl_matrix * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if the matrices <VAR>a</VAR> and <VAR>b</VAR> are   
  equal (by comparison of element values) and 0 otherwise. </P></DD></DL>
<HR>
<A name="Example-programs-for-matrices"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Matrix-properties" 
rel="previous">Matrix properties</A>, Up: <A accessKey="u" href="#Matrices" 
rel="up">Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Example-programs-for-matrices-1"></A>
<H4 class="subsection">8.4.13 Example programs for matrices</H4>
<P>The program below shows how to allocate, initialize and read from a matrix 
 using the functions <CODE>gsl_matrix_alloc</CODE>, <CODE>gsl_matrix_set</CODE> 
 and <CODE>gsl_matrix_get</CODE>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_matrix.h&gt;

int
main (void)
{
  int i, j; 
  gsl_matrix * m = gsl_matrix_alloc (10, 3);
  
  for (i = 0; i &lt; 10; i++)
    for (j = 0; j &lt; 3; j++)
      gsl_matrix_set (m, i, j, 0.23 + 100*i + j);
  
  for (i = 0; i &lt; 100; i++)  /* OUT OF RANGE ERROR */
    for (j = 0; j &lt; 3; j++)
      printf ("m(%d,%d) = %g\n", i, j, 
              gsl_matrix_get (m, i, j));

  gsl_matrix_free (m);

  return 0;
}
</PRE></DIV>
<P>Here is the output from the program. The final loop attempts to read outside 
 the range of the matrix <CODE>m</CODE>, and the error is trapped by the 
 range-checking code in <CODE>gsl_matrix_get</CODE>. </P>
<DIV class="example"><PRE class="example">$ ./a.out
m(0,0) = 0.23
m(0,1) = 1.23
m(0,2) = 2.23
m(1,0) = 100.23
m(1,1) = 101.23
m(1,2) = 102.23
...
m(9,2) = 902.23
gsl: matrix_source.c:13: ERROR: first index out of range
Default GSL error handler invoked.
Aborted (core dumped)
</PRE></DIV>
<P>The next program shows how to write a matrix to a file. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_matrix.h&gt;

int
main (void)
{
  int i, j, k = 0; 
  gsl_matrix * m = gsl_matrix_alloc (100, 100);
  gsl_matrix * a = gsl_matrix_alloc (100, 100);
  
  for (i = 0; i &lt; 100; i++)
    for (j = 0; j &lt; 100; j++)
      gsl_matrix_set (m, i, j, 0.23 + i + j);

  {  
     FILE * f = fopen ("test.dat", "wb");
     gsl_matrix_fwrite (f, m);
     fclose (f);
  }

  {  
     FILE * f = fopen ("test.dat", "rb");
     gsl_matrix_fread (f, a);
     fclose (f);
  }

  for (i = 0; i &lt; 100; i++)
    for (j = 0; j &lt; 100; j++)
      {
        double mij = gsl_matrix_get (m, i, j);
        double aij = gsl_matrix_get (a, i, j);
        if (mij != aij) k++;
      }

  gsl_matrix_free (m);
  gsl_matrix_free (a);

  printf ("differences = %d (should be zero)\n", k);
  return (k &gt; 0);
}
</PRE></DIV>
<P>After running this program the file <SAMP>test.dat</SAMP> should contain the 
 elements of <CODE>m</CODE>, written in binary format. The matrix which is read 
 back in using the function <CODE>gsl_matrix_fread</CODE> should be exactly 
equal  to the original matrix. </P>
<P>The following program demonstrates the use of vector views. The program 
 computes the column norms of a matrix. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_matrix.h&gt;
#include &lt;gsl/gsl_blas.h&gt;

int
main (void)
{
  size_t i,j;

  gsl_matrix *m = gsl_matrix_alloc (10, 10);

  for (i = 0; i &lt; 10; i++)
    for (j = 0; j &lt; 10; j++)
      gsl_matrix_set (m, i, j, sin (i) + cos (j));

  for (j = 0; j &lt; 10; j++)
    {
      gsl_vector_view column = gsl_matrix_column (m, j);
      double d;

      d = gsl_blas_dnrm2 (&amp;column.vector);

      printf ("matrix column %d, norm = %g\n", j, d);
    }

  gsl_matrix_free (m);

  return 0;
}
</PRE></DIV>
<P>Here is the output of the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out
</PRE><PRE class="verbatim">matrix column 0, norm = 4.31461
matrix column 1, norm = 3.1205
matrix column 2, norm = 2.19316
matrix column 3, norm = 3.26114
matrix column 4, norm = 2.53416
matrix column 5, norm = 2.57281
matrix column 6, norm = 4.20469
matrix column 7, norm = 3.65202
matrix column 8, norm = 2.08524
matrix column 9, norm = 3.07313
</PRE></DIV>
<P>The results can be confirmed using <SMALL>GNU OCTAVE</SMALL>, </P>
<DIV class="example"><PRE class="example">$ octave
GNU Octave, version 2.0.16.92
octave&gt; m = sin(0:9)' * ones(1,10) 
               + ones(10,1) * cos(0:9); 
octave&gt; sqrt(sum(m.^2))
ans =
  4.3146  3.1205  2.1932  3.2611  2.5342  2.5728
  4.2047  3.6520  2.0852  3.0731
</PRE></DIV>
<HR>
<A name="Vector-and-Matrix-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Matrices" 
rel="previous">Matrices</A>, Up: <A accessKey="u" href="#Vectors-and-Matrices" 
rel="up">Vectors and Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-3"></A>
<H3 class="section">8.5 References and Further Reading</H3>
<P>The block, vector and matrix objects in GSL follow the <CODE>valarray</CODE> 
 model of C++. A description of this model can be found in the following 
 reference, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->B. Stroustrup, <CITE>The C++ Programming Language</CITE> (3rd  
   Ed), Section 22.4 Vector Arithmetic. Addison-Wesley 1997, ISBN 0-201-88954-4. 
    </LI></UL>
<HR>
<A name="Permutations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Combinations" 
rel="next">Combinations</A>, Previous: <A accessKey="p" href="#Vectors-and-Matrices" 
rel="previous">Vectors and Matrices</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Permutations-1"></A>
<H2 class="chapter">9 Permutations</H2><A name="index-permutations"></A>
<P>This chapter describes functions for creating and manipulating permutations. 
 A permutation <EM>p</EM> is represented by an array of <EM>n</EM> integers in 
 the range 0 to <EM>n-1</EM>, where each value <EM>p_i</EM> occurs once and only 
 once. The application of a permutation <EM>p</EM> to a vector <EM>v</EM> yields 
 a new vector <EM>v'</EM> where <EM>v'_i = v_{p_i}</EM>. For example, the array 
<EM>(0,1,3,2)</EM> represents a permutation which exchanges the last two 
 elements of a four element vector. The corresponding identity permutation is 
<EM>(0,1,2,3)</EM>. </P>
<P>Note that the permutations produced by the linear algebra routines correspond 
 to the exchange of matrix columns, and so should be considered as applying to 
 row-vectors in the form <EM>v' = v P</EM> rather than column-vectors, when 
 permuting the elements of a vector. </P>
<P>The functions described in this chapter are defined in the header file 
<SAMP>gsl_permutation.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#The-Permutation-struct">The 
            Permutation struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Permutation-allocation">Permutation 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Accessing-permutation-elements">Accessing 
            permutation elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Permutation-properties">Permutation 
            properties</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Permutation-functions">Permutation 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Applying-Permutations">Applying 
            Permutations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Reading-and-writing-permutations">Reading 
            and writing permutations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Permutations-in-cyclic-form">Permutations 
            in cyclic form</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Permutation-Examples">Permutation 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Permutation-References-and-Further-Reading">Permutation 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="The-Permutation-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutation-allocation" 
rel="next">Permutation allocation</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Permutation-struct-1"></A>
<H3 class="section">9.1 The Permutation struct</H3><A name="index-gsl_005fpermutation"></A>
<P>A permutation is defined by a structure containing two components, the size 
 of the permutation and a pointer to the permutation array. The elements of the 
 permutation array are all of type <CODE>size_t</CODE>. The 
<CODE>gsl_permutation</CODE> structure looks like this, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t size;
  size_t * data;
} gsl_permutation;
</PRE></DIV>
<HR>
<A name="Permutation-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Accessing-permutation-elements" 
rel="next">Accessing permutation elements</A>, Previous: <A accessKey="p" href="#The-Permutation-struct" 
rel="previous">The Permutation struct</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Permutation-allocation-1"></A>
<H3 class="section">9.2 Permutation allocation</H3>
<DL>
  <DT><A name="index-gsl_005fpermutation_005falloc"></A>Function:   
  <EM>gsl_permutation *</EM> <STRONG>gsl_permutation_alloc</STRONG> <EM>(size_t  
   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a new permutation of size <VAR>n</VAR>.  
   The permutation is not initialized and its elements are undefined. Use the   
  function <CODE>gsl_permutation_calloc</CODE> if you want to create a   
  permutation which is initialized to the identity. A null pointer is returned   
  if insufficient memory is available to create the permutation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fcalloc"></A>Function:   
  <EM>gsl_permutation *</EM> <STRONG>gsl_permutation_calloc</STRONG> <EM>(size_t 
    <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a new permutation of size <VAR>n</VAR>   
  and initializes it to the identity. A null pointer is returned if insufficient 
    memory is available to create the permutation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005finit"></A>Function: 
  <EM>void</EM><STRONG>gsl_permutation_init</STRONG> <EM>(gsl_permutation *   
  <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-identity-permutation"></A>
  <P>This function initializes the permutation <VAR>p</VAR> to the identity,   
  i.e. <EM>(0,1,2,…,n-1)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_permutation_free</STRONG> <EM>(gsl_permutation *   
  <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory used by the permutation <VAR>p</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_memcpy</STRONG> <EM>(gsl_permutation *   
  <VAR>dest</VAR>, const gsl_permutation * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the permutation <VAR>src</VAR> into   
  the permutation <VAR>dest</VAR>. The two permutations must have the same size. 
    </P></DD></DL>
<HR>
<A name="Accessing-permutation-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutation-properties" 
rel="next">Permutation properties</A>, Previous: <A accessKey="p" href="#Permutation-allocation" 
rel="previous">Permutation allocation</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Accessing-permutation-elements-1"></A>
<H3 class="section">9.3 Accessing permutation elements</H3>
<P>The following functions can be used to access and manipulate permutations. 
</P>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fget"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_permutation_get</STRONG> <EM>(const gsl_permutation 
  *   <VAR>p</VAR>, const size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value of the <VAR>i</VAR>-th element of the   
  permutation <VAR>p</VAR>. If <VAR>i</VAR> lies outside the allowed range of 0  
   to <EM><VAR>n</VAR>-1</EM> then the error handler is invoked and 0 is   
  returned. An inline version of this function is used when   
  <CODE>HAVE_INLINE</CODE> is defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_swap</STRONG> <EM>(gsl_permutation * 
  <VAR>p</VAR>,   const size_t <VAR>i</VAR>, const size_t 
<VAR>j</VAR>)</EM></DT>
  <DD><A name="index-exchanging-permutation-elements"></A><A name="index-swapping-permutation-elements"></A>
  <P>This function exchanges the <VAR>i</VAR>-th and <VAR>j</VAR>-th elements of 
    the permutation <VAR>p</VAR>. </P></DD></DL>
<HR>
<A name="Permutation-properties"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutation-functions" 
rel="next">Permutation functions</A>, Previous: <A accessKey="p" href="#Accessing-permutation-elements" 
rel="previous">Accessing permutation elements</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Permutation-properties-1"></A>
<H3 class="section">9.4 Permutation properties</H3>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fsize"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_permutation_size</STRONG> <EM>(const 
  gsl_permutation *   <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function returns the size of the permutation <VAR>p</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fdata"></A>Function: <EM>size_t 
  *</EM><STRONG>gsl_permutation_data</STRONG> <EM>(const gsl_permutation *   
  <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the array of elements in the permutation 
    <VAR>p</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fvalid"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_valid</STRONG> <EM>(const gsl_permutation 
  *   <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-checking-permutation-for-validity"></A><A name="index-testing-permutation-for-validity"></A>
  <P>This function checks that the permutation <VAR>p</VAR> is valid. The   
  <VAR>n</VAR> elements should contain each of the numbers 0 to   
  <EM><VAR>n</VAR>-1</EM> once and only once. </P></DD></DL>
<HR>
<A name="Permutation-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Applying-Permutations" 
rel="next">Applying Permutations</A>, Previous: <A accessKey="p" href="#Permutation-properties" 
rel="previous">Permutation properties</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Permutation-functions-1"></A>
<H3 class="section">9.5 Permutation functions</H3>
<DL>
  <DT><A name="index-gsl_005fpermutation_005freverse"></A>Function: 
  <EM>void</EM><STRONG>gsl_permutation_reverse</STRONG> <EM>(gsl_permutation *   
  <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-reversing-a-permutation"></A>
  <P>This function reverses the elements of the permutation <VAR>p</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005finverse"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_inverse</STRONG> <EM>(gsl_permutation *   
  <VAR>inv</VAR>, const gsl_permutation * <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-inverting-a-permutation"></A>
  <P>This function computes the inverse of the permutation <VAR>p</VAR>, storing 
    the result in <VAR>inv</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fnext"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_next</STRONG> <EM>(gsl_permutation *   
  <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-iterating-through-permutations"></A>
  <P>This function advances the permutation <VAR>p</VAR> to the next permutation 
    in lexicographic order and returns <CODE>GSL_SUCCESS</CODE>. If no further   
  permutations are available it returns <CODE>GSL_FAILURE</CODE> and leaves   
  <VAR>p</VAR> unmodified. Starting with the identity permutation and repeatedly 
    applying this function will iterate through all possible permutations of a   
  given order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fprev"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_prev</STRONG> <EM>(gsl_permutation *   
  <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function steps backwards from the permutation <VAR>p</VAR> to the   
  previous permutation in lexicographic order, returning   
  <CODE>GSL_SUCCESS</CODE>. If no previous permutation is available it returns   
  <CODE>GSL_FAILURE</CODE> and leaves <VAR>p</VAR> unmodified. </P></DD></DL>
<HR>
<A name="Applying-Permutations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-permutations" 
rel="next">Reading and writing permutations</A>, Previous: <A accessKey="p" 
href="#Permutation-functions" 
rel="previous">Permutation functions</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Applying-Permutations-1"></A>
<H3 class="section">9.6 Applying Permutations</H3>
<DL>
  <DT><A name="index-gsl_005fpermute"></A>Function: 
  <EM>int</EM><STRONG>gsl_permute</STRONG> <EM>(const size_t * <VAR>p</VAR>, 
  double *   <VAR>data</VAR>, size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function applies the permutation <VAR>p</VAR> to the array   
  <VAR>data</VAR> of size <VAR>n</VAR> with stride <VAR>stride</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermute_005finverse"></A>Function: 
  <EM>int</EM><STRONG>gsl_permute_inverse</STRONG> <EM>(const size_t * 
  <VAR>p</VAR>, double   * <VAR>data</VAR>, size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function applies the inverse of the permutation <VAR>p</VAR> to the   
  array <VAR>data</VAR> of size <VAR>n</VAR> with stride <VAR>stride</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermute_005fvector"></A>Function: 
  <EM>int</EM><STRONG>gsl_permute_vector</STRONG> <EM>(const gsl_permutation * 
  <VAR>p</VAR>,   gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function applies the permutation <VAR>p</VAR> to the elements of the   
  vector <VAR>v</VAR>, considered as a row-vector acted on by a permutation   
  matrix from the right, <EM>v' = v P</EM>. The <EM>j</EM>-th column of the   
  permutation matrix <EM>P</EM> is given by the <EM><VAR>p</VAR>_j</EM>-th   
  column of the identity matrix. The permutation <VAR>p</VAR> and the vector   
  <VAR>v</VAR> must have the same length. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermute_005fvector_005finverse"></A>Function:   
  <EM>int</EM> <STRONG>gsl_permute_vector_inverse</STRONG> <EM>(const   
  gsl_permutation * <VAR>p</VAR>, gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function applies the inverse of the permutation <VAR>p</VAR> to the   
  elements of the vector <VAR>v</VAR>, considered as a row-vector acted on by an 
    inverse permutation matrix from the right, <EM>v' = v P^T</EM>. Note that 
  for   permutation matrices the inverse is the same as the transpose. The   
  <EM>j</EM>-th column of the permutation matrix <EM>P</EM> is given by the   
  <EM><VAR>p</VAR>_j</EM>-th column of the identity matrix. The permutation   
  <VAR>p</VAR> and the vector <VAR>v</VAR> must have the same length. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fmul"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_mul</STRONG> <EM>(gsl_permutation * 
  <VAR>p</VAR>,   const gsl_permutation * <VAR>pa</VAR>, const gsl_permutation * 
    <VAR>pb</VAR>)</EM></DT>
  <DD>
  <P>This function combines the two permutations <VAR>pa</VAR> and <VAR>pb</VAR> 
    into a single permutation <VAR>p</VAR>, where <EM><VAR>p</VAR> = 
  <VAR>pa</VAR>   * <VAR>pb</VAR></EM>. The permutation <VAR>p</VAR> is 
  equivalent to applying   <VAR>pb</VAR> first and then <VAR>pa</VAR>. 
</P></DD></DL>
<HR>
<A name="Reading-and-writing-permutations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutations-in-cyclic-form" 
rel="next">Permutations in cyclic form</A>, Previous: <A accessKey="p" href="#Applying-Permutations" 
rel="previous">Applying Permutations</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Reading-and-writing-permutations-1"></A>
<H3 class="section">9.7 Reading and writing permutations</H3>
<P>The library provides functions for reading and writing permutations to a file 
 as binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fpermutation_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_fwrite</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_permutation * <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the permutation <VAR>p</VAR> to the   
  stream <VAR>stream</VAR> in binary format. The function returns   
  <CODE>GSL_EFAILED</CODE> if there was a problem writing to the file. Since the 
    data is written in the native binary format it may not be portable between   
  different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_fread</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_permutation * <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function reads into the permutation <VAR>p</VAR> from the open stream  
   <VAR>stream</VAR> in binary format. The permutation <VAR>p</VAR> must be   
  preallocated with the correct length since the function uses the size of   
  <VAR>p</VAR> to determine how many bytes to read. The function returns   
  <CODE>GSL_EFAILED</CODE> if there was a problem reading from the file. The   
  data is assumed to have been written in the native binary format on the same   
  architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_fprintf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_permutation * <VAR>p</VAR>, const char * 
  <VAR>format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the permutation <VAR>p</VAR>   
  line-by-line to the stream <VAR>stream</VAR> using the format specifier   
  <VAR>format</VAR>, which should be suitable for a type of <VAR>size_t</VAR>.   
  In ISO C99 the type modifier <CODE>z</CODE> represents <CODE>size_t</CODE>, so 
    <CODE>"%zu\n"</CODE> is a suitable format.<A href="#FOOT9" 
  name="DOCF9"><SUP>9</SUP></A> The function returns <CODE>GSL_EFAILED</CODE> if 
    there was a problem writing to the file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_permutation_fscanf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_permutation * <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the permutation <VAR>p</VAR>. The permutation <VAR>p</VAR> must be   
  preallocated with the correct length since the function uses the size of   
  <VAR>p</VAR> to determine how many numbers to read. The function returns   
  <CODE>GSL_EFAILED</CODE> if there was a problem reading from the file.   
  </P></DD></DL>
<HR>
<A name="Permutations-in-cyclic-form"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutation-Examples" 
rel="next">Permutation Examples</A>, Previous: <A accessKey="p" href="#Reading-and-writing-permutations" 
rel="previous">Reading and writing permutations</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Permutations-in-cyclic-form-1"></A>
<H3 class="section">9.8 Permutations in cyclic form</H3>
<P>A permutation can be represented in both <EM>linear</EM> and <EM>cyclic</EM> 
 notations. The functions described in this section convert between the two 
 forms. The linear notation is an index mapping, and has already been described 
 above. The cyclic notation expresses a permutation as a series of circular 
 rearrangements of groups of elements, or <EM>cycles</EM>. </P>
<P>For example, under the cycle (1 2 3), 1 is replaced by 2, 2 is replaced by 3 
 and 3 is replaced by 1 in a circular fashion. Cycles of different sets of 
 elements can be combined independently, for example (1 2 3) (4 5) combines the 
 cycle (1 2 3) with the cycle (4 5), which is an exchange of elements 4 and 5. A 
 cycle of length one represents an element which is unchanged by the permutation 
 and is referred to as a <EM>singleton</EM>. </P>
<P>It can be shown that every permutation can be decomposed into combinations of 
 cycles. The decomposition is not unique, but can always be rearranged into a 
 standard <EM>canonical form</EM> by a reordering of elements. The library uses 
 the canonical form defined in Knuth’s <CITE>Art of Computer Programming</CITE> 
 (Vol 1, 3rd Ed, 1997) Section 1.3.3, p.178. </P>
<P>The procedure for obtaining the canonical form given by Knuth is, </P>
<OL>
  <LI>Write all singleton cycles explicitly </LI>
  <LI>Within each cycle, put the smallest number first </LI>
  <LI>Order the cycles in decreasing order of the first number in the cycle.   
  </LI></OL>
<P>For example, the linear representation (2 4 3 0 1) is represented as (1 4) (0 
 2 3) in canonical form. The permutation corresponds to an exchange of elements 
1  and 4, and rotation of elements 0, 2 and 3. </P>
<P>The important property of the canonical form is that it can be reconstructed 
 from the contents of each cycle without the brackets. In addition, by removing 
 the brackets it can be considered as a linear representation of a different 
 permutation. In the example given above the permutation (2 4 3 0 1) would 
become  (1 4 0 2 3). This mapping has many applications in the theory of 
permutations. </P>
<DL>
  <DT><A 
  name="index-gsl_005fpermutation_005flinear_005fto_005fcanonical"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_permutation_linear_to_canonical</STRONG><EM>(gsl_permutation * 
  <VAR>q</VAR>, const gsl_permutation *   <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function computes the canonical form of the permutation <VAR>p</VAR>   
  and stores it in the output argument <VAR>q</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fpermutation_005fcanonical_005fto_005flinear"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_permutation_canonical_to_linear</STRONG><EM>(gsl_permutation * 
  <VAR>p</VAR>, const gsl_permutation *   <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>This function converts a permutation <VAR>q</VAR> in canonical form back   
  into linear form storing it in the output argument <VAR>p</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005finversions"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_permutation_inversions</STRONG> <EM>(const   
  gsl_permutation * <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function counts the number of inversions in the permutation   
  <VAR>p</VAR>. An inversion is any pair of elements that are not in order. For  
   example, the permutation 2031 has three inversions, corresponding to the 
  pairs   (2,0) (2,1) and (3,1). The identity permutation has no inversions. 
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005flinear_005fcycles"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_permutation_linear_cycles</STRONG> <EM>(const   
  gsl_permutation * <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function counts the number of cycles in the permutation <VAR>p</VAR>,  
   given in linear form. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fpermutation_005fcanonical_005fcycles"></A>Function: 
    <EM>size_t</EM> <STRONG>gsl_permutation_canonical_cycles</STRONG> <EM>(const 
    gsl_permutation * <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>This function counts the number of cycles in the permutation <VAR>q</VAR>,  
   given in canonical form. </P></DD></DL>
<HR>
<A name="Permutation-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Permutation-References-and-Further-Reading" 
rel="next">Permutation References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Permutations-in-cyclic-form" 
rel="previous">Permutations in cyclic form</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-3"></A>
<H3 class="section">9.9 Examples</H3>
<P>The example program below creates a random permutation (by shuffling the 
 elements of the identity) and finds its inverse. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;
#include &lt;gsl/gsl_permutation.h&gt;

int
main (void) 
{
  const size_t N = 10;
  const gsl_rng_type * T;
  gsl_rng * r;

  gsl_permutation * p = gsl_permutation_alloc (N);
  gsl_permutation * q = gsl_permutation_alloc (N);

  gsl_rng_env_setup();
  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  printf ("initial permutation:");  
  gsl_permutation_init (p);
  gsl_permutation_fprintf (stdout, p, " %u");
  printf ("\n");

  printf (" random permutation:");  
  gsl_ran_shuffle (r, p-&gt;data, N, sizeof(size_t));
  gsl_permutation_fprintf (stdout, p, " %u");
  printf ("\n");

  printf ("inverse permutation:");  
  gsl_permutation_inverse (q, p);
  gsl_permutation_fprintf (stdout, q, " %u");
  printf ("\n");

  gsl_permutation_free (p);
  gsl_permutation_free (q);
  gsl_rng_free (r);

  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
initial permutation: 0 1 2 3 4 5 6 7 8 9
 random permutation: 1 3 5 2 7 6 0 4 9 8
inverse permutation: 6 0 3 1 7 2 5 4 9 8
</PRE></DIV>
<P>The random permutation <CODE>p[i]</CODE> and its inverse <CODE>q[i]</CODE> 
 are related through the identity <CODE>p[q[i]] = i</CODE>, which can be 
verified  from the output. </P>
<P>The next example program steps forwards through all possible third order 
 permutations, starting from the identity, </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_permutation.h&gt;

int
main (void) 
{
  gsl_permutation * p = gsl_permutation_alloc (3);

  gsl_permutation_init (p);

  do 
   {
      gsl_permutation_fprintf (stdout, p, " %u");
      printf ("\n");
   }
  while (gsl_permutation_next(p) == GSL_SUCCESS);

  gsl_permutation_free (p);

  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
 0 1 2
 0 2 1
 1 0 2
 1 2 0
 2 0 1
 2 1 0
</PRE></DIV>
<P>The permutations are generated in lexicographic order. To reverse the 
 sequence, begin with the final permutation (which is the reverse of the 
 identity) and replace <CODE>gsl_permutation_next</CODE> with 
<CODE>gsl_permutation_prev</CODE>. </P>
<HR>
<A name="Permutation-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Permutation-Examples" 
rel="previous">Permutation Examples</A>, Up: <A accessKey="u" href="#Permutations" 
rel="up">Permutations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-4"></A>
<H3 class="section">9.10 References and Further Reading</H3>
<P>The subject of permutations is covered extensively in Knuth’s <CITE>Sorting 
 and Searching</CITE>, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Donald E. Knuth, <CITE>The Art of Computer Programming:   
  Sorting and Searching</CITE> (Vol 3, 3rd Ed, 1997), Addison-Wesley, ISBN   
  0201896850. </LI></UL>
<P>For the definition of the <EM>canonical form</EM> see, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Donald E. Knuth, <CITE>The Art of Computer Programming:   
  Fundamental Algorithms</CITE> (Vol 1, 3rd Ed, 1997), Addison-Wesley, ISBN   
  0201896850. Section 1.3.3, <CITE>An Unusual Correspondence</CITE>, p.178–179.  
   </LI></UL>
<HR>
<A name="Combinations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multisets" 
rel="next">Multisets</A>, Previous: <A accessKey="p" href="#Permutations" 
rel="previous">Permutations</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Combinations-1"></A>
<H2 class="chapter">10 Combinations</H2><A name="index-combinations"></A>
<P>This chapter describes functions for creating and manipulating combinations. 
 A combination <EM>c</EM> is represented by an array of <EM>k</EM> integers in 
 the range 0 to <EM>n-1</EM>, where each value <EM>c_i</EM> occurs at most once. 
 The combination <EM>c</EM> corresponds to indices of <EM>k</EM> elements chosen 
 from an <EM>n</EM> element vector. Combinations are useful for iterating over 
 all <EM>k</EM>-element subsets of a set. </P>
<P>The functions described in this chapter are defined in the header file 
<SAMP>gsl_combination.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#The-Combination-struct">The 
            Combination struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Combination-allocation">Combination 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Accessing-combination-elements">Accessing 
            combination elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Combination-properties">Combination 
            properties</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Combination-functions">Combination 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Reading-and-writing-combinations">Reading 
            and writing combinations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Combination-Examples">Combination 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Combination-References-and-Further-Reading">Combination 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="The-Combination-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Combination-allocation" 
rel="next">Combination allocation</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Combination-struct-1"></A>
<H3 class="section">10.1 The Combination struct</H3><A name="index-gsl_005fcombination"></A>
<P>A combination is defined by a structure containing three components, the 
 values of <EM>n</EM> and <EM>k</EM>, and a pointer to the combination array. 
The  elements of the combination array are all of type <CODE>size_t</CODE>, and 
are  stored in increasing order. The <CODE>gsl_combination</CODE> structure 
looks  like this, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t n;
  size_t k;
  size_t *data;
} gsl_combination;
</PRE></DIV>
<HR>
<A name="Combination-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Accessing-combination-elements" 
rel="next">Accessing combination elements</A>, Previous: <A accessKey="p" href="#The-Combination-struct" 
rel="previous">The Combination struct</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Combination-allocation-1"></A>
<H3 class="section">10.2 Combination allocation</H3>
<DL>
  <DT><A name="index-gsl_005fcombination_005falloc"></A>Function:   
  <EM>gsl_combination *</EM> <STRONG>gsl_combination_alloc</STRONG> <EM>(size_t  
   <VAR>n</VAR>, size_t <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a new combination with parameters   
  <VAR>n</VAR>, <VAR>k</VAR>. The combination is not initialized and its   
  elements are undefined. Use the function <CODE>gsl_combination_calloc</CODE>   
  if you want to create a combination which is initialized to the   
  lexicographically first combination. A null pointer is returned if   
  insufficient memory is available to create the combination. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005fcalloc"></A>Function:   
  <EM>gsl_combination *</EM> <STRONG>gsl_combination_calloc</STRONG> <EM>(size_t 
    <VAR>n</VAR>, size_t <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a new combination with parameters   
  <VAR>n</VAR>, <VAR>k</VAR> and initializes it to the lexicographically first   
  combination. A null pointer is returned if insufficient memory is available to 
    create the combination. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005finit_005ffirst"></A>Function:   
  <EM>void</EM> <STRONG>gsl_combination_init_first</STRONG> <EM>(gsl_combination 
    * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the combination <VAR>c</VAR> to the   
  lexicographically first combination, i.e. <EM>(0,1,2,…,k-1)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005finit_005flast"></A>Function:   
  <EM>void</EM> <STRONG>gsl_combination_init_last</STRONG> <EM>(gsl_combination  
   * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the combination <VAR>c</VAR> to the   
  lexicographically last combination, i.e. <EM>(n-k,n-k+1,…,n-1)</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_combination_free</STRONG> <EM>(gsl_combination *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory used by the combination <VAR>c</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_memcpy</STRONG> <EM>(gsl_combination *   
  <VAR>dest</VAR>, const gsl_combination * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the combination <VAR>src</VAR> into   
  the combination <VAR>dest</VAR>. The two combinations must have the same size. 
    </P></DD></DL>
<HR>
<A name="Accessing-combination-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Combination-properties" 
rel="next">Combination properties</A>, Previous: <A accessKey="p" href="#Combination-allocation" 
rel="previous">Combination allocation</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Accessing-combination-elements-1"></A>
<H3 class="section">10.3 Accessing combination elements</H3>
<P>The following function can be used to access the elements of a combination. 
</P>
<DL>
  <DT><A name="index-gsl_005fcombination_005fget"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_combination_get</STRONG> <EM>(const gsl_combination 
  *   <VAR>c</VAR>, const size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value of the <VAR>i</VAR>-th element of the   
  combination <VAR>c</VAR>. If <VAR>i</VAR> lies outside the allowed range of 0  
   to <EM><VAR>k</VAR>-1</EM> then the error handler is invoked and 0 is   
  returned. An inline version of this function is used when   
  <CODE>HAVE_INLINE</CODE> is defined. </P></DD></DL>
<HR>
<A name="Combination-properties"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Combination-functions" 
rel="next">Combination functions</A>, Previous: <A accessKey="p" href="#Accessing-combination-elements" 
rel="previous">Accessing combination elements</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Combination-properties-1"></A>
<H3 class="section">10.4 Combination properties</H3>
<DL>
  <DT><A name="index-gsl_005fcombination_005fn"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_combination_n</STRONG> <EM>(const gsl_combination * 
    <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns the range (<EM>n</EM>) of the combination   
  <VAR>c</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005fk"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_combination_k</STRONG> <EM>(const gsl_combination * 
    <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns the number of elements (<EM>k</EM>) in the   
  combination <VAR>c</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005fdata"></A>Function: <EM>size_t 
  *</EM><STRONG>gsl_combination_data</STRONG> <EM>(const gsl_combination *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the array of elements in the combination 
    <VAR>c</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005fvalid"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_valid</STRONG> <EM>(gsl_combination *   
  <VAR>c</VAR>)</EM></DT>
  <DD><A name="index-checking-combination-for-validity"></A><A name="index-testing-combination-for-validity"></A>
  <P>This function checks that the combination <VAR>c</VAR> is valid. The   
  <VAR>k</VAR> elements should lie in the range 0 to <EM><VAR>n</VAR>-1</EM>,   
  with each value occurring once at most and in increasing order. </P></DD></DL>
<HR>
<A name="Combination-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-combinations" 
rel="next">Reading and writing combinations</A>, Previous: <A accessKey="p" 
href="#Combination-properties" 
rel="previous">Combination properties</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Combination-functions-1"></A>
<H3 class="section">10.5 Combination functions</H3>
<DL>
  <DT><A name="index-gsl_005fcombination_005fnext"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_next</STRONG> <EM>(gsl_combination *   
  <VAR>c</VAR>)</EM></DT>
  <DD><A name="index-iterating-through-combinations"></A>
  <P>This function advances the combination <VAR>c</VAR> to the next combination 
    in lexicographic order and returns <CODE>GSL_SUCCESS</CODE>. If no further   
  combinations are available it returns <CODE>GSL_FAILURE</CODE> and leaves   
  <VAR>c</VAR> unmodified. Starting with the first combination and repeatedly   
  applying this function will iterate through all possible combinations of a   
  given order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005fprev"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_prev</STRONG> <EM>(gsl_combination *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function steps backwards from the combination <VAR>c</VAR> to the   
  previous combination in lexicographic order, returning   
  <CODE>GSL_SUCCESS</CODE>. If no previous combination is available it returns   
  <CODE>GSL_FAILURE</CODE> and leaves <VAR>c</VAR> unmodified. </P></DD></DL>
<HR>
<A name="Reading-and-writing-combinations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Combination-Examples" 
rel="next">Combination Examples</A>, Previous: <A accessKey="p" href="#Combination-functions" 
rel="previous">Combination functions</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Reading-and-writing-combinations-1"></A>
<H3 class="section">10.6 Reading and writing combinations</H3>
<P>The library provides functions for reading and writing combinations to a file 
 as binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fcombination_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_fwrite</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_combination * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the combination <VAR>c</VAR> to the   
  stream <VAR>stream</VAR> in binary format. The function returns   
  <CODE>GSL_EFAILED</CODE> if there was a problem writing to the file. Since the 
    data is written in the native binary format it may not be portable between   
  different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_fread</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_combination * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function reads elements from the open stream <VAR>stream</VAR> into   
  the combination <VAR>c</VAR> in binary format. The combination <VAR>c</VAR>   
  must be preallocated with correct values of <EM>n</EM> and <EM>k</EM> since   
  the function uses the size of <VAR>c</VAR> to determine how many bytes to   
  read. The function returns <CODE>GSL_EFAILED</CODE> if there was a problem   
  reading from the file. The data is assumed to have been written in the native  
   binary format on the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_fprintf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_combination * <VAR>c</VAR>, const char * 
  <VAR>format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the combination <VAR>c</VAR>   
  line-by-line to the stream <VAR>stream</VAR> using the format specifier   
  <VAR>format</VAR>, which should be suitable for a type of <VAR>size_t</VAR>.   
  In ISO C99 the type modifier <CODE>z</CODE> represents <CODE>size_t</CODE>, so 
    <CODE>"%zu\n"</CODE> is a suitable format.<A href="#FOOT10" 
  name="DOCF10"><SUP>10</SUP></A> The function returns <CODE>GSL_EFAILED</CODE> 
  if   there was a problem writing to the file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcombination_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_combination_fscanf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_combination * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the combination <VAR>c</VAR>. The combination <VAR>c</VAR> must be   
  preallocated with correct values of <EM>n</EM> and <EM>k</EM> since the   
  function uses the size of <VAR>c</VAR> to determine how many numbers to read.  
   The function returns <CODE>GSL_EFAILED</CODE> if there was a problem reading  
   from the file. </P></DD></DL>
<HR>
<A name="Combination-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Combination-References-and-Further-Reading" 
rel="next">Combination References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Reading-and-writing-combinations" 
rel="previous">Reading and writing combinations</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-4"></A>
<H3 class="section">10.7 Examples</H3>
<P>The example program below prints all subsets of the set <EM>{0,1,2,3}</EM> 
 ordered by size. Subsets of the same size are ordered lexicographically. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_combination.h&gt;

int 
main (void) 
{
  gsl_combination * c;
  size_t i;

  printf ("All subsets of {0,1,2,3} by size:\n") ;
  for (i = 0; i &lt;= 4; i++)
    {
      c = gsl_combination_calloc (4, i);
      do
        {
          printf ("{");
          gsl_combination_fprintf (stdout, c, " %u");
          printf (" }\n");
        }
      while (gsl_combination_next (c) == GSL_SUCCESS);
      gsl_combination_free (c);
    }

  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">All subsets of {0,1,2,3} by size:
{ }
{ 0 }
{ 1 }
{ 2 }
{ 3 }
{ 0 1 }
{ 0 2 }
{ 0 3 }
{ 1 2 }
{ 1 3 }
{ 2 3 }
{ 0 1 2 }
{ 0 1 3 }
{ 0 2 3 }
{ 1 2 3 }
{ 0 1 2 3 }
</PRE></DIV>
<P>All 16 subsets are generated, and the subsets of each size are sorted 
 lexicographically. </P>
<HR>
<A name="Combination-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Combination-Examples" 
rel="previous">Combination Examples</A>, Up: <A accessKey="u" href="#Combinations" 
rel="up">Combinations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-5"></A>
<H3 class="section">10.8 References and Further Reading</H3>
<P>Further information on combinations can be found in, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Donald L. Kreher, Douglas R. Stinson, <CITE>Combinatorial   
  Algorithms: Generation, Enumeration and Search</CITE>, 1998, CRC Press LLC,   
  ISBN 084933988X </LI></UL>
<HR>
<A name="Multisets"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sorting" 
rel="next">Sorting</A>, Previous: <A accessKey="p" href="#Combinations" 
rel="previous">Combinations</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Multisets-1"></A>
<H2 class="chapter">11 Multisets</H2><A name="index-multisets"></A>
<P>This chapter describes functions for creating and manipulating multisets. A 
 multiset <EM>c</EM> is represented by an array of <EM>k</EM> integers in the 
 range 0 to <EM>n-1</EM>, where each value <EM>c_i</EM> may occur more than 
once.  The multiset <EM>c</EM> corresponds to indices of <EM>k</EM> elements 
chosen  from an <EM>n</EM> element vector with replacement. In mathematical 
terms, <EM>n</EM> is the cardinality of the multiset while <EM>k</EM> is the 
maximum  multiplicity of any value. Multisets are useful, for example, when 
iterating  over the indices of a <EM>k</EM>-th order symmetric tensor in 
<EM>n</EM>-space. </P>
<P>The functions described in this chapter are defined in the header file 
<SAMP>gsl_multiset.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#The-Multiset-struct">The 
            Multiset struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Multiset-allocation">Multiset 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Accessing-multiset-elements">Accessing 
            multiset elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Multiset-properties">Multiset 
            properties</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Multiset-functions">Multiset 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Reading-and-writing-multisets">Reading 
            and writing multisets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Multiset-Examples">Multiset 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="The-Multiset-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multiset-allocation" 
rel="next">Multiset allocation</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Multiset-struct-1"></A>
<H3 class="section">11.1 The Multiset struct</H3><A name="index-gsl_005fmultiset"></A>
<P>A multiset is defined by a structure containing three components, the values 
 of <EM>n</EM> and <EM>k</EM>, and a pointer to the multiset array. The elements 
 of the multiset array are all of type <CODE>size_t</CODE>, and are stored in 
 increasing order. The <CODE>gsl_multiset</CODE> structure looks like this, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t n;
  size_t k;
  size_t *data;
} gsl_multiset;
</PRE></DIV>
<HR>
<A name="Multiset-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Accessing-multiset-elements" 
rel="next">Accessing multiset elements</A>, Previous: <A accessKey="p" href="#The-Multiset-struct" 
rel="previous">The Multiset struct</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Multiset-allocation-1"></A>
<H3 class="section">11.2 Multiset allocation</H3>
<DL>
  <DT><A name="index-gsl_005fmultiset_005falloc"></A>Function: <EM>gsl_multiset  
   *</EM> <STRONG>gsl_multiset_alloc</STRONG> <EM>(size_t <VAR>n</VAR>, size_t   
  <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a new multiset with parameters   
  <VAR>n</VAR>, <VAR>k</VAR>. The multiset is not initialized and its elements   
  are undefined. Use the function <CODE>gsl_multiset_calloc</CODE> if you want   
  to create a multiset which is initialized to the lexicographically first   
  multiset element. A null pointer is returned if insufficient memory is   
  available to create the multiset. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fcalloc"></A>Function: <EM>gsl_multiset 
    *</EM> <STRONG>gsl_multiset_calloc</STRONG> <EM>(size_t <VAR>n</VAR>, size_t 
    <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a new multiset with parameters   
  <VAR>n</VAR>, <VAR>k</VAR> and initializes it to the lexicographically first   
  multiset element. A null pointer is returned if insufficient memory is   
  available to create the multiset. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005finit_005ffirst"></A>Function:   
  <EM>void</EM> <STRONG>gsl_multiset_init_first</STRONG> <EM>(gsl_multiset *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the multiset <VAR>c</VAR> to the   
  lexicographically first multiset element, i.e. <EM>0</EM> repeated <EM>k</EM>  
   times. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005finit_005flast"></A>Function:   
  <EM>void</EM> <STRONG>gsl_multiset_init_last</STRONG> <EM>(gsl_multiset *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the multiset <VAR>c</VAR> to the   
  lexicographically last multiset element, i.e. <EM>n-1</EM> repeated <EM>k</EM> 
    times. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_multiset_free</STRONG> <EM>(gsl_multiset * 
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory used by the multiset <VAR>c</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_memcpy</STRONG> <EM>(gsl_multiset * 
  <VAR>dest</VAR>,   const gsl_multiset * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the multiset <VAR>src</VAR> into the   
  multiset <VAR>dest</VAR>. The two multisets must have the same size. 
</P></DD></DL>
<HR>
<A name="Accessing-multiset-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multiset-properties" 
rel="next">Multiset properties</A>, Previous: <A accessKey="p" href="#Multiset-allocation" 
rel="previous">Multiset allocation</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Accessing-multiset-elements-1"></A>
<H3 class="section">11.3 Accessing multiset elements</H3>
<P>The following function can be used to access the elements of a multiset. </P>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fget"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_multiset_get</STRONG> <EM>(const gsl_multiset * 
  <VAR>c</VAR>,   const size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value of the <VAR>i</VAR>-th element of the   
  multiset <VAR>c</VAR>. If <VAR>i</VAR> lies outside the allowed range of 0 to  
   <EM><VAR>k</VAR>-1</EM> then the error handler is invoked and 0 is returned.  
   An inline version of this function is used when <CODE>HAVE_INLINE</CODE> is   
  defined. </P></DD></DL>
<HR>
<A name="Multiset-properties"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multiset-functions" 
rel="next">Multiset functions</A>, Previous: <A accessKey="p" href="#Accessing-multiset-elements" 
rel="previous">Accessing multiset elements</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Multiset-properties-1"></A>
<H3 class="section">11.4 Multiset properties</H3>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fn"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_multiset_n</STRONG> <EM>(const gsl_multiset *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns the range (<EM>n</EM>) of the multiset <VAR>c</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fk"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_multiset_k</STRONG> <EM>(const gsl_multiset *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns the number of elements (<EM>k</EM>) in the multiset   
  <VAR>c</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fdata"></A>Function: <EM>size_t 
  *</EM><STRONG>gsl_multiset_data</STRONG> <EM>(const gsl_multiset *   
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the array of elements in the multiset   
  <VAR>c</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fvalid"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_valid</STRONG> <EM>(gsl_multiset * 
  <VAR>c</VAR>)</EM></DT>
  <DD><A name="index-checking-multiset-for-validity"></A><A name="index-testing-multiset-for-validity"></A>
  <P>This function checks that the multiset <VAR>c</VAR> is valid. The   
  <VAR>k</VAR> elements should lie in the range 0 to <EM><VAR>n</VAR>-1</EM>,   
  with each value occurring in nondecreasing order. </P></DD></DL>
<HR>
<A name="Multiset-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-multisets" 
rel="next">Reading and writing multisets</A>, Previous: <A accessKey="p" href="#Multiset-properties" 
rel="previous">Multiset properties</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Multiset-functions-1"></A>
<H3 class="section">11.5 Multiset functions</H3>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fnext"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_next</STRONG> <EM>(gsl_multiset * 
  <VAR>c</VAR>)</EM></DT>
  <DD><A name="index-iterating-through-multisets"></A>
  <P>This function advances the multiset <VAR>c</VAR> to the next multiset   
  element in lexicographic order and returns <CODE>GSL_SUCCESS</CODE>. If no   
  further multisets elements are available it returns <CODE>GSL_FAILURE</CODE>   
  and leaves <VAR>c</VAR> unmodified. Starting with the first multiset and   
  repeatedly applying this function will iterate through all possible multisets  
   of a given order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005fprev"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_prev</STRONG> <EM>(gsl_multiset * 
  <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function steps backwards from the multiset <VAR>c</VAR> to the   
  previous multiset element in lexicographic order, returning   
  <CODE>GSL_SUCCESS</CODE>. If no previous multiset is available it returns   
  <CODE>GSL_FAILURE</CODE> and leaves <VAR>c</VAR> unmodified. </P></DD></DL>
<HR>
<A name="Reading-and-writing-multisets"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multiset-Examples" 
rel="next">Multiset Examples</A>, Previous: <A accessKey="p" href="#Multiset-functions" 
rel="previous">Multiset functions</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-and-writing-multisets-1"></A>
<H3 class="section">11.6 Reading and writing multisets</H3>
<P>The library provides functions for reading and writing multisets to a file as 
 binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fmultiset_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_fwrite</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_multiset * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the multiset <VAR>c</VAR> to the   
  stream <VAR>stream</VAR> in binary format. The function returns   
  <CODE>GSL_EFAILED</CODE> if there was a problem writing to the file. Since the 
    data is written in the native binary format it may not be portable between   
  different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_fread</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
    gsl_multiset * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function reads elements from the open stream <VAR>stream</VAR> into   
  the multiset <VAR>c</VAR> in binary format. The multiset <VAR>c</VAR> must be  
   preallocated with correct values of <EM>n</EM> and <EM>k</EM> since the   
  function uses the size of <VAR>c</VAR> to determine how many bytes to read.   
  The function returns <CODE>GSL_EFAILED</CODE> if there was a problem reading   
  from the file. The data is assumed to have been written in the native binary   
  format on the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_fprintf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_multiset * <VAR>c</VAR>, const char * 
  <VAR>format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the elements of the multiset <VAR>c</VAR> line-by-line 
    to the stream <VAR>stream</VAR> using the format specifier 
  <VAR>format</VAR>,   which should be suitable for a type of <VAR>size_t</VAR>. 
  In ISO C99 the type   modifier <CODE>z</CODE> represents <CODE>size_t</CODE>, 
  so   <CODE>"%zu\n"</CODE> is a suitable format.<A href="#FOOT11" 
  name="DOCF11"><SUP>11</SUP></A> The function returns <CODE>GSL_EFAILED</CODE> 
  if   there was a problem writing to the file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiset_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_multiset_fscanf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_multiset * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the multiset <VAR>c</VAR>. The multiset <VAR>c</VAR> must be preallocated with 
    correct values of <EM>n</EM> and <EM>k</EM> since the function uses the size 
    of <VAR>c</VAR> to determine how many numbers to read. The function returns  
   <CODE>GSL_EFAILED</CODE> if there was a problem reading from the file.   
  </P></DD></DL>
<HR>
<A name="Multiset-Examples"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Reading-and-writing-multisets" 
rel="previous">Reading and writing multisets</A>, Up: <A accessKey="u" href="#Multisets" 
rel="up">Multisets</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-5"></A>
<H3 class="section">11.7 Examples</H3>
<P>The example program below prints all multisets elements containing the values 
<EM>{0,1,2,3}</EM> ordered by size. Multiset elements of the same size are 
 ordered lexicographically. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_multiset.h&gt;

int
main (void)
{
  gsl_multiset * c;
  size_t i;

  printf ("All multisets of {0,1,2,3} by size:\n") ;
  for (i = 0; i &lt;= 4; i++)
    {
      c = gsl_multiset_calloc (4, i);
      do
        {
          printf ("{");
          gsl_multiset_fprintf (stdout, c, " %u");
          printf (" }\n");
        }
      while (gsl_multiset_next (c) == GSL_SUCCESS);
      gsl_multiset_free (c);
    }

  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out
</PRE><PRE class="verbatim">all multisets of {0,1,2,3} by size:
{ }
{ 0 }
{ 1 }
{ 2 }
{ 3 }
{ 0 0 }
{ 0 1 }
{ 0 2 }
{ 0 3 }
{ 1 1 }
{ 1 2 }
{ 1 3 }
{ 2 2 }
{ 2 3 }
{ 3 3 }
{ 0 0 0 }
{ 0 0 1 }
{ 0 0 2 }
{ 0 0 3 }
{ 0 1 1 }
{ 0 1 2 }
{ 0 1 3 }
{ 0 2 2 }
{ 0 2 3 }
{ 0 3 3 }
{ 1 1 1 }
{ 1 1 2 }
{ 1 1 3 }
{ 1 2 2 }
{ 1 2 3 }
{ 1 3 3 }
{ 2 2 2 }
{ 2 2 3 }
{ 2 3 3 }
{ 3 3 3 }
{ 0 0 0 0 }
{ 0 0 0 1 }
{ 0 0 0 2 }
{ 0 0 0 3 }
{ 0 0 1 1 }
{ 0 0 1 2 }
{ 0 0 1 3 }
{ 0 0 2 2 }
{ 0 0 2 3 }
{ 0 0 3 3 }
{ 0 1 1 1 }
{ 0 1 1 2 }
{ 0 1 1 3 }
{ 0 1 2 2 }
{ 0 1 2 3 }
{ 0 1 3 3 }
{ 0 2 2 2 }
{ 0 2 2 3 }
{ 0 2 3 3 }
{ 0 3 3 3 }
{ 1 1 1 1 }
{ 1 1 1 2 }
{ 1 1 1 3 }
{ 1 1 2 2 }
{ 1 1 2 3 }
{ 1 1 3 3 }
{ 1 2 2 2 }
{ 1 2 2 3 }
{ 1 2 3 3 }
{ 1 3 3 3 }
{ 2 2 2 2 }
{ 2 2 2 3 }
{ 2 2 3 3 }
{ 2 3 3 3 }
{ 3 3 3 3 }
</PRE></DIV>
<P>All 70 multisets are generated and sorted lexicographically. </P>
<HR>
<A name="Sorting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#BLAS-Support" 
rel="next">BLAS Support</A>, Previous: <A accessKey="p" href="#Multisets" 
rel="previous">Multisets</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sorting-1"></A>
<H2 class="chapter">12 Sorting</H2><A name="index-sorting"></A><A name="index-heapsort"></A>
<P>This chapter describes functions for sorting data, both directly and 
 indirectly (using an index). All the functions use the <EM>heapsort</EM> 
 algorithm. Heapsort is an <EM>O(N \log N)</EM> algorithm which operates 
in-place  and does not require any additional storage. It also provides 
consistent  performance, the running time for its worst-case (ordered data) 
being not  significantly longer than the average and best cases. Note that the 
heapsort  algorithm does not preserve the relative ordering of equal elements—it 
is an <EM>unstable</EM> sort. However the resulting order of equal elements will 
be  consistent across different platforms when using these functions. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Sorting-objects">Sorting 
            objects</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Sorting-vectors">Sorting 
            vectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Computing-the-rank">Computing 
            the rank</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Sorting-Examples">Sorting 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Sorting-References-and-Further-Reading">Sorting 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Sorting-objects"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sorting-vectors" 
rel="next">Sorting vectors</A>, Up: <A accessKey="u" href="#Sorting" 
rel="up">Sorting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sorting-objects-1"></A>
<H3 class="section">12.1 Sorting objects</H3>
<P>The following function provides a simple alternative to the standard library 
 function <CODE>qsort</CODE>. It is intended for systems lacking 
<CODE>qsort</CODE>, not as a replacement for it. The function <CODE>qsort</CODE> 
 should be used whenever possible, as it will be faster and can provide stable 
 ordering of equal elements. Documentation for <CODE>qsort</CODE> is available 
in  the <CITE>GNU C Library Reference Manual</CITE>. </P>
<P>The functions described in this section are defined in the header file 
<SAMP>gsl_heapsort.h</SAMP>. </P><A name="index-comparison-functions_002c-definition"></A>
<DL>
  <DT><A name="index-gsl_005fheapsort"></A>Function: 
  <EM>void</EM><STRONG>gsl_heapsort</STRONG> <EM>(void * <VAR>array</VAR>, 
  size_t   <VAR>count</VAR>, size_t <VAR>size</VAR>, gsl_comparison_fn_t   
  <VAR>compare</VAR>)</EM></DT>
  <DD>
  <P>This function sorts the <VAR>count</VAR> elements of the array   
  <VAR>array</VAR>, each of size <VAR>size</VAR>, into ascending order using the 
    comparison function <VAR>compare</VAR>. The type of the comparison function 
  is   defined by, </P>
  <DIV class="example"><PRE class="example">int (*gsl_comparison_fn_t) (const void * a,
                            const void * b)
</PRE></DIV>
  <P>A comparison function should return a negative integer if the first   
  argument is less than the second argument, <CODE>0</CODE> if the two arguments 
    are equal and a positive integer if the first argument is greater than the   
  second argument. </P>
  <P>For example, the following function can be used to sort doubles into   
  ascending numerical order. </P>
  <DIV class="example"><PRE class="example">int
compare_doubles (const double * a,
                 const double * b)
{
    if (*a &gt; *b)
       return 1;
    else if (*a &lt; *b)
       return -1;
    else
       return 0;
}
</PRE></DIV>
  <P>The appropriate function call to perform the sort is, </P>
  <DIV class="example"><PRE class="example">gsl_heapsort (array, count, sizeof(double), 
              compare_doubles);
</PRE></DIV>
  <P>Note that unlike <CODE>qsort</CODE> the heapsort algorithm cannot be made   
  into a stable sort by pointer arithmetic. The trick of comparing pointers for  
   equal elements in the comparison function does not work for the heapsort   
  algorithm. The heapsort algorithm performs an internal rearrangement of the   
  data which destroys its initial ordering. </P></DD></DL><A name="index-indirect-sorting"></A>
<DL>
  <DT><A name="index-gsl_005fheapsort_005findex"></A>Function: 
  <EM>int</EM><STRONG>gsl_heapsort_index</STRONG> <EM>(size_t * <VAR>p</VAR>, 
  const void *   <VAR>array</VAR>, size_t <VAR>count</VAR>, size_t 
  <VAR>size</VAR>,   gsl_comparison_fn_t <VAR>compare</VAR>)</EM></DT>
  <DD>
  <P>This function indirectly sorts the <VAR>count</VAR> elements of the array   
  <VAR>array</VAR>, each of size <VAR>size</VAR>, into ascending order using the 
    comparison function <VAR>compare</VAR>. The resulting permutation is stored 
  in   <VAR>p</VAR>, an array of length <VAR>n</VAR>. The elements of 
  <VAR>p</VAR>   give the index of the array element which would have been 
  stored in that   position if the array had been sorted in place. The first 
  element of   <VAR>p</VAR> gives the index of the least element in 
  <VAR>array</VAR>, and the   last element of <VAR>p</VAR> gives the index of 
  the greatest element in   <VAR>array</VAR>. The array itself is not changed. 
  </P></DD></DL>
<HR>
<A name="Sorting-vectors"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Selecting-the-k-smallest-or-largest-elements" 
rel="next">Selecting the k smallest or largest elements</A>, Previous: <A 
accessKey="p" href="#Sorting-objects" 
rel="previous">Sorting objects</A>, Up: <A accessKey="u" href="#Sorting" 
rel="up">Sorting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sorting-vectors-1"></A>
<H3 class="section">12.2 Sorting vectors</H3>
<P>The following functions will sort the elements of an array or vector, either 
 directly or indirectly. They are defined for all real and integer types using 
 the normal suffix rules. For example, the <CODE>float</CODE> versions of the 
 array functions are <CODE>gsl_sort_float</CODE> and 
<CODE>gsl_sort_float_index</CODE>. The corresponding vector functions are 
<CODE>gsl_sort_vector_float</CODE> and <CODE>gsl_sort_vector_float_index</CODE>. 
 The prototypes are available in the header files 
<SAMP>gsl_sort_float.h</SAMP><SAMP>gsl_sort_vector_float.h</SAMP>. The complete 
set of prototypes can be  included using the header files 
<SAMP>gsl_sort.h</SAMP> and <SAMP>gsl_sort_vector.h</SAMP>. </P>
<P>There are no functions for sorting complex arrays or vectors, since the 
 ordering of complex numbers is not uniquely defined. To sort a complex vector 
by  magnitude compute a real vector containing the magnitudes of the complex 
 elements, and sort this vector indirectly. The resulting index gives the 
 appropriate ordering of the original complex vector. </P><A name="index-sorting-vector-elements"></A><A 
name="index-vector_002c-sorting-elements-of"></A>
<DL>
  <DT><A name="index-gsl_005fsort"></A>Function: 
  <EM>void</EM><STRONG>gsl_sort</STRONG> <EM>(double * <VAR>data</VAR>, const 
  size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function sorts the <VAR>n</VAR> elements of the array <VAR>data</VAR>  
   with stride <VAR>stride</VAR> into ascending numerical order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort2"></A>Function: 
  <EM>void</EM><STRONG>gsl_sort2</STRONG> <EM>(double * <VAR>data1</VAR>, const 
  size_t   <VAR>stride1</VAR>, double * <VAR>data2</VAR>, const size_t   
  <VAR>stride2</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function sorts the <VAR>n</VAR> elements of the array <VAR>data1</VAR> 
    with stride <VAR>stride1</VAR> into ascending numerical order, while making  
   the same rearrangement of the array <VAR>data2</VAR> with stride   
  <VAR>stride2</VAR>, also of size <VAR>n</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort_005fvector"></A>Function: 
  <EM>void</EM><STRONG>gsl_sort_vector</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function sorts the elements of the vector <VAR>v</VAR> into ascending  
   numerical order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort_005fvector2"></A>Function: 
  <EM>void</EM><STRONG>gsl_sort_vector2</STRONG> <EM>(gsl_vector * 
  <VAR>v1</VAR>, gsl_vector   * <VAR>v2</VAR>)</EM></DT>
  <DD>
  <P>This function sorts the elements of the vector <VAR>v1</VAR> into ascending 
    numerical order, while making the same rearrangement of the vector   
  <VAR>v2</VAR>. </P></DD></DL><A name="index-indirect-sorting_002c-of-vector-elements"></A>
<DL>
  <DT><A name="index-gsl_005fsort_005findex"></A>Function: 
  <EM>void</EM><STRONG>gsl_sort_index</STRONG> <EM>(size_t * <VAR>p</VAR>, const 
  double *   <VAR>data</VAR>, size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function indirectly sorts the <VAR>n</VAR> elements of the array   
  <VAR>data</VAR> with stride <VAR>stride</VAR> into ascending order, storing   
  the resulting permutation in <VAR>p</VAR>. The array <VAR>p</VAR> must be   
  allocated with a sufficient length to store the <VAR>n</VAR> elements of the   
  permutation. The elements of <VAR>p</VAR> give the index of the array element  
   which would have been stored in that position if the array had been sorted in 
    place. The array <VAR>data</VAR> is not changed. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort_005fvector_005findex"></A>Function: 
  <EM>int</EM><STRONG>gsl_sort_vector_index</STRONG> <EM>(gsl_permutation * 
  <VAR>p</VAR>,   const gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function indirectly sorts the elements of the vector <VAR>v</VAR> into 
    ascending order, storing the resulting permutation in <VAR>p</VAR>. The   
  elements of <VAR>p</VAR> give the index of the vector element which would have 
    been stored in that position if the vector had been sorted in place. The 
  first   element of <VAR>p</VAR> gives the index of the least element in 
  <VAR>v</VAR>,   and the last element of <VAR>p</VAR> gives the index of the 
  greatest element   in <VAR>v</VAR>. The vector <VAR>v</VAR> is not changed. 
  </P></DD></DL>
<HR>
<A name="Selecting-the-k-smallest-or-largest-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Computing-the-rank" 
rel="next">Computing the rank</A>, Previous: <A accessKey="p" href="#Sorting-vectors" 
rel="previous">Sorting vectors</A>, Up: <A accessKey="u" href="#Sorting" 
rel="up">Sorting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Selecting-the-k-smallest-or-largest-elements-1"></A>
<H3 class="section">12.3 Selecting the k smallest or largest elements</H3>
<P>The functions described in this section select the <EM>k</EM> smallest or 
 largest elements of a data set of size <EM>N</EM>. The routines use an 
<EM>O(kN)</EM> direct insertion algorithm which is suited to subsets that are 
 small compared with the total size of the dataset. For example, the routines 
are  useful for selecting the 10 largest values from one million data points, 
but not  for selecting the largest 100,000 values. If the subset is a 
significant part of  the total dataset it may be faster to sort all the elements 
of the dataset  directly with an <EM>O(N \log N)</EM> algorithm and obtain the 
smallest or  largest values that way. </P>
<DL>
  <DT><A name="index-gsl_005fsort_005fsmallest"></A>Function: 
  <EM>int</EM><STRONG>gsl_sort_smallest</STRONG> <EM>(double * <VAR>dest</VAR>, 
  size_t   <VAR>k</VAR>, const double * <VAR>src</VAR>, size_t 
  <VAR>stride</VAR>, size_t   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function copies the <VAR>k</VAR> smallest elements of the array   
  <VAR>src</VAR>, of size <VAR>n</VAR> and stride <VAR>stride</VAR>, in   
  ascending numerical order into the array <VAR>dest</VAR>. The size   
  <VAR>k</VAR> of the subset must be less than or equal to <VAR>n</VAR>. The   
  data <VAR>src</VAR> is not modified by this operation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort_005flargest"></A>Function: 
  <EM>int</EM><STRONG>gsl_sort_largest</STRONG> <EM>(double * <VAR>dest</VAR>, 
  size_t   <VAR>k</VAR>, const double * <VAR>src</VAR>, size_t 
  <VAR>stride</VAR>, size_t   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function copies the <VAR>k</VAR> largest elements of the array   
  <VAR>src</VAR>, of size <VAR>n</VAR> and stride <VAR>stride</VAR>, in   
  descending numerical order into the array <VAR>dest</VAR>. <VAR>k</VAR> must   
  be less than or equal to <VAR>n</VAR>. The data <VAR>src</VAR> is not modified 
    by this operation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort_005fvector_005fsmallest"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sort_vector_smallest</STRONG> <EM>(double *   
  <VAR>dest</VAR>, size_t <VAR>k</VAR>, const gsl_vector *   
  <VAR>v</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fsort_005fvector_005flargest"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sort_vector_largest</STRONG> <EM>(double *   
  <VAR>dest</VAR>, size_t <VAR>k</VAR>, const gsl_vector *   
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>These functions copy the <VAR>k</VAR> smallest or largest elements of the   
  vector <VAR>v</VAR> into the array <VAR>dest</VAR>. <VAR>k</VAR> must be less  
   than or equal to the length of the vector <VAR>v</VAR>. </P></DD></DL>
<P>The following functions find the indices of the <EM>k</EM> smallest or 
 largest elements of a dataset, </P>
<DL>
  <DT><A name="index-gsl_005fsort_005fsmallest_005findex"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sort_smallest_index</STRONG> <EM>(size_t *   
  <VAR>p</VAR>, size_t <VAR>k</VAR>, const double * <VAR>src</VAR>, size_t   
  <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function stores the indices of the <VAR>k</VAR> smallest elements of   
  the array <VAR>src</VAR>, of size <VAR>n</VAR> and stride <VAR>stride</VAR>,   
  in the array <VAR>p</VAR>. The indices are chosen so that the corresponding   
  data is in ascending numerical order. <VAR>k</VAR> must be less than or equal  
   to <VAR>n</VAR>. The data <VAR>src</VAR> is not modified by this operation.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsort_005flargest_005findex"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sort_largest_index</STRONG> <EM>(size_t *   
  <VAR>p</VAR>, size_t <VAR>k</VAR>, const double * <VAR>src</VAR>, size_t   
  <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function stores the indices of the <VAR>k</VAR> largest elements of   
  the array <VAR>src</VAR>, of size <VAR>n</VAR> and stride <VAR>stride</VAR>,   
  in the array <VAR>p</VAR>. The indices are chosen so that the corresponding   
  data is in descending numerical order. <VAR>k</VAR> must be less than or equal 
    to <VAR>n</VAR>. The data <VAR>src</VAR> is not modified by this operation.  
   </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fsort_005fvector_005fsmallest_005findex"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sort_vector_smallest_index</STRONG> <EM>(size_t *   
  <VAR>p</VAR>, size_t <VAR>k</VAR>, const gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fsort_005fvector_005flargest_005findex"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sort_vector_largest_index</STRONG> <EM>(size_t *   
  <VAR>p</VAR>, size_t <VAR>k</VAR>, const gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>These functions store the indices of the <VAR>k</VAR> smallest or largest   
  elements of the vector <VAR>v</VAR> in the array <VAR>p</VAR>. <VAR>k</VAR>   
  must be less than or equal to the length of the vector <VAR>v</VAR>. 
</P></DD></DL>
<HR>
<A name="Computing-the-rank"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sorting-Examples" 
rel="next">Sorting Examples</A>, Previous: <A accessKey="p" href="#Selecting-the-k-smallest-or-largest-elements" 
rel="previous">Selecting the k smallest or largest elements</A>, Up: <A 
accessKey="u" href="#Sorting" 
rel="up">Sorting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Computing-the-rank-1"></A>
<H3 class="section">12.4 Computing the rank</H3>
<P>The <EM>rank</EM> of an element is its order in the sorted data. The rank is 
 the inverse of the index permutation, <VAR>p</VAR>. It can be computed using 
the  following algorithm, </P>
<DIV class="example"><PRE class="example">for (i = 0; i &lt; p-&gt;size; i++) 
{
    size_t pi = p-&gt;data[i];
    rank-&gt;data[pi] = i;
}
</PRE></DIV>
<P>This can be computed directly from the function 
<CODE>gsl_permutation_inverse(rank,p)</CODE>. </P>
<P>The following function will print the rank of each element of the vector 
<VAR>v</VAR>, </P>
<DIV class="example"><PRE class="example">void
print_rank (gsl_vector * v)
{
  size_t i;
  size_t n = v-&gt;size;
  gsl_permutation * perm = gsl_permutation_alloc(n);
  gsl_permutation * rank = gsl_permutation_alloc(n);

  gsl_sort_vector_index (perm, v);
  gsl_permutation_inverse (rank, perm);

  for (i = 0; i &lt; n; i++)
   {
    double vi = gsl_vector_get(v, i);
    printf ("element = %d, value = %g, rank = %d\n",
             i, vi, rank-&gt;data[i]);
   }

  gsl_permutation_free (perm);
  gsl_permutation_free (rank);
}
</PRE></DIV>
<HR>
<A name="Sorting-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sorting-References-and-Further-Reading" 
rel="next">Sorting References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Computing-the-rank" 
rel="previous">Computing the rank</A>, Up: <A accessKey="u" href="#Sorting" 
rel="up">Sorting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-6"></A>
<H3 class="section">12.5 Examples</H3>
<P>The following example shows how to use the permutation <VAR>p</VAR> to print 
 the elements of the vector <VAR>v</VAR> in ascending order, </P>
<DIV class="example"><PRE class="example">gsl_sort_vector_index (p, v);

for (i = 0; i &lt; v-&gt;size; i++)
{
    double vpi = gsl_vector_get (v, p-&gt;data[i]);
    printf ("order = %d, value = %g\n", i, vpi);
}
</PRE></DIV>
<P>The next example uses the function <CODE>gsl_sort_smallest</CODE> to select 
 the 5 smallest numbers from 100000 uniform random variates stored in an array, 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_sort_double.h&gt;

int
main (void)
{
  const gsl_rng_type * T;
  gsl_rng * r;

  size_t i, k = 5, N = 100000;

  double * x = malloc (N * sizeof(double));
  double * small = malloc (k * sizeof(double));

  gsl_rng_env_setup();

  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  for (i = 0; i &lt; N; i++)
    {
      x[i] = gsl_rng_uniform(r);
    }

  gsl_sort_smallest (small, k, x, 1, N);

  printf ("%d smallest values from %d\n", k, N);

  for (i = 0; i &lt; k; i++)
    {
      printf ("%d: %.18f\n", i, small[i]);
    }

  free (x);
  free (small);
  gsl_rng_free (r);
  return 0;
}
</PRE></DIV>
<P>The output lists the 5 smallest values, in ascending order, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">5 smallest values from 100000
0: 0.000003489200025797
1: 0.000008199829608202
2: 0.000008953968062997
3: 0.000010712770745158
4: 0.000033531803637743
</PRE></DIV>
<HR>
<A name="Sorting-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Sorting-Examples" 
rel="previous">Sorting Examples</A>, Up: <A accessKey="u" href="#Sorting" 
rel="up">Sorting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-6"></A>
<H3 class="section">12.6 References and Further Reading</H3>
<P>The subject of sorting is covered extensively in Knuth’s <CITE>Sorting and 
 Searching</CITE>, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Donald E. Knuth, <CITE>The Art of Computer Programming:   
  Sorting and Searching</CITE> (Vol 3, 3rd Ed, 1997), Addison-Wesley, ISBN   
  0201896850. </LI></UL>
<P>The Heapsort algorithm is described in the following book, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Robert Sedgewick, <CITE>Algorithms in C</CITE>,   
  Addison-Wesley, ISBN 0201514257. </LI></UL>
<HR>
<A name="BLAS-Support"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Linear-Algebra" 
rel="next">Linear Algebra</A>, Previous: <A accessKey="p" href="#Sorting" 
rel="previous">Sorting</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="BLAS-Support-1"></A>
<H2 class="chapter">13 BLAS Support</H2><A 
name="index-linear-algebra_002c-BLAS"></A><A 
name="index-matrix_002c-operations"></A><A 
name="index-vector_002c-operations"></A><A name="index-BLAS"></A><A name="index-CBLAS"></A><A 
name="index-Basic-Linear-Algebra-Subroutines-_0028BLAS_0029"></A>
<P>The Basic Linear Algebra Subprograms (<SMALL>BLAS</SMALL>) define a set of 
 fundamental operations on vectors and matrices which can be used to create 
 optimized higher-level linear algebra functionality. </P>
<P>The library provides a low-level layer which corresponds directly to the 
 C-language <SMALL>BLAS</SMALL> standard, referred to here as 
“<SMALL>CBLAS</SMALL>”, and a higher-level interface for operations on GSL 
 vectors and matrices. Users who are interested in simple operations on GSL 
 vector and matrix objects should use the high-level layer described in this 
 chapter. The functions are declared in the file <SAMP>gsl_blas.h</SAMP> and 
 should satisfy the needs of most users. </P>
<P>Note that GSL matrices are implemented using dense-storage so the interface 
 only includes the corresponding dense-storage <SMALL>BLAS</SMALL> functions. 
The  full <SMALL>BLAS</SMALL> functionality for band-format and packed-format 
 matrices is available through the low-level <SMALL>CBLAS</SMALL> interface. 
 Similarly, GSL vectors are restricted to positive strides, whereas the 
low-level <SMALL>CBLAS</SMALL> interface supports negative strides as specified 
in the <SMALL>BLAS</SMALL> standard.<A href="#FOOT12" 
name="DOCF12"><SUP>12</SUP></A> </P>
<P>The interface for the <CODE>gsl_cblas</CODE> layer is specified in the file 
<SAMP>gsl_cblas.h</SAMP>. This interface corresponds to the <SMALL>BLAS</SMALL> 
 Technical Forum’s standard for the C interface to legacy <SMALL>BLAS</SMALL> 
 implementations. Users who have access to other conforming <SMALL>CBLAS</SMALL> 
 implementations can use these in place of the version provided by the library. 
 Note that users who have only a Fortran <SMALL>BLAS</SMALL> library can use a 
<SMALL>CBLAS</SMALL> conformant wrapper to convert it into a 
<SMALL>CBLAS</SMALL> library. A reference <SMALL>CBLAS</SMALL> wrapper for 
 legacy Fortran implementations exists as part of the <SMALL>CBLAS</SMALL> 
 standard and can be obtained from Netlib. The complete set of 
<SMALL>CBLAS</SMALL> functions is listed in an appendix (see <A href="#GSL-CBLAS-Library">GSL 
 CBLAS Library</A>). </P>
<P>There are three levels of <SMALL>BLAS</SMALL> operations, </P>
<DL compact="">
  <DT><B>Level 1</B></DT>
  <DD>
  <P>Vector operations, e.g. <EM>y = \alpha x + y</EM> </P></DD>
  <DT><B>Level 2</B></DT>
  <DD>
  <P>Matrix-vector operations, e.g. <EM>y = \alpha A x + \beta y</EM> </P></DD>
  <DT><B>Level 3</B></DT>
  <DD>
  <P>Matrix-matrix operations, e.g. <EM>C = \alpha A B + C</EM> </P></DD></DL>
<P>Each routine has a name which specifies the operation, the type of matrices 
 involved and their precisions. Some of the most common operations and their 
 names are given below, </P>
<DL compact="">
  <DT><B>DOT</B></DT>
  <DD>
  <P>scalar product, <EM>x^T y</EM> </P></DD>
  <DT><B>AXPY</B></DT>
  <DD>
  <P>vector sum, <EM>\alpha x + y</EM> </P></DD>
  <DT><B>MV</B></DT>
  <DD>
  <P>matrix-vector product, <EM>A x</EM> </P></DD>
  <DT><B>SV</B></DT>
  <DD>
  <P>matrix-vector solve, <EM>inv(A) x</EM> </P></DD>
  <DT><B>MM</B></DT>
  <DD>
  <P>matrix-matrix product, <EM>A B</EM> </P></DD>
  <DT><B>SM</B></DT>
  <DD>
  <P>matrix-matrix solve, <EM>inv(A) B</EM> </P></DD></DL>
<P>The types of matrices are, </P>
<DL compact="">
  <DT><B>GE</B></DT>
  <DD>
  <P>general </P></DD>
  <DT><B>GB</B></DT>
  <DD>
  <P>general band </P></DD>
  <DT><B>SY</B></DT>
  <DD>
  <P>symmetric </P></DD>
  <DT><B>SB</B></DT>
  <DD>
  <P>symmetric band </P></DD>
  <DT><B>SP</B></DT>
  <DD>
  <P>symmetric packed </P></DD>
  <DT><B>HE</B></DT>
  <DD>
  <P>hermitian </P></DD>
  <DT><B>HB</B></DT>
  <DD>
  <P>hermitian band </P></DD>
  <DT><B>HP</B></DT>
  <DD>
  <P>hermitian packed </P></DD>
  <DT><B>TR</B></DT>
  <DD>
  <P>triangular </P></DD>
  <DT><B>TB</B></DT>
  <DD>
  <P>triangular band </P></DD>
  <DT><B>TP</B></DT>
  <DD>
  <P>triangular packed </P></DD></DL>
<P>Each operation is defined for four precisions, </P>
<DL compact="">
  <DT><B>S</B></DT>
  <DD>
  <P>single real </P></DD>
  <DT><B>D</B></DT>
  <DD>
  <P>double real </P></DD>
  <DT><B>C</B></DT>
  <DD>
  <P>single complex </P></DD>
  <DT><B>Z</B></DT>
  <DD>
  <P>double complex </P></DD></DL>
<P>Thus, for example, the name <SMALL>SGEMM</SMALL> stands for “single-precision 
 general matrix-matrix multiply” and <SMALL>ZGEMM</SMALL> stands for 
“double-precision complex matrix-matrix multiply”. </P>
<P>Note that the vector and matrix arguments to BLAS functions must not be 
 aliased, as the results are undefined when the underlying arrays overlap (see 
<A 
href="#Aliasing-of-arrays">Aliasing 
 of arrays</A>). </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#GSL-BLAS-Interface">GSL 
            BLAS Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#BLAS-Examples">BLAS 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#BLAS-References-and-Further-Reading">BLAS 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="GSL-BLAS-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#BLAS-Examples" 
rel="next">BLAS Examples</A>, Up: <A accessKey="u" href="#BLAS-Support" 
rel="up">BLAS Support</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GSL-BLAS-Interface-1"></A>
<H3 class="section">13.1 GSL BLAS Interface</H3>
<P>GSL provides dense vector and matrix objects, based on the relevant built-in 
 types. The library provides an interface to the <SMALL>BLAS</SMALL> operations 
 which apply to these objects. The interface to this functionality is given in 
 the file <SAMP>gsl_blas.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Level-1-GSL-BLAS-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Level-2-GSL-BLAS-Interface" 
rel="next">Level 2 GSL BLAS Interface</A>, Up: <A accessKey="u" href="#GSL-BLAS-Interface" 
rel="up">GSL BLAS Interface</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Level-1"></A>
<H4 class="subsection">13.1.1 Level 1</H4>
<DL>
  <DT><A name="index-gsl_005fblas_005fsdsdot"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_sdsdot</STRONG> <EM>(float <VAR>alpha</VAR>, 
  const   gsl_vector_float * <VAR>x</VAR>, const gsl_vector_float * 
  <VAR>y</VAR>, float   * <VAR>result</VAR>)</EM></DT>
  <DD><A name="index-DOT_002c-Level_002d1-BLAS"></A>
  <P>This function computes the sum <EM>\alpha + x^T y</EM> for the vectors   
  <VAR>x</VAR> and <VAR>y</VAR>, returning the result in <VAR>result</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsdot"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_sdot</STRONG> <EM>(const gsl_vector_float * 
  <VAR>x</VAR>,   const gsl_vector_float * <VAR>y</VAR>, float * 
  <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsdot"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsdot</STRONG> <EM>(const gsl_vector_float * 
  <VAR>x</VAR>,   const gsl_vector_float * <VAR>y</VAR>, double * 
  <VAR>result</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fddot"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ddot</STRONG> <EM>(const gsl_vector * 
  <VAR>x</VAR>, const   gsl_vector * <VAR>y</VAR>, double * 
  <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the scalar product <EM>x^T y</EM> for the vectors   
  <VAR>x</VAR> and <VAR>y</VAR>, returning the result in <VAR>result</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcdotu"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cdotu</STRONG> <EM>(const 
  gsl_vector_complex_float *   <VAR>x</VAR>, const gsl_vector_complex_float * 
  <VAR>y</VAR>, gsl_complex_float   * <VAR>dotu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzdotu"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zdotu</STRONG> <EM>(const gsl_vector_complex * 
  <VAR>x</VAR>,   const gsl_vector_complex * <VAR>y</VAR>, gsl_complex *   
  <VAR>dotu</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the complex scalar product <EM>x^T y</EM> for the   
  vectors <VAR>x</VAR> and <VAR>y</VAR>, returning the result in 
  <VAR>dotu</VAR></P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcdotc"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cdotc</STRONG> <EM>(const 
  gsl_vector_complex_float *   <VAR>x</VAR>, const gsl_vector_complex_float * 
  <VAR>y</VAR>, gsl_complex_float   * <VAR>dotc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzdotc"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zdotc</STRONG> <EM>(const gsl_vector_complex * 
  <VAR>x</VAR>,   const gsl_vector_complex * <VAR>y</VAR>, gsl_complex *   
  <VAR>dotc</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the complex conjugate scalar product <EM>x^H y</EM> 
    for the vectors <VAR>x</VAR> and <VAR>y</VAR>, returning the result in   
  <VAR>dotc</VAR> </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsnrm2"></A>Function: 
  <EM>float</EM><STRONG>gsl_blas_snrm2</STRONG> <EM>(const gsl_vector_float *   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdnrm2"></A>Function: 
  <EM>double</EM><STRONG>gsl_blas_dnrm2</STRONG> <EM>(const gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-NRM2_002c-Level_002d1-BLAS"></A>
  <P>These functions compute the Euclidean norm <EM>||x||_2 = \sqrt {\sum   
  x_i^2}</EM> of the vector <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fscnrm2"></A>Function: 
  <EM>float</EM><STRONG>gsl_blas_scnrm2</STRONG> <EM>(const 
  gsl_vector_complex_float *   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdznrm2"></A>Function: 
  <EM>double</EM><STRONG>gsl_blas_dznrm2</STRONG> <EM>(const gsl_vector_complex 
  *   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the Euclidean norm of the complex vector   
  <VAR>x</VAR>, </P>
  <DIV class="example"><PRE class="example">||x||_2 = \sqrt {\sum (\Re(x_i)^2 + \Im(x_i)^2)}.
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsasum"></A>Function: 
  <EM>float</EM><STRONG>gsl_blas_sasum</STRONG> <EM>(const gsl_vector_float *   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdasum"></A>Function: 
  <EM>double</EM><STRONG>gsl_blas_dasum</STRONG> <EM>(const gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-ASUM_002c-Level_002d1-BLAS"></A>
  <P>These functions compute the absolute sum <EM>\sum |x_i|</EM> of the   
  elements of the vector <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fscasum"></A>Function: 
  <EM>float</EM><STRONG>gsl_blas_scasum</STRONG> <EM>(const 
  gsl_vector_complex_float *   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdzasum"></A>Function: 
  <EM>double</EM><STRONG>gsl_blas_dzasum</STRONG> <EM>(const gsl_vector_complex 
  *   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the sum of the magnitudes of the real and imaginary 
    parts of the complex vector <VAR>x</VAR>, <EM>\sum |\Re(x_i)| +   
  |\Im(x_i)|</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fisamax"></A>Function: 
  <EM>CBLAS_INDEX_t</EM><STRONG>gsl_blas_isamax</STRONG> <EM>(const 
  gsl_vector_float *   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fidamax"></A>Function: 
  <EM>CBLAS_INDEX_t</EM><STRONG>gsl_blas_idamax</STRONG> <EM>(const gsl_vector * 
    <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005ficamax"></A>Function: 
  <EM>CBLAS_INDEX_t</EM><STRONG>gsl_blas_icamax</STRONG> <EM>(const 
  gsl_vector_complex_float *   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fizamax"></A>Function: 
  <EM>CBLAS_INDEX_t</EM><STRONG>gsl_blas_izamax</STRONG> <EM>(const 
  gsl_vector_complex *   <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-AMAX_002c-Level_002d1-BLAS"></A>
  <P>These functions return the index of the largest element of the vector   
  <VAR>x</VAR>. The largest element is determined by its absolute magnitude for  
   real vectors and by the sum of the magnitudes of the real and imaginary parts 
    <EM>|\Re(x_i)| + |\Im(x_i)|</EM> for complex vectors. If the largest value   
  occurs several times then the index of the first occurrence is returned.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_sswap</STRONG> <EM>(gsl_vector_float * 
  <VAR>x</VAR>,   gsl_vector_float * <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dswap</STRONG> <EM>(gsl_vector * <VAR>x</VAR>, 
  gsl_vector *   <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cswap</STRONG> <EM>(gsl_vector_complex_float * 
  <VAR>x</VAR>,   gsl_vector_complex_float * <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzswap"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zswap</STRONG> <EM>(gsl_vector_complex * 
  <VAR>x</VAR>,   gsl_vector_complex * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-SWAP_002c-Level_002d1-BLAS"></A>
  <P>These functions exchange the elements of the vectors <VAR>x</VAR> and   
  <VAR>y</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fscopy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_scopy</STRONG> <EM>(const gsl_vector_float * 
  <VAR>x</VAR>,   gsl_vector_float * <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdcopy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dcopy</STRONG> <EM>(const gsl_vector * 
  <VAR>x</VAR>,   gsl_vector * <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fccopy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ccopy</STRONG> <EM>(const 
  gsl_vector_complex_float *   <VAR>x</VAR>, gsl_vector_complex_float * 
  <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzcopy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zcopy</STRONG> <EM>(const gsl_vector_complex * 
  <VAR>x</VAR>,   gsl_vector_complex * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-COPY_002c-Level_002d1-BLAS"></A>
  <P>These functions copy the elements of the vector <VAR>x</VAR> into the   
  vector <VAR>y</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsaxpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_saxpy</STRONG> <EM>(float <VAR>alpha</VAR>, const 
    gsl_vector_float * <VAR>x</VAR>, gsl_vector_float * <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdaxpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_daxpy</STRONG> <EM>(double <VAR>alpha</VAR>, 
  const gsl_vector   * <VAR>x</VAR>, gsl_vector * <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcaxpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_caxpy</STRONG> <EM>(const gsl_complex_float 
  <VAR>alpha</VAR>,   const gsl_vector_complex_float * <VAR>x</VAR>, 
  gsl_vector_complex_float *   <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzaxpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zaxpy</STRONG> <EM>(const gsl_complex 
  <VAR>alpha</VAR>, const   gsl_vector_complex * <VAR>x</VAR>, 
  gsl_vector_complex * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-AXPY_002c-Level_002d1-BLAS"></A><A name="index-DAXPY_002c-Level_002d1-BLAS"></A><A 
  name="index-SAXPY_002c-Level_002d1-BLAS"></A>
  <P>These functions compute the sum <EM>y = \alpha x + y</EM> for the vectors   
  <VAR>x</VAR> and <VAR>y</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsscal"></A>Function: 
  <EM>void</EM><STRONG>gsl_blas_sscal</STRONG> <EM>(float <VAR>alpha</VAR>, 
  gsl_vector_float   * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdscal"></A>Function: 
  <EM>void</EM><STRONG>gsl_blas_dscal</STRONG> <EM>(double <VAR>alpha</VAR>, 
  gsl_vector *   <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcscal"></A>Function: 
  <EM>void</EM><STRONG>gsl_blas_cscal</STRONG> <EM>(const gsl_complex_float 
  <VAR>alpha</VAR>,   gsl_vector_complex_float * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzscal"></A>Function: 
  <EM>void</EM><STRONG>gsl_blas_zscal</STRONG> <EM>(const gsl_complex 
  <VAR>alpha</VAR>,   gsl_vector_complex * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcsscal"></A>Function: 
  <EM>void</EM><STRONG>gsl_blas_csscal</STRONG> <EM>(float <VAR>alpha</VAR>,   
  gsl_vector_complex_float * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzdscal"></A>Function: 
  <EM>void</EM><STRONG>gsl_blas_zdscal</STRONG> <EM>(double <VAR>alpha</VAR>,   
  gsl_vector_complex * <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-SCAL_002c-Level_002d1-BLAS"></A>
  <P>These functions rescale the vector <VAR>x</VAR> by the multiplicative   
  factor <VAR>alpha</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsrotg"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_srotg</STRONG> <EM>(float <VAR>a</VAR>[], float   
  <VAR>b</VAR>[], float <VAR>c</VAR>[], float <VAR>s</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdrotg"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_drotg</STRONG> <EM>(double <VAR>a</VAR>[], double 
    <VAR>b</VAR>[], double <VAR>c</VAR>[], double <VAR>s</VAR>[])</EM></DT>
  <DD><A name="index-ROTG_002c-Level_002d1-BLAS"></A><A name="index-Givens-Rotation_002c-BLAS"></A>
  <P>These functions compute a Givens rotation <EM>(c,s)</EM> which zeroes the   
  vector <EM>(a,b)</EM>, </P>
  <DIV class="example"><PRE class="example">[  c  s ] [ a ] = [ r ]
[ -s  c ] [ b ]   [ 0 ]
</PRE></DIV>
  <P>The variables <VAR>a</VAR> and <VAR>b</VAR> are overwritten by the routine. 
    </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsrot"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_srot</STRONG> <EM>(gsl_vector_float * 
  <VAR>x</VAR>,   gsl_vector_float * <VAR>y</VAR>, float <VAR>c</VAR>, float   
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdrot"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_drot</STRONG> <EM>(gsl_vector * <VAR>x</VAR>, 
  gsl_vector *   <VAR>y</VAR>, const double <VAR>c</VAR>, const double 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions apply a Givens rotation <EM>(x', y') = (c x + s y, -s x + c 
    y)</EM> to the vectors <VAR>x</VAR>, <VAR>y</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsrotmg"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_srotmg</STRONG> <EM>(float <VAR>d1</VAR>[], float 
    <VAR>d2</VAR>[], float <VAR>b1</VAR>[], float <VAR>b2</VAR>, float   
  <VAR>P</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdrotmg"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_drotmg</STRONG> <EM>(double <VAR>d1</VAR>[], 
  double   <VAR>d2</VAR>[], double <VAR>b1</VAR>[], double <VAR>b2</VAR>, double 
    <VAR>P</VAR>[])</EM></DT>
  <DD><A name="index-Modified-Givens-Rotation_002c-BLAS"></A><A name="index-Givens-Rotation_002c-Modified_002c-BLAS"></A>
  <P>These functions compute a modified Givens transformation. The modified   
  Givens transformation is defined in the original Level-1 <SMALL>BLAS</SMALL>   
  specification, given in the references. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsrotm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_srotm</STRONG> <EM>(gsl_vector_float * 
  <VAR>x</VAR>,   gsl_vector_float * <VAR>y</VAR>, const float 
  <VAR>P</VAR>[])</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdrotm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_drotm</STRONG> <EM>(gsl_vector * <VAR>x</VAR>, 
  gsl_vector *   <VAR>y</VAR>, const double <VAR>P</VAR>[])</EM></DT>
  <DD>
  <P>These functions apply a modified Givens transformation. </P></DD></DL>
<HR>
<A name="Level-2-GSL-BLAS-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Level-3-GSL-BLAS-Interface" 
rel="next">Level 3 GSL BLAS Interface</A>, Previous: <A accessKey="p" href="#Level-1-GSL-BLAS-Interface" 
rel="previous">Level 1 GSL BLAS Interface</A>, Up: <A accessKey="u" href="#GSL-BLAS-Interface" 
rel="up">GSL BLAS Interface</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Level-2"></A>
<H4 class="subsection">13.1.2 Level 2</H4>
<DL>
  <DT><A name="index-gsl_005fblas_005fsgemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_sgemv</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   float <VAR>alpha</VAR>, const gsl_matrix_float * 
  <VAR>A</VAR>, const   gsl_vector_float * <VAR>x</VAR>, float <VAR>beta</VAR>, 
  gsl_vector_float *   <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdgemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dgemv</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   double <VAR>alpha</VAR>, const gsl_matrix * <VAR>A</VAR>, 
  const gsl_vector *   <VAR>x</VAR>, double <VAR>beta</VAR>, gsl_vector * 
  <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcgemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cgemv</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   const gsl_complex_float <VAR>alpha</VAR>, const 
  gsl_matrix_complex_float *   <VAR>A</VAR>, const gsl_vector_complex_float * 
  <VAR>x</VAR>, const   gsl_complex_float <VAR>beta</VAR>, 
  gsl_vector_complex_float *   <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzgemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zgemv</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   const gsl_complex <VAR>alpha</VAR>, const 
  gsl_matrix_complex * <VAR>A</VAR>,   const gsl_vector_complex * <VAR>x</VAR>, 
  const gsl_complex <VAR>beta</VAR>,   gsl_vector_complex * 
  <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-GEMV_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the matrix-vector product and sum <EM>y = \alpha   
  op(A) x + \beta y</EM>, where <EM>op(A) = A</EM>, <EM>A^T</EM>, <EM>A^H</EM>   
  for <VAR>TransA</VAR> = <CODE>CblasNoTrans</CODE>, <CODE>CblasTrans</CODE>,   
  <CODE>CblasConjTrans</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fstrmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_strmv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix_float * <VAR>A</VAR>, gsl_vector_float * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdtrmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dtrmv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix * <VAR>A</VAR>, gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fctrmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ctrmv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix_complex_float * <VAR>A</VAR>, gsl_vector_complex_float *   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fztrmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ztrmv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, gsl_vector_complex * 
<VAR>x</VAR>)</EM></DT>
  <DD><A name="index-TRMV_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the matrix-vector product <EM>x = op(A) x</EM> for  
   the triangular matrix <VAR>A</VAR>, where <EM>op(A) = A</EM>, <EM>A^T</EM>,   
  <EM>A^H</EM> for <VAR>TransA</VAR> = <CODE>CblasNoTrans</CODE>,   
  <CODE>CblasTrans</CODE>, <CODE>CblasConjTrans</CODE>. When <VAR>Uplo</VAR> is  
   <CODE>CblasUpper</CODE> then the upper triangle of <VAR>A</VAR> is used, and  
   when <VAR>Uplo</VAR> is <CODE>CblasLower</CODE> then the lower triangle of   
  <VAR>A</VAR> is used. If <VAR>Diag</VAR> is <CODE>CblasNonUnit</CODE> then the 
    diagonal of the matrix is used, but if <VAR>Diag</VAR> is   
  <CODE>CblasUnit</CODE> then the diagonal elements of the matrix <VAR>A</VAR>   
  are taken as unity and are not referenced. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fstrsv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_strsv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix_float * <VAR>A</VAR>, gsl_vector_float * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdtrsv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dtrsv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix * <VAR>A</VAR>, gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fctrsv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ctrsv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix_complex_float * <VAR>A</VAR>, gsl_vector_complex_float *   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fztrsv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ztrsv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>TransA</VAR>, CBLAS_DIAG_t <VAR>Diag</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, gsl_vector_complex * 
<VAR>x</VAR>)</EM></DT>
  <DD><A name="index-TRSV_002c-Level_002d2-BLAS"></A>
  <P>These functions compute <EM>inv(op(A)) x</EM> for <VAR>x</VAR>, where   
  <EM>op(A) = A</EM>, <EM>A^T</EM>, <EM>A^H</EM> for <VAR>TransA</VAR> =   
  <CODE>CblasNoTrans</CODE>, <CODE>CblasTrans</CODE>,   
  <CODE>CblasConjTrans</CODE>. When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE>   
  then the upper triangle of <VAR>A</VAR> is used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle of <VAR>A</VAR> is used. If   
  <VAR>Diag</VAR> is <CODE>CblasNonUnit</CODE> then the diagonal of the matrix   
  is used, but if <VAR>Diag</VAR> is <CODE>CblasUnit</CODE> then the diagonal   
  elements of the matrix <VAR>A</VAR> are taken as unity and are not referenced. 
    </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fssymv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ssymv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  float   <VAR>alpha</VAR>, const gsl_matrix_float * <VAR>A</VAR>, const   
  gsl_vector_float * <VAR>x</VAR>, float <VAR>beta</VAR>, gsl_vector_float *   
  <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsymv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsymv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  double   <VAR>alpha</VAR>, const gsl_matrix * <VAR>A</VAR>, const gsl_vector * 
    <VAR>x</VAR>, double <VAR>beta</VAR>, gsl_vector * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-SYMV_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the matrix-vector product and sum <EM>y = \alpha A  
   x + \beta y</EM> for the symmetric matrix <VAR>A</VAR>. Since the matrix   
  <VAR>A</VAR> is symmetric only its upper half or lower half need to be stored. 
    When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper triangle and  
   diagonal of <VAR>A</VAR> are used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>A</VAR>   
  are used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fchemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_chemv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  const   gsl_complex_float <VAR>alpha</VAR>, const gsl_matrix_complex_float *   
  <VAR>A</VAR>, const gsl_vector_complex_float * <VAR>x</VAR>, const   
  gsl_complex_float <VAR>beta</VAR>, gsl_vector_complex_float *   
  <VAR>y</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzhemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zhemv</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  const   gsl_complex <VAR>alpha</VAR>, const gsl_matrix_complex * <VAR>A</VAR>, 
  const   gsl_vector_complex * <VAR>x</VAR>, const gsl_complex <VAR>beta</VAR>,  
   gsl_vector_complex * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-HEMV_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the matrix-vector product and sum <EM>y = \alpha A  
   x + \beta y</EM> for the hermitian matrix <VAR>A</VAR>. Since the matrix   
  <VAR>A</VAR> is hermitian only its upper half or lower half need to be stored. 
    When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper triangle and  
   diagonal of <VAR>A</VAR> are used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>A</VAR>   
  are used. The imaginary elements of the diagonal are automatically assumed to  
   be zero and are not referenced. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fsger"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_sger</STRONG> <EM>(float <VAR>alpha</VAR>, const  
   gsl_vector_float * <VAR>x</VAR>, const gsl_vector_float * <VAR>y</VAR>,   
  gsl_matrix_float * <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdger"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dger</STRONG> <EM>(double <VAR>alpha</VAR>, const 
  gsl_vector   * <VAR>x</VAR>, const gsl_vector * <VAR>y</VAR>, gsl_matrix *   
  <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcgeru"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cgeru</STRONG> <EM>(const gsl_complex_float 
  <VAR>alpha</VAR>,   const gsl_vector_complex_float * <VAR>x</VAR>, const 
  gsl_vector_complex_float   * <VAR>y</VAR>, gsl_matrix_complex_float * 
  <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzgeru"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zgeru</STRONG> <EM>(const gsl_complex 
  <VAR>alpha</VAR>, const   gsl_vector_complex * <VAR>x</VAR>, const 
  gsl_vector_complex * <VAR>y</VAR>,   gsl_matrix_complex * 
  <VAR>A</VAR>)</EM></DT>
  <DD><A name="index-GER_002c-Level_002d2-BLAS"></A><A name="index-GERU_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the rank-1 update <EM>A = \alpha x y^T + A</EM> of  
   the matrix <VAR>A</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcgerc"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cgerc</STRONG> <EM>(const gsl_complex_float 
  <VAR>alpha</VAR>,   const gsl_vector_complex_float * <VAR>x</VAR>, const 
  gsl_vector_complex_float   * <VAR>y</VAR>, gsl_matrix_complex_float * 
  <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzgerc"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zgerc</STRONG> <EM>(const gsl_complex 
  <VAR>alpha</VAR>, const   gsl_vector_complex * <VAR>x</VAR>, const 
  gsl_vector_complex * <VAR>y</VAR>,   gsl_matrix_complex * 
  <VAR>A</VAR>)</EM></DT>
  <DD><A name="index-GERC_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the conjugate rank-1 update <EM>A = \alpha x y^H +  
   A</EM> of the matrix <VAR>A</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fssyr"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ssyr</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  float   <VAR>alpha</VAR>, const gsl_vector_float * <VAR>x</VAR>, 
  gsl_matrix_float *   <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsyr"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsyr</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  double   <VAR>alpha</VAR>, const gsl_vector * <VAR>x</VAR>, gsl_matrix *   
  <VAR>A</VAR>)</EM></DT>
  <DD><A name="index-SYR_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the symmetric rank-1 update <EM>A = \alpha x x^T +  
   A</EM> of the symmetric matrix <VAR>A</VAR>. Since the matrix <VAR>A</VAR> is 
    symmetric only its upper half or lower half need to be stored. When   
  <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper triangle and   
  diagonal of <VAR>A</VAR> are used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>A</VAR>   
  are used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcher"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cher</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  float   <VAR>alpha</VAR>, const gsl_vector_complex_float * <VAR>x</VAR>,   
  gsl_matrix_complex_float * <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzher"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zher</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  double   <VAR>alpha</VAR>, const gsl_vector_complex * <VAR>x</VAR>, 
  gsl_matrix_complex   * <VAR>A</VAR>)</EM></DT>
  <DD><A name="index-HER_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the hermitian rank-1 update <EM>A = \alpha x x^H +  
   A</EM> of the hermitian matrix <VAR>A</VAR>. Since the matrix <VAR>A</VAR> is 
    hermitian only its upper half or lower half need to be stored. When   
  <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper triangle and   
  diagonal of <VAR>A</VAR> are used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>A</VAR>   
  are used. The imaginary elements of the diagonal are automatically set to   
  zero. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fssyr2"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ssyr2</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  float   <VAR>alpha</VAR>, const gsl_vector_float * <VAR>x</VAR>, const   
  gsl_vector_float * <VAR>y</VAR>, gsl_matrix_float * <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsyr2"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsyr2</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  double   <VAR>alpha</VAR>, const gsl_vector * <VAR>x</VAR>, const gsl_vector * 
    <VAR>y</VAR>, gsl_matrix * <VAR>A</VAR>)</EM></DT>
  <DD><A name="index-SYR2_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the symmetric rank-2 update <EM>A = \alpha x y^T +  
   \alpha y x^T + A</EM> of the symmetric matrix <VAR>A</VAR>. Since the matrix  
   <VAR>A</VAR> is symmetric only its upper half or lower half need to be 
  stored.   When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper 
  triangle and   diagonal of <VAR>A</VAR> are used, and when <VAR>Uplo</VAR> is  
   <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>A</VAR>  
   are used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcher2"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cher2</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  const   gsl_complex_float <VAR>alpha</VAR>, const gsl_vector_complex_float *   
  <VAR>x</VAR>, const gsl_vector_complex_float * <VAR>y</VAR>,   
  gsl_matrix_complex_float * <VAR>A</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzher2"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zher2</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
  const   gsl_complex <VAR>alpha</VAR>, const gsl_vector_complex * <VAR>x</VAR>, 
  const   gsl_vector_complex * <VAR>y</VAR>, gsl_matrix_complex * 
  <VAR>A</VAR>)</EM></DT>
  <DD><A name="index-HER2_002c-Level_002d2-BLAS"></A>
  <P>These functions compute the hermitian rank-2 update <EM>A = \alpha x y^H +  
   \alpha^* y x^H + A</EM> of the hermitian matrix <VAR>A</VAR>. Since the 
  matrix   <VAR>A</VAR> is hermitian only its upper half or lower half need to 
  be stored.   When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper 
  triangle and   diagonal of <VAR>A</VAR> are used, and when <VAR>Uplo</VAR> is  
   <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>A</VAR>  
   are used. The imaginary elements of the diagonal are automatically set to   
  zero. </P></DD></DL>
<HR>
<A name="Level-3-GSL-BLAS-Interface"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Level-2-GSL-BLAS-Interface" 
rel="previous">Level 2 GSL BLAS Interface</A>, Up: <A accessKey="u" href="#GSL-BLAS-Interface" 
rel="up">GSL BLAS Interface</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Level-3"></A>
<H4 class="subsection">13.1.3 Level 3</H4>
<DL>
  <DT><A name="index-gsl_005fblas_005fsgemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_sgemm</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   CBLAS_TRANSPOSE_t <VAR>TransB</VAR>, float 
  <VAR>alpha</VAR>, const   gsl_matrix_float * <VAR>A</VAR>, const 
  gsl_matrix_float * <VAR>B</VAR>, float   <VAR>beta</VAR>, gsl_matrix_float * 
  <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdgemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dgemm</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   CBLAS_TRANSPOSE_t <VAR>TransB</VAR>, double 
  <VAR>alpha</VAR>, const gsl_matrix   * <VAR>A</VAR>, const gsl_matrix * 
  <VAR>B</VAR>, double <VAR>beta</VAR>,   gsl_matrix * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcgemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cgemm</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   CBLAS_TRANSPOSE_t <VAR>TransB</VAR>, const 
  gsl_complex_float <VAR>alpha</VAR>,   const gsl_matrix_complex_float * 
  <VAR>A</VAR>, const gsl_matrix_complex_float   * <VAR>B</VAR>, const 
  gsl_complex_float <VAR>beta</VAR>,   gsl_matrix_complex_float * 
  <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzgemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zgemm</STRONG> <EM>(CBLAS_TRANSPOSE_t 
  <VAR>TransA</VAR>,   CBLAS_TRANSPOSE_t <VAR>TransB</VAR>, const gsl_complex 
  <VAR>alpha</VAR>, const   gsl_matrix_complex * <VAR>A</VAR>, const 
  gsl_matrix_complex * <VAR>B</VAR>,   const gsl_complex <VAR>beta</VAR>, 
  gsl_matrix_complex * <VAR>C</VAR>)</EM></DT>
  <DD><A name="index-GEMM_002c-Level_002d3-BLAS"></A>
  <P>These functions compute the matrix-matrix product and sum <EM>C = \alpha   
  op(A) op(B) + \beta C</EM> where <EM>op(A) = A</EM>, <EM>A^T</EM>,   
  <EM>A^H</EM> for <VAR>TransA</VAR> = <CODE>CblasNoTrans</CODE>,   
  <CODE>CblasTrans</CODE>, <CODE>CblasConjTrans</CODE> and similarly for the   
  parameter <VAR>TransB</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fssymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ssymm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, float <VAR>alpha</VAR>, const gsl_matrix_float 
  *   <VAR>A</VAR>, const gsl_matrix_float * <VAR>B</VAR>, float 
  <VAR>beta</VAR>,   gsl_matrix_float * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsymm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, double <VAR>alpha</VAR>, const gsl_matrix *   
  <VAR>A</VAR>, const gsl_matrix * <VAR>B</VAR>, double <VAR>beta</VAR>,   
  gsl_matrix * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcsymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_csymm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, const gsl_complex_float <VAR>alpha</VAR>, 
  const   gsl_matrix_complex_float * <VAR>A</VAR>, const 
  gsl_matrix_complex_float *   <VAR>B</VAR>, const gsl_complex_float 
  <VAR>beta</VAR>,   gsl_matrix_complex_float * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzsymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zsymm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, const gsl_complex <VAR>alpha</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, const gsl_matrix_complex * <VAR>B</VAR>,   
  const gsl_complex <VAR>beta</VAR>, gsl_matrix_complex * 
<VAR>C</VAR>)</EM></DT>
  <DD><A name="index-SYMM_002c-Level_002d3-BLAS"></A>
  <P>These functions compute the matrix-matrix product and sum <EM>C = \alpha A  
   B + \beta C</EM> for <VAR>Side</VAR> is <CODE>CblasLeft</CODE> and <EM>C =   
  \alpha B A + \beta C</EM> for <VAR>Side</VAR> is <CODE>CblasRight</CODE>,   
  where the matrix <VAR>A</VAR> is symmetric. When <VAR>Uplo</VAR> is   
  <CODE>CblasUpper</CODE> then the upper triangle and diagonal of <VAR>A</VAR>   
  are used, and when <VAR>Uplo</VAR> is <CODE>CblasLower</CODE> then the lower   
  triangle and diagonal of <VAR>A</VAR> are used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fchemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_chemm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, const gsl_complex_float <VAR>alpha</VAR>, 
  const   gsl_matrix_complex_float * <VAR>A</VAR>, const 
  gsl_matrix_complex_float *   <VAR>B</VAR>, const gsl_complex_float 
  <VAR>beta</VAR>,   gsl_matrix_complex_float * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzhemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zhemm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, const gsl_complex <VAR>alpha</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, const gsl_matrix_complex * <VAR>B</VAR>,   
  const gsl_complex <VAR>beta</VAR>, gsl_matrix_complex * 
<VAR>C</VAR>)</EM></DT>
  <DD><A name="index-HEMM_002c-Level_002d3-BLAS"></A>
  <P>These functions compute the matrix-matrix product and sum <EM>C = \alpha A  
   B + \beta C</EM> for <VAR>Side</VAR> is <CODE>CblasLeft</CODE> and <EM>C =   
  \alpha B A + \beta C</EM> for <VAR>Side</VAR> is <CODE>CblasRight</CODE>,   
  where the matrix <VAR>A</VAR> is hermitian. When <VAR>Uplo</VAR> is   
  <CODE>CblasUpper</CODE> then the upper triangle and diagonal of <VAR>A</VAR>   
  are used, and when <VAR>Uplo</VAR> is <CODE>CblasLower</CODE> then the lower   
  triangle and diagonal of <VAR>A</VAR> are used. The imaginary elements of the  
   diagonal are automatically set to zero. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fstrmm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_strmm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, float <VAR>alpha</VAR>, const gsl_matrix_float * 
    <VAR>A</VAR>, gsl_matrix_float * <VAR>B</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdtrmm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dtrmm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, double <VAR>alpha</VAR>, const gsl_matrix *   
  <VAR>A</VAR>, gsl_matrix * <VAR>B</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fctrmm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ctrmm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, const gsl_complex_float <VAR>alpha</VAR>, const  
   gsl_matrix_complex_float * <VAR>A</VAR>, gsl_matrix_complex_float *   
  <VAR>B</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fztrmm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ztrmm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, const gsl_complex <VAR>alpha</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, gsl_matrix_complex * 
<VAR>B</VAR>)</EM></DT>
  <DD><A name="index-TRMM_002c-Level_002d3-BLAS"></A>
  <P>These functions compute the matrix-matrix product <EM>B = \alpha op(A)   
  B</EM> for <VAR>Side</VAR> is <CODE>CblasLeft</CODE> and <EM>B = \alpha B   
  op(A)</EM> for <VAR>Side</VAR> is <CODE>CblasRight</CODE>. The matrix   
  <VAR>A</VAR> is triangular and <EM>op(A) = A</EM>, <EM>A^T</EM>, <EM>A^H</EM>  
   for <VAR>TransA</VAR> = <CODE>CblasNoTrans</CODE>, <CODE>CblasTrans</CODE>,   
  <CODE>CblasConjTrans</CODE>. When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE>   
  then the upper triangle of <VAR>A</VAR> is used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle of <VAR>A</VAR> is used. If   
  <VAR>Diag</VAR> is <CODE>CblasNonUnit</CODE> then the diagonal of <VAR>A</VAR> 
    is used, but if <VAR>Diag</VAR> is <CODE>CblasUnit</CODE> then the diagonal  
   elements of the matrix <VAR>A</VAR> are taken as unity and are not 
  referenced.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fstrsm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_strsm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, float <VAR>alpha</VAR>, const gsl_matrix_float * 
    <VAR>A</VAR>, gsl_matrix_float * <VAR>B</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdtrsm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dtrsm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, double <VAR>alpha</VAR>, const gsl_matrix *   
  <VAR>A</VAR>, gsl_matrix * <VAR>B</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fctrsm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ctrsm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, const gsl_complex_float <VAR>alpha</VAR>, const  
   gsl_matrix_complex_float * <VAR>A</VAR>, gsl_matrix_complex_float *   
  <VAR>B</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fztrsm"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ztrsm</STRONG> <EM>(CBLAS_SIDE_t <VAR>Side</VAR>, 
    CBLAS_UPLO_t <VAR>Uplo</VAR>, CBLAS_TRANSPOSE_t <VAR>TransA</VAR>,   
  CBLAS_DIAG_t <VAR>Diag</VAR>, const gsl_complex <VAR>alpha</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, gsl_matrix_complex * 
<VAR>B</VAR>)</EM></DT>
  <DD><A name="index-TRSM_002c-Level_002d3-BLAS"></A>
  <P>These functions compute the inverse-matrix matrix product <EM>B = \alpha   
  op(inv(A))B</EM> for <VAR>Side</VAR> is <CODE>CblasLeft</CODE> and <EM>B =   
  \alpha B op(inv(A))</EM> for <VAR>Side</VAR> is <CODE>CblasRight</CODE>. The   
  matrix <VAR>A</VAR> is triangular and <EM>op(A) = A</EM>, <EM>A^T</EM>,   
  <EM>A^H</EM> for <VAR>TransA</VAR> = <CODE>CblasNoTrans</CODE>,   
  <CODE>CblasTrans</CODE>, <CODE>CblasConjTrans</CODE>. When <VAR>Uplo</VAR> is  
   <CODE>CblasUpper</CODE> then the upper triangle of <VAR>A</VAR> is used, and  
   when <VAR>Uplo</VAR> is <CODE>CblasLower</CODE> then the lower triangle of   
  <VAR>A</VAR> is used. If <VAR>Diag</VAR> is <CODE>CblasNonUnit</CODE> then the 
    diagonal of <VAR>A</VAR> is used, but if <VAR>Diag</VAR> is   
  <CODE>CblasUnit</CODE> then the diagonal elements of the matrix <VAR>A</VAR>   
  are taken as unity and are not referenced. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fssyrk"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ssyrk</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, float <VAR>alpha</VAR>, const   
  gsl_matrix_float * <VAR>A</VAR>, float <VAR>beta</VAR>, gsl_matrix_float *   
  <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsyrk"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsyrk</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, double <VAR>alpha</VAR>, const 
  gsl_matrix   * <VAR>A</VAR>, double <VAR>beta</VAR>, gsl_matrix * 
  <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcsyrk"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_csyrk</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, const gsl_complex_float 
  <VAR>alpha</VAR>,   const gsl_matrix_complex_float * <VAR>A</VAR>, const 
  gsl_complex_float   <VAR>beta</VAR>, gsl_matrix_complex_float * 
  <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzsyrk"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zsyrk</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, const gsl_complex <VAR>alpha</VAR>, 
  const   gsl_matrix_complex * <VAR>A</VAR>, const gsl_complex <VAR>beta</VAR>,  
   gsl_matrix_complex * <VAR>C</VAR>)</EM></DT>
  <DD><A name="index-SYRK_002c-Level_002d3-BLAS"></A>
  <P>These functions compute a rank-k update of the symmetric matrix   
  <VAR>C</VAR>, <EM>C = \alpha A A^T + \beta C</EM> when <VAR>Trans</VAR> is   
  <CODE>CblasNoTrans</CODE> and <EM>C = \alpha A^T A + \beta C</EM> when   
  <VAR>Trans</VAR> is <CODE>CblasTrans</CODE>. Since the matrix <VAR>C</VAR> is  
   symmetric only its upper half or lower half need to be stored. When   
  <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper triangle and   
  diagonal of <VAR>C</VAR> are used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>C</VAR>   
  are used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcherk"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cherk</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, float <VAR>alpha</VAR>, const   
  gsl_matrix_complex_float * <VAR>A</VAR>, float <VAR>beta</VAR>,   
  gsl_matrix_complex_float * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzherk"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zherk</STRONG> <EM>(CBLAS_UPLO_t <VAR>Uplo</VAR>, 
    CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, double <VAR>alpha</VAR>, const   
  gsl_matrix_complex * <VAR>A</VAR>, double <VAR>beta</VAR>, gsl_matrix_complex  
   * <VAR>C</VAR>)</EM></DT>
  <DD><A name="index-HERK_002c-Level_002d3-BLAS"></A>
  <P>These functions compute a rank-k update of the hermitian matrix   
  <VAR>C</VAR>, <EM>C = \alpha A A^H + \beta C</EM> when <VAR>Trans</VAR> is   
  <CODE>CblasNoTrans</CODE> and <EM>C = \alpha A^H A + \beta C</EM> when   
  <VAR>Trans</VAR> is <CODE>CblasConjTrans</CODE>. Since the matrix <VAR>C</VAR> 
    is hermitian only its upper half or lower half need to be stored. When   
  <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the upper triangle and   
  diagonal of <VAR>C</VAR> are used, and when <VAR>Uplo</VAR> is   
  <CODE>CblasLower</CODE> then the lower triangle and diagonal of <VAR>C</VAR>   
  are used. The imaginary elements of the diagonal are automatically set to   
  zero. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fssyr2k"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_ssyr2k</STRONG> <EM>(CBLAS_UPLO_t 
  <VAR>Uplo</VAR>,   CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, float <VAR>alpha</VAR>, 
  const   gsl_matrix_float * <VAR>A</VAR>, const gsl_matrix_float * 
  <VAR>B</VAR>, float   <VAR>beta</VAR>, gsl_matrix_float * 
  <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fdsyr2k"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_dsyr2k</STRONG> <EM>(CBLAS_UPLO_t 
  <VAR>Uplo</VAR>,   CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, double 
  <VAR>alpha</VAR>, const gsl_matrix   * <VAR>A</VAR>, const gsl_matrix * 
  <VAR>B</VAR>, double <VAR>beta</VAR>,   gsl_matrix * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fcsyr2k"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_csyr2k</STRONG> <EM>(CBLAS_UPLO_t 
  <VAR>Uplo</VAR>,   CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, const gsl_complex_float 
  <VAR>alpha</VAR>,   const gsl_matrix_complex_float * <VAR>A</VAR>, const 
  gsl_matrix_complex_float   * <VAR>B</VAR>, const gsl_complex_float 
  <VAR>beta</VAR>,   gsl_matrix_complex_float * <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzsyr2k"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zsyr2k</STRONG> <EM>(CBLAS_UPLO_t 
  <VAR>Uplo</VAR>,   CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, const gsl_complex 
  <VAR>alpha</VAR>, const   gsl_matrix_complex * <VAR>A</VAR>, const 
  gsl_matrix_complex * <VAR>B</VAR>,   const gsl_complex <VAR>beta</VAR>, 
  gsl_matrix_complex * <VAR>C</VAR>)</EM></DT>
  <DD><A name="index-SYR2K_002c-Level_002d3-BLAS"></A>
  <P>These functions compute a rank-2k update of the symmetric matrix   
  <VAR>C</VAR>, <EM>C = \alpha A B^T + \alpha B A^T + \beta C</EM> when   
  <VAR>Trans</VAR> is <CODE>CblasNoTrans</CODE> and <EM>C = \alpha A^T B +   
  \alpha B^T A + \beta C</EM> when <VAR>Trans</VAR> is <CODE>CblasTrans</CODE>.  
   Since the matrix <VAR>C</VAR> is symmetric only its upper half or lower half  
   need to be stored. When <VAR>Uplo</VAR> is <CODE>CblasUpper</CODE> then the   
  upper triangle and diagonal of <VAR>C</VAR> are used, and when <VAR>Uplo</VAR> 
    is <CODE>CblasLower</CODE> then the lower triangle and diagonal of   
  <VAR>C</VAR> are used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fblas_005fcher2k"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_cher2k</STRONG> <EM>(CBLAS_UPLO_t 
  <VAR>Uplo</VAR>,   CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, const gsl_complex_float 
  <VAR>alpha</VAR>,   const gsl_matrix_complex_float * <VAR>A</VAR>, const 
  gsl_matrix_complex_float   * <VAR>B</VAR>, float <VAR>beta</VAR>, 
  gsl_matrix_complex_float *   <VAR>C</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fblas_005fzher2k"></A>Function: 
  <EM>int</EM><STRONG>gsl_blas_zher2k</STRONG> <EM>(CBLAS_UPLO_t 
  <VAR>Uplo</VAR>,   CBLAS_TRANSPOSE_t <VAR>Trans</VAR>, const gsl_complex 
  <VAR>alpha</VAR>, const   gsl_matrix_complex * <VAR>A</VAR>, const 
  gsl_matrix_complex * <VAR>B</VAR>,   double <VAR>beta</VAR>, 
  gsl_matrix_complex * <VAR>C</VAR>)</EM></DT>
  <DD><A name="index-HER2K_002c-Level_002d3-BLAS"></A>
  <P>These functions compute a rank-2k update of the hermitian matrix   
  <VAR>C</VAR>, <EM>C = \alpha A B^H + \alpha^* B A^H + \beta C</EM> when   
  <VAR>Trans</VAR> is <CODE>CblasNoTrans</CODE> and <EM>C = \alpha A^H B +   
  \alpha^* B^H A + \beta C</EM> when <VAR>Trans</VAR> is   
  <CODE>CblasConjTrans</CODE>. Since the matrix <VAR>C</VAR> is hermitian only   
  its upper half or lower half need to be stored. When <VAR>Uplo</VAR> is   
  <CODE>CblasUpper</CODE> then the upper triangle and diagonal of <VAR>C</VAR>   
  are used, and when <VAR>Uplo</VAR> is <CODE>CblasLower</CODE> then the lower   
  triangle and diagonal of <VAR>C</VAR> are used. The imaginary elements of the  
   diagonal are automatically set to zero. </P></DD></DL>
<HR>
<A name="BLAS-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#BLAS-References-and-Further-Reading" 
rel="next">BLAS References and Further Reading</A>, Previous: <A accessKey="p" 
href="#GSL-BLAS-Interface" 
rel="previous">GSL BLAS Interface</A>, Up: <A accessKey="u" href="#BLAS-Support" 
rel="up">BLAS Support</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-7"></A>
<H3 class="section">13.2 Examples</H3>
<P>The following program computes the product of two matrices using the Level-3 
<SMALL>BLAS</SMALL> function <SMALL>DGEMM</SMALL>, </P>
<DIV class="example"><PRE class="example">[ 0.11 0.12 0.13 ]  [ 1011 1012 ]     [ 367.76 368.12 ]
[ 0.21 0.22 0.23 ]  [ 1021 1022 ]  =  [ 674.06 674.72 ]
                    [ 1031 1032 ]
</PRE></DIV>
<P>The matrices are stored in row major order, according to the C convention for 
 arrays. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_blas.h&gt;

int
main (void)
{
  double a[] = { 0.11, 0.12, 0.13,
                 0.21, 0.22, 0.23 };

  double b[] = { 1011, 1012,
                 1021, 1022,
                 1031, 1032 };

  double c[] = { 0.00, 0.00,
                 0.00, 0.00 };

  gsl_matrix_view A = gsl_matrix_view_array(a, 2, 3);
  gsl_matrix_view B = gsl_matrix_view_array(b, 3, 2);
  gsl_matrix_view C = gsl_matrix_view_array(c, 2, 2);

  /* Compute C = A B */

  gsl_blas_dgemm (CblasNoTrans, CblasNoTrans,
                  1.0, &amp;A.matrix, &amp;B.matrix,
                  0.0, &amp;C.matrix);

  printf ("[ %g, %g\n", c[0], c[1]);
  printf ("  %g, %g ]\n", c[2], c[3]);

  return 0;  
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out
</PRE><PRE class="verbatim">[ 367.76, 368.12
  674.06, 674.72 ]</PRE></DIV>
<HR>
<A name="BLAS-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#BLAS-Examples" 
rel="previous">BLAS Examples</A>, Up: <A accessKey="u" href="#BLAS-Support" 
rel="up">BLAS Support</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-7"></A>
<H3 class="section">13.3 References and Further Reading</H3>
<P>Information on the <SMALL>BLAS</SMALL> standards, including both the legacy 
 and updated interface standards, is available online from the 
<SMALL>BLAS</SMALL> Homepage and <SMALL>BLAS</SMALL> Technical Forum web-site. 
</P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>BLAS Homepage</CITE> <BR><A href="http://www.netlib.org/blas/">http://www.netlib.org/blas/</A> 
  </LI>
  <LI><!-- /@w --><CITE>BLAS Technical Forum</CITE> <BR><A href="http://www.netlib.org/blas/blast-forum/">http://www.netlib.org/blas/blast-forum/</A></LI></UL>
<P>The following papers contain the specifications for Level 1, Level 2 and 
 Level 3 <SMALL>BLAS</SMALL>. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->C. Lawson, R. Hanson, D. Kincaid, F. Krogh, “Basic Linear   
  Algebra Subprograms for Fortran Usage”, <CITE>ACM Transactions on Mathematical 
    Software</CITE>, Vol. 5 (1979), Pages 308–325. </LI>
  <LI><!-- /@w -->J.J. Dongarra, J. DuCroz, S. Hammarling, R. Hanson, “An   
  Extended Set of Fortran Basic Linear Algebra Subprograms”, <CITE>ACM   
  Transactions on Mathematical Software</CITE>, Vol. 14, No. 1 (1988), Pages   
  1–32. </LI>
  <LI><!-- /@w -->J.J. Dongarra, I. Duff, J. DuCroz, S. Hammarling, “A Set of   
  Level 3 Basic Linear Algebra Subprograms”, <CITE>ACM Transactions on   
  Mathematical Software</CITE>, Vol. 16 (1990), Pages 1–28. </LI></UL>
<P>Postscript versions of the latter two papers are available from <A href="http://www.netlib.org/blas/">http://www.netlib.org/blas/</A>. 
A <SMALL>CBLAS</SMALL> wrapper for Fortran <SMALL>BLAS</SMALL> libraries is 
 available from the same location. </P>
<HR>
<A name="Linear-Algebra"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Eigensystems" 
rel="next">Eigensystems</A>, Previous: <A accessKey="p" href="#BLAS-Support" 
rel="previous">BLAS Support</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Linear-Algebra-1"></A>
<H2 class="chapter">14 Linear Algebra</H2><A name="index-linear-algebra"></A><A 
name="index-solution-of-linear-systems_002c-Ax_003db"></A><A name="index-matrix-factorization"></A><A 
name="index-factorization-of-matrices"></A>
<P>This chapter describes functions for solving linear systems. The library 
 provides linear algebra operations which operate directly on the 
<CODE>gsl_vector</CODE> and <CODE>gsl_matrix</CODE> objects. These routines use 
 the standard algorithms from Golub &amp; Van Loan’s <CITE>Matrix 
 Computations</CITE> with Level-1 and Level-2 BLAS calls for efficiency. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_linalg.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#LU-Decomposition">LU 
            Decomposition</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#QR-Decomposition">QR 
            Decomposition</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices">Tridiagonal 
            Decomposition of Real Symmetric Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Tridiagonal-Decomposition-of-Hermitian-Matrices">Tridiagonal 
            Decomposition of Hermitian Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Hessenberg-Decomposition-of-Real-Matrices">Hessenberg 
            Decomposition of Real Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Hessenberg_002dTriangular-Decomposition-of-Real-Matrices">Hessenberg-Triangular 
            Decomposition of Real Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Bidiagonalization">Bidiagonalization</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Givens-Rotations">Givens 
            Rotations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Householder-Transformations">Householder 
            Transformations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Householder-solver-for-linear-systems">Householder 
            solver for linear systems</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Tridiagonal-Systems">Tridiagonal 
            Systems</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Balancing">Balancing</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Linear-Algebra-Examples">Linear 
            Algebra Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Linear-Algebra-References-and-Further-Reading">Linear 
            Algebra References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="LU-Decomposition"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QR-Decomposition" 
rel="next">QR Decomposition</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="LU-Decomposition-1"></A>
<H3 class="section">14.1 LU Decomposition</H3><A 
name="index-LU-decomposition"></A>
<P>A general square matrix <EM>A</EM> has an <EM>LU</EM> decomposition into 
 upper and lower triangular matrices, </P>
<DIV class="example"><PRE class="example">P A = L U
</PRE></DIV>
<P>where <EM>P</EM> is a permutation matrix, <EM>L</EM> is unit lower triangular 
 matrix and <EM>U</EM> is upper triangular matrix. For square matrices this 
 decomposition can be used to convert the linear system <EM>A x = b</EM> into a 
 pair of triangular systems (<EM>L y = P b</EM>, <EM>U x = y</EM>), which can be 
 solved by forward and back-substitution. Note that the <EM>LU</EM> 
decomposition  is valid for singular matrices. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005fdecomp"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_LU_decomp</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>,   gsl_permutation * <VAR>p</VAR>, int * 
  <VAR>signum</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005fdecomp"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_linalg_complex_LU_decomp</STRONG><EM>(gsl_matrix_complex * 
  <VAR>A</VAR>, gsl_permutation * <VAR>p</VAR>, int *   
  <VAR>signum</VAR>)</EM></DT>
  <DD>
  <P>These functions factorize the square matrix <VAR>A</VAR> into the   
  <EM>LU</EM> decomposition <EM>PA = LU</EM>. On output the diagonal and upper   
  triangular part of the input matrix <VAR>A</VAR> contain the matrix   
  <EM>U</EM>. The lower triangular part of the input matrix (excluding the   
  diagonal) contains <EM>L</EM>. The diagonal elements of <EM>L</EM> are unity,  
   and are not stored. </P>
  <P>The permutation matrix <EM>P</EM> is encoded in the permutation   
  <VAR>p</VAR> on output. The <EM>j</EM>-th column of the matrix <EM>P</EM> is   
  given by the <EM>k</EM>-th column of the identity matrix, where <EM>k =   
  p_j</EM> the <EM>j</EM>-th element of the permutation vector. The sign of the  
   permutation is given by <VAR>signum</VAR>. It has the value <EM>(-1)^n</EM>,  
   where <EM>n</EM> is the number of interchanges in the permutation. </P>
  <P>The algorithm used in the decomposition is Gaussian Elimination with   
  partial pivoting (Golub &amp; Van Loan, <CITE>Matrix Computations</CITE>,   
  Algorithm 3.4.1). </P></DD></DL><A 
name="index-linear-systems_002c-solution-of"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005fsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_LU_solve</STRONG> <EM>(const gsl_matrix * 
  <VAR>LU</VAR>,   const gsl_permutation * <VAR>p</VAR>, const gsl_vector * 
  <VAR>b</VAR>,   gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005fsolve"></A>Function:  
   <EM>int</EM> <STRONG>gsl_linalg_complex_LU_solve</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>LU</VAR>, const gsl_permutation * <VAR>p</VAR>,   
  const gsl_vector_complex * <VAR>b</VAR>, gsl_vector_complex *   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions solve the square system <EM>A x = b</EM> using the   
  <EM>LU</EM> decomposition of <EM>A</EM> into (<VAR>LU</VAR>, <VAR>p</VAR>)   
  given by <CODE>gsl_linalg_LU_decomp</CODE> or   
  <CODE>gsl_linalg_complex_LU_decomp</CODE> as input. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005fsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_LU_svx</STRONG> <EM>(const gsl_matrix * 
  <VAR>LU</VAR>,   const gsl_permutation * <VAR>p</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005fsvx"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_complex_LU_svx</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>LU</VAR>, const gsl_permutation * <VAR>p</VAR>,   
  gsl_vector_complex * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions solve the square system <EM>A x = b</EM> in-place using the 
    precomputed <EM>LU</EM> decomposition of <EM>A</EM> into   
  (<VAR>LU</VAR>,<VAR>p</VAR>). On input <VAR>x</VAR> should contain the   
  right-hand side <EM>b</EM>, which is replaced by the solution on output.   
  </P></DD></DL><A name="index-refinement-of-solutions-in-linear-systems"></A><A 
name="index-iterative-refinement-of-solutions-in-linear-systems"></A><A name="index-linear-systems_002c-refinement-of-solutions"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005frefine"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_LU_refine</STRONG> <EM>(const gsl_matrix * 
  <VAR>A</VAR>,   const gsl_matrix * <VAR>LU</VAR>, const gsl_permutation * 
  <VAR>p</VAR>, const   gsl_vector * <VAR>b</VAR>, gsl_vector * <VAR>x</VAR>, 
  gsl_vector *   <VAR>residual</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005frefine"></A>Function: 
    <EM>int</EM> <STRONG>gsl_linalg_complex_LU_refine</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>A</VAR>, const gsl_matrix_complex * <VAR>LU</VAR>,   
  const gsl_permutation * <VAR>p</VAR>, const gsl_vector_complex * <VAR>b</VAR>, 
    gsl_vector_complex * <VAR>x</VAR>, gsl_vector_complex *   
  <VAR>residual</VAR>)</EM></DT>
  <DD>
  <P>These functions apply an iterative improvement to <VAR>x</VAR>, the   
  solution of <EM>A x = b</EM>, from the precomputed <EM>LU</EM> decomposition   
  of <EM>A</EM> into (<VAR>LU</VAR>,<VAR>p</VAR>). The initial residual <EM>r =  
   A x - b</EM> is also computed and stored in <VAR>residual</VAR>. 
</P></DD></DL><A 
name="index-inverse-of-a-matrix_002c-by-LU-decomposition"></A><A name="index-matrix-inverse"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005finvert"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_LU_invert</STRONG> <EM>(const gsl_matrix * 
  <VAR>LU</VAR>,   const gsl_permutation * <VAR>p</VAR>, gsl_matrix *   
  <VAR>inverse</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005finvert"></A>Function: 
    <EM>int</EM> <STRONG>gsl_linalg_complex_LU_invert</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>LU</VAR>, const gsl_permutation * <VAR>p</VAR>,   
  gsl_matrix_complex * <VAR>inverse</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the inverse of a matrix <EM>A</EM> from its   
  <EM>LU</EM> decomposition (<VAR>LU</VAR>,<VAR>p</VAR>), storing the result in  
   the matrix <VAR>inverse</VAR>. The inverse is computed by solving the system  
   <EM>A x = b</EM> for each column of the identity matrix. It is preferable to  
   avoid direct use of the inverse whenever possible, as the linear solver   
  functions can obtain the same result more efficiently and reliably (consult   
  any introductory textbook on numerical linear algebra for details). 
</P></DD></DL><A 
name="index-determinant-of-a-matrix_002c-by-LU-decomposition"></A><A name="index-matrix-determinant"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005fdet"></A>Function: 
  <EM>double</EM><STRONG>gsl_linalg_LU_det</STRONG> <EM>(gsl_matrix * 
  <VAR>LU</VAR>, int   <VAR>signum</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005fdet"></A>Function:   
  <EM>gsl_complex</EM> 
  <STRONG>gsl_linalg_complex_LU_det</STRONG><EM>(gsl_matrix_complex * 
  <VAR>LU</VAR>, int <VAR>signum</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the determinant of a matrix <EM>A</EM> from its   
  <EM>LU</EM> decomposition, <VAR>LU</VAR>. The determinant is computed as the   
  product of the diagonal elements of <EM>U</EM> and the sign of the row   
  permutation <VAR>signum</VAR>. </P></DD></DL><A name="index-logarithm-of-the-determinant-of-a-matrix"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005flndet"></A>Function:   
  <EM>double</EM> <STRONG>gsl_linalg_LU_lndet</STRONG> <EM>(gsl_matrix *   
  <VAR>LU</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005flndet"></A>Function:  
   <EM>double</EM> 
  <STRONG>gsl_linalg_complex_LU_lndet</STRONG><EM>(gsl_matrix_complex * 
  <VAR>LU</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the logarithm of the absolute value of the   
  determinant of a matrix <EM>A</EM>, <EM>\ln|\det(A)|</EM>, from its   
  <EM>LU</EM> decomposition, <VAR>LU</VAR>. This function may be useful if the   
  direct computation of the determinant would overflow or underflow. 
</P></DD></DL><A name="index-sign-of-the-determinant-of-a-matrix"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fLU_005fsgndet"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_LU_sgndet</STRONG> <EM>(gsl_matrix * 
  <VAR>LU</VAR>, int   <VAR>signum</VAR>)</EM></DT>
  <DT><A name="index-gsl_005flinalg_005fcomplex_005fLU_005fsgndet"></A>Function: 
    <EM>gsl_complex</EM> 
  <STRONG>gsl_linalg_complex_LU_sgndet</STRONG><EM>(gsl_matrix_complex * 
  <VAR>LU</VAR>, int <VAR>signum</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the sign or phase factor of the determinant of a   
  matrix <EM>A</EM>, <EM>\det(A)/|\det(A)|</EM>, from its <EM>LU</EM>   
  decomposition, <VAR>LU</VAR>. </P></DD></DL>
<HR>
<A name="QR-Decomposition"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QR-Decomposition-with-Column-Pivoting" 
rel="next">QR Decomposition with Column Pivoting</A>, Previous: <A accessKey="p" 
href="#LU-Decomposition" rel="previous">LU 
Decomposition</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QR-Decomposition-1"></A>
<H3 class="section">14.2 QR Decomposition</H3><A 
name="index-QR-decomposition"></A>
<P>A general rectangular <EM>M</EM>-by-<EM>N</EM> matrix <EM>A</EM> has a 
<EM>QR</EM> decomposition into the product of an orthogonal 
<EM>M</EM>-by-<EM>M</EM> square matrix <EM>Q</EM> (where <EM>Q^T Q = I</EM>) and 
 an <EM>M</EM>-by-<EM>N</EM> right-triangular matrix <EM>R</EM>, </P>
<DIV class="example"><PRE class="example">A = Q R
</PRE></DIV>
<P>This decomposition can be used to convert the linear system <EM>A x = b</EM> 
 into the triangular system <EM>R x = Q^T b</EM>, which can be solved by 
 back-substitution. Another use of the <EM>QR</EM> decomposition is to compute 
an  orthonormal basis for a set of vectors. The first <EM>N</EM> columns of 
<EM>Q</EM> form an orthonormal basis for the range of <EM>A</EM>, 
<EM>ran(A)</EM>, when <EM>A</EM> has full column rank. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fdecomp"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_decomp</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>,   gsl_vector * <VAR>tau</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the <EM>M</EM>-by-<EM>N</EM> matrix <VAR>A</VAR>   
  into the <EM>QR</EM> decomposition <EM>A = Q R</EM>. On output the diagonal   
  and upper triangular part of the input matrix contain the matrix <EM>R</EM>.   
  The vector <VAR>tau</VAR> and the columns of the lower triangular part of the  
   matrix <VAR>A</VAR> contain the Householder coefficients and Householder   
  vectors which encode the orthogonal matrix <VAR>Q</VAR>. The vector   
  <VAR>tau</VAR> must be of length <EM>k=\min(M,N)</EM>. The matrix <EM>Q</EM>   
  is related to these components by, <EM>Q = Q_k ... Q_2 Q_1</EM> where <EM>Q_i  
   = I - \tau_i v_i v_i^T</EM> and <EM>v_i</EM> is the Householder vector 
  <EM>v_i   = (0,...,1,A(i+1,i),A(i+2,i),...,A(m,i))</EM>. This is the same 
  storage scheme   as used by <SMALL>LAPACK</SMALL>. </P>
  <P>The algorithm used to perform the decomposition is Householder QR (Golub   
  &amp; Van Loan, <CITE>Matrix Computations</CITE>, Algorithm 5.2.1). 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_solve</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, const gsl_vector * 
  <VAR>b</VAR>, gsl_vector   * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the square system <EM>A x = b</EM> using the   
  <EM>QR</EM> decomposition of <EM>A</EM> held in (<VAR>QR</VAR>,   
  <VAR>tau</VAR>) which must have been computed previously with   
  <CODE>gsl_linalg_QR_decomp</CODE>. The least-squares solution for rectangular  
   systems can be found using <CODE>gsl_linalg_QR_lssolve</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_svx</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the square system <EM>A x = b</EM> in-place using the  
   <EM>QR</EM> decomposition of <EM>A</EM> held in 
  (<VAR>QR</VAR>,<VAR>tau</VAR>)   which must have been computed previously by 
  <CODE>gsl_linalg_QR_decomp</CODE>.   On input <VAR>x</VAR> should contain the 
  right-hand side <EM>b</EM>, which is   replaced by the solution on output. 
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005flssolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_lssolve</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, const gsl_vector * 
  <VAR>b</VAR>, gsl_vector   * <VAR>x</VAR>, gsl_vector * 
  <VAR>residual</VAR>)</EM></DT>
  <DD>
  <P>This function finds the least squares solution to the overdetermined system 
    <EM>A x = b</EM> where the matrix <VAR>A</VAR> has more rows than columns. 
  The   least squares solution minimizes the Euclidean norm of the residual, 
  <EM>||Ax   - b||</EM>.The routine requires as input the <EM>QR</EM> 
  decomposition of   <EM>A</EM> into (<VAR>QR</VAR>, <VAR>tau</VAR>) given by   
  <CODE>gsl_linalg_QR_decomp</CODE>. The solution is returned in <VAR>x</VAR>.   
  The residual is computed as a by-product and stored in <VAR>residual</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fQTvec"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_QTvec</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function applies the matrix <EM>Q^T</EM> encoded in the decomposition  
   (<VAR>QR</VAR>,<VAR>tau</VAR>) to the vector <VAR>v</VAR>, storing the result 
    <EM>Q^T v</EM> in <VAR>v</VAR>. The matrix multiplication is carried out   
  directly using the encoding of the Householder vectors without needing to form 
    the full matrix <EM>Q^T</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fQvec"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_Qvec</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, gsl_vector * 
  <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function applies the matrix <EM>Q</EM> encoded in the decomposition   
  (<VAR>QR</VAR>,<VAR>tau</VAR>) to the vector <VAR>v</VAR>, storing the result  
   <EM>Q v</EM> in <VAR>v</VAR>. The matrix multiplication is carried out   
  directly using the encoding of the Householder vectors without needing to form 
    the full matrix <EM>Q</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fQTmat"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_QTmat</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, gsl_matrix * 
  <VAR>A</VAR>)</EM></DT>
  <DD>
  <P>This function applies the matrix <EM>Q^T</EM> encoded in the decomposition  
   (<VAR>QR</VAR>,<VAR>tau</VAR>) to the matrix <VAR>A</VAR>, storing the result 
    <EM>Q^T A</EM> in <VAR>A</VAR>. The matrix multiplication is carried out   
  directly using the encoding of the Householder vectors without needing to form 
    the full matrix <EM>Q^T</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fRsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_Rsolve</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>b</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the triangular system <EM>R x = b</EM> for   
  <VAR>x</VAR>. It may be useful if the product <EM>b' = Q^T b</EM> has already  
   been computed using <CODE>gsl_linalg_QR_QTvec</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fRsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_Rsvx</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the triangular system <EM>R x = b</EM> for   
  <VAR>x</VAR> in-place. On input <VAR>x</VAR> should contain the right-hand   
  side <EM>b</EM> and is replaced by the solution on output. This function may   
  be useful if the product <EM>b' = Q^T b</EM> has already been computed using   
  <CODE>gsl_linalg_QR_QTvec</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005funpack"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_unpack</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, gsl_matrix * <VAR>Q</VAR>, 
  gsl_matrix *   <VAR>R</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the encoded <EM>QR</EM> decomposition   
  (<VAR>QR</VAR>,<VAR>tau</VAR>) into the matrices <VAR>Q</VAR> and   
  <VAR>R</VAR>, where <VAR>Q</VAR> is <EM>M</EM>-by-<EM>M</EM> and <VAR>R</VAR>  
   is <EM>M</EM>-by-<EM>N</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fQRsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_QRsolve</STRONG> <EM>(gsl_matrix * 
  <VAR>Q</VAR>,   gsl_matrix * <VAR>R</VAR>, const gsl_vector * <VAR>b</VAR>, 
  gsl_vector *   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the system <EM>R x = Q^T b</EM> for <VAR>x</VAR>. It   
  can be used when the <EM>QR</EM> decomposition of a matrix is available in   
  unpacked form as (<VAR>Q</VAR>, <VAR>R</VAR>). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQR_005fupdate"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QR_update</STRONG> <EM>(gsl_matrix * 
  <VAR>Q</VAR>,   gsl_matrix * <VAR>R</VAR>, gsl_vector * <VAR>w</VAR>, const 
  gsl_vector *   <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function performs a rank-1 update <EM>w v^T</EM> of the <EM>QR</EM>   
  decomposition (<VAR>Q</VAR>, <VAR>R</VAR>). The update is given by <EM>Q'R' =  
   Q (R + w v^T)</EM> where the output matrices <EM>Q'</EM> and <EM>R'</EM> are  
   also orthogonal and right triangular. Note that <VAR>w</VAR> is destroyed by  
   the update. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fR_005fsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_R_solve</STRONG> <EM>(const gsl_matrix * 
  <VAR>R</VAR>,   const gsl_vector * <VAR>b</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the triangular system <EM>R x = b</EM> for the   
  <EM>N</EM>-by-<EM>N</EM> matrix <VAR>R</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fR_005fsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_R_svx</STRONG> <EM>(const gsl_matrix * 
  <VAR>R</VAR>,   gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the triangular system <EM>R x = b</EM> in-place. On   
  input <VAR>x</VAR> should contain the right-hand side <EM>b</EM>, which is   
  replaced by the solution on output. </P></DD></DL>
<HR>
<A name="QR-Decomposition-with-Column-Pivoting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Singular-Value-Decomposition" 
rel="next">Singular Value Decomposition</A>, Previous: <A accessKey="p" href="#QR-Decomposition" 
rel="previous">QR Decomposition</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QR-Decomposition-with-Column-Pivoting-1"></A>
<H3 class="section">14.3 QR Decomposition with Column Pivoting</H3><A name="index-QR-decomposition-with-column-pivoting"></A>
<P>The <EM>QR</EM> decomposition can be extended to the rank deficient case by 
 introducing a column permutation <EM>P</EM>, </P>
<DIV class="example"><PRE class="example">A P = Q R
</PRE></DIV>
<P>The first <EM>r</EM> columns of <EM>Q</EM> form an orthonormal basis for the 
 range of <EM>A</EM> for a matrix with column rank <EM>r</EM>. This 
decomposition  can also be used to convert the linear system <EM>A x = b</EM> 
into the  triangular system <EM>R y = Q^T b, x = P y</EM>, which can be solved 
by  back-substitution and permutation. We denote the <EM>QR</EM> decomposition 
with  column pivoting by <EM>QRP^T</EM> since <EM>A = Q R P^T</EM>. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_QRPT_decomp</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_vector * <VAR>tau</VAR>, gsl_permutation * <VAR>p</VAR>, int 
    * <VAR>signum</VAR>, gsl_vector * <VAR>norm</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the <EM>M</EM>-by-<EM>N</EM> matrix <VAR>A</VAR>   
  into the <EM>QRP^T</EM> decomposition <EM>A = Q R P^T</EM>. On output the   
  diagonal and upper triangular part of the input matrix contain the matrix   
  <EM>R</EM>. The permutation matrix <EM>P</EM> is stored in the permutation   
  <VAR>p</VAR>. The sign of the permutation is given by <VAR>signum</VAR>. It   
  has the value <EM>(-1)^n</EM>, where <EM>n</EM> is the number of interchanges  
   in the permutation. The vector <VAR>tau</VAR> and the columns of the lower   
  triangular part of the matrix <VAR>A</VAR> contain the Householder   
  coefficients and vectors which encode the orthogonal matrix <VAR>Q</VAR>. The  
   vector <VAR>tau</VAR> must be of length <EM>k=\min(M,N)</EM>. The matrix   
  <EM>Q</EM> is related to these components by, <EM>Q = Q_k ... Q_2 Q_1</EM>   
  where <EM>Q_i = I - \tau_i v_i v_i^T</EM> and <EM>v_i</EM> is the Householder  
   vector <EM>v_i = (0,...,1,A(i+1,i),A(i+2,i),...,A(m,i))</EM>. This is the 
  same   storage scheme as used by <SMALL>LAPACK</SMALL>. The vector 
  <VAR>norm</VAR> is   a workspace of length <VAR>N</VAR> used for column 
  pivoting. </P>
  <P>The algorithm used to perform the decomposition is Householder QR with   
  column pivoting (Golub &amp; Van Loan, <CITE>Matrix Computations</CITE>,   
  Algorithm 5.4.1). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fdecomp2"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_QRPT_decomp2</STRONG> <EM>(const gsl_matrix *  
   <VAR>A</VAR>, gsl_matrix * <VAR>q</VAR>, gsl_matrix * <VAR>r</VAR>, 
  gsl_vector   * <VAR>tau</VAR>, gsl_permutation * <VAR>p</VAR>, int * 
  <VAR>signum</VAR>,   gsl_vector * <VAR>norm</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the matrix <VAR>A</VAR> into the decomposition   
  <EM>A = Q R P^T</EM> without modifying <VAR>A</VAR> itself and storing the   
  output in the separate matrices <VAR>q</VAR> and <VAR>r</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QRPT_solve</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, const gsl_permutation * 
  <VAR>p</VAR>, const   gsl_vector * <VAR>b</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the square system <EM>A x = b</EM> using the   
  <EM>QRP^T</EM> decomposition of <EM>A</EM> held in (<VAR>QR</VAR>,   
  <VAR>tau</VAR>, <VAR>p</VAR>) which must have been computed previously by   
  <CODE>gsl_linalg_QRPT_decomp</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QRPT_svx</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_vector * <VAR>tau</VAR>, const gsl_permutation * 
  <VAR>p</VAR>,   gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the square system <EM>A x = b</EM> in-place using the  
   <EM>QRP^T</EM> decomposition of <EM>A</EM> held in   
  (<VAR>QR</VAR>,<VAR>tau</VAR>,<VAR>p</VAR>). On input <VAR>x</VAR> should   
  contain the right-hand side <EM>b</EM>, which is replaced by the solution on   
  output. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fQRsolve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_QRPT_QRsolve</STRONG> <EM>(const gsl_matrix *  
   <VAR>Q</VAR>, const gsl_matrix * <VAR>R</VAR>, const gsl_permutation *   
  <VAR>p</VAR>, const gsl_vector * <VAR>b</VAR>, gsl_vector *   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the square system <EM>R P^T x = Q^T b</EM> for   
  <VAR>x</VAR>. It can be used when the <EM>QR</EM> decomposition of a matrix is 
    available in unpacked form as (<VAR>Q</VAR>, <VAR>R</VAR>). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fupdate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_QRPT_update</STRONG> <EM>(gsl_matrix *   
  <VAR>Q</VAR>, gsl_matrix * <VAR>R</VAR>, const gsl_permutation * <VAR>p</VAR>, 
    gsl_vector * <VAR>w</VAR>, const gsl_vector * <VAR>v</VAR>)</EM></DT>
  <DD>
  <P>This function performs a rank-1 update <EM>w v^T</EM> of the <EM>QRP^T</EM> 
    decomposition (<VAR>Q</VAR>, <VAR>R</VAR>, <VAR>p</VAR>). The update is 
  given   by <EM>Q'R' = Q (R + w v^T P)</EM> where the output matrices 
  <EM>Q'</EM> and   <EM>R'</EM> are also orthogonal and right triangular. Note 
  that <VAR>w</VAR>   is destroyed by the update. The permutation <VAR>p</VAR> 
  is not changed.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fRsolve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_QRPT_Rsolve</STRONG> <EM>(const gsl_matrix *   
  <VAR>QR</VAR>, const gsl_permutation * <VAR>p</VAR>, const gsl_vector *   
  <VAR>b</VAR>, gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the triangular system <EM>R P^T x = b</EM> for the   
  <EM>N</EM>-by-<EM>N</EM> matrix <EM>R</EM> contained in <VAR>QR</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fQRPT_005fRsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_QRPT_Rsvx</STRONG> <EM>(const gsl_matrix * 
  <VAR>QR</VAR>,   const gsl_permutation * <VAR>p</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the triangular system <EM>R P^T x = b</EM> in-place   
  for the <EM>N</EM>-by-<EM>N</EM> matrix <EM>R</EM> contained in <VAR>QR</VAR>. 
    On input <VAR>x</VAR> should contain the right-hand side <EM>b</EM>, which 
  is   replaced by the solution on output. </P></DD></DL>
<HR>
<A name="Singular-Value-Decomposition"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Cholesky-Decomposition" 
rel="next">Cholesky Decomposition</A>, Previous: <A accessKey="p" href="#QR-Decomposition-with-Column-Pivoting" 
rel="previous">QR Decomposition with Column Pivoting</A>, Up: <A accessKey="u" 
href="#Linear-Algebra" rel="up">Linear 
Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Singular-Value-Decomposition-1"></A>
<H3 class="section">14.4 Singular Value Decomposition</H3><A 
name="index-SVD"></A><A name="index-singular-value-decomposition"></A>
<P>A general rectangular <EM>M</EM>-by-<EM>N</EM> matrix <EM>A</EM> has a 
 singular value decomposition (<SMALL>SVD</SMALL>) into the product of an 
<EM>M</EM>-by-<EM>N</EM> orthogonal matrix <EM>U</EM>, an 
<EM>N</EM>-by-<EM>N</EM> diagonal matrix of singular values <EM>S</EM> and the 
 transpose of an <EM>N</EM>-by-<EM>N</EM> orthogonal square matrix <EM>V</EM>, 
</P>
<DIV class="example"><PRE class="example">A = U S V^T
</PRE></DIV>
<P>The singular values <EM>\sigma_i = S_{ii}</EM> are all non-negative and are 
 generally chosen to form a non-increasing sequence <EM>\sigma_1 &gt;= \sigma_2 
&gt; = ... &gt;= \sigma_N &gt;= 0</EM>. </P>
<P>The singular value decomposition of a matrix has many practical uses. The 
 condition number of the matrix is given by the ratio of the largest singular 
 value to the smallest singular value. The presence of a zero singular value 
 indicates that the matrix is singular. The number of non-zero singular values 
 indicates the rank of the matrix. In practice singular value decomposition of a 
 rank-deficient matrix will not produce exact zeroes for singular values, due to 
 finite numerical precision. Small singular values should be edited by choosing 
a  suitable tolerance. </P>
<P>For a rank-deficient matrix, the null space of <EM>A</EM> is given by the 
 columns of <EM>V</EM> corresponding to the zero singular values. Similarly, the 
 range of <EM>A</EM> is given by columns of <EM>U</EM> corresponding to the 
 non-zero singular values. </P>
<P>Note that the routines here compute the “thin” version of the SVD with 
<EM>U</EM> as <EM>M</EM>-by-<EM>N</EM> orthogonal matrix. This allows in-place 
 computation and is the most commonly-used form in practice. Mathematically, the 
“full” SVD is defined with <EM>U</EM> as an <EM>M</EM>-by-<EM>M</EM> orthogonal 
 matrix and <EM>S</EM> as an <EM>M</EM>-by-<EM>N</EM> diagonal matrix (with 
 additional rows of zeros). </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fSV_005fdecomp"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_SV_decomp</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>,   gsl_matrix * <VAR>V</VAR>, gsl_vector * <VAR>S</VAR>, 
  gsl_vector *   <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the <EM>M</EM>-by-<EM>N</EM> matrix <VAR>A</VAR>   
  into the singular value decomposition <EM>A = U S V^T</EM> for <EM>M &gt;=   
  N</EM>. On output the matrix <VAR>A</VAR> is replaced by <EM>U</EM>. The   
  diagonal elements of the singular value matrix <EM>S</EM> are stored in the   
  vector <VAR>S</VAR>. The singular values are non-negative and form a   
  non-increasing sequence from <EM>S_1</EM> to <EM>S_N</EM>. The matrix   
  <VAR>V</VAR> contains the elements of <EM>V</EM> in untransposed form. To form 
    the product <EM>U S V^T</EM> it is necessary to take the transpose of   
  <VAR>V</VAR>. A workspace of length <VAR>N</VAR> is required in   
  <VAR>work</VAR>. </P>
  <P>This routine uses the Golub-Reinsch SVD algorithm. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fSV_005fdecomp_005fmod"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_SV_decomp_mod</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_matrix * <VAR>X</VAR>, gsl_matrix * <VAR>V</VAR>, gsl_vector 
    * <VAR>S</VAR>, gsl_vector * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function computes the SVD using the modified Golub-Reinsch algorithm,  
   which is faster for <EM>M&gt;&gt;N</EM>. It requires the vector   
  <VAR>work</VAR> of length <VAR>N</VAR> and the <EM>N</EM>-by-<EM>N</EM> matrix 
    <VAR>X</VAR> as additional working space. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fSV_005fdecomp_005fjacobi"></A>Function:  
   <EM>int</EM> <STRONG>gsl_linalg_SV_decomp_jacobi</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_matrix * <VAR>V</VAR>, gsl_vector * <VAR>S</VAR>)</EM></DT>
  <DD><A name="index-Jacobi-orthogonalization"></A>
  <P>This function computes the SVD of the <EM>M</EM>-by-<EM>N</EM> matrix   
  <VAR>A</VAR> using one-sided Jacobi orthogonalization for <EM>M &gt;= N</EM>.  
   The Jacobi method can compute singular values to higher relative accuracy 
  than   Golub-Reinsch algorithms (see references for details). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fSV_005fsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_SV_solve</STRONG> <EM>(const gsl_matrix * 
  <VAR>U</VAR>,   const gsl_matrix * <VAR>V</VAR>, const gsl_vector * 
  <VAR>S</VAR>, const   gsl_vector * <VAR>b</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the system <EM>A x = b</EM> using the singular value   
  decomposition (<VAR>U</VAR>, <VAR>S</VAR>, <VAR>V</VAR>) of <EM>A</EM> which   
  must have been computed previously with <CODE>gsl_linalg_SV_decomp</CODE>. 
</P>
  <P>Only non-zero singular values are used in computing the solution. The parts 
    of the solution corresponding to singular values of zero are ignored. Other  
   singular values can be edited out by setting them to zero before calling this 
    function. </P>
  <P>In the over-determined case where <VAR>A</VAR> has more rows than columns   
  the system is solved in the least squares sense, returning the solution   
  <VAR>x</VAR> which minimizes <EM>||A x - b||_2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fSV_005fleverage"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_SV_leverage</STRONG> <EM>(const gsl_matrix *   
  <VAR>U</VAR>, gsl_vector * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function computes the statistical leverage values <EM>h_i</EM> of a   
  matrix <EM>A</EM> using its singular value decomposition (<VAR>U</VAR>,   
  <VAR>S</VAR>, <VAR>V</VAR>) previously computed with   
  <CODE>gsl_linalg_SV_decomp</CODE>. <EM>h_i</EM> are the diagonal values of the 
    matrix <EM>A (A^T A)^{-1} A^T</EM> and depend only on the matrix 
  <VAR>U</VAR>   which is the input to this function. </P></DD></DL>
<HR>
<A name="Cholesky-Decomposition"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices" 
rel="next">Tridiagonal Decomposition of Real Symmetric Matrices</A>, Previous: 
<A accessKey="p" href="#Singular-Value-Decomposition" 
rel="previous">Singular Value Decomposition</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Cholesky-Decomposition-1"></A>
<H3 class="section">14.5 Cholesky Decomposition</H3><A name="index-Cholesky-decomposition"></A><A 
name="index-square-root-of-a-matrix_002c-Cholesky-decomposition"></A><A name="index-matrix-square-root_002c-Cholesky-decomposition"></A>
<P>A symmetric, positive definite square matrix <EM>A</EM> has a Cholesky 
 decomposition into a product of a lower triangular matrix <EM>L</EM> and its 
 transpose <EM>L^T</EM>, </P>
<DIV class="example"><PRE class="example">A = L L^T
</PRE></DIV>
<P>This is sometimes referred to as taking the square-root of a matrix. The 
 Cholesky decomposition can only be carried out when all the eigenvalues of the 
 matrix are positive. This decomposition can be used to convert the linear 
system <EM>A x = b</EM> into a pair of triangular systems (<EM>L y = b</EM>, 
<EM>L^T x  = y</EM>), which can be solved by forward and back-substitution. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fcholesky_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_cholesky_decomp</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fcholesky_005fdecomp"></A>Function:  
   <EM>int</EM> 
  <STRONG>gsl_linalg_complex_cholesky_decomp</STRONG><EM>(gsl_matrix_complex * 
  <VAR>A</VAR>)</EM></DT>
  <DD>
  <P>These functions factorize the symmetric, positive-definite square matrix   
  <VAR>A</VAR> into the Cholesky decomposition <EM>A = L L^T</EM> (or <EM>A = L  
   L^H</EM> for the complex case). On input, the values from the diagonal and   
  lower-triangular part of the matrix <VAR>A</VAR> are used (the upper   
  triangular part is ignored). On output the diagonal and lower triangular part  
   of the input matrix <VAR>A</VAR> contain the matrix <EM>L</EM>, while the   
  upper triangular part of the input matrix is overwritten with <EM>L^T</EM>   
  (the diagonal terms being identical for both <EM>L</EM> and <EM>L^T</EM>). If  
   the matrix is not positive-definite then the decomposition will fail,   
  returning the error code <CODE>GSL_EDOM</CODE>. </P>
  <P>When testing whether a matrix is positive-definite, disable the error   
  handler first to avoid triggering an error. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fcholesky_005fsolve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_cholesky_solve</STRONG> <EM>(const gsl_matrix  
   * <VAR>cholesky</VAR>, const gsl_vector * <VAR>b</VAR>, gsl_vector *   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fcholesky_005fsolve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_complex_cholesky_solve</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>cholesky</VAR>, const gsl_vector_complex *   
  <VAR>b</VAR>, gsl_vector_complex * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions solve the system <EM>A x = b</EM> using the Cholesky   
  decomposition of <EM>A</EM> held in the matrix <VAR>cholesky</VAR> which must  
   have been previously computed by <CODE>gsl_linalg_cholesky_decomp</CODE> or   
  <CODE>gsl_linalg_complex_cholesky_decomp</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fcholesky_005fsvx"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_cholesky_svx</STRONG> <EM>(const gsl_matrix *  
   <VAR>cholesky</VAR>, gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fcholesky_005fsvx"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_complex_cholesky_svx</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>cholesky</VAR>, gsl_vector_complex *   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions solve the system <EM>A x = b</EM> in-place using the   
  Cholesky decomposition of <EM>A</EM> held in the matrix <VAR>cholesky</VAR>   
  which must have been previously computed by   
  <CODE>gsl_linalg_cholesky_decomp</CODE> or   
  <CODE>gsl_linalg_complex_cholesky_decomp</CODE>. On input <VAR>x</VAR> should  
   contain the right-hand side <EM>b</EM>, which is replaced by the solution on  
   output. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fcholesky_005finvert"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_cholesky_invert</STRONG> <EM>(gsl_matrix *   
  <VAR>cholesky</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fcholesky_005finvert"></A>Function:  
   <EM>int</EM> 
  <STRONG>gsl_linalg_complex_cholesky_invert</STRONG><EM>(gsl_matrix_complex * 
  <VAR>cholesky</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the inverse of a matrix from its Cholesky   
  decomposition <VAR>cholesky</VAR>, which must have been previously computed by 
    <CODE>gsl_linalg_cholesky_decomp</CODE> or   
  <CODE>gsl_linalg_complex_cholesky_decomp</CODE>. On output, the inverse is   
  stored in-place in <VAR>cholesky</VAR>. </P></DD></DL>
<HR>
<A name="Tridiagonal-Decomposition-of-Real-Symmetric-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Tridiagonal-Decomposition-of-Hermitian-Matrices" 
rel="next">Tridiagonal Decomposition of Hermitian Matrices</A>, Previous: <A 
accessKey="p" href="#Cholesky-Decomposition" 
rel="previous">Cholesky Decomposition</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Tridiagonal-Decomposition-of-Real-Symmetric-Matrices-1"></A>
<H3 class="section">14.6 Tridiagonal Decomposition of Real Symmetric 
 Matrices</H3><A name="index-tridiagonal-decomposition"></A>
<P>A symmetric matrix <EM>A</EM> can be factorized by similarity transformations 
 into the form, </P>
<DIV class="example"><PRE class="example">A = Q T Q^T
</PRE></DIV>
<P>where <EM>Q</EM> is an orthogonal matrix and <EM>T</EM> is a symmetric 
 tridiagonal matrix. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fsymmtd_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_symmtd_decomp</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_vector * <VAR>tau</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the symmetric square matrix <VAR>A</VAR> into the  
   symmetric tridiagonal decomposition <EM>Q T Q^T</EM>. On output the diagonal  
   and subdiagonal part of the input matrix <VAR>A</VAR> contain the tridiagonal 
    matrix <EM>T</EM>. The remaining lower triangular part of the input matrix   
  contains the Householder vectors which, together with the Householder   
  coefficients <VAR>tau</VAR>, encode the orthogonal matrix <EM>Q</EM>. This   
  storage scheme is the same as used by <SMALL>LAPACK</SMALL>. The upper   
  triangular part of <VAR>A</VAR> is not referenced. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fsymmtd_005funpack"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_symmtd_unpack</STRONG> <EM>(const gsl_matrix * 
    <VAR>A</VAR>, const gsl_vector * <VAR>tau</VAR>, gsl_matrix * <VAR>Q</VAR>,  
   gsl_vector * <VAR>diag</VAR>, gsl_vector * <VAR>subdiag</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the encoded symmetric tridiagonal decomposition   
  (<VAR>A</VAR>, <VAR>tau</VAR>) obtained from   
  <CODE>gsl_linalg_symmtd_decomp</CODE> into the orthogonal matrix <VAR>Q</VAR>, 
    the vector of diagonal elements <VAR>diag</VAR> and the vector of 
  subdiagonal   elements <VAR>subdiag</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fsymmtd_005funpack_005fT"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_symmtd_unpack_T</STRONG> <EM>(const gsl_matrix 
    * <VAR>A</VAR>, gsl_vector * <VAR>diag</VAR>, gsl_vector *   
  <VAR>subdiag</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the diagonal and subdiagonal of the encoded symmetric 
    tridiagonal decomposition (<VAR>A</VAR>, <VAR>tau</VAR>) obtained from   
  <CODE>gsl_linalg_symmtd_decomp</CODE> into the vectors <VAR>diag</VAR> and   
  <VAR>subdiag</VAR>. </P></DD></DL>
<HR>
<A name="Tridiagonal-Decomposition-of-Hermitian-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Hessenberg-Decomposition-of-Real-Matrices" 
rel="next">Hessenberg Decomposition of Real Matrices</A>, Previous: <A 
accessKey="p" href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices" 
rel="previous">Tridiagonal Decomposition of Real Symmetric Matrices</A>, Up: <A 
accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Tridiagonal-Decomposition-of-Hermitian-Matrices-1"></A>
<H3 class="section">14.7 Tridiagonal Decomposition of Hermitian Matrices</H3><A 
name="index-tridiagonal-decomposition-1"></A>
<P>A hermitian matrix <EM>A</EM> can be factorized by similarity transformations 
 into the form, </P>
<DIV class="example"><PRE class="example">A = U T U^T
</PRE></DIV>
<P>where <EM>U</EM> is a unitary matrix and <EM>T</EM> is a real symmetric 
 tridiagonal matrix. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhermtd_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hermtd_decomp</STRONG> <EM>(gsl_matrix_complex 
    * <VAR>A</VAR>, gsl_vector_complex * <VAR>tau</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the hermitian matrix <VAR>A</VAR> into the   
  symmetric tridiagonal decomposition <EM>U T U^T</EM>. On output the real parts 
    of the diagonal and subdiagonal part of the input matrix <VAR>A</VAR> 
  contain   the tridiagonal matrix <EM>T</EM>. The remaining lower triangular 
  part of the   input matrix contains the Householder vectors which, together 
  with the   Householder coefficients <VAR>tau</VAR>, encode the unitary matrix 
  <EM>U</EM>.   This storage scheme is the same as used by 
  <SMALL>LAPACK</SMALL>. The upper   triangular part of <VAR>A</VAR> and 
  imaginary parts of the diagonal are not   referenced. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhermtd_005funpack"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hermtd_unpack</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>A</VAR>, const gsl_vector_complex * <VAR>tau</VAR>,  
   gsl_matrix_complex * <VAR>U</VAR>, gsl_vector * <VAR>diag</VAR>, gsl_vector * 
    <VAR>subdiag</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the encoded tridiagonal decomposition (<VAR>A</VAR>,  
   <VAR>tau</VAR>) obtained from <CODE>gsl_linalg_hermtd_decomp</CODE> into the  
   unitary matrix <VAR>U</VAR>, the real vector of diagonal elements   
  <VAR>diag</VAR> and the real vector of subdiagonal elements   
  <VAR>subdiag</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhermtd_005funpack_005fT"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hermtd_unpack_T</STRONG> <EM>(const   
  gsl_matrix_complex * <VAR>A</VAR>, gsl_vector * <VAR>diag</VAR>, gsl_vector *  
   <VAR>subdiag</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the diagonal and subdiagonal of the encoded   
  tridiagonal decomposition (<VAR>A</VAR>, <VAR>tau</VAR>) obtained from the   
  <CODE>gsl_linalg_hermtd_decomp</CODE> into the real vectors <VAR>diag</VAR>   
  and <VAR>subdiag</VAR>. </P></DD></DL>
<HR>
<A name="Hessenberg-Decomposition-of-Real-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Hessenberg_002dTriangular-Decomposition-of-Real-Matrices" 
rel="next">Hessenberg-Triangular Decomposition of Real Matrices</A>, Previous: 
<A accessKey="p" href="#Tridiagonal-Decomposition-of-Hermitian-Matrices" 
rel="previous">Tridiagonal Decomposition of Hermitian Matrices</A>, Up: <A 
accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Hessenberg-Decomposition-of-Real-Matrices-1"></A>
<H3 class="section">14.8 Hessenberg Decomposition of Real Matrices</H3><A name="index-Hessenberg-decomposition"></A>
<P>A general real matrix <EM>A</EM> can be decomposed by orthogonal similarity 
 transformations into the form </P>
<DIV class="example"><PRE class="example">A = U H U^T
</PRE></DIV>
<P>where <EM>U</EM> is orthogonal and <EM>H</EM> is an upper Hessenberg matrix, 
 meaning that it has zeros below the first subdiagonal. The Hessenberg reduction 
 is the first step in the Schur decomposition for the nonsymmetric eigenvalue 
 problem, but has applications in other areas as well. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhessenberg_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hessenberg_decomp</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_vector * <VAR>tau</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Hessenberg decomposition of the matrix   
  <VAR>A</VAR> by applying the similarity transformation <EM>H = U^T A U</EM>.   
  On output, <EM>H</EM> is stored in the upper portion of <VAR>A</VAR>. The   
  information required to construct the matrix <EM>U</EM> is stored in the lower 
    triangular portion of <VAR>A</VAR>. <EM>U</EM> is a product of <EM>N - 
  2</EM>   Householder matrices. The Householder vectors are stored in the lower 
  portion   of <VAR>A</VAR> (below the subdiagonal) and the Householder 
  coefficients are   stored in the vector <VAR>tau</VAR>. <VAR>tau</VAR> must be 
  of length   <VAR>N</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhessenberg_005funpack"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hessenberg_unpack</STRONG> <EM>(gsl_matrix *   
  <VAR>H</VAR>, gsl_vector * <VAR>tau</VAR>, gsl_matrix * 
<VAR>U</VAR>)</EM></DT>
  <DD>
  <P>This function constructs the orthogonal matrix <EM>U</EM> from the   
  information stored in the Hessenberg matrix <VAR>H</VAR> along with the vector 
    <VAR>tau</VAR>. <VAR>H</VAR> and <VAR>tau</VAR> are outputs from   
  <CODE>gsl_linalg_hessenberg_decomp</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005flinalg_005fhessenberg_005funpack_005faccum"></A>Function:  
   <EM>int</EM> 
  <STRONG>gsl_linalg_hessenberg_unpack_accum</STRONG><EM>(gsl_matrix * 
  <VAR>H</VAR>, gsl_vector * <VAR>tau</VAR>, gsl_matrix *   
  <VAR>V</VAR>)</EM></DT>
  <DD>
  <P>This function is similar to <CODE>gsl_linalg_hessenberg_unpack</CODE>,   
  except it accumulates the matrix <VAR>U</VAR> into <VAR>V</VAR>, so that   
  <EM>V' = VU</EM>. The matrix <VAR>V</VAR> must be initialized prior to calling 
    this function. Setting <VAR>V</VAR> to the identity matrix provides the same 
    result as <CODE>gsl_linalg_hessenberg_unpack</CODE>. If <VAR>H</VAR> is 
  order   <VAR>N</VAR>, then <VAR>V</VAR> must have <VAR>N</VAR> columns but may 
  have   any number of rows. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005flinalg_005fhessenberg_005fset_005fzero"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hessenberg_set_zero</STRONG> <EM>(gsl_matrix * 
    <VAR>H</VAR>)</EM></DT>
  <DD>
  <P>This function sets the lower triangular portion of <VAR>H</VAR>, below the  
   subdiagonal, to zero. It is useful for clearing out the Householder vectors   
  after calling <CODE>gsl_linalg_hessenberg_decomp</CODE>. </P></DD></DL>
<HR>
<A name="Hessenberg_002dTriangular-Decomposition-of-Real-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Bidiagonalization" 
rel="next">Bidiagonalization</A>, Previous: <A accessKey="p" href="#Hessenberg-Decomposition-of-Real-Matrices" 
rel="previous">Hessenberg Decomposition of Real Matrices</A>, Up: <A accessKey="u" 
href="#Linear-Algebra" rel="up">Linear 
Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Hessenberg_002dTriangular-Decomposition-of-Real-Matrices-1"></A>
<H3 class="section">14.9 Hessenberg-Triangular Decomposition of Real 
 Matrices</H3><A name="index-Hessenberg-triangular-decomposition"></A>
<P>A general real matrix pair (<EM>A</EM>, <EM>B</EM>) can be decomposed by 
 orthogonal similarity transformations into the form </P>
<DIV class="example"><PRE class="example">A = U H V^T
B = U R V^T
</PRE></DIV>
<P>where <EM>U</EM> and <EM>V</EM> are orthogonal, <EM>H</EM> is an upper 
 Hessenberg matrix, and <EM>R</EM> is upper triangular. The 
Hessenberg-Triangular  reduction is the first step in the generalized Schur 
decomposition for the  generalized eigenvalue problem. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhesstri_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_hesstri_decomp</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_matrix * <VAR>B</VAR>, gsl_matrix * <VAR>U</VAR>, gsl_matrix 
    * <VAR>V</VAR>, gsl_vector * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Hessenberg-Triangular decomposition of the   
  matrix pair (<VAR>A</VAR>, <VAR>B</VAR>). On output, <EM>H</EM> is stored in   
  <VAR>A</VAR>, and <EM>R</EM> is stored in <VAR>B</VAR>. If <VAR>U</VAR> and   
  <VAR>V</VAR> are provided (they may be null), the similarity transformations   
  are stored in them. Additional workspace of length <EM>N</EM> is needed in   
  <VAR>work</VAR>. </P></DD></DL>
<HR>
<A name="Bidiagonalization"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Givens-Rotations" 
rel="next">Givens Rotations</A>, Previous: <A accessKey="p" href="#Hessenberg_002dTriangular-Decomposition-of-Real-Matrices" 
rel="previous">Hessenberg-Triangular Decomposition of Real Matrices</A>, Up: <A 
accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Bidiagonalization-1"></A>
<H3 class="section">14.10 Bidiagonalization</H3><A name="index-bidiagonalization-of-real-matrices"></A>
<P>A general matrix <EM>A</EM> can be factorized by similarity transformations 
 into the form, </P>
<DIV class="example"><PRE class="example">A = U B V^T
</PRE></DIV>
<P>where <EM>U</EM> and <EM>V</EM> are orthogonal matrices and <EM>B</EM> is a 
<EM>N</EM>-by-<EM>N</EM> bidiagonal matrix with non-zero entries only on the 
 diagonal and superdiagonal. The size of <VAR>U</VAR> is 
<EM>M</EM>-by-<EM>N</EM>  and the size of <VAR>V</VAR> is 
<EM>N</EM>-by-<EM>N</EM>. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fbidiag_005fdecomp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_bidiag_decomp</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_vector * <VAR>tau_U</VAR>, gsl_vector *   
  <VAR>tau_V</VAR>)</EM></DT>
  <DD>
  <P>This function factorizes the <EM>M</EM>-by-<EM>N</EM> matrix <VAR>A</VAR>   
  into bidiagonal form <EM>U B V^T</EM>. The diagonal and superdiagonal of the   
  matrix <EM>B</EM> are stored in the diagonal and superdiagonal of   
  <VAR>A</VAR>. The orthogonal matrices <EM>U</EM> and <VAR>V</VAR> are stored   
  as compressed Householder vectors in the remaining elements of <VAR>A</VAR>.   
  The Householder coefficients are stored in the vectors <VAR>tau_U</VAR> and   
  <VAR>tau_V</VAR>. The length of <VAR>tau_U</VAR> must equal the number of   
  elements in the diagonal of <VAR>A</VAR> and the length of <VAR>tau_V</VAR>   
  should be one element shorter. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fbidiag_005funpack"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_bidiag_unpack</STRONG> <EM>(const gsl_matrix * 
    <VAR>A</VAR>, const gsl_vector * <VAR>tau_U</VAR>, gsl_matrix * 
  <VAR>U</VAR>,   const gsl_vector * <VAR>tau_V</VAR>, gsl_matrix * 
  <VAR>V</VAR>, gsl_vector *   <VAR>diag</VAR>, gsl_vector * 
  <VAR>superdiag</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the bidiagonal decomposition of <VAR>A</VAR> produced 
    by <CODE>gsl_linalg_bidiag_decomp</CODE>, (<VAR>A</VAR>, <VAR>tau_U</VAR>,   
  <VAR>tau_V</VAR>) into the separate orthogonal matrices <VAR>U</VAR>,   
  <VAR>V</VAR> and the diagonal vector <VAR>diag</VAR> and superdiagonal   
  <VAR>superdiag</VAR>. Note that <VAR>U</VAR> is stored as a compact   
  <EM>M</EM>-by-<EM>N</EM> orthogonal matrix satisfying <EM>U^T U = I</EM> for   
  efficiency. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fbidiag_005funpack2"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_bidiag_unpack2</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_vector * <VAR>tau_U</VAR>, gsl_vector * <VAR>tau_V</VAR>,   
  gsl_matrix * <VAR>V</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the bidiagonal decomposition of <VAR>A</VAR> produced 
    by <CODE>gsl_linalg_bidiag_decomp</CODE>, (<VAR>A</VAR>, <VAR>tau_U</VAR>,   
  <VAR>tau_V</VAR>) into the separate orthogonal matrices <VAR>U</VAR>,   
  <VAR>V</VAR> and the diagonal vector <VAR>diag</VAR> and superdiagonal   
  <VAR>superdiag</VAR>. The matrix <VAR>U</VAR> is stored in-place in   
  <VAR>A</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fbidiag_005funpack_005fB"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_bidiag_unpack_B</STRONG> <EM>(const gsl_matrix 
    * <VAR>A</VAR>, gsl_vector * <VAR>diag</VAR>, gsl_vector *   
  <VAR>superdiag</VAR>)</EM></DT>
  <DD>
  <P>This function unpacks the diagonal and superdiagonal of the bidiagonal   
  decomposition of <VAR>A</VAR> from <CODE>gsl_linalg_bidiag_decomp</CODE>, into 
    the diagonal vector <VAR>diag</VAR> and superdiagonal vector   
  <VAR>superdiag</VAR>. </P></DD></DL>
<HR>
<A name="Givens-Rotations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Householder-Transformations" 
rel="next">Householder Transformations</A>, Previous: <A accessKey="p" href="#Bidiagonalization" 
rel="previous">Bidiagonalization</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Givens-Rotations-1"></A>
<H3 class="section">14.11 Givens Rotations</H3><A 
name="index-Givens-rotation"></A>
<P>A Givens rotation is a rotation in the plane acting on two elements of a 
 given vector. It can be represented in matrix form as </P>
<P>where the <EM>\cos{\theta}</EM> and <EM>\sin{\theta}</EM> appear at the 
 intersection of the <EM>i</EM>th and <EM>j</EM>th rows and columns. When acting 
 on a vector <EM>x</EM>, <EM>G(i,j,\theta) x</EM> performs a rotation of the 
<EM>(i,j)</EM> elements of <EM>x</EM>. Givens rotations are typically used to 
 introduce zeros in vectors, such as during the QR decomposition of a matrix. In 
 this case, it is typically desired to find <EM>c</EM> and <EM>s</EM> such that 
</P>
<P>with <EM>r = \sqrt{a^2 + b^2}</EM>. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fgivens"></A>Function: 
  <EM>void</EM><STRONG>gsl_linalg_givens</STRONG> <EM>(const double 
  <VAR>a</VAR>, const   double <VAR>b</VAR>, double * <VAR>c</VAR>, double * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function computes <EM>c = \cos{\theta}</EM> and <EM>s =   
  \sin{\theta}</EM> so that the Givens matrix <EM>G(\theta)</EM> acting on the   
  vector <EM>(a,b)</EM> produces <EM>(r, 0)</EM>, with <EM>r = \sqrt{a^2 +   
  b^2}</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fgivens_005fgv"></A>Function: 
  <EM>void</EM><STRONG>gsl_linalg_givens_gv</STRONG> <EM>(gsl_vector * 
  <VAR>v</VAR>, const   size_t <VAR>i</VAR>, const size_t <VAR>j</VAR>, const 
  double <VAR>c</VAR>,   const double <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Givens rotation defined by <EM>c =   
  \cos{\theta}</EM> and <EM>s = \sin{\theta}</EM> to the <VAR>i</VAR> and   
  <VAR>j</VAR> elements of <VAR>v</VAR>. On output, <EM>(v(i),v(j)) \leftarrow   
  G(\theta) (v(i),v(j))</EM>. </P></DD></DL>
<HR>
<A name="Householder-Transformations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Householder-solver-for-linear-systems" 
rel="next">Householder solver for linear systems</A>, Previous: <A accessKey="p" 
href="#Givens-Rotations" rel="previous">Givens 
Rotations</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Householder-Transformations-1"></A>
<H3 class="section">14.12 Householder Transformations</H3><A name="index-Householder-matrix"></A><A 
name="index-Householder-transformation"></A><A name="index-transformation_002c-Householder"></A>
<P>A Householder transformation is a rank-1 modification of the identity matrix 
 which can be used to zero out selected elements of a vector. A Householder 
 matrix <EM>P</EM> takes the form, </P>
<DIV class="example"><PRE class="example">P = I - \tau v v^T
</PRE></DIV>
<P>where <EM>v</EM> is a vector (called the <EM>Householder vector</EM>) and 
<EM>\tau = 2/(v^T v)</EM>. The functions described in this section use the 
 rank-1 structure of the Householder matrix to create and apply Householder 
 transformations efficiently. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhouseholder_005ftransform"></A>Function: 
    <EM>double</EM> 
  <STRONG>gsl_linalg_householder_transform</STRONG><EM>(gsl_vector * 
  <VAR>w</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fhouseholder_005ftransform"></A>Function: 
    <EM>gsl_complex</EM> 
  <STRONG>gsl_linalg_complex_householder_transform</STRONG><EM>(gsl_vector_complex 
  * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function prepares a Householder transformation <EM>P = I - \tau v   
  v^T</EM> which can be used to zero all the elements of the input vector   
  <VAR>w</VAR> except the first. On output the Householder vector <VAR>v</VAR>   
  is stored in <VAR>w</VAR> and the scalar <EM>\tau</EM> is returned. The   
  householder vector <VAR>v</VAR> is normalized so that <VAR>v</VAR>[0] = 1,   
  however this 1 is not stored in the output vector. Instead, <VAR>w</VAR>[0] is 
    set to the first element of the transformed vector, so that if <EM>u = P   
  w</EM>, <VAR>w</VAR>[0] = <EM>u</EM>[0] on output and the remainder of   
  <EM>u</EM> is zero. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhouseholder_005fhm"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_householder_hm</STRONG> <EM>(double   
  <VAR>tau</VAR>, const gsl_vector * <VAR>v</VAR>, gsl_matrix *   
  <VAR>A</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fhouseholder_005fhm"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_linalg_complex_householder_hm</STRONG><EM>(gsl_complex 
  <VAR>tau</VAR>, const gsl_vector_complex * <VAR>v</VAR>,   gsl_matrix_complex 
  * <VAR>A</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Householder matrix <EM>P</EM> defined by the   
  scalar <VAR>tau</VAR> and the vector <VAR>v</VAR> to the left-hand side of the 
    matrix <VAR>A</VAR>. On output the result <EM>P A</EM> is stored in   
  <VAR>A</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhouseholder_005fmh"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_householder_mh</STRONG> <EM>(double   
  <VAR>tau</VAR>, const gsl_vector * <VAR>v</VAR>, gsl_matrix *   
  <VAR>A</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fhouseholder_005fmh"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_linalg_complex_householder_mh</STRONG><EM>(gsl_complex 
  <VAR>tau</VAR>, const gsl_vector_complex * <VAR>v</VAR>,   gsl_matrix_complex 
  * <VAR>A</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Householder matrix <EM>P</EM> defined by the   
  scalar <VAR>tau</VAR> and the vector <VAR>v</VAR> to the right-hand side of   
  the matrix <VAR>A</VAR>. On output the result <EM>A P</EM> is stored in   
  <VAR>A</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fhouseholder_005fhv"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_householder_hv</STRONG> <EM>(double   
  <VAR>tau</VAR>, const gsl_vector * <VAR>v</VAR>, gsl_vector *   
  <VAR>w</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005flinalg_005fcomplex_005fhouseholder_005fhv"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_linalg_complex_householder_hv</STRONG><EM>(gsl_complex 
  <VAR>tau</VAR>, const gsl_vector_complex * <VAR>v</VAR>,   gsl_vector_complex 
  * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Householder transformation <EM>P</EM> defined by  
   the scalar <VAR>tau</VAR> and the vector <VAR>v</VAR> to the vector   
  <VAR>w</VAR>. On output the result <EM>P w</EM> is stored in <VAR>w</VAR>.   
  </P></DD></DL>
<HR>
<A name="Householder-solver-for-linear-systems"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Tridiagonal-Systems" 
rel="next">Tridiagonal Systems</A>, Previous: <A accessKey="p" href="#Householder-Transformations" 
rel="previous">Householder Transformations</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Householder-solver-for-linear-systems-1"></A>
<H3 class="section">14.13 Householder solver for linear systems</H3><A name="index-solution-of-linear-system-by-Householder-transformations"></A><A 
name="index-Householder-linear-solver"></A>
<DL>
  <DT><A name="index-gsl_005flinalg_005fHH_005fsolve"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_HH_solve</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>, const   gsl_vector * <VAR>b</VAR>, gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the system <EM>A x = b</EM> directly using Householder 
    transformations. On output the solution is stored in <VAR>x</VAR> and   
  <VAR>b</VAR> is not modified. The matrix <VAR>A</VAR> is destroyed by the   
  Householder transformations. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fHH_005fsvx"></A>Function: 
  <EM>int</EM><STRONG>gsl_linalg_HH_svx</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_vector   * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the system <EM>A x = b</EM> in-place using Householder 
    transformations. On input <VAR>x</VAR> should contain the right-hand side   
  <EM>b</EM>, which is replaced by the solution on output. The matrix   
  <VAR>A</VAR> is destroyed by the Householder transformations. </P></DD></DL>
<HR>
<A name="Tridiagonal-Systems"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Balancing" 
rel="next">Balancing</A>, Previous: <A accessKey="p" href="#Householder-solver-for-linear-systems" 
rel="previous">Householder solver for linear systems</A>, Up: <A accessKey="u" 
href="#Linear-Algebra" rel="up">Linear 
Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Tridiagonal-Systems-1"></A>
<H3 class="section">14.14 Tridiagonal Systems</H3><A name="index-tridiagonal-systems"></A>
<P>The functions described in this section efficiently solve symmetric, 
 non-symmetric and cyclic tridiagonal systems with minimal storage. Note that 
the  current implementations of these functions use a variant of Cholesky 
 decomposition, so the tridiagonal matrix must be positive definite. For 
 non-positive definite matrices, the functions return the error code 
<CODE>GSL_ESING</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fsolve_005ftridiag"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_solve_tridiag</STRONG> <EM>(const gsl_vector * 
    <VAR>diag</VAR>, const gsl_vector * <VAR>e</VAR>, const gsl_vector *   
  <VAR>f</VAR>, const gsl_vector * <VAR>b</VAR>, gsl_vector *   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the general <EM>N</EM>-by-<EM>N</EM> system <EM>A x =  
   b</EM> where <VAR>A</VAR> is tridiagonal (<EM>N &gt;= 2</EM>). The   
  super-diagonal and sub-diagonal vectors <VAR>e</VAR> and <VAR>f</VAR> must be  
   one element shorter than the diagonal vector <VAR>diag</VAR>. The form of   
  <VAR>A</VAR> for the 4-by-4 case is shown below, </P>
  <DIV class="example"><PRE class="example">A = ( d_0 e_0  0   0  )
    ( f_0 d_1 e_1  0  )
    (  0  f_1 d_2 e_2 )
    (  0   0  f_2 d_3 )
</PRE></DIV></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005flinalg_005fsolve_005fsymm_005ftridiag"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_solve_symm_tridiag</STRONG> <EM>(const   
  gsl_vector * <VAR>diag</VAR>, const gsl_vector * <VAR>e</VAR>, const   
  gsl_vector * <VAR>b</VAR>, gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the general <EM>N</EM>-by-<EM>N</EM> system <EM>A x =  
   b</EM> where <VAR>A</VAR> is symmetric tridiagonal (<EM>N &gt;= 2</EM>). The  
   off-diagonal vector <VAR>e</VAR> must be one element shorter than the 
  diagonal   vector <VAR>diag</VAR>. The form of <VAR>A</VAR> for the 4-by-4 
  case is shown   below, </P>
  <DIV class="example"><PRE class="example">A = ( d_0 e_0  0   0  )
    ( e_0 d_1 e_1  0  )
    (  0  e_1 d_2 e_2 )
    (  0   0  e_2 d_3 )
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005flinalg_005fsolve_005fcyc_005ftridiag"></A>Function: 
    <EM>int</EM> <STRONG>gsl_linalg_solve_cyc_tridiag</STRONG> <EM>(const   
  gsl_vector * <VAR>diag</VAR>, const gsl_vector * <VAR>e</VAR>, const   
  gsl_vector * <VAR>f</VAR>, const gsl_vector * <VAR>b</VAR>, gsl_vector *   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the general <EM>N</EM>-by-<EM>N</EM> system <EM>A x =  
   b</EM> where <VAR>A</VAR> is cyclic tridiagonal (<EM>N &gt;= 3</EM>). The   
  cyclic super-diagonal and sub-diagonal vectors <VAR>e</VAR> and <VAR>f</VAR>   
  must have the same number of elements as the diagonal vector <VAR>diag</VAR>.  
   The form of <VAR>A</VAR> for the 4-by-4 case is shown below, </P>
  <DIV class="example"><PRE class="example">A = ( d_0 e_0  0  f_3 )
    ( f_0 d_1 e_1  0  )
    (  0  f_1 d_2 e_2 )
    ( e_3  0  f_2 d_3 )
</PRE></DIV></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005flinalg_005fsolve_005fsymm_005fcyc_005ftridiag"></A>Function: 
    <EM>int</EM> <STRONG>gsl_linalg_solve_symm_cyc_tridiag</STRONG> <EM>(const   
  gsl_vector * <VAR>diag</VAR>, const gsl_vector * <VAR>e</VAR>, const   
  gsl_vector * <VAR>b</VAR>, gsl_vector * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function solves the general <EM>N</EM>-by-<EM>N</EM> system <EM>A x =  
   b</EM> where <VAR>A</VAR> is symmetric cyclic tridiagonal (<EM>N &gt;=   
  3</EM>). The cyclic off-diagonal vector <VAR>e</VAR> must have the same number 
    of elements as the diagonal vector <VAR>diag</VAR>. The form of <VAR>A</VAR> 
    for the 4-by-4 case is shown below, </P>
  <DIV class="example"><PRE class="example">A = ( d_0 e_0  0  e_3 )
    ( e_0 d_1 e_1  0  )
    (  0  e_1 d_2 e_2 )
    ( e_3  0  e_2 d_3 )
</PRE></DIV></DD></DL>
<HR>
<A name="Balancing"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Linear-Algebra-Examples" 
rel="next">Linear Algebra Examples</A>, Previous: <A accessKey="p" href="#Tridiagonal-Systems" 
rel="previous">Tridiagonal Systems</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Balancing-1"></A>
<H3 class="section">14.15 Balancing</H3><A name="index-balancing-matrices"></A>
<P>The process of balancing a matrix applies similarity transformations to make 
 the rows and columns have comparable norms. This is useful, for example, to 
 reduce roundoff errors in the solution of eigenvalue problems. Balancing a 
 matrix <EM>A</EM> consists of replacing <EM>A</EM> with a similar matrix </P>
<DIV class="example"><PRE class="example">A' = D^(-1) A D
</PRE></DIV>
<P>where <EM>D</EM> is a diagonal matrix whose entries are powers of the 
 floating point radix. </P>
<DL>
  <DT><A name="index-gsl_005flinalg_005fbalance_005fmatrix"></A>Function:   
  <EM>int</EM> <STRONG>gsl_linalg_balance_matrix</STRONG> <EM>(gsl_matrix *   
  <VAR>A</VAR>, gsl_vector * <VAR>D</VAR>)</EM></DT>
  <DD>
  <P>This function replaces the matrix <VAR>A</VAR> with its balanced   
  counterpart and stores the diagonal elements of the similarity transformation  
   into the vector <VAR>D</VAR>. </P></DD></DL>
<HR>
<A name="Linear-Algebra-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Linear-Algebra-References-and-Further-Reading" 
rel="next">Linear Algebra References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Balancing" 
rel="previous">Balancing</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-8"></A>
<H3 class="section">14.16 Examples</H3>
<P>The following program solves the linear system <EM>A x = b</EM>. The system 
 to be solved is, </P>
<DIV class="example"><PRE class="example">[ 0.18 0.60 0.57 0.96 ] [x0]   [1.0]
[ 0.41 0.24 0.99 0.58 ] [x1] = [2.0]
[ 0.14 0.30 0.97 0.66 ] [x2]   [3.0]
[ 0.51 0.13 0.19 0.85 ] [x3]   [4.0]
</PRE></DIV>
<P>and the solution is found using LU decomposition of the matrix <EM>A</EM>. 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_linalg.h&gt;

int
main (void)
{
  double a_data[] = { 0.18, 0.60, 0.57, 0.96,
                      0.41, 0.24, 0.99, 0.58,
                      0.14, 0.30, 0.97, 0.66,
                      0.51, 0.13, 0.19, 0.85 };

  double b_data[] = { 1.0, 2.0, 3.0, 4.0 };

  gsl_matrix_view m 
    = gsl_matrix_view_array (a_data, 4, 4);

  gsl_vector_view b
    = gsl_vector_view_array (b_data, 4);

  gsl_vector *x = gsl_vector_alloc (4);
  
  int s;

  gsl_permutation * p = gsl_permutation_alloc (4);

  gsl_linalg_LU_decomp (&amp;m.matrix, p, &amp;s);

  gsl_linalg_LU_solve (&amp;m.matrix, p, &amp;b.vector, x);

  printf ("x = \n");
  gsl_vector_fprintf (stdout, x, "%g");

  gsl_permutation_free (p);
  gsl_vector_free (x);
  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="verbatim">x = -4.05205
-12.6056
1.66091
8.69377
</PRE></DIV>
<P>This can be verified by multiplying the solution <EM>x</EM> by the original 
 matrix <EM>A</EM> using <SMALL>GNU OCTAVE</SMALL>, </P>
<DIV class="example"><PRE class="example">octave&gt; A = [ 0.18, 0.60, 0.57, 0.96;
              0.41, 0.24, 0.99, 0.58; 
              0.14, 0.30, 0.97, 0.66; 
              0.51, 0.13, 0.19, 0.85 ];

octave&gt; x = [ -4.05205; -12.6056; 1.66091; 8.69377];

octave&gt; A * x
ans =
  1.0000
  2.0000
  3.0000
  4.0000
</PRE></DIV>
<P>This reproduces the original right-hand side vector, <EM>b</EM>, in 
 accordance with the equation <EM>A x = b</EM>. </P>
<HR>
<A name="Linear-Algebra-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Linear-Algebra-Examples" 
rel="previous">Linear Algebra Examples</A>, Up: <A accessKey="u" href="#Linear-Algebra" 
rel="up">Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-8"></A>
<H3 class="section">14.17 References and Further Reading</H3>
<P>Further information on the algorithms described in this section can be found 
 in the following book, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->G. H. Golub, C. F. Van Loan, <CITE>Matrix Computations</CITE>  
   (3rd Ed, 1996), Johns Hopkins University Press, ISBN 0-8018-5414-8. </LI></UL>
<P>The <SMALL>LAPACK</SMALL> library is described in the following manual, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>LAPACK Users’ Guide</CITE> (Third Edition, 1999),   
  Published by SIAM, ISBN 0-89871-447-8.   
  <P><A 
  href="http://www.netlib.org/lapack">http://www.netlib.org/lapack</A></P></LI></UL>
<P>The <SMALL>LAPACK</SMALL> source code can be found at the website above, 
 along with an online copy of the users guide. </P>
<P>The Modified Golub-Reinsch algorithm is described in the following paper, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->T.F. Chan, “An Improved Algorithm for Computing the Singular   
  Value Decomposition”, <CITE>ACM Transactions on Mathematical Software</CITE>,  
   8 (1982), pp 72–83. </LI></UL>
<P>The Jacobi algorithm for singular value decomposition is described in the 
 following papers, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->J.C. Nash, “A one-sided transformation method for the singular 
    value decomposition and algebraic eigenproblem”, <CITE>Computer   
  Journal</CITE>, Volume 18, Number 1 (1975), p 74–76 </LI>
  <LI><!-- /@w -->J.C. Nash and S. Shlien “Simple algorithms for the partial   
  singular value decomposition”, <CITE>Computer Journal</CITE>, Volume 30   
  (1987), p 268–275. </LI>
  <LI><!-- /@w -->James Demmel, Krešimir Veselić, “Jacobi’s Method is more   
  accurate than QR”, <CITE>Lapack Working Note 15</CITE> (LAWN-15), October   
  1989. Available from netlib, <A 
  href="http://www.netlib.org/lapack/">http://www.netlib.org/lapack/</A> in the  
   <CODE>lawns</CODE> or <CODE>lawnspdf</CODE> directories. </LI></UL>
<HR>
<A name="Eigensystems"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fast-Fourier-Transforms" 
rel="next">Fast Fourier Transforms</A>, Previous: <A accessKey="p" href="#Linear-Algebra" 
rel="previous">Linear Algebra</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Eigensystems-1"></A>
<H2 class="chapter">15 Eigensystems</H2><A name="index-eigenvalues-and-eigenvectors"></A>
<P>This chapter describes functions for computing eigenvalues and eigenvectors 
 of matrices. There are routines for real symmetric, real nonsymmetric, complex 
 hermitian, real generalized symmetric-definite, complex generalized 
 hermitian-definite, and real generalized nonsymmetric eigensystems. Eigenvalues 
 can be computed with or without eigenvectors. The hermitian and real symmetric 
 matrix algorithms are symmetric bidiagonalization followed by QR reduction. The 
 nonsymmetric algorithm is the Francis QR double-shift. The generalized 
 nonsymmetric algorithm is the QZ method due to Moler and Stewart. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_eigen.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Eigenvalue-and-Eigenvector-Examples">Eigenvalue 
            and Eigenvector Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Eigenvalue-and-Eigenvector-References">Eigenvalue 
            and Eigenvector References</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Real-Symmetric-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Hermitian-Matrices" 
rel="next">Complex Hermitian Matrices</A>, Up: <A accessKey="u" href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Real-Symmetric-Matrices-1"></A>
<H3 class="section">15.1 Real Symmetric Matrices</H3><A name="index-symmetric-matrix_002c-real_002c-eigensystem"></A><A 
name="index-real-symmetric-matrix_002c-eigensystem"></A>
<P>For real symmetric matrices, the library uses the symmetric bidiagonalization 
 and QR reduction method. This is described in Golub &amp; van Loan, section 
8.3.  The computed eigenvalues are accurate to an absolute accuracy of 
<EM>\epsilon  ||A||_2</EM>, where <EM>\epsilon</EM> is the machine precision. 
</P>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymm_005falloc"></A>Function:   
  <EM>gsl_eigen_symm_workspace *</EM> 
  <STRONG>gsl_eigen_symm_alloc</STRONG><EM>(const size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fsymm_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues of   
  <VAR>n</VAR>-by-<VAR>n</VAR> real symmetric matrices. The size of the   
  workspace is <EM>O(2n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymm_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_symm_free</STRONG> 
  <EM>(gsl_eigen_symm_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_symm</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_vector *   <VAR>eval</VAR>, gsl_eigen_symm_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues of the real symmetric matrix   
  <VAR>A</VAR>. Additional workspace of the appropriate size must be provided in 
    <VAR>w</VAR>. The diagonal and lower triangular part of <VAR>A</VAR> are   
  destroyed during the computation, but the strict upper triangular part is not  
   referenced. The eigenvalues are stored in the vector <VAR>eval</VAR> and are  
   unordered. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymmv_005falloc"></A>Function:   
  <EM>gsl_eigen_symmv_workspace *</EM> 
  <STRONG>gsl_eigen_symmv_alloc</STRONG><EM>(const size_t 
<VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fsymmv_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues and   
  eigenvectors of <VAR>n</VAR>-by-<VAR>n</VAR> real symmetric matrices. The size 
    of the workspace is <EM>O(4n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymmv_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_symmv_free</STRONG> 
  <EM>(gsl_eigen_symmv_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_symmv</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_vector *   <VAR>eval</VAR>, gsl_matrix * <VAR>evec</VAR>, 
  gsl_eigen_symmv_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues and eigenvectors of the real   
  symmetric matrix <VAR>A</VAR>. Additional workspace of the appropriate size   
  must be provided in <VAR>w</VAR>. The diagonal and lower triangular part of   
  <VAR>A</VAR> are destroyed during the computation, but the strict upper   
  triangular part is not referenced. The eigenvalues are stored in the vector   
  <VAR>eval</VAR> and are unordered. The corresponding eigenvectors are stored   
  in the columns of the matrix <VAR>evec</VAR>. For example, the eigenvector in  
   the first column corresponds to the first eigenvalue. The eigenvectors are   
  guaranteed to be mutually orthogonal and normalised to unit magnitude.   
  </P></DD></DL>
<HR>
<A name="Complex-Hermitian-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Real-Nonsymmetric-Matrices" 
rel="next">Real Nonsymmetric Matrices</A>, Previous: <A accessKey="p" href="#Real-Symmetric-Matrices" 
rel="previous">Real Symmetric Matrices</A>, Up: <A accessKey="u" href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-Hermitian-Matrices-1"></A>
<H3 class="section">15.2 Complex Hermitian Matrices</H3>
<P>For hermitian matrices, the library uses the complex form of the symmetric 
 bidiagonalization and QR reduction method. </P><A name="index-hermitian-matrix_002c-complex_002c-eigensystem"></A><A 
name="index-complex-hermitian-matrix_002c-eigensystem"></A>
<DL>
  <DT><A name="index-gsl_005feigen_005fherm_005falloc"></A>Function:   
  <EM>gsl_eigen_herm_workspace *</EM> 
  <STRONG>gsl_eigen_herm_alloc</STRONG><EM>(const size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fherm_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues of   
  <VAR>n</VAR>-by-<VAR>n</VAR> complex hermitian matrices. The size of the   
  workspace is <EM>O(3n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fherm_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_herm_free</STRONG> 
  <EM>(gsl_eigen_herm_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fherm"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_herm</STRONG> <EM>(gsl_matrix_complex * 
  <VAR>A</VAR>,   gsl_vector * <VAR>eval</VAR>, gsl_eigen_herm_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues of the complex hermitian matrix   
  <VAR>A</VAR>. Additional workspace of the appropriate size must be provided in 
    <VAR>w</VAR>. The diagonal and lower triangular part of <VAR>A</VAR> are   
  destroyed during the computation, but the strict upper triangular part is not  
   referenced. The imaginary parts of the diagonal are assumed to be zero and 
  are   not referenced. The eigenvalues are stored in the vector <VAR>eval</VAR> 
  and   are unordered. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fhermv_005falloc"></A>Function:   
  <EM>gsl_eigen_hermv_workspace *</EM> 
  <STRONG>gsl_eigen_hermv_alloc</STRONG><EM>(const size_t 
<VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fhermv_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues and   
  eigenvectors of <VAR>n</VAR>-by-<VAR>n</VAR> complex hermitian matrices. The   
  size of the workspace is <EM>O(5n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fhermv_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_hermv_free</STRONG> 
  <EM>(gsl_eigen_hermv_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fhermv"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_hermv</STRONG> <EM>(gsl_matrix_complex * 
  <VAR>A</VAR>,   gsl_vector * <VAR>eval</VAR>, gsl_matrix_complex * 
  <VAR>evec</VAR>,   gsl_eigen_hermv_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues and eigenvectors of the complex   
  hermitian matrix <VAR>A</VAR>. Additional workspace of the appropriate size   
  must be provided in <VAR>w</VAR>. The diagonal and lower triangular part of   
  <VAR>A</VAR> are destroyed during the computation, but the strict upper   
  triangular part is not referenced. The imaginary parts of the diagonal are   
  assumed to be zero and are not referenced. The eigenvalues are stored in the   
  vector <VAR>eval</VAR> and are unordered. The corresponding complex   
  eigenvectors are stored in the columns of the matrix <VAR>evec</VAR>. For   
  example, the eigenvector in the first column corresponds to the first   
  eigenvalue. The eigenvectors are guaranteed to be mutually orthogonal and   
  normalised to unit magnitude. </P></DD></DL>
<HR>
<A name="Real-Nonsymmetric-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems" 
rel="next">Real Generalized Symmetric-Definite Eigensystems</A>, Previous: <A 
accessKey="p" href="#Complex-Hermitian-Matrices" 
rel="previous">Complex Hermitian Matrices</A>, Up: <A accessKey="u" href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Real-Nonsymmetric-Matrices-1"></A>
<H3 class="section">15.3 Real Nonsymmetric Matrices</H3><A name="index-nonsymmetric-matrix_002c-real_002c-eigensystem"></A><A 
name="index-real-nonsymmetric-matrix_002c-eigensystem"></A>
<P>The solution of the real nonsymmetric eigensystem problem for a matrix 
<EM>A</EM> involves computing the Schur decomposition </P>
<DIV class="example"><PRE class="example">A = Z T Z^T
</PRE></DIV>
<P>where <EM>Z</EM> is an orthogonal matrix of Schur vectors and <EM>T</EM>, the 
 Schur form, is quasi upper triangular with diagonal <EM>1</EM>-by-<EM>1</EM> 
 blocks which are real eigenvalues of <EM>A</EM>, and diagonal 
<EM>2</EM>-by-<EM>2</EM> blocks whose eigenvalues are complex conjugate 
 eigenvalues of <EM>A</EM>. The algorithm used is the double-shift Francis 
 method. </P>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymm_005falloc"></A>Function:   
  <EM>gsl_eigen_nonsymm_workspace *</EM><STRONG>gsl_eigen_nonsymm_alloc</STRONG> 
  <EM>(const size_t   <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fnonsymm_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues of   
  <VAR>n</VAR>-by-<VAR>n</VAR> real nonsymmetric matrices. The size of the   
  workspace is <EM>O(2n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymm_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_eigen_nonsymm_free</STRONG><EM>(gsl_eigen_nonsymm_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymm_005fparams"></A>Function:   
  <EM>void</EM> <STRONG>gsl_eigen_nonsymm_params</STRONG> <EM>(const int   
  <VAR>compute_t</VAR>, const int <VAR>balance</VAR>,   
  gsl_eigen_nonsymm_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function sets some parameters which determine how the eigenvalue   
  problem is solved in subsequent calls to <CODE>gsl_eigen_nonsymm</CODE>. </P>
  <P>If <VAR>compute_t</VAR> is set to 1, the full Schur form <EM>T</EM> will be 
    computed by <CODE>gsl_eigen_nonsymm</CODE>. If it is set to 0, <EM>T</EM> 
  will   not be computed (this is the default setting). Computing the full Schur 
  form   <EM>T</EM> requires approximately 1.5–2 times the number of flops. </P>
  <P>If <VAR>balance</VAR> is set to 1, a balancing transformation is applied to 
    the matrix prior to computing eigenvalues. This transformation is designed 
  to   make the rows and columns of the matrix have comparable norms, and can 
  result   in more accurate eigenvalues for matrices whose entries vary widely 
  in   magnitude. See <A href="#Balancing">Balancing</A> 
    for more information. Note that the balancing transformation does not 
  preserve   the orthogonality of the Schur vectors, so if you wish to compute 
  the Schur   vectors with <CODE>gsl_eigen_nonsymm_Z</CODE> you will obtain the 
  Schur   vectors of the balanced matrix instead of the original matrix. The   
  relationship will be </P>
  <DIV class="example"><PRE class="example">T = Q^t D^(-1) A D Q
</PRE></DIV>
  <P>where <VAR>Q</VAR> is the matrix of Schur vectors for the balanced matrix,  
   and <VAR>D</VAR> is the balancing transformation. Then   
  <CODE>gsl_eigen_nonsymm_Z</CODE> will compute a matrix <VAR>Z</VAR> which   
  satisfies </P>
  <DIV class="example"><PRE class="example">T = Z^(-1) A Z
</PRE></DIV>
  <P>with <EM>Z = D Q</EM>. Note that <VAR>Z</VAR> will not be orthogonal. For   
  this reason, balancing is not performed by default. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_nonsymm</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
    gsl_vector_complex * <VAR>eval</VAR>, gsl_eigen_nonsymm_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues of the real nonsymmetric matrix   
  <VAR>A</VAR> and stores them in the vector <VAR>eval</VAR>. If <EM>T</EM> is   
  desired, it is stored in the upper portion of <VAR>A</VAR> on output.   
  Otherwise, on output, the diagonal of <VAR>A</VAR> will contain the   
  <EM>1</EM>-by-<EM>1</EM> real eigenvalues and <EM>2</EM>-by-<EM>2</EM> complex 
    conjugate eigenvalue systems, and the rest of <VAR>A</VAR> is destroyed. In  
   rare cases, this function may fail to find all eigenvalues. If this happens,  
   an error code is returned and the number of converged eigenvalues is stored 
  in   <CODE>w-&gt;n_evals</CODE>. The converged eigenvalues are stored in the   
  beginning of <VAR>eval</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymm_005fZ"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_nonsymm_Z</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>,   gsl_vector_complex * <VAR>eval</VAR>, gsl_matrix * 
  <VAR>Z</VAR>,   gsl_eigen_nonsymm_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function is identical to <CODE>gsl_eigen_nonsymm</CODE> except that it 
    also computes the Schur vectors and stores them into <VAR>Z</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymmv_005falloc"></A>Function:   
  <EM>gsl_eigen_nonsymmv_workspace 
  *</EM><STRONG>gsl_eigen_nonsymmv_alloc</STRONG> <EM>(const size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fnonsymmv_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues and   
  eigenvectors of <VAR>n</VAR>-by-<VAR>n</VAR> real nonsymmetric matrices. The   
  size of the workspace is <EM>O(5n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymmv_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_eigen_nonsymmv_free</STRONG><EM>(gsl_eigen_nonsymmv_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymmv_005fparams"></A>Function:   
  <EM>void</EM> <STRONG>gsl_eigen_nonsymmv_params</STRONG> <EM>(const int   
  <VAR>balance</VAR>, gsl_eigen_nonsymm_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function sets parameters which determine how the eigenvalue problem is 
    solved in subsequent calls to <CODE>gsl_eigen_nonsymmv</CODE>. If   
  <VAR>balance</VAR> is set to 1, a balancing transformation is applied to the   
  matrix. See <CODE>gsl_eigen_nonsymm_params</CODE> for more information.   
  Balancing is turned off by default since it does not preserve the   
  orthogonality of the Schur vectors. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_nonsymmv</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>,   gsl_vector_complex * <VAR>eval</VAR>, gsl_matrix_complex * 
  <VAR>evec</VAR>,   gsl_eigen_nonsymmv_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes eigenvalues and right eigenvectors of the   
  <VAR>n</VAR>-by-<VAR>n</VAR> real nonsymmetric matrix <VAR>A</VAR>. It first   
  calls <CODE>gsl_eigen_nonsymm</CODE> to compute the eigenvalues, Schur form   
  <EM>T</EM>, and Schur vectors. Then it finds eigenvectors of <EM>T</EM> and   
  backtransforms them using the Schur vectors. The Schur vectors are destroyed   
  in the process, but can be saved by using <CODE>gsl_eigen_nonsymmv_Z</CODE>.   
  The computed eigenvectors are normalized to have unit magnitude. On output,   
  the upper portion of <VAR>A</VAR> contains the Schur form <EM>T</EM>. If   
  <CODE>gsl_eigen_nonsymm</CODE> fails, no eigenvectors are computed, and an   
  error code is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymmv_005fZ"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_nonsymmv_Z</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>,   gsl_vector_complex * <VAR>eval</VAR>, gsl_matrix_complex * 
  <VAR>evec</VAR>,   gsl_matrix * <VAR>Z</VAR>, gsl_eigen_nonsymmv_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function is identical to <CODE>gsl_eigen_nonsymmv</CODE> except that   
  it also saves the Schur vectors into <VAR>Z</VAR>. </P></DD></DL>
<HR>
<A name="Real-Generalized-Symmetric_002dDefinite-Eigensystems"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems" 
rel="next">Complex Generalized Hermitian-Definite Eigensystems</A>, Previous: <A 
accessKey="p" href="#Real-Nonsymmetric-Matrices" 
rel="previous">Real Nonsymmetric Matrices</A>, Up: <A accessKey="u" href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Real-Generalized-Symmetric_002dDefinite-Eigensystems-1"></A>
<H3 class="section">15.4 Real Generalized Symmetric-Definite Eigensystems</H3><A 
name="index-generalized-symmetric-eigensystems"></A>
<P>The real generalized symmetric-definite eigenvalue problem is to find 
 eigenvalues <EM>\lambda</EM> and eigenvectors <EM>x</EM> such that </P>
<DIV class="example"><PRE class="example">A x = \lambda B x
</PRE></DIV>
<P>where <EM>A</EM> and <EM>B</EM> are symmetric matrices, and <EM>B</EM> is 
 positive-definite. This problem reduces to the standard symmetric eigenvalue 
 problem by applying the Cholesky decomposition to <EM>B</EM>: </P>
<DIV class="example"><PRE class="example">                      A x = \lambda B x
                      A x = \lambda L L^t x
( L^{-1} A L^{-t} ) L^t x = \lambda L^t x
</PRE></DIV>
<P>Therefore, the problem becomes <EM>C y = \lambda y</EM> where <EM>C = L^{-1} 
 A L^{-t}</EM> is symmetric, and <EM>y = L^t x</EM>. The standard symmetric 
 eigensolver can be applied to the matrix <EM>C</EM>. The resulting eigenvectors 
 are backtransformed to find the vectors of the original problem. The 
eigenvalues  and eigenvectors of the generalized symmetric-definite eigenproblem 
are always  real. </P>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymm_005falloc"></A>Function:   
  <EM>gsl_eigen_gensymm_workspace *</EM><STRONG>gsl_eigen_gensymm_alloc</STRONG> 
  <EM>(const size_t   <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fgensymm_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues of   
  <VAR>n</VAR>-by-<VAR>n</VAR> real generalized symmetric-definite eigensystems. 
    The size of the workspace is <EM>O(2n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymm_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_eigen_gensymm_free</STRONG><EM>(gsl_eigen_gensymm_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymm"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_gensymm</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_matrix   * <VAR>B</VAR>, gsl_vector * <VAR>eval</VAR>, 
  gsl_eigen_gensymm_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues of the real generalized   
  symmetric-definite matrix pair (<VAR>A</VAR>, <VAR>B</VAR>), and stores them   
  in <VAR>eval</VAR>, using the method outlined above. On output, <VAR>B</VAR>   
  contains its Cholesky decomposition and <VAR>A</VAR> is destroyed. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymmv_005falloc"></A>Function:   
  <EM>gsl_eigen_gensymmv_workspace 
  *</EM><STRONG>gsl_eigen_gensymmv_alloc</STRONG> <EM>(const size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fgensymmv_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues and   
  eigenvectors of <VAR>n</VAR>-by-<VAR>n</VAR> real generalized   
  symmetric-definite eigensystems. The size of the workspace is <EM>O(4n)</EM>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymmv_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_eigen_gensymmv_free</STRONG><EM>(gsl_eigen_gensymmv_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymmv"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_gensymmv</STRONG> <EM>(gsl_matrix * 
  <VAR>A</VAR>, gsl_matrix   * <VAR>B</VAR>, gsl_vector * <VAR>eval</VAR>, 
  gsl_matrix * <VAR>evec</VAR>,   gsl_eigen_gensymmv_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues and eigenvectors of the real   
  generalized symmetric-definite matrix pair (<VAR>A</VAR>, <VAR>B</VAR>), and   
  stores them in <VAR>eval</VAR> and <VAR>evec</VAR> respectively. The computed  
   eigenvectors are normalized to have unit magnitude. On output, <VAR>B</VAR>   
  contains its Cholesky decomposition and <VAR>A</VAR> is destroyed. 
</P></DD></DL>
<HR>
<A name="Complex-Generalized-Hermitian_002dDefinite-Eigensystems"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Real-Generalized-Nonsymmetric-Eigensystems" 
rel="next">Real Generalized Nonsymmetric Eigensystems</A>, Previous: <A 
accessKey="p" href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems" 
rel="previous">Real Generalized Symmetric-Definite Eigensystems</A>, Up: <A 
accessKey="u" href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Complex-Generalized-Hermitian_002dDefinite-Eigensystems-1"></A>
<H3 class="section">15.5 Complex Generalized Hermitian-Definite 
 Eigensystems</H3><A 
name="index-generalized-hermitian-definite-eigensystems"></A>
<P>The complex generalized hermitian-definite eigenvalue problem is to find 
 eigenvalues <EM>\lambda</EM> and eigenvectors <EM>x</EM> such that </P>
<DIV class="example"><PRE class="example">A x = \lambda B x
</PRE></DIV>
<P>where <EM>A</EM> and <EM>B</EM> are hermitian matrices, and <EM>B</EM> is 
 positive-definite. Similarly to the real case, this can be reduced to <EM>C y = 
 \lambda y</EM> where <EM>C = L^{-1} A L^{-H}</EM> is hermitian, and <EM>y = L^H 
 x</EM>. The standard hermitian eigensolver can be applied to the matrix 
<EM>C</EM>. The resulting eigenvectors are backtransformed to find the vectors 
 of the original problem. The eigenvalues of the generalized hermitian-definite 
 eigenproblem are always real. </P>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenherm_005falloc"></A>Function:   
  <EM>gsl_eigen_genherm_workspace *</EM><STRONG>gsl_eigen_genherm_alloc</STRONG> 
  <EM>(const size_t   <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fgenherm_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues of   
  <VAR>n</VAR>-by-<VAR>n</VAR> complex generalized hermitian-definite   
  eigensystems. The size of the workspace is <EM>O(3n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenherm_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_eigen_genherm_free</STRONG><EM>(gsl_eigen_genherm_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenherm"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_genherm</STRONG> <EM>(gsl_matrix_complex * 
  <VAR>A</VAR>,   gsl_matrix_complex * <VAR>B</VAR>, gsl_vector * 
  <VAR>eval</VAR>,   gsl_eigen_genherm_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues of the complex generalized   
  hermitian-definite matrix pair (<VAR>A</VAR>, <VAR>B</VAR>), and stores them   
  in <VAR>eval</VAR>, using the method outlined above. On output, <VAR>B</VAR>   
  contains its Cholesky decomposition and <VAR>A</VAR> is destroyed. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenhermv_005falloc"></A>Function:   
  <EM>gsl_eigen_genhermv_workspace 
  *</EM><STRONG>gsl_eigen_genhermv_alloc</STRONG> <EM>(const size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fgenhermv_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues and   
  eigenvectors of <VAR>n</VAR>-by-<VAR>n</VAR> complex generalized   
  hermitian-definite eigensystems. The size of the workspace is <EM>O(5n)</EM>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenhermv_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_eigen_genhermv_free</STRONG><EM>(gsl_eigen_genhermv_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenhermv"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_genhermv</STRONG> <EM>(gsl_matrix_complex * 
  <VAR>A</VAR>,   gsl_matrix_complex * <VAR>B</VAR>, gsl_vector * 
  <VAR>eval</VAR>,   gsl_matrix_complex * <VAR>evec</VAR>, 
  gsl_eigen_genhermv_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues and eigenvectors of the complex   
  generalized hermitian-definite matrix pair (<VAR>A</VAR>, <VAR>B</VAR>), and   
  stores them in <VAR>eval</VAR> and <VAR>evec</VAR> respectively. The computed  
   eigenvectors are normalized to have unit magnitude. On output, <VAR>B</VAR>   
  contains its Cholesky decomposition and <VAR>A</VAR> is destroyed. 
</P></DD></DL>
<HR>
<A name="Real-Generalized-Nonsymmetric-Eigensystems"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sorting-Eigenvalues-and-Eigenvectors" 
rel="next">Sorting Eigenvalues and Eigenvectors</A>, Previous: <A accessKey="p" 
href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems" 
rel="previous">Complex Generalized Hermitian-Definite Eigensystems</A>, Up: <A 
accessKey="u" href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Real-Generalized-Nonsymmetric-Eigensystems-1"></A>
<H3 class="section">15.6 Real Generalized Nonsymmetric Eigensystems</H3><A name="index-generalized-eigensystems"></A>
<P>Given two square matrices (<EM>A</EM>, <EM>B</EM>), the generalized 
 nonsymmetric eigenvalue problem is to find eigenvalues <EM>\lambda</EM> and 
 eigenvectors <EM>x</EM> such that </P>
<DIV class="example"><PRE class="example">A x = \lambda B x
</PRE></DIV>
<P>We may also define the problem as finding eigenvalues <EM>\mu</EM> and 
 eigenvectors <EM>y</EM> such that </P>
<DIV class="example"><PRE class="example">\mu A y = B y
</PRE></DIV>
<P>Note that these two problems are equivalent (with <EM>\lambda = 1/\mu</EM>) 
 if neither <EM>\lambda</EM> nor <EM>\mu</EM> is zero. If say, <EM>\lambda</EM> 
 is zero, then it is still a well defined eigenproblem, but its alternate 
problem  involving <EM>\mu</EM> is not. Therefore, to allow for zero (and 
infinite)  eigenvalues, the problem which is actually solved is </P>
<DIV class="example"><PRE class="example">\beta A x = \alpha B x
</PRE></DIV>
<P>The eigensolver routines below will return two values <EM>\alpha</EM> and 
<EM>\beta</EM> and leave it to the user to perform the divisions <EM>\lambda = 
 \alpha / \beta</EM> and <EM>\mu = \beta / \alpha</EM>. </P>
<P>If the determinant of the matrix pencil <EM>A - \lambda B</EM> is zero for 
 all <EM>\lambda</EM>, the problem is said to be singular; otherwise it is 
called  regular. Singularity normally leads to some <EM>\alpha = \beta = 0</EM> 
which  means the eigenproblem is ill-conditioned and generally does not have 
well  defined eigenvalue solutions. The routines below are intended for regular 
matrix  pencils and could yield unpredictable results when applied to singular 
pencils. </P>
<P>The solution of the real generalized nonsymmetric eigensystem problem for a 
 matrix pair <EM>(A, B)</EM> involves computing the generalized Schur 
 decomposition </P>
<DIV class="example"><PRE class="example">A = Q S Z^T
B = Q T Z^T
</PRE></DIV>
<P>where <EM>Q</EM> and <EM>Z</EM> are orthogonal matrices of left and right 
 Schur vectors respectively, and <EM>(S, T)</EM> is the generalized Schur form 
 whose diagonal elements give the <EM>\alpha</EM> and <EM>\beta</EM> values. The 
 algorithm used is the QZ method due to Moler and Stewart (see references). </P>
<DL>
  <DT><A name="index-gsl_005feigen_005fgen_005falloc"></A>Function:   
  <EM>gsl_eigen_gen_workspace *</EM> 
  <STRONG>gsl_eigen_gen_alloc</STRONG><EM>(const size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fgen_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues of   
  <VAR>n</VAR>-by-<VAR>n</VAR> real generalized nonsymmetric eigensystems. The   
  size of the workspace is <EM>O(n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgen_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_gen_free</STRONG> <EM>(gsl_eigen_gen_workspace 
  *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgen_005fparams"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_gen_params</STRONG> <EM>(const int 
  <VAR>compute_s</VAR>,   const int <VAR>compute_t</VAR>, const int 
  <VAR>balance</VAR>,   gsl_eigen_gen_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function sets some parameters which determine how the eigenvalue   
  problem is solved in subsequent calls to <CODE>gsl_eigen_gen</CODE>. </P>
  <P>If <VAR>compute_s</VAR> is set to 1, the full Schur form <EM>S</EM> will be 
    computed by <CODE>gsl_eigen_gen</CODE>. If it is set to 0, <EM>S</EM> will 
  not   be computed (this is the default setting). <EM>S</EM> is a quasi upper   
  triangular matrix with 1-by-1 and 2-by-2 blocks on its diagonal. 1-by-1 blocks 
    correspond to real eigenvalues, and 2-by-2 blocks correspond to complex   
  eigenvalues. </P>
  <P>If <VAR>compute_t</VAR> is set to 1, the full Schur form <EM>T</EM> will be 
    computed by <CODE>gsl_eigen_gen</CODE>. If it is set to 0, <EM>T</EM> will 
  not   be computed (this is the default setting). <EM>T</EM> is an upper 
  triangular   matrix with non-negative elements on its diagonal. Any 2-by-2 
  blocks in   <EM>S</EM> will correspond to a 2-by-2 diagonal block in 
  <EM>T</EM>. </P>
  <P>The <VAR>balance</VAR> parameter is currently ignored, since generalized   
  balancing is not yet implemented. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgen"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_gen</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_matrix *   <VAR>B</VAR>, gsl_vector_complex * <VAR>alpha</VAR>, gsl_vector 
  *   <VAR>beta</VAR>, gsl_eigen_gen_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the eigenvalues of the real generalized nonsymmetric 
    matrix pair (<VAR>A</VAR>, <VAR>B</VAR>), and stores them as pairs in   
  (<VAR>alpha</VAR>, <VAR>beta</VAR>), where <VAR>alpha</VAR> is complex and   
  <VAR>beta</VAR> is real. If <EM>\beta_i</EM> is non-zero, then <EM>\lambda =   
  \alpha_i / \beta_i</EM> is an eigenvalue. Likewise, if <EM>\alpha_i</EM> is   
  non-zero, then <EM>\mu = \beta_i / \alpha_i</EM> is an eigenvalue of the   
  alternate problem <EM>\mu A y = B y</EM>. The elements of <VAR>beta</VAR> are  
   normalized to be non-negative. </P>
  <P>If <EM>S</EM> is desired, it is stored in <VAR>A</VAR> on output. If   
  <EM>T</EM> is desired, it is stored in <VAR>B</VAR> on output. The ordering of 
    eigenvalues in (<VAR>alpha</VAR>, <VAR>beta</VAR>) follows the ordering of 
  the   diagonal blocks in the Schur forms <EM>S</EM> and <EM>T</EM>. In rare 
  cases,   this function may fail to find all eigenvalues. If this occurs, an 
  error code   is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgen_005fQZ"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_gen_QZ</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_matrix *   <VAR>B</VAR>, gsl_vector_complex * <VAR>alpha</VAR>, gsl_vector 
  *   <VAR>beta</VAR>, gsl_matrix * <VAR>Q</VAR>, gsl_matrix * <VAR>Z</VAR>,   
  gsl_eigen_gen_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function is identical to <CODE>gsl_eigen_gen</CODE> except that it   
  also computes the left and right Schur vectors and stores them into   
  <VAR>Q</VAR> and <VAR>Z</VAR> respectively. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenv_005falloc"></A>Function:   
  <EM>gsl_eigen_genv_workspace *</EM> 
  <STRONG>gsl_eigen_genv_alloc</STRONG><EM>(const size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005feigen_005fgenv_005fworkspace"></A>
  <P>This function allocates a workspace for computing eigenvalues and   
  eigenvectors of <VAR>n</VAR>-by-<VAR>n</VAR> real generalized nonsymmetric   
  eigensystems. The size of the workspace is <EM>O(7n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenv_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_eigen_genv_free</STRONG> 
  <EM>(gsl_eigen_genv_workspace *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenv"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_genv</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_matrix *   <VAR>B</VAR>, gsl_vector_complex * <VAR>alpha</VAR>, gsl_vector 
  *   <VAR>beta</VAR>, gsl_matrix_complex * <VAR>evec</VAR>,   
  gsl_eigen_genv_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes eigenvalues and right eigenvectors of the   
  <VAR>n</VAR>-by-<VAR>n</VAR> real generalized nonsymmetric matrix pair   
  (<VAR>A</VAR>, <VAR>B</VAR>). The eigenvalues are stored in (<VAR>alpha</VAR>, 
    <VAR>beta</VAR>) and the eigenvectors are stored in <VAR>evec</VAR>. It 
  first   calls <CODE>gsl_eigen_gen</CODE> to compute the eigenvalues, Schur 
  forms, and   Schur vectors. Then it finds eigenvectors of the Schur forms and  
   backtransforms them using the Schur vectors. The Schur vectors are destroyed  
   in the process, but can be saved by using <CODE>gsl_eigen_genv_QZ</CODE>. The 
    computed eigenvectors are normalized to have unit magnitude. On output,   
  (<VAR>A</VAR>, <VAR>B</VAR>) contains the generalized Schur form (<EM>S</EM>,  
   <EM>T</EM>). If <CODE>gsl_eigen_gen</CODE> fails, no eigenvectors are   
  computed, and an error code is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenv_005fQZ"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_genv_QZ</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  gsl_matrix   * <VAR>B</VAR>, gsl_vector_complex * <VAR>alpha</VAR>, gsl_vector 
  *   <VAR>beta</VAR>, gsl_matrix_complex * <VAR>evec</VAR>, gsl_matrix *   
  <VAR>Q</VAR>, gsl_matrix * <VAR>Z</VAR>, gsl_eigen_genv_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function is identical to <CODE>gsl_eigen_genv</CODE> except that it   
  also computes the left and right Schur vectors and stores them into   
  <VAR>Q</VAR> and <VAR>Z</VAR> respectively. </P></DD></DL>
<HR>
<A name="Sorting-Eigenvalues-and-Eigenvectors"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Eigenvalue-and-Eigenvector-Examples" 
rel="next">Eigenvalue and Eigenvector Examples</A>, Previous: <A accessKey="p" 
href="#Real-Generalized-Nonsymmetric-Eigensystems" 
rel="previous">Real Generalized Nonsymmetric Eigensystems</A>, Up: <A accessKey="u" 
href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Sorting-Eigenvalues-and-Eigenvectors-1"></A>
<H3 class="section">15.7 Sorting Eigenvalues and Eigenvectors</H3><A name="index-sorting-eigenvalues-and-eigenvectors"></A>
<DL>
  <DT><A name="index-gsl_005feigen_005fsymmv_005fsort"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_symmv_sort</STRONG> <EM>(gsl_vector * 
  <VAR>eval</VAR>,   gsl_matrix * <VAR>evec</VAR>, gsl_eigen_sort_t 
  <VAR>sort_type</VAR>)</EM></DT>
  <DD>
  <P>This function simultaneously sorts the eigenvalues stored in the vector   
  <VAR>eval</VAR> and the corresponding real eigenvectors stored in the columns  
   of the matrix <VAR>evec</VAR> into ascending or descending order according to 
    the value of the parameter <VAR>sort_type</VAR>, </P>
  <DL compact="">
    <DT><CODE>GSL_EIGEN_SORT_VAL_ASC</CODE></DT>
    <DD>
    <P>ascending order in numerical value </P></DD>
    <DT><CODE>GSL_EIGEN_SORT_VAL_DESC</CODE></DT>
    <DD>
    <P>descending order in numerical value </P></DD>
    <DT><CODE>GSL_EIGEN_SORT_ABS_ASC</CODE></DT>
    <DD>
    <P>ascending order in magnitude </P></DD>
    <DT><CODE>GSL_EIGEN_SORT_ABS_DESC</CODE></DT>
    <DD>
    <P>descending order in magnitude </P></DD></DL></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fhermv_005fsort"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_hermv_sort</STRONG> <EM>(gsl_vector * 
  <VAR>eval</VAR>,   gsl_matrix_complex * <VAR>evec</VAR>, gsl_eigen_sort_t   
  <VAR>sort_type</VAR>)</EM></DT>
  <DD>
  <P>This function simultaneously sorts the eigenvalues stored in the vector   
  <VAR>eval</VAR> and the corresponding complex eigenvectors stored in the   
  columns of the matrix <VAR>evec</VAR> into ascending or descending order   
  according to the value of the parameter <VAR>sort_type</VAR> as shown above.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fnonsymmv_005fsort"></A>Function:   
  <EM>int</EM> <STRONG>gsl_eigen_nonsymmv_sort</STRONG> <EM>(gsl_vector_complex  
   * <VAR>eval</VAR>, gsl_matrix_complex * <VAR>evec</VAR>, gsl_eigen_sort_t   
  <VAR>sort_type</VAR>)</EM></DT>
  <DD>
  <P>This function simultaneously sorts the eigenvalues stored in the vector   
  <VAR>eval</VAR> and the corresponding complex eigenvectors stored in the   
  columns of the matrix <VAR>evec</VAR> into ascending or descending order   
  according to the value of the parameter <VAR>sort_type</VAR> as shown above.   
  Only <CODE>GSL_EIGEN_SORT_ABS_ASC</CODE> and   
  <CODE>GSL_EIGEN_SORT_ABS_DESC</CODE> are supported due to the eigenvalues   
  being complex. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgensymmv_005fsort"></A>Function:   
  <EM>int</EM> <STRONG>gsl_eigen_gensymmv_sort</STRONG> <EM>(gsl_vector *   
  <VAR>eval</VAR>, gsl_matrix * <VAR>evec</VAR>, gsl_eigen_sort_t   
  <VAR>sort_type</VAR>)</EM></DT>
  <DD>
  <P>This function simultaneously sorts the eigenvalues stored in the vector   
  <VAR>eval</VAR> and the corresponding real eigenvectors stored in the columns  
   of the matrix <VAR>evec</VAR> into ascending or descending order according to 
    the value of the parameter <VAR>sort_type</VAR> as shown above. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenhermv_005fsort"></A>Function:   
  <EM>int</EM> <STRONG>gsl_eigen_genhermv_sort</STRONG> <EM>(gsl_vector *   
  <VAR>eval</VAR>, gsl_matrix_complex * <VAR>evec</VAR>, gsl_eigen_sort_t   
  <VAR>sort_type</VAR>)</EM></DT>
  <DD>
  <P>This function simultaneously sorts the eigenvalues stored in the vector   
  <VAR>eval</VAR> and the corresponding complex eigenvectors stored in the   
  columns of the matrix <VAR>evec</VAR> into ascending or descending order   
  according to the value of the parameter <VAR>sort_type</VAR> as shown above.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005feigen_005fgenv_005fsort"></A>Function: 
  <EM>int</EM><STRONG>gsl_eigen_genv_sort</STRONG> <EM>(gsl_vector_complex *   
  <VAR>alpha</VAR>, gsl_vector * <VAR>beta</VAR>, gsl_matrix_complex *   
  <VAR>evec</VAR>, gsl_eigen_sort_t <VAR>sort_type</VAR>)</EM></DT>
  <DD>
  <P>This function simultaneously sorts the eigenvalues stored in the vectors   
  (<VAR>alpha</VAR>, <VAR>beta</VAR>) and the corresponding complex eigenvectors 
    stored in the columns of the matrix <VAR>evec</VAR> into ascending or   
  descending order according to the value of the parameter <VAR>sort_type</VAR>  
   as shown above. Only <CODE>GSL_EIGEN_SORT_ABS_ASC</CODE> and   
  <CODE>GSL_EIGEN_SORT_ABS_DESC</CODE> are supported due to the eigenvalues   
  being complex. </P></DD></DL>
<HR>
<A name="Eigenvalue-and-Eigenvector-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Eigenvalue-and-Eigenvector-References" 
rel="next">Eigenvalue and Eigenvector References</A>, Previous: <A accessKey="p" 
href="#Sorting-Eigenvalues-and-Eigenvectors" 
rel="previous">Sorting Eigenvalues and Eigenvectors</A>, Up: <A accessKey="u" 
href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-9"></A>
<H3 class="section">15.8 Examples</H3>
<P>The following program computes the eigenvalues and eigenvectors of the 4-th 
 order Hilbert matrix, <EM>H(i,j) = 1/(i + j + 1)</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_eigen.h&gt;

int
main (void)
{
  double data[] = { 1.0  , 1/2.0, 1/3.0, 1/4.0,
                    1/2.0, 1/3.0, 1/4.0, 1/5.0,
                    1/3.0, 1/4.0, 1/5.0, 1/6.0,
                    1/4.0, 1/5.0, 1/6.0, 1/7.0 };

  gsl_matrix_view m 
    = gsl_matrix_view_array (data, 4, 4);

  gsl_vector *eval = gsl_vector_alloc (4);
  gsl_matrix *evec = gsl_matrix_alloc (4, 4);

  gsl_eigen_symmv_workspace * w = 
    gsl_eigen_symmv_alloc (4);
  
  gsl_eigen_symmv (&amp;m.matrix, eval, evec, w);

  gsl_eigen_symmv_free (w);

  gsl_eigen_symmv_sort (eval, evec, 
                        GSL_EIGEN_SORT_ABS_ASC);
  
  {
    int i;

    for (i = 0; i &lt; 4; i++)
      {
        double eval_i 
           = gsl_vector_get (eval, i);
        gsl_vector_view evec_i 
           = gsl_matrix_column (evec, i);

        printf ("eigenvalue = %g\n", eval_i);
        printf ("eigenvector = \n");
        gsl_vector_fprintf (stdout, 
                            &amp;evec_i.vector, "%g");
      }
  }

  gsl_vector_free (eval);
  gsl_matrix_free (evec);

  return 0;
}
</PRE></DIV>
<P>Here is the beginning of the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
eigenvalue = 9.67023e-05
eigenvector = 
-0.0291933
0.328712
-0.791411
0.514553
...
</PRE></DIV>
<P>This can be compared with the corresponding output from <SMALL>GNU 
 OCTAVE</SMALL>, </P>
<DIV class="example"><PRE class="example">octave&gt; [v,d] = eig(hilb(4));
octave&gt; diag(d)  
ans =

   9.6702e-05
   6.7383e-03
   1.6914e-01
   1.5002e+00

octave&gt; v 
v =

   0.029193   0.179186  -0.582076   0.792608
  -0.328712  -0.741918   0.370502   0.451923
   0.791411   0.100228   0.509579   0.322416
  -0.514553   0.638283   0.514048   0.252161
</PRE></DIV>
<P>Note that the eigenvectors can differ by a change of sign, since the sign of 
 an eigenvector is arbitrary. </P>
<P>The following program illustrates the use of the nonsymmetric eigensolver, by 
 computing the eigenvalues and eigenvectors of the Vandermonde matrix 
<EM>V(x;i,j) = x_i^{n - j}</EM> with <EM>x = (-1,-2,3,4)</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_eigen.h&gt;

int
main (void)
{
  double data[] = { -1.0, 1.0, -1.0, 1.0,
                    -8.0, 4.0, -2.0, 1.0,
                    27.0, 9.0, 3.0, 1.0,
                    64.0, 16.0, 4.0, 1.0 };

  gsl_matrix_view m 
    = gsl_matrix_view_array (data, 4, 4);

  gsl_vector_complex *eval = gsl_vector_complex_alloc (4);
  gsl_matrix_complex *evec = gsl_matrix_complex_alloc (4, 4);

  gsl_eigen_nonsymmv_workspace * w = 
    gsl_eigen_nonsymmv_alloc (4);
  
  gsl_eigen_nonsymmv (&amp;m.matrix, eval, evec, w);

  gsl_eigen_nonsymmv_free (w);

  gsl_eigen_nonsymmv_sort (eval, evec, 
                           GSL_EIGEN_SORT_ABS_DESC);
  
  {
    int i, j;

    for (i = 0; i &lt; 4; i++)
      {
        gsl_complex eval_i 
           = gsl_vector_complex_get (eval, i);
        gsl_vector_complex_view evec_i 
           = gsl_matrix_complex_column (evec, i);

        printf ("eigenvalue = %g + %gi\n",
                GSL_REAL(eval_i), GSL_IMAG(eval_i));
        printf ("eigenvector = \n");
        for (j = 0; j &lt; 4; ++j)
          {
            gsl_complex z = 
              gsl_vector_complex_get(&amp;evec_i.vector, j);
            printf("%g + %gi\n", GSL_REAL(z), GSL_IMAG(z));
          }
      }
  }

  gsl_vector_complex_free(eval);
  gsl_matrix_complex_free(evec);

  return 0;
}
</PRE></DIV>
<P>Here is the beginning of the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
eigenvalue = -6.41391 + 0i
eigenvector = 
-0.0998822 + 0i
-0.111251 + 0i
0.292501 + 0i
0.944505 + 0i
eigenvalue = 5.54555 + 3.08545i
eigenvector = 
-0.043487 + -0.0076308i
0.0642377 + -0.142127i
-0.515253 + 0.0405118i
-0.840592 + -0.00148565i
...
</PRE></DIV>
<P>This can be compared with the corresponding output from <SMALL>GNU 
 OCTAVE</SMALL>, </P>
<DIV class="example"><PRE class="example">octave&gt; [v,d] = eig(vander([-1 -2 3 4]));
octave&gt; diag(d)
ans =

  -6.4139 + 0.0000i
   5.5456 + 3.0854i
   5.5456 - 3.0854i
   2.3228 + 0.0000i

octave&gt; v
v =

 Columns 1 through 3:

  -0.09988 + 0.00000i  -0.04350 - 0.00755i  -0.04350 + 0.00755i
  -0.11125 + 0.00000i   0.06399 - 0.14224i   0.06399 + 0.14224i
   0.29250 + 0.00000i  -0.51518 + 0.04142i  -0.51518 - 0.04142i
   0.94451 + 0.00000i  -0.84059 + 0.00000i  -0.84059 - 0.00000i

 Column 4:

  -0.14493 + 0.00000i
   0.35660 + 0.00000i
   0.91937 + 0.00000i
   0.08118 + 0.00000i

</PRE></DIV>
<P>Note that the eigenvectors corresponding to the eigenvalue <EM>5.54555 + 
 3.08545i</EM> differ by the multiplicative constant <EM>0.9999984 + 
 0.0017674i</EM> which is an arbitrary phase factor of magnitude 1. </P>
<HR>
<A name="Eigenvalue-and-Eigenvector-References"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Eigenvalue-and-Eigenvector-Examples" 
rel="previous">Eigenvalue and Eigenvector Examples</A>, Up: <A accessKey="u" 
href="#Eigensystems" 
rel="up">Eigensystems</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-9"></A>
<H3 class="section">15.9 References and Further Reading</H3>
<P>Further information on the algorithms described in this section can be found 
 in the following book, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->G. H. Golub, C. F. Van Loan, <CITE>Matrix Computations</CITE>  
   (3rd Ed, 1996), Johns Hopkins University Press, ISBN 0-8018-5414-8. </LI></UL>
<P>Further information on the generalized eigensystems QZ algorithm can be found 
 in this paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->C. Moler, G. Stewart, “An Algorithm for Generalized Matrix   
  Eigenvalue Problems”, SIAM J. Numer. Anal., Vol 10, No 2, 1973. </LI></UL><A 
name="index-LAPACK"></A>
<P>Eigensystem routines for very large matrices can be found in the Fortran 
 library <SMALL>LAPACK</SMALL>. The <SMALL>LAPACK</SMALL> library is described 
 in, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>LAPACK Users’ Guide</CITE> (Third Edition, 1999),   
  Published by SIAM, ISBN 0-89871-447-8.   
  <P><A 
  href="http://www.netlib.org/lapack">http://www.netlib.org/lapack</A></P></LI></UL>
<P>The <SMALL>LAPACK</SMALL> source code can be found at the website above along 
 with an online copy of the users guide. </P>
<HR>
<A name="Fast-Fourier-Transforms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-Integration" 
rel="next">Numerical Integration</A>, Previous: <A accessKey="p" href="#Eigensystems" 
rel="previous">Eigensystems</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Fast-Fourier-Transforms-_0028FFTs_0029"></A>
<H2 class="chapter">16 Fast Fourier Transforms (FFTs)</H2><A 
name="index-FFT"></A><A name="index-Fast-Fourier-Transforms_002c-see-FFT"></A><A 
name="index-Fourier-Transforms_002c-see-FFT"></A><A name="index-Discrete-Fourier-Transforms_002c-see-FFT"></A><A 
name="index-DFTs_002c-see-FFT"></A>
<P>This chapter describes functions for performing Fast Fourier Transforms 
 (FFTs). The library includes radix-2 routines (for lengths which are a power of 
 two) and mixed-radix routines (which work for any length). For efficiency there 
 are separate versions of the routines for real data and for complex data. The 
 mixed-radix routines are a reimplementation of the <SMALL>FFTPACK</SMALL> 
 library of Paul Swarztrauber. Fortran code for <SMALL>FFTPACK</SMALL> is 
 available on Netlib (<SMALL>FFTPACK</SMALL> also includes some routines for 
sine  and cosine transforms but these are currently not available in GSL). For 
details  and derivations of the underlying algorithms consult the document 
<CITE>GSL FFT  Algorithms</CITE> (see <A href="#FFT-References-and-Further-Reading">FFT 
 References and Further Reading</A>) </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Mathematical-Definitions">Mathematical 
            Definitions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Overview-of-complex-data-FFTs">Overview 
            of complex data FFTs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Overview-of-real-data-FFTs">Overview 
            of real data FFTs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#FFT-References-and-Further-Reading">FFT 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Mathematical-Definitions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Overview-of-complex-data-FFTs" 
rel="next">Overview of complex data FFTs</A>, Up: <A accessKey="u" href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mathematical-Definitions-1"></A>
<H3 class="section">16.1 Mathematical Definitions</H3><A name="index-FFT-mathematical-definition"></A>
<P>Fast Fourier Transforms are efficient algorithms for calculating the discrete 
 Fourier transform (DFT), </P>
<DIV class="example"><PRE class="example">x_j = \sum_{k=0}^{n-1} z_k \exp(-2\pi i j k / n) 
</PRE></DIV>
<P>The DFT usually arises as an approximation to the continuous Fourier 
 transform when functions are sampled at discrete intervals in space or time. 
The  naive evaluation of the discrete Fourier transform is a matrix-vector 
 multiplication <EM>W\vec{z}</EM>. A general matrix-vector multiplication takes 
<EM>O(n^2)</EM> operations for <EM>n</EM> data-points. Fast Fourier transform 
 algorithms use a divide-and-conquer strategy to factorize the matrix <EM>W</EM> 
 into smaller sub-matrices, corresponding to the integer factors of the length 
<EM>n</EM>. If <EM>n</EM> can be factorized into a product of integers <EM>f_1 
 f_2 ... f_m</EM> then the DFT can be computed in <EM>O(n \sum f_i)</EM> 
 operations. For a radix-2 FFT this gives an operation count of <EM>O(n \log_2 
 n)</EM>. </P>
<P>All the FFT functions offer three types of transform: forwards, inverse and 
 backwards, based on the same mathematical definitions. The definition of the 
<EM>forward Fourier transform</EM>, <EM>x = FFT(z)</EM>, is, </P>
<DIV class="example"><PRE class="example">x_j = \sum_{k=0}^{n-1} z_k \exp(-2\pi i j k / n) 
</PRE></DIV>
<P>and the definition of the <EM>inverse Fourier transform</EM>, <EM>x = 
 IFFT(z)</EM>, is, </P>
<DIV class="example"><PRE class="example">z_j = {1 \over n} \sum_{k=0}^{n-1} x_k \exp(2\pi i j k / n).
</PRE></DIV>
<P>The factor of <EM>1/n</EM> makes this a true inverse. For example, a call to 
<CODE>gsl_fft_complex_forward</CODE> followed by a call to 
<CODE>gsl_fft_complex_inverse</CODE> should return the original data (within 
 numerical errors). </P>
<P>In general there are two possible choices for the sign of the exponential in 
 the transform/ inverse-transform pair. GSL follows the same convention as 
<SMALL>FFTPACK</SMALL>, using a negative exponential for the forward transform. 
 The advantage of this convention is that the inverse transform recreates the 
 original function with simple Fourier synthesis. Numerical Recipes uses the 
 opposite convention, a positive exponential in the forward transform. </P>
<P>The <EM>backwards FFT</EM> is simply our terminology for an unscaled version 
 of the inverse FFT, </P>
<DIV class="example"><PRE class="example">z^{backwards}_j = \sum_{k=0}^{n-1} x_k \exp(2\pi i j k / n).
</PRE></DIV>
<P>When the overall scale of the result is unimportant it is often convenient to 
 use the backwards FFT instead of the inverse to save unnecessary divisions. 
</P>
<HR>
<A name="Overview-of-complex-data-FFTs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Radix_002d2-FFT-routines-for-complex-data" 
rel="next">Radix-2 FFT routines for complex data</A>, Previous: <A accessKey="p" 
href="#Mathematical-Definitions" 
rel="previous">Mathematical Definitions</A>, Up: <A accessKey="u" href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-of-complex-data-FFTs-1"></A>
<H3 class="section">16.2 Overview of complex data FFTs</H3><A name="index-FFT_002c-complex-data"></A>
<P>The inputs and outputs for the complex FFT routines are <EM>packed 
 arrays</EM> of floating point numbers. In a packed array the real and imaginary 
 parts of each complex number are placed in alternate neighboring elements. For 
 example, the following definition of a packed array of length 6, </P>
<DIV class="example"><PRE class="example">double x[3*2];
gsl_complex_packed_array data = x;
</PRE></DIV>
<P>can be used to hold an array of three complex numbers, <CODE>z[3]</CODE>, in 
 the following way, </P>
<DIV class="example"><PRE class="example">data[0] = Re(z[0])
data[1] = Im(z[0])
data[2] = Re(z[1])
data[3] = Im(z[1])
data[4] = Re(z[2])
data[5] = Im(z[2])
</PRE></DIV>
<P>The array indices for the data have the same ordering as those in the 
 definition of the DFT—i.e. there are no index transformations or permutations 
of  the data. </P>
<P>A <EM>stride</EM> parameter allows the user to perform transforms on the 
 elements <CODE>z[stride*i]</CODE> instead of <CODE>z[i]</CODE>. A stride 
greater  than 1 can be used to take an in-place FFT of the column of a matrix. A 
stride  of 1 accesses the array without any additional spacing between elements. 
</P>
<P>To perform an FFT on a vector argument, such as <CODE>gsl_vector_complex * 
 v</CODE>, use the following definitions (or their equivalents) when calling the 
 functions described in this chapter: </P>
<DIV class="example"><PRE class="example">gsl_complex_packed_array data = v-&gt;data;
size_t stride = v-&gt;stride;
size_t n = v-&gt;size;
</PRE></DIV>
<P>For physical applications it is important to remember that the index 
 appearing in the DFT does not correspond directly to a physical frequency. If 
 the time-step of the DFT is <EM>\Delta</EM> then the frequency-domain includes 
 both positive and negative frequencies, ranging from <EM>-1/(2\Delta)</EM> 
 through 0 to <EM>+1/(2\Delta)</EM>. The positive frequencies are stored from 
the  beginning of the array up to the middle, and the negative frequencies are 
stored  backwards from the end of the array. </P>
<P>Here is a table which shows the layout of the array <VAR>data</VAR>, and the 
 correspondence between the time-domain data <EM>z</EM>, and the 
frequency-domain  data <EM>x</EM>. </P>
<DIV class="example"><PRE class="example">index    z               x = FFT(z)

0        z(t = 0)        x(f = 0)
1        z(t = 1)        x(f = 1/(n Delta))
2        z(t = 2)        x(f = 2/(n Delta))
.        ........        ..................
n/2      z(t = n/2)      x(f = +1/(2 Delta),
                               -1/(2 Delta))
.        ........        ..................
n-3      z(t = n-3)      x(f = -3/(n Delta))
n-2      z(t = n-2)      x(f = -2/(n Delta))
n-1      z(t = n-1)      x(f = -1/(n Delta))
</PRE></DIV>
<P>When <EM>n</EM> is even the location <EM>n/2</EM> contains the most positive 
 and negative frequencies (<EM>+1/(2 \Delta)</EM>, <EM>-1/(2 \Delta)</EM>) which 
 are equivalent. If <EM>n</EM> is odd then general structure of the table above 
 still applies, but <EM>n/2</EM> does not appear. </P>
<HR>
<A name="Radix_002d2-FFT-routines-for-complex-data"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Mixed_002dradix-FFT-routines-for-complex-data" 
rel="next">Mixed-radix FFT routines for complex data</A>, Previous: <A 
accessKey="p" href="#Overview-of-complex-data-FFTs" 
rel="previous">Overview of complex data FFTs</A>, Up: <A accessKey="u" href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Radix_002d2-FFT-routines-for-complex-data-1"></A>
<H3 class="section">16.3 Radix-2 FFT routines for complex data</H3><A name="index-FFT-of-complex-data_002c-radix_002d2-algorithm"></A><A 
name="index-Radix_002d2-FFT_002c-complex-data"></A>
<P>The radix-2 algorithms described in this section are simple and compact, 
 although not necessarily the most efficient. They use the Cooley-Tukey 
algorithm  to compute in-place complex FFTs for lengths which are a power of 
2—no  additional storage is required. The corresponding self-sorting mixed-radix 
 routines offer better performance at the expense of requiring additional 
working  space. </P>
<P>All the functions described in this section are declared in the header file 
<SAMP>gsl_fft_complex.h</SAMP>. </P>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005fforward"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_forward</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005ftransform"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_transform</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, 
  gsl_fft_direction <VAR>sign</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005fbackward"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_backward</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005finverse"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_inverse</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions compute forward, backward and inverse FFTs of length   
  <VAR>n</VAR> with stride <VAR>stride</VAR>, on the packed complex array   
  <VAR>data</VAR> using an in-place radix-2 decimation-in-time algorithm. The   
  length of the transform <VAR>n</VAR> is restricted to powers of two. For the   
  <CODE>transform</CODE> version of the function the <VAR>sign</VAR> argument   
  can be either <CODE>forward</CODE> (<EM>-1</EM>) or <CODE>backward</CODE>   
  (<EM>+1</EM>). </P>
  <P>The functions return a value of <CODE>GSL_SUCCESS</CODE> if no errors were  
   detected, or <CODE>GSL_EDOM</CODE> if the length of the data <VAR>n</VAR> is  
   not a power of two. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005fforward"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_dif_forward</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005ftransform"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_dif_transform</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, 
  gsl_fft_direction <VAR>sign</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005fbackward"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_dif_backward</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005finverse"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_fft_complex_radix2_dif_inverse</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These are decimation-in-frequency versions of the radix-2 FFT functions.   
  </P></DD></DL>
<P>Here is an example program which computes the FFT of a short pulse in a 
 sample of length 128. To make the resulting Fourier transform real the pulse is 
 defined for equal positive and negative times (<EM>-10</EM> … <EM>10</EM>), 
 where the negative times wrap around the end of the array. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_fft_complex.h&gt;

#define REAL(z,i) ((z)[2*(i)])
#define IMAG(z,i) ((z)[2*(i)+1])

int
main (void)
{
  int i; double data[2*128];

  for (i = 0; i &lt; 128; i++)
    {
       REAL(data,i) = 0.0; IMAG(data,i) = 0.0;
    }

  REAL(data,0) = 1.0;

  for (i = 1; i &lt;= 10; i++)
    {
       REAL(data,i) = REAL(data,128-i) = 1.0;
    }

  for (i = 0; i &lt; 128; i++)
    {
      printf ("%d %e %e\n", i, 
              REAL(data,i), IMAG(data,i));
    }
  printf ("\n");

  gsl_fft_complex_radix2_forward (data, 1, 128);

  for (i = 0; i &lt; 128; i++)
    {
      printf ("%d %e %e\n", i, 
              REAL(data,i)/sqrt(128), 
              IMAG(data,i)/sqrt(128));
    }

  return 0;
}
</PRE></DIV>
<P>Note that we have assumed that the program is using the default error handler 
 (which calls <CODE>abort</CODE> for any errors). If you are not using a safe 
 error handler you would need to check the return status of 
<CODE>gsl_fft_complex_radix2_forward</CODE>. </P>
<P>The transformed data is rescaled by <EM>1/\sqrt n</EM> so that it fits on the 
 same plot as the input. Only the real part is shown, by the choice of the input 
 data the imaginary part is zero. Allowing for the wrap-around of negative times 
 at <EM>t=128</EM>, and working in units of <EM>k/n</EM>, the DFT approximates 
 the continuum Fourier transform, giving a modulated sine function. </P>
<HR>
<A name="Mixed_002dradix-FFT-routines-for-complex-data"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Overview-of-real-data-FFTs" 
rel="next">Overview of real data FFTs</A>, Previous: <A accessKey="p" href="#Radix_002d2-FFT-routines-for-complex-data" 
rel="previous">Radix-2 FFT routines for complex data</A>, Up: <A accessKey="u" 
href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mixed_002dradix-FFT-routines-for-complex-data-1"></A>
<H3 class="section">16.4 Mixed-radix FFT routines for complex data</H3><A name="index-FFT-of-complex-data_002c-mixed_002dradix-algorithm"></A><A 
name="index-Mixed_002dradix-FFT_002c-complex-data"></A>
<P>This section describes mixed-radix FFT algorithms for complex data. The 
 mixed-radix functions work for FFTs of any length. They are a reimplementation 
 of Paul Swarztrauber’s Fortran <SMALL>FFTPACK</SMALL> library. The theory is 
 explained in the review article <CITE>Self-sorting Mixed-radix FFTs</CITE> by 
 Clive Temperton. The routines here use the same indexing scheme and basic 
 algorithms as <SMALL>FFTPACK</SMALL>. </P>
<P>The mixed-radix algorithm is based on sub-transform modules—highly optimized 
 small length FFTs which are combined to create larger FFTs. There are efficient 
 modules for factors of 2, 3, 4, 5, 6 and 7. The modules for the composite 
 factors of 4 and 6 are faster than combining the modules for <EM>2*2</EM> and 
<EM>2*3</EM>. </P>
<P>For factors which are not implemented as modules there is a fall-back to a 
 general length-<EM>n</EM> module which uses Singleton’s method for efficiently 
 computing a DFT. This module is <EM>O(n^2)</EM>, and slower than a dedicated 
 module would be but works for any length <EM>n</EM>. Of course, lengths which 
 use the general length-<EM>n</EM> module will still be factorized as much as 
 possible. For example, a length of 143 will be factorized into <EM>11*13</EM>. 
 Large prime factors are the worst case scenario, e.g. as found in 
<EM>n=2*3*99991</EM>, and should be avoided because their <EM>O(n^2)</EM> 
 scaling will dominate the run-time (consult the document <CITE>GSL FFT 
 Algorithms</CITE> included in the GSL distribution if you encounter this 
 problem). </P>
<P>The mixed-radix initialization function 
<CODE>gsl_fft_complex_wavetable_alloc</CODE> returns the list of factors chosen 
 by the library for a given length <EM>n</EM>. It can be used to check how well 
 the length has been factorized, and estimate the run-time. To a first 
 approximation the run-time scales as <EM>n \sum f_i</EM>, where the 
<EM>f_i</EM>  are the factors of <EM>n</EM>. For programs under user control you 
may wish to  issue a warning that the transform will be slow when the length is 
poorly  factorized. If you frequently encounter data lengths which cannot be 
factorized  using the existing small-prime modules consult <CITE>GSL FFT 
Algorithms</CITE>  for details on adding support for other factors. </P>
<P>All the functions described in this section are declared in the header file 
<SAMP>gsl_fft_complex.h</SAMP>. </P>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fwavetable_005falloc"></A>Function:   
  <EM>gsl_fft_complex_wavetable 
  *</EM><STRONG>gsl_fft_complex_wavetable_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function prepares a trigonometric lookup table for a complex FFT of   
  length <VAR>n</VAR>. The function returns a pointer to the newly allocated   
  <CODE>gsl_fft_complex_wavetable</CODE> if no errors were detected, and a null  
   pointer in the case of error. The length <VAR>n</VAR> is factorized into a   
  product of subtransforms, and the factors and their trigonometric coefficients 
    are stored in the wavetable. The trigonometric coefficients are computed 
  using   direct calls to <CODE>sin</CODE> and <CODE>cos</CODE>, for accuracy. 
  Recursion   relations could be used to compute the lookup table faster, but if 
  an   application performs many FFTs of the same length then this computation 
  is a   one-off overhead which does not affect the final throughput. </P>
  <P>The wavetable structure can be used repeatedly for any transform of the   
  same length. The table is not modified by calls to any of the other FFT   
  functions. The same wavetable can be used for both forward and backward (or   
  inverse) transforms of a given length. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fwavetable_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_fft_complex_wavetable_free</STRONG><EM>(gsl_fft_complex_wavetable 
  * <VAR>wavetable</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the wavetable   
  <VAR>wavetable</VAR>. The wavetable can be freed if no further FFTs of the   
  same length will be needed. </P></DD></DL>
<P>These functions operate on a <CODE>gsl_fft_complex_wavetable</CODE> structure 
 which contains internal parameters for the FFT. It is not necessary to set any 
 of the components directly but it can sometimes be useful to examine them. For 
 example, the chosen factorization of the FFT length is given and can be used to 
 provide an estimate of the run-time or numerical error. The wavetable structure 
 is declared in the header file <SAMP>gsl_fft_complex.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005ffft_005fcomplex_005fwavetable"></A>Data Type:   
  <STRONG>gsl_fft_complex_wavetable</STRONG></DT>
  <DD>
  <P>This is a structure that holds the factorization and trigonometric lookup   
  tables for the mixed radix fft algorithm. It has the following components: 
</P>
  <DL compact="">
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>This is the number of complex data points </P></DD>
    <DT><CODE>size_t nf</CODE></DT>
    <DD>
    <P>This is the number of factors that the length <CODE>n</CODE> was     
    decomposed into. </P></DD>
    <DT><CODE>size_t factor[64]</CODE></DT>
    <DD>
    <P>This is the array of factors. Only the first <CODE>nf</CODE> elements are 
        used. </P></DD>
    <DT><CODE>gsl_complex * trig</CODE></DT>
    <DD>
    <P>This is a pointer to a preallocated trigonometric lookup table of     
    <CODE>n</CODE> complex elements. </P></DD>
    <DT><CODE>gsl_complex * twiddle[64]</CODE></DT>
    <DD>
    <P>This is an array of pointers into <CODE>trig</CODE>, giving the twiddle   
      factors for each pass. </P></DD></DL></DD></DL>
<P>The mixed radix algorithms require additional working space to hold the 
 intermediate steps of the transform. </P>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fworkspace_005falloc"></A>Function:   
  <EM>gsl_fft_complex_workspace 
  *</EM><STRONG>gsl_fft_complex_workspace_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005ffft_005fcomplex_005fworkspace"></A>
  <P>This function allocates a workspace for a complex transform of length   
  <VAR>n</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fcomplex_005fworkspace_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_fft_complex_workspace_free</STRONG><EM>(gsl_fft_complex_workspace 
  * <VAR>workspace</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace   
  <VAR>workspace</VAR>. The workspace can be freed if no further FFTs of the   
  same length will be needed. </P></DD></DL>
<P>The following functions compute the transform, </P>
<DL>
  <DT><A name="index-gsl_005ffft_005fcomplex_005fforward"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_forward</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, const 
  gsl_fft_complex_wavetable * <VAR>wavetable</VAR>,   gsl_fft_complex_workspace 
  * <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005ffft_005fcomplex_005ftransform"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_transform</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, const 
  gsl_fft_complex_wavetable * <VAR>wavetable</VAR>,   gsl_fft_complex_workspace 
  * <VAR>work</VAR>, gsl_fft_direction   <VAR>sign</VAR>)</EM></DT>
  <DT><A name="index-gsl_005ffft_005fcomplex_005fbackward"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_backward</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, const 
  gsl_fft_complex_wavetable * <VAR>wavetable</VAR>,   gsl_fft_complex_workspace 
  * <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005ffft_005fcomplex_005finverse"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_fft_complex_inverse</STRONG><EM>(gsl_complex_packed_array 
  <VAR>data</VAR>, size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, const 
  gsl_fft_complex_wavetable * <VAR>wavetable</VAR>,   gsl_fft_complex_workspace 
  * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute forward, backward and inverse FFTs of length   
  <VAR>n</VAR> with stride <VAR>stride</VAR>, on the packed complex array   
  <VAR>data</VAR>, using a mixed radix decimation-in-frequency algorithm. There  
   is no restriction on the length <VAR>n</VAR>. Efficient modules are provided  
   for subtransforms of length 2, 3, 4, 5, 6 and 7. Any remaining factors are   
  computed with a slow, <EM>O(n^2)</EM>, general-<EM>n</EM> module. The caller   
  must supply a <VAR>wavetable</VAR> containing the trigonometric lookup tables  
   and a workspace <VAR>work</VAR>. For the <CODE>transform</CODE> version of 
  the   function the <VAR>sign</VAR> argument can be either <CODE>forward</CODE> 
    (<EM>-1</EM>) or <CODE>backward</CODE> (<EM>+1</EM>). </P>
  <P>The functions return a value of <CODE>0</CODE> if no errors were detected.  
   The following <CODE>gsl_errno</CODE> conditions are defined for these   
  functions: </P>
  <DL compact="">
    <DT><CODE>GSL_EDOM</CODE></DT>
    <DD>
    <P>The length of the data <VAR>n</VAR> is not a positive integer (i.e.     
    <VAR>n</VAR> is zero). </P></DD>
    <DT><CODE>GSL_EINVAL</CODE></DT>
    <DD>
    <P>The length of the data <VAR>n</VAR> and the length used to compute the    
     given <VAR>wavetable</VAR> do not match. </P></DD></DL></DD></DL>
<P>Here is an example program which computes the FFT of a short pulse in a 
 sample of length 630 (<EM>=2*3*3*5*7</EM>) using the mixed-radix algorithm. 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_fft_complex.h&gt;

#define REAL(z,i) ((z)[2*(i)])
#define IMAG(z,i) ((z)[2*(i)+1])

int
main (void)
{
  int i;
  const int n = 630;
  double data[2*n];

  gsl_fft_complex_wavetable * wavetable;
  gsl_fft_complex_workspace * workspace;

  for (i = 0; i &lt; n; i++)
    {
      REAL(data,i) = 0.0;
      IMAG(data,i) = 0.0;
    }

  data[0] = 1.0;

  for (i = 1; i &lt;= 10; i++)
    {
      REAL(data,i) = REAL(data,n-i) = 1.0;
    }

  for (i = 0; i &lt; n; i++)
    {
      printf ("%d: %e %e\n", i, REAL(data,i), 
                                IMAG(data,i));
    }
  printf ("\n");

  wavetable = gsl_fft_complex_wavetable_alloc (n);
  workspace = gsl_fft_complex_workspace_alloc (n);

  for (i = 0; i &lt; wavetable-&gt;nf; i++)
    {
       printf ("# factor %d: %d\n", i, 
               wavetable-&gt;factor[i]);
    }

  gsl_fft_complex_forward (data, 1, n, 
                           wavetable, workspace);

  for (i = 0; i &lt; n; i++)
    {
      printf ("%d: %e %e\n", i, REAL(data,i), 
                                IMAG(data,i));
    }

  gsl_fft_complex_wavetable_free (wavetable);
  gsl_fft_complex_workspace_free (workspace);
  return 0;
}
</PRE></DIV>
<P>Note that we have assumed that the program is using the default 
<CODE>gsl</CODE> error handler (which calls <CODE>abort</CODE> for any errors). 
 If you are not using a safe error handler you would need to check the return 
 status of all the <CODE>gsl</CODE> routines. </P>
<HR>
<A name="Overview-of-real-data-FFTs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Radix_002d2-FFT-routines-for-real-data" 
rel="next">Radix-2 FFT routines for real data</A>, Previous: <A accessKey="p" 
href="#Mixed_002dradix-FFT-routines-for-complex-data" 
rel="previous">Mixed-radix FFT routines for complex data</A>, Up: <A accessKey="u" 
href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-of-real-data-FFTs-1"></A>
<H3 class="section">16.5 Overview of real data FFTs</H3><A name="index-FFT-of-real-data"></A>
<P>The functions for real data are similar to those for complex data. However, 
 there is an important difference between forward and inverse transforms. The 
 Fourier transform of a real sequence is not real. It is a complex sequence with 
 a special symmetry: </P>
<DIV class="example"><PRE class="example">z_k = z_{n-k}^*
</PRE></DIV>
<P>A sequence with this symmetry is called <EM>conjugate-complex</EM> or 
<EM>half-complex</EM>. This different structure requires different storage 
 layouts for the forward transform (from real to half-complex) and inverse 
 transform (from half-complex back to real). As a consequence the routines are 
 divided into two sets: functions in <CODE>gsl_fft_real</CODE> which operate on 
 real sequences and functions in <CODE>gsl_fft_halfcomplex</CODE> which operate 
 on half-complex sequences. </P>
<P>Functions in <CODE>gsl_fft_real</CODE> compute the frequency coefficients of 
 a real sequence. The half-complex coefficients <EM>c</EM> of a real sequence 
<EM>x</EM> are given by Fourier analysis, </P>
<DIV class="example"><PRE class="example">c_k = \sum_{j=0}^{n-1} x_j \exp(-2 \pi i j k /n)
</PRE></DIV>
<P>Functions in <CODE>gsl_fft_halfcomplex</CODE> compute inverse or backwards 
 transforms. They reconstruct real sequences by Fourier synthesis from their 
 half-complex frequency coefficients, <EM>c</EM>, </P>
<DIV class="example"><PRE class="example">x_j = {1 \over n} \sum_{k=0}^{n-1} c_k \exp(2 \pi i j k /n)
</PRE></DIV>
<P>The symmetry of the half-complex sequence implies that only half of the 
 complex numbers in the output need to be stored. The remaining half can be 
 reconstructed using the half-complex symmetry condition. This works for all 
 lengths, even and odd—when the length is even the middle value where 
<EM>k=n/2</EM> is also real. Thus only <VAR>n</VAR> real numbers are required to 
 store the half-complex sequence, and the transform of a real sequence can be 
 stored in the same size array as the original data. </P>
<P>The precise storage arrangements depend on the algorithm, and are different 
 for radix-2 and mixed-radix routines. The radix-2 function operates in-place, 
 which constrains the locations where each element can be stored. The 
restriction  forces real and imaginary parts to be stored far apart. The 
mixed-radix  algorithm does not have this restriction, and it stores the real 
and imaginary  parts of a given term in neighboring locations (which is 
desirable for better  locality of memory accesses). </P>
<HR>
<A name="Radix_002d2-FFT-routines-for-real-data"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Mixed_002dradix-FFT-routines-for-real-data" 
rel="next">Mixed-radix FFT routines for real data</A>, Previous: <A accessKey="p" 
href="#Overview-of-real-data-FFTs" 
rel="previous">Overview of real data FFTs</A>, Up: <A accessKey="u" href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Radix_002d2-FFT-routines-for-real-data-1"></A>
<H3 class="section">16.6 Radix-2 FFT routines for real data</H3><A name="index-FFT-of-real-data_002c-radix_002d2-algorithm"></A><A 
name="index-Radix_002d2-FFT-for-real-data"></A>
<P>This section describes radix-2 FFT algorithms for real data. They use the 
 Cooley-Tukey algorithm to compute in-place FFTs for lengths which are a power 
of  2. </P>
<P>The radix-2 FFT functions for real data are declared in the header files 
<SAMP>gsl_fft_real.h</SAMP> </P>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005freal_005fradix2_005ftransform"></A>Function:   
  <EM>int</EM> <STRONG>gsl_fft_real_radix2_transform</STRONG> <EM>(double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes an in-place radix-2 FFT of length <VAR>n</VAR> and   
  stride <VAR>stride</VAR> on the real array <VAR>data</VAR>. The output is a   
  half-complex sequence, which is stored in-place. The arrangement of the   
  half-complex terms uses the following scheme: for <EM>k &lt; n/2</EM> the real 
    part of the <EM>k</EM>-th term is stored in location <EM>k</EM>, and the   
  corresponding imaginary part is stored in location <EM>n-k</EM>. Terms with   
  <EM>k &gt; n/2</EM> can be reconstructed using the symmetry <EM>z_k =   
  z^*_{n-k}</EM>. The terms for <EM>k=0</EM> and <EM>k=n/2</EM> are both purely  
   real, and count as a special case. Their real parts are stored in locations   
  <EM>0</EM> and <EM>n/2</EM> respectively, while their imaginary parts which   
  are zero are not stored. </P>
  <P>The following table shows the correspondence between the output   
  <VAR>data</VAR> and the equivalent results obtained by considering the input   
  data as a complex sequence with zero imaginary part (assuming   
  <VAR>stride=1</VAR>), </P>
  <DIV class="example"><PRE class="example">complex[0].real    =    data[0] 
complex[0].imag    =    0 
complex[1].real    =    data[1] 
complex[1].imag    =    data[n-1]
...............         ................
complex[k].real    =    data[k]
complex[k].imag    =    data[n-k] 
...............         ................
complex[n/2].real  =    data[n/2]
complex[n/2].imag  =    0
...............         ................
complex[k'].real   =    data[k]        k' = n - k
complex[k'].imag   =   -data[n-k] 
...............         ................
complex[n-1].real  =    data[1]
complex[n-1].imag  =   -data[n-1]
</PRE></DIV>
  <P>Note that the output data can be converted into the full complex sequence   
  using the function <CODE>gsl_fft_halfcomplex_radix2_unpack</CODE> described   
  below. </P></DD></DL>
<P>The radix-2 FFT functions for halfcomplex data are declared in the header 
 file <SAMP>gsl_fft_halfcomplex.h</SAMP>. </P>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fhalfcomplex_005fradix2_005finverse"></A>Function:  
   <EM>int</EM> <STRONG>gsl_fft_halfcomplex_radix2_inverse</STRONG> <EM>(double  
   <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fhalfcomplex_005fradix2_005fbackward"></A>Function: 
    <EM>int</EM> <STRONG>gsl_fft_halfcomplex_radix2_backward</STRONG> 
  <EM>(double   <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the inverse or backwards in-place radix-2 FFT of   
  length <VAR>n</VAR> and stride <VAR>stride</VAR> on the half-complex sequence  
   <VAR>data</VAR> stored according the output scheme used by   
  <CODE>gsl_fft_real_radix2</CODE>. The result is a real array stored in natural 
    order. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005ffft_005fhalfcomplex_005fradix2_005funpack"></A>Function:   
  <EM>int</EM> <STRONG>gsl_fft_halfcomplex_radix2_unpack</STRONG> <EM>(const   
  double <VAR>halfcomplex_coefficient</VAR>[], gsl_complex_packed_array   
  <VAR>complex_coefficient</VAR>, size_t <VAR>stride</VAR>, size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function converts <VAR>halfcomplex_coefficient</VAR>, an array of   
  half-complex coefficients as returned by   
  <CODE>gsl_fft_real_radix2_transform</CODE>, into an ordinary complex array,   
  <VAR>complex_coefficient</VAR>. It fills in the complex array using the   
  symmetry <EM>z_k = z_{n-k}^*</EM> to reconstruct the redundant elements. The   
  algorithm for the conversion is, </P>
  <DIV class="example"><PRE class="example">complex_coefficient[0].real 
  = halfcomplex_coefficient[0];
complex_coefficient[0].imag 
  = 0.0;

for (i = 1; i &lt; n - i; i++)
  {
    double hc_real 
      = halfcomplex_coefficient[i*stride];
    double hc_imag 
      = halfcomplex_coefficient[(n-i)*stride];
    complex_coefficient[i*stride].real = hc_real;
    complex_coefficient[i*stride].imag = hc_imag;
    complex_coefficient[(n - i)*stride].real = hc_real;
    complex_coefficient[(n - i)*stride].imag = -hc_imag;
  }

if (i == n - i)
  {
    complex_coefficient[i*stride].real 
      = halfcomplex_coefficient[(n - 1)*stride];
    complex_coefficient[i*stride].imag 
      = 0.0;
  }
</PRE></DIV></DD></DL>
<HR>
<A name="Mixed_002dradix-FFT-routines-for-real-data"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#FFT-References-and-Further-Reading" 
rel="next">FFT References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Radix_002d2-FFT-routines-for-real-data" 
rel="previous">Radix-2 FFT routines for real data</A>, Up: <A accessKey="u" 
href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mixed_002dradix-FFT-routines-for-real-data-1"></A>
<H3 class="section">16.7 Mixed-radix FFT routines for real data</H3><A name="index-FFT-of-real-data_002c-mixed_002dradix-algorithm"></A><A 
name="index-Mixed_002dradix-FFT_002c-real-data"></A>
<P>This section describes mixed-radix FFT algorithms for real data. The 
 mixed-radix functions work for FFTs of any length. They are a reimplementation 
 of the real-FFT routines in the Fortran <SMALL>FFTPACK</SMALL> library by Paul 
 Swarztrauber. The theory behind the algorithm is explained in the article 
<CITE>Fast Mixed-Radix Real Fourier Transforms</CITE> by Clive Temperton. The 
 routines here use the same indexing scheme and basic algorithms as 
<SMALL>FFTPACK</SMALL>. </P>
<P>The functions use the <SMALL>FFTPACK</SMALL> storage convention for 
 half-complex sequences. In this convention the half-complex transform of a real 
 sequence is stored with frequencies in increasing order, starting at zero, with 
 the real and imaginary parts of each frequency in neighboring locations. When a 
 value is known to be real the imaginary part is not stored. The imaginary part 
 of the zero-frequency component is never stored. It is known to be zero (since 
 the zero frequency component is simply the sum of the input data (all real)). 
 For a sequence of even length the imaginary part of the frequency <EM>n/2</EM> 
 is not stored either, since the symmetry <EM>z_k = z_{n-k}^*</EM> implies that 
 this is purely real too. </P>
<P>The storage scheme is best shown by some examples. The table below shows the 
 output for an odd-length sequence, <EM>n=5</EM>. The two columns give the 
 correspondence between the 5 values in the half-complex sequence returned by 
<CODE>gsl_fft_real_transform</CODE>, <VAR>halfcomplex</VAR>[] and the values 
<VAR>complex</VAR>[] that would be returned if the same real input sequence were 
 passed to <CODE>gsl_fft_complex_backward</CODE> as a complex sequence (with 
 imaginary parts set to <CODE>0</CODE>), </P>
<DIV class="example"><PRE class="example">complex[0].real  =  halfcomplex[0] 
complex[0].imag  =  0
complex[1].real  =  halfcomplex[1] 
complex[1].imag  =  halfcomplex[2]
complex[2].real  =  halfcomplex[3]
complex[2].imag  =  halfcomplex[4]
complex[3].real  =  halfcomplex[3]
complex[3].imag  = -halfcomplex[4]
complex[4].real  =  halfcomplex[1]
complex[4].imag  = -halfcomplex[2]
</PRE></DIV>
<P>The upper elements of the <VAR>complex</VAR> array, <CODE>complex[3]</CODE> 
 and <CODE>complex[4]</CODE> are filled in using the symmetry condition. The 
 imaginary part of the zero-frequency term <CODE>complex[0].imag</CODE> is known 
 to be zero by the symmetry. </P>
<P>The next table shows the output for an even-length sequence, <EM>n=6</EM>. In 
 the even case there are two values which are purely real, </P>
<DIV class="example"><PRE class="example">complex[0].real  =  halfcomplex[0]
complex[0].imag  =  0
complex[1].real  =  halfcomplex[1] 
complex[1].imag  =  halfcomplex[2] 
complex[2].real  =  halfcomplex[3] 
complex[2].imag  =  halfcomplex[4] 
complex[3].real  =  halfcomplex[5] 
complex[3].imag  =  0 
complex[4].real  =  halfcomplex[3] 
complex[4].imag  = -halfcomplex[4]
complex[5].real  =  halfcomplex[1] 
complex[5].imag  = -halfcomplex[2] 
</PRE></DIV>
<P>The upper elements of the <VAR>complex</VAR> array, <CODE>complex[4]</CODE> 
 and <CODE>complex[5]</CODE> are filled in using the symmetry condition. Both 
<CODE>complex[0].imag</CODE> and <CODE>complex[3].imag</CODE> are known to be 
 zero. </P>
<P>All these functions are declared in the header files 
<SAMP>gsl_fft_real.h</SAMP> and <SAMP>gsl_fft_halfcomplex.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005ffft_005freal_005fwavetable_005falloc"></A>Function: 
    <EM>gsl_fft_real_wavetable 
  *</EM><STRONG>gsl_fft_real_wavetable_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fhalfcomplex_005fwavetable_005falloc"></A>Function: 
    <EM>gsl_fft_halfcomplex_wavetable 
  *</EM><STRONG>gsl_fft_halfcomplex_wavetable_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005ffft_005freal_005fwavetable"></A><A name="index-gsl_005ffft_005fhalfcomplex_005fwavetable"></A>
  <P>These functions prepare trigonometric lookup tables for an FFT of size   
  <EM>n</EM> real elements. The functions return a pointer to the newly   
  allocated struct if no errors were detected, and a null pointer in the case of 
    error. The length <VAR>n</VAR> is factorized into a product of 
  subtransforms,   and the factors and their trigonometric coefficients are 
  stored in the   wavetable. The trigonometric coefficients are computed using 
  direct calls to   <CODE>sin</CODE> and <CODE>cos</CODE>, for accuracy. 
  Recursion relations could   be used to compute the lookup table faster, but if 
  an application performs   many FFTs of the same length then computing the 
  wavetable is a one-off   overhead which does not affect the final throughput. 
  </P>
  <P>The wavetable structure can be used repeatedly for any transform of the   
  same length. The table is not modified by calls to any of the other FFT   
  functions. The appropriate type of wavetable must be used for forward real or  
   inverse half-complex transforms. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffft_005freal_005fwavetable_005ffree"></A>Function:  
   <EM>void</EM> 
  <STRONG>gsl_fft_real_wavetable_free</STRONG><EM>(gsl_fft_real_wavetable * 
  <VAR>wavetable</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005ffft_005fhalfcomplex_005fwavetable_005ffree"></A>Function:  
   <EM>void</EM> 
  <STRONG>gsl_fft_halfcomplex_wavetable_free</STRONG><EM>(gsl_fft_halfcomplex_wavetable 
  * <VAR>wavetable</VAR>)</EM></DT>
  <DD>
  <P>These functions free the memory associated with the wavetable   
  <VAR>wavetable</VAR>. The wavetable can be freed if no further FFTs of the   
  same length will be needed. </P></DD></DL>
<P>The mixed radix algorithms require additional working space to hold the 
 intermediate steps of the transform, </P>
<DL>
  <DT><A name="index-gsl_005ffft_005freal_005fworkspace_005falloc"></A>Function: 
    <EM>gsl_fft_real_workspace 
  *</EM><STRONG>gsl_fft_real_workspace_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005ffft_005freal_005fworkspace"></A>
  <P>This function allocates a workspace for a real transform of length   
  <VAR>n</VAR>. The same workspace can be used for both forward real and inverse 
    halfcomplex transforms. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffft_005freal_005fworkspace_005ffree"></A>Function:  
   <EM>void</EM> 
  <STRONG>gsl_fft_real_workspace_free</STRONG><EM>(gsl_fft_real_workspace * 
  <VAR>workspace</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace   
  <VAR>workspace</VAR>. The workspace can be freed if no further FFTs of the   
  same length will be needed. </P></DD></DL>
<P>The following functions compute the transforms of real and half-complex data, 
</P>
<DL>
  <DT><A name="index-gsl_005ffft_005freal_005ftransform"></A>Function:   
  <EM>int</EM> <STRONG>gsl_fft_real_transform</STRONG> <EM>(double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, const   
  gsl_fft_real_wavetable * <VAR>wavetable</VAR>, gsl_fft_real_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005ffft_005fhalfcomplex_005ftransform"></A>Function:   
  <EM>int</EM> <STRONG>gsl_fft_halfcomplex_transform</STRONG> <EM>(double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, const   
  gsl_fft_halfcomplex_wavetable * <VAR>wavetable</VAR>, gsl_fft_real_workspace * 
    <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the FFT of <VAR>data</VAR>, a real or half-complex  
   array of length <VAR>n</VAR>, using a mixed radix decimation-in-frequency   
  algorithm. For <CODE>gsl_fft_real_transform</CODE> <VAR>data</VAR> is an array 
    of time-ordered real data. For 
  <CODE>gsl_fft_halfcomplex_transform</CODE><VAR>data</VAR> contains Fourier 
  coefficients in the half-complex ordering   described above. There is no 
  restriction on the length <VAR>n</VAR>. Efficient   modules are provided for 
  subtransforms of length 2, 3, 4 and 5. Any remaining   factors are computed 
  with a slow, <EM>O(n^2)</EM>, general-n module. The   caller must supply a 
  <VAR>wavetable</VAR> containing trigonometric lookup   tables and a workspace 
  <VAR>work</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffft_005freal_005funpack"></A>Function: 
  <EM>int</EM><STRONG>gsl_fft_real_unpack</STRONG> <EM>(const double   
  <VAR>real_coefficient</VAR>[], gsl_complex_packed_array   
  <VAR>complex_coefficient</VAR>, size_t <VAR>stride</VAR>, size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function converts a single real array, <VAR>real_coefficient</VAR>   
  into an equivalent complex array, <VAR>complex_coefficient</VAR>, (with   
  imaginary part set to zero), suitable for <CODE>gsl_fft_complex</CODE>   
  routines. The algorithm for the conversion is simply, </P>
  <DIV class="example"><PRE class="example">for (i = 0; i &lt; n; i++)
  {
    complex_coefficient[i*stride].real 
      = real_coefficient[i*stride];
    complex_coefficient[i*stride].imag 
      = 0.0;
  }
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffft_005fhalfcomplex_005funpack"></A>Function:   
  <EM>int</EM> <STRONG>gsl_fft_halfcomplex_unpack</STRONG> <EM>(const double   
  <VAR>halfcomplex_coefficient</VAR>[], gsl_complex_packed_array   
  <VAR>complex_coefficient</VAR>, size_t <VAR>stride</VAR>, size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function converts <VAR>halfcomplex_coefficient</VAR>, an array of   
  half-complex coefficients as returned by <CODE>gsl_fft_real_transform</CODE>,  
   into an ordinary complex array, <VAR>complex_coefficient</VAR>. It fills in   
  the complex array using the symmetry <EM>z_k = z_{n-k}^*</EM> to reconstruct   
  the redundant elements. The algorithm for the conversion is, </P>
  <DIV class="example"><PRE class="example">complex_coefficient[0].real 
  = halfcomplex_coefficient[0];
complex_coefficient[0].imag 
  = 0.0;

for (i = 1; i &lt; n - i; i++)
  {
    double hc_real 
      = halfcomplex_coefficient[(2 * i - 1)*stride];
    double hc_imag 
      = halfcomplex_coefficient[(2 * i)*stride];
    complex_coefficient[i*stride].real = hc_real;
    complex_coefficient[i*stride].imag = hc_imag;
    complex_coefficient[(n - i)*stride].real = hc_real;
    complex_coefficient[(n - i)*stride].imag = -hc_imag;
  }

if (i == n - i)
  {
    complex_coefficient[i*stride].real 
      = halfcomplex_coefficient[(n - 1)*stride];
    complex_coefficient[i*stride].imag 
      = 0.0;
  }
</PRE></DIV></DD></DL>
<P>Here is an example program using <CODE>gsl_fft_real_transform</CODE> and 
<CODE>gsl_fft_halfcomplex_inverse</CODE>. It generates a real signal in the 
 shape of a square pulse. The pulse is Fourier transformed to frequency space, 
 and all but the lowest ten frequency components are removed from the array of 
 Fourier coefficients returned by <CODE>gsl_fft_real_transform</CODE>. </P>
<P>The remaining Fourier coefficients are transformed back to the time-domain, 
 to give a filtered version of the square pulse. Since Fourier coefficients are 
 stored using the half-complex symmetry both positive and negative frequencies 
 are removed and the final filtered signal is also real. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_fft_real.h&gt;
#include &lt;gsl/gsl_fft_halfcomplex.h&gt;

int
main (void)
{
  int i, n = 100;
  double data[n];

  gsl_fft_real_wavetable * real;
  gsl_fft_halfcomplex_wavetable * hc;
  gsl_fft_real_workspace * work;

  for (i = 0; i &lt; n; i++)
    {
      data[i] = 0.0;
    }

  for (i = n / 3; i &lt; 2 * n / 3; i++)
    {
      data[i] = 1.0;
    }

  for (i = 0; i &lt; n; i++)
    {
      printf ("%d: %e\n", i, data[i]);
    }
  printf ("\n");

  work = gsl_fft_real_workspace_alloc (n);
  real = gsl_fft_real_wavetable_alloc (n);

  gsl_fft_real_transform (data, 1, n, 
                          real, work);

  gsl_fft_real_wavetable_free (real);

  for (i = 11; i &lt; n; i++)
    {
      data[i] = 0;
    }

  hc = gsl_fft_halfcomplex_wavetable_alloc (n);

  gsl_fft_halfcomplex_inverse (data, 1, n, 
                               hc, work);
  gsl_fft_halfcomplex_wavetable_free (hc);

  for (i = 0; i &lt; n; i++)
    {
      printf ("%d: %e\n", i, data[i]);
    }

  gsl_fft_real_workspace_free (work);
  return 0;
}
</PRE></DIV>
<HR>
<A name="FFT-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Mixed_002dradix-FFT-routines-for-real-data" 
rel="previous">Mixed-radix FFT routines for real data</A>, Up: <A accessKey="u" 
href="#Fast-Fourier-Transforms" 
rel="up">Fast Fourier Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-10"></A>
<H3 class="section">16.8 References and Further Reading</H3>
<P>A good starting point for learning more about the FFT is the review article 
<CITE>Fast Fourier Transforms: A Tutorial Review and A State of the Art</CITE> 
 by Duhamel and Vetterli, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->P. Duhamel and M. Vetterli. Fast Fourier transforms: A   
  tutorial review and a state of the art. <CITE>Signal Processing</CITE>,   
  19:259–299, 1990. </LI></UL>
<P>To find out about the algorithms used in the GSL routines you may want to 
 consult the document <CITE>GSL FFT Algorithms</CITE> (it is included in GSL, as 
<SAMP>doc/fftalgorithms.tex</SAMP>). This has general information on FFTs and 
 explicit derivations of the implementation for each routine. There are also 
 references to the relevant literature. For convenience some of the more 
 important references are reproduced below. </P>
<P>There are several introductory books on the FFT with example programs, such 
 as <CITE>The Fast Fourier Transform</CITE> by Brigham and <CITE>DFT/FFT and 
 Convolution Algorithms</CITE> by Burrus and Parks, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->E. Oran Brigham. <CITE>The Fast Fourier Transform</CITE>.   
  Prentice Hall, 1974. </LI>
  <LI><!-- /@w -->C. S. Burrus and T. W. Parks. <CITE>DFT/FFT and Convolution   
  Algorithms</CITE>. Wiley, 1984. </LI></UL>
<P>Both these introductory books cover the radix-2 FFT in some detail. The 
 mixed-radix algorithm at the heart of the <SMALL>FFTPACK</SMALL> routines is 
 reviewed in Clive Temperton’s paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Clive Temperton. Self-sorting mixed-radix fast Fourier   
  transforms. <CITE>Journal of Computational Physics</CITE>, 52(1):1–23, 1983.   
  </LI></UL>
<P>The derivation of FFTs for real-valued data is explained in the following two 
 articles, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Henrik V. Sorenson, Douglas L. Jones, Michael T. Heideman, and 
    C. Sidney Burrus. Real-valued fast Fourier transform algorithms. <CITE>IEEE  
   Transactions on Acoustics, Speech, and Signal Processing</CITE>,   
  ASSP-35(6):849–863, 1987. </LI>
  <LI><!-- /@w -->Clive Temperton. Fast mixed-radix real Fourier transforms.   
  <CITE>Journal of Computational Physics</CITE>, 52:340–350, 1983. </LI></UL>
<P>In 1979 the IEEE published a compendium of carefully-reviewed Fortran FFT 
 programs in <CITE>Programs for Digital Signal Processing</CITE>. It is a useful 
 reference for implementations of many different FFT algorithms, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Digital Signal Processing Committee and IEEE Acoustics,   
  Speech, and Signal Processing Committee, editors. <CITE>Programs for Digital   
  Signal Processing</CITE>. IEEE Press, 1979. </LI></UL>
<P>For large-scale FFT work we recommend the use of the dedicated FFTW library 
 by Frigo and Johnson. The FFTW library is self-optimizing—it automatically 
tunes  itself for each hardware platform in order to achieve maximum 
performance. It is  available under the GNU GPL. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->FFTW Website, <A 
  href="http://www.fftw.org/">http://www.fftw.org/</A> </LI></UL>
<P>The source code for <SMALL>FFTPACK</SMALL> is available from Netlib, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->FFTPACK, <A 
  href="http://www.netlib.org/fftpack/">http://www.netlib.org/fftpack/</A></LI></UL>
<HR>
<A name="Numerical-Integration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Generation" 
rel="next">Random Number Generation</A>, Previous: <A accessKey="p" href="#Fast-Fourier-Transforms" 
rel="previous">Fast Fourier Transforms</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Numerical-Integration-1"></A>
<H2 class="chapter">17 Numerical Integration</H2><A 
name="index-quadrature"></A><A name="index-numerical-integration-_0028quadrature_0029"></A><A 
name="index-integration_002c-numerical-_0028quadrature_0029"></A><A name="index-QUADPACK"></A>
<P>This chapter describes routines for performing numerical integration 
 (quadrature) of a function in one dimension. There are routines for adaptive 
and  non-adaptive integration of general functions, with specialised routines 
for  specific cases. These include integration over infinite and semi-infinite 
 ranges, singular integrals, including logarithmic singularities, computation of 
 Cauchy principal values and oscillatory integrals. The library reimplements the 
 algorithms used in <SMALL>QUADPACK</SMALL>, a numerical integration package 
 written by Piessens, de Doncker-Kapenga, Ueberhuber and Kahaner. Fortran code 
 for <SMALL>QUADPACK</SMALL> is available on Netlib. Also included are 
 non-adaptive, fixed-order Gauss-Legendre integration routines with high 
 precision coefficients by Pavel Holoborodko. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_integration.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Numerical-Integration-Introduction">Numerical 
            Integration Introduction</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#QNG-non_002dadaptive-Gauss_002dKronrod-integration">QNG 
            non-adaptive Gauss-Kronrod integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#QAG-adaptive-integration">QAG 
            adaptive integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#QAGS-adaptive-integration-with-singularities">QAGS 
            adaptive integration with singularities</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#QAGP-adaptive-integration-with-known-singular-points">QAGP 
            adaptive integration with known singular points</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#QAGI-adaptive-integration-on-infinite-intervals">QAGI 
            adaptive integration on infinite intervals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#QAWC-adaptive-integration-for-Cauchy-principal-values">QAWC 
            adaptive integration for Cauchy principal values</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#QAWF-adaptive-integration-for-Fourier-integrals">QAWF 
            adaptive integration for Fourier integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#CQUAD-doubly_002dadaptive-integration">CQUAD 
            doubly-adaptive integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Numerical-integration-error-codes">Numerical 
            integration error codes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Numerical-integration-examples">Numerical 
            integration examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Numerical-integration-References-and-Further-Reading">Numerical 
            integration References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Numerical-Integration-Introduction"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QNG-non_002dadaptive-Gauss_002dKronrod-integration" 
rel="next">QNG non-adaptive Gauss-Kronrod integration</A>, Up: <A accessKey="u" 
href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Introduction-2"></A>
<H3 class="section">17.1 Introduction</H3>
<P>Each algorithm computes an approximation to a definite integral of the form, 
</P>
<DIV class="example"><PRE class="example">I = \int_a^b f(x) w(x) dx
</PRE></DIV>
<P>where <EM>w(x)</EM> is a weight function (for general integrands 
<EM>w(x)=1</EM>). The user provides absolute and relative error bounds 
<EM>(epsabs, epsrel)</EM> which specify the following accuracy requirement, </P>
<DIV class="example"><PRE class="example">|RESULT - I|  &lt;= max(epsabs, epsrel |I|)
</PRE></DIV>
<P>where <EM>RESULT</EM> is the numerical approximation obtained by the 
 algorithm. The algorithms attempt to estimate the absolute error <EM>ABSERR = 
 |RESULT - I|</EM> in such a way that the following inequality holds, </P>
<DIV class="example"><PRE class="example">|RESULT - I| &lt;= ABSERR &lt;= max(epsabs, epsrel |I|)
</PRE></DIV>
<P>In short, the routines return the first approximation which has an absolute 
 error smaller than <EM>epsabs</EM> or a relative error smaller than 
<EM>epsrel</EM>. </P>
<P>Note that this is an <I>either-or</I> constraint, not simultaneous. To 
 compute to a specified absolute error, set <EM>epsrel</EM> to zero. To compute 
 to a specified relative error, set <EM>epsabs</EM> to zero. The routines will 
 fail to converge if the error bounds are too stringent, but always return the 
 best approximation obtained up to that stage. </P>
<P>The algorithms in <SMALL>QUADPACK</SMALL> use a naming convention based on 
 the following letters, </P>
<DIV class="display"><PRE class="display"><CODE>Q</CODE> - quadrature routine

<CODE>N</CODE> - non-adaptive integrator
<CODE>A</CODE> - adaptive integrator

<CODE>G</CODE> - general integrand (user-defined)
<CODE>W</CODE> - weight function with integrand

<CODE>S</CODE> - singularities can be more readily integrated
<CODE>P</CODE> - points of special difficulty can be supplied
<CODE>I</CODE> - infinite range of integration
<CODE>O</CODE> - oscillatory weight function, cos or sin
<CODE>F</CODE> - Fourier integral
<CODE>C</CODE> - Cauchy principal value
</PRE></DIV>
<P>The algorithms are built on pairs of quadrature rules, a higher order rule 
 and a lower order rule. The higher order rule is used to compute the best 
 approximation to an integral over a small range. The difference between the 
 results of the higher order rule and the lower order rule gives an estimate of 
 the error in the approximation. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Integrands-without-weight-functions">Integrands 
            without weight functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Integrands-with-weight-functions">Integrands 
            with weight functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Integrands-with-singular-weight-functions">Integrands 
            with singular weight functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Integrands-without-weight-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Integrands-with-weight-functions" 
rel="next">Integrands with weight functions</A>, Up: <A accessKey="u" href="#Numerical-Integration-Introduction" 
rel="up">Numerical Integration Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Integrands-without-weight-functions-1"></A>
<H4 class="subsection">17.1.1 Integrands without weight functions</H4><A name="index-Gauss_002dKronrod-quadrature"></A>
<P>The algorithms for general functions (without a weight function) are based on 
 Gauss-Kronrod rules. </P>
<P>A Gauss-Kronrod rule begins with a classical Gaussian quadrature rule of 
 order <EM>m</EM>. This is extended with additional points between each of the 
 abscissae to give a higher order Kronrod rule of order <EM>2m+1</EM>. The 
 Kronrod rule is efficient because it reuses existing function evaluations from 
 the Gaussian rule. </P>
<P>The higher order Kronrod rule is used as the best approximation to the 
 integral, and the difference between the two rules is used as an estimate of 
the  error in the approximation. </P>
<HR>
<A name="Integrands-with-weight-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Integrands-with-singular-weight-functions" 
rel="next">Integrands with singular weight functions</A>, Previous: <A 
accessKey="p" href="#Integrands-without-weight-functions" 
rel="previous">Integrands without weight functions</A>, Up: <A accessKey="u" 
href="#Numerical-Integration-Introduction" 
rel="up">Numerical Integration Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Integrands-with-weight-functions-1"></A>
<H4 class="subsection">17.1.2 Integrands with weight functions</H4><A name="index-Clenshaw_002dCurtis-quadrature"></A><A 
name="index-Modified-Clenshaw_002dCurtis-quadrature"></A>
<P>For integrands with weight functions the algorithms use Clenshaw-Curtis 
 quadrature rules. </P>
<P>A Clenshaw-Curtis rule begins with an <EM>n</EM>-th order Chebyshev 
 polynomial approximation to the integrand. This polynomial can be integrated 
 exactly to give an approximation to the integral of the original function. The 
 Chebyshev expansion can be extended to higher orders to improve the 
 approximation and provide an estimate of the error. </P>
<HR>
<A name="Integrands-with-singular-weight-functions"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Integrands-with-weight-functions" 
rel="previous">Integrands with weight functions</A>, Up: <A accessKey="u" href="#Numerical-Integration-Introduction" 
rel="up">Numerical Integration Introduction</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Integrands-with-singular-weight-functions-1"></A>
<H4 class="subsection">17.1.3 Integrands with singular weight functions</H4>
<P>The presence of singularities (or other behavior) in the integrand can cause 
 slow convergence in the Chebyshev approximation. The modified Clenshaw-Curtis 
 rules used in <SMALL>QUADPACK</SMALL> separate out several common weight 
 functions which cause slow convergence. </P>
<P>These weight functions are integrated analytically against the Chebyshev 
 polynomials to precompute <EM>modified Chebyshev moments</EM>. Combining the 
 moments with the Chebyshev approximation to the function gives the desired 
 integral. The use of analytic integration for the singular part of the function 
 allows exact cancellations and substantially improves the overall convergence 
 behavior of the integration. </P>
<HR>
<A name="QNG-non_002dadaptive-Gauss_002dKronrod-integration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAG-adaptive-integration" 
rel="next">QAG adaptive integration</A>, Previous: <A accessKey="p" href="#Numerical-Integration-Introduction" 
rel="previous">Numerical Integration Introduction</A>, Up: <A accessKey="u" 
href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QNG-non_002dadaptive-Gauss_002dKronrod-integration-1"></A>
<H3 class="section">17.2 QNG non-adaptive Gauss-Kronrod integration</H3><A name="index-QNG-quadrature-algorithm"></A>
<P>The QNG algorithm is a non-adaptive procedure which uses fixed 
 Gauss-Kronrod-Patterson abscissae to sample the integrand at a maximum of 87 
 points. It is provided for fast integration of smooth functions. </P>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqng"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qng</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>a</VAR>, double <VAR>b</VAR>, double 
  <VAR>epsabs</VAR>, double   <VAR>epsrel</VAR>, double * <VAR>result</VAR>, 
  double * <VAR>abserr</VAR>,   size_t * <VAR>neval</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Gauss-Kronrod 10-point, 21-point, 43-point and   
  87-point integration rules in succession until an estimate of the integral of  
   <EM>f</EM> over <EM>(a,b)</EM> is achieved within the desired absolute and   
  relative error limits, <VAR>epsabs</VAR> and <VAR>epsrel</VAR>. The function   
  returns the final approximation, <VAR>result</VAR>, an estimate of the   
  absolute error, <VAR>abserr</VAR> and the number of function evaluations used, 
    <VAR>neval</VAR>. The Gauss-Kronrod rules are designed in such a way that 
  each   rule uses all the results of its predecessors, in order to minimize the 
  total   number of function evaluations. </P></DD></DL>
<HR>
<A name="QAG-adaptive-integration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAGS-adaptive-integration-with-singularities" 
rel="next">QAGS adaptive integration with singularities</A>, Previous: <A 
accessKey="p" href="#QNG-non_002dadaptive-Gauss_002dKronrod-integration" 
rel="previous">QNG non-adaptive Gauss-Kronrod integration</A>, Up: <A accessKey="u" 
href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAG-adaptive-integration-1"></A>
<H3 class="section">17.3 QAG adaptive integration</H3><A name="index-QAG-quadrature-algorithm"></A>
<P>The QAG algorithm is a simple adaptive integration procedure. The integration 
 region is divided into subintervals, and on each iteration the subinterval with 
 the largest estimated error is bisected. This reduces the overall error 
rapidly,  as the subintervals become concentrated around local difficulties in 
the  integrand. These subintervals are managed by a 
<CODE>gsl_integration_workspace</CODE> struct, which handles the memory for the 
 subinterval ranges, results and error estimates. </P>
<DL>
  <DT><A name="index-gsl_005fintegration_005fworkspace_005falloc"></A>Function:  
   <EM>gsl_integration_workspace 
  *</EM><STRONG>gsl_integration_workspace_alloc</STRONG> <EM>(size_t 
  <VAR>n</VAR>)   </EM></DT>
  <DD><A name="index-gsl_005fintegration_005fworkspace"></A>
  <P>This function allocates a workspace sufficient to hold <VAR>n</VAR> double  
   precision intervals, their integration results and error estimates. One   
  workspace may be used multiple times as all necessary reinitialization is   
  performed automatically by the integration routines. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fworkspace_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_integration_workspace_free</STRONG><EM>(gsl_integration_workspace 
  * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqag"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qag</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>a</VAR>, double <VAR>b</VAR>, double 
  <VAR>epsabs</VAR>, double   <VAR>epsrel</VAR>, size_t <VAR>limit</VAR>, int 
  <VAR>key</VAR>,   gsl_integration_workspace * <VAR>workspace</VAR>, double * 
  <VAR>result</VAR>,   double * <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function applies an integration rule adaptively until an estimate of   
  the integral of <EM>f</EM> over <EM>(a,b)</EM> is achieved within the desired  
   absolute and relative error limits, <VAR>epsabs</VAR> and <VAR>epsrel</VAR>.  
   The function returns the final approximation, <VAR>result</VAR>, and an   
  estimate of the absolute error, <VAR>abserr</VAR>. The integration rule is   
  determined by the value of <VAR>key</VAR>, which should be chosen from the   
  following symbolic names, </P>
  <DIV class="example"><PRE class="example">GSL_INTEG_GAUSS15  (key = 1)
GSL_INTEG_GAUSS21  (key = 2)
GSL_INTEG_GAUSS31  (key = 3)
GSL_INTEG_GAUSS41  (key = 4)
GSL_INTEG_GAUSS51  (key = 5)
GSL_INTEG_GAUSS61  (key = 6)
</PRE></DIV>
  <P>corresponding to the 15, 21, 31, 41, 51 and 61 point Gauss-Kronrod rules.   
  The higher-order rules give better accuracy for smooth functions, while   
  lower-order rules save time when the function contains local difficulties,   
  such as discontinuities. </P>
  <P>On each iteration the adaptive integration strategy bisects the interval   
  with the largest error estimate. The subintervals and their results are stored 
    in the memory provided by <VAR>workspace</VAR>. The maximum number of   
  subintervals is given by <VAR>limit</VAR>, which may not exceed the allocated  
   size of the workspace. </P></DD></DL>
<HR>
<A name="QAGS-adaptive-integration-with-singularities"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAGP-adaptive-integration-with-known-singular-points" 
rel="next">QAGP adaptive integration with known singular points</A>, Previous: 
<A accessKey="p" href="#QAG-adaptive-integration" 
rel="previous">QAG adaptive integration</A>, Up: <A accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAGS-adaptive-integration-with-singularities-1"></A>
<H3 class="section">17.4 QAGS adaptive integration with singularities</H3><A 
name="index-QAGS-quadrature-algorithm"></A>
<P>The presence of an integrable singularity in the integration region causes an 
 adaptive routine to concentrate new subintervals around the singularity. As the 
 subintervals decrease in size the successive approximations to the integral 
 converge in a limiting fashion. This approach to the limit can be accelerated 
 using an extrapolation procedure. The QAGS algorithm combines adaptive 
bisection  with the Wynn epsilon-algorithm to speed up the integration of many 
types of  integrable singularities. </P>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqags"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qags</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>a</VAR>, double <VAR>b</VAR>, double 
  <VAR>epsabs</VAR>, double   <VAR>epsrel</VAR>, size_t <VAR>limit</VAR>, 
  gsl_integration_workspace *   <VAR>workspace</VAR>, double * 
  <VAR>result</VAR>, double *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Gauss-Kronrod 21-point integration rule   
  adaptively until an estimate of the integral of <EM>f</EM> over <EM>(a,b)</EM> 
    is achieved within the desired absolute and relative error limits,   
  <VAR>epsabs</VAR> and <VAR>epsrel</VAR>. The results are extrapolated using   
  the epsilon-algorithm, which accelerates the convergence of the integral in   
  the presence of discontinuities and integrable singularities. The function   
  returns the final approximation from the extrapolation, <VAR>result</VAR>, and 
    an estimate of the absolute error, <VAR>abserr</VAR>. The subintervals and   
  their results are stored in the memory provided by <VAR>workspace</VAR>. The   
  maximum number of subintervals is given by <VAR>limit</VAR>, which may not   
  exceed the allocated size of the workspace. </P></DD></DL>
<HR>
<A name="QAGP-adaptive-integration-with-known-singular-points"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAGI-adaptive-integration-on-infinite-intervals" 
rel="next">QAGI adaptive integration on infinite intervals</A>, Previous: <A 
accessKey="p" href="#QAGS-adaptive-integration-with-singularities" 
rel="previous">QAGS adaptive integration with singularities</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAGP-adaptive-integration-with-known-singular-points-1"></A>
<H3 class="section">17.5 QAGP adaptive integration with known singular 
 points</H3><A name="index-QAGP-quadrature-algorithm"></A><A name="index-singular-points_002c-specifying-positions-in-quadrature"></A>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqagp"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qagp</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double * <VAR>pts</VAR>, size_t <VAR>npts</VAR>, double 
  <VAR>epsabs</VAR>,   double <VAR>epsrel</VAR>, size_t <VAR>limit</VAR>, 
  gsl_integration_workspace *   <VAR>workspace</VAR>, double * 
  <VAR>result</VAR>, double *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function applies the adaptive integration algorithm QAGS taking   
  account of the user-supplied locations of singular points. The array   
  <VAR>pts</VAR> of length <VAR>npts</VAR> should contain the endpoints of the   
  integration ranges defined by the integration region and locations of the   
  singularities. For example, to integrate over the region <EM>(a,b)</EM> with   
  break-points at <EM>x_1, x_2, x_3</EM> (where <EM>a &lt; x_1 &lt; x_2 &lt; x_3 
    &lt; b</EM>) the following <VAR>pts</VAR> array should be used </P>
  <DIV class="example"><PRE class="example">pts[0] = a
pts[1] = x_1
pts[2] = x_2
pts[3] = x_3
pts[4] = b
</PRE></DIV>
  <P>with <VAR>npts</VAR> = 5. </P>
  <P>If you know the locations of the singular points in the integration region  
   then this routine will be faster than <CODE>QAGS</CODE>. </P></DD></DL>
<HR>
<A name="QAGI-adaptive-integration-on-infinite-intervals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAWC-adaptive-integration-for-Cauchy-principal-values" 
rel="next">QAWC adaptive integration for Cauchy principal values</A>, Previous: 
<A accessKey="p" href="#QAGP-adaptive-integration-with-known-singular-points" 
rel="previous">QAGP adaptive integration with known singular points</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAGI-adaptive-integration-on-infinite-intervals-1"></A>
<H3 class="section">17.6 QAGI adaptive integration on infinite intervals</H3><A 
name="index-QAGI-quadrature-algorithm"></A>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqagi"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qagi</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>, double   <VAR>epsabs</VAR>, double <VAR>epsrel</VAR>, size_t 
  <VAR>limit</VAR>,   gsl_integration_workspace * <VAR>workspace</VAR>, double * 
  <VAR>result</VAR>,   double * <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the integral of the function <VAR>f</VAR> over the   
  infinite interval <EM>(-\infty,+\infty)</EM>. The integral is mapped onto the  
   semi-open interval <EM>(0,1]</EM> using the transformation <EM>x =   
  (1-t)/t</EM>, </P>
  <DIV class="example"><PRE class="example">\int_{-\infty}^{+\infty} dx f(x) = 
     \int_0^1 dt (f((1-t)/t) + f((-1+t)/t))/t^2.
</PRE></DIV>
  <P>It is then integrated using the QAGS algorithm. The normal 21-point   
  Gauss-Kronrod rule of QAGS is replaced by a 15-point rule, because the   
  transformation can generate an integrable singularity at the origin. In this   
  case a lower-order rule is more efficient. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqagiu"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qagiu</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>,   double <VAR>a</VAR>, double <VAR>epsabs</VAR>, double 
  <VAR>epsrel</VAR>,   size_t <VAR>limit</VAR>, gsl_integration_workspace * 
  <VAR>workspace</VAR>,   double * <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the integral of the function <VAR>f</VAR> over the   
  semi-infinite interval <EM>(a,+\infty)</EM>. The integral is mapped onto the   
  semi-open interval <EM>(0,1]</EM> using the transformation <EM>x = a +   
  (1-t)/t</EM>, </P>
  <DIV class="example"><PRE class="example">\int_{a}^{+\infty} dx f(x) = 
     \int_0^1 dt f(a + (1-t)/t)/t^2
</PRE></DIV>
  <P>and then integrated using the QAGS algorithm. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqagil"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qagil</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>,   double <VAR>b</VAR>, double <VAR>epsabs</VAR>, double 
  <VAR>epsrel</VAR>,   size_t <VAR>limit</VAR>, gsl_integration_workspace * 
  <VAR>workspace</VAR>,   double * <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the integral of the function <VAR>f</VAR> over the   
  semi-infinite interval <EM>(-\infty,b)</EM>. The integral is mapped onto the   
  semi-open interval <EM>(0,1]</EM> using the transformation <EM>x = b -   
  (1-t)/t</EM>, </P>
  <DIV class="example"><PRE class="example">\int_{-\infty}^{b} dx f(x) = 
     \int_0^1 dt f(b - (1-t)/t)/t^2
</PRE></DIV>
  <P>and then integrated using the QAGS algorithm. </P></DD></DL>
<HR>
<A name="QAWC-adaptive-integration-for-Cauchy-principal-values"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAWS-adaptive-integration-for-singular-functions" 
rel="next">QAWS adaptive integration for singular functions</A>, Previous: <A 
accessKey="p" href="#QAGI-adaptive-integration-on-infinite-intervals" 
rel="previous">QAGI adaptive integration on infinite intervals</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAWC-adaptive-integration-for-Cauchy-principal-values-1"></A>
<H3 class="section">17.7 QAWC adaptive integration for Cauchy principal 
 values</H3><A name="index-QAWC-quadrature-algorithm"></A><A name="index-Cauchy-principal-value_002c-by-numerical-quadrature"></A>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqawc"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qawc</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>, double <VAR>c</VAR>, 
  double   <VAR>epsabs</VAR>, double <VAR>epsrel</VAR>, size_t <VAR>limit</VAR>, 
    gsl_integration_workspace * <VAR>workspace</VAR>, double * 
  <VAR>result</VAR>,   double * <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Cauchy principal value of the integral of   
  <EM>f</EM> over <EM>(a,b)</EM>, with a singularity at <VAR>c</VAR>, </P>
  <DIV class="example"><PRE class="example">I = \int_a^b dx f(x) / (x - c)
</PRE></DIV>
  <P>The adaptive bisection algorithm of QAG is used, with modifications to   
  ensure that subdivisions do not occur at the singular point <EM>x = c</EM>.   
  When a subinterval contains the point <EM>x = c</EM> or is close to it then a  
   special 25-point modified Clenshaw-Curtis rule is used to control the   
  singularity. Further away from the singularity the algorithm uses an ordinary  
   15-point Gauss-Kronrod integration rule. </P></DD></DL>
<HR>
<A name="QAWS-adaptive-integration-for-singular-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAWO-adaptive-integration-for-oscillatory-functions" 
rel="next">QAWO adaptive integration for oscillatory functions</A>, Previous: <A 
accessKey="p" href="#QAWC-adaptive-integration-for-Cauchy-principal-values" 
rel="previous">QAWC adaptive integration for Cauchy principal values</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAWS-adaptive-integration-for-singular-functions-1"></A>
<H3 class="section">17.8 QAWS adaptive integration for singular functions</H3><A 
name="index-QAWS-quadrature-algorithm"></A><A name="index-singular-functions_002c-numerical-integration-of"></A>
<P>The QAWS algorithm is designed for integrands with algebraic-logarithmic 
 singularities at the end-points of an integration region. In order to work 
 efficiently the algorithm requires a precomputed table of Chebyshev moments. 
</P>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqaws_005ftable_005falloc"></A>Function:   
  <EM>gsl_integration_qaws_table 
  *</EM><STRONG>gsl_integration_qaws_table_alloc</STRONG> <EM>(double   
  <VAR>alpha</VAR>, double <VAR>beta</VAR>, int <VAR>mu</VAR>, int   
  <VAR>nu</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fintegration_005fqaws_005ftable"></A>
  <P>This function allocates space for a <CODE>gsl_integration_qaws_table</CODE> 
    struct describing a singular weight function <EM>W(x)</EM> with the 
  parameters   <EM>(\alpha, \beta, \mu, \nu)</EM>, </P>
  <DIV class="example"><PRE class="example">W(x) = (x-a)^alpha (b-x)^beta log^mu (x-a) log^nu (b-x)
</PRE></DIV>
  <P>where <EM>\alpha &gt; -1</EM>, <EM>\beta &gt; -1</EM>, and <EM>\mu = 0,   
  1</EM>, <EM>\nu = 0, 1</EM>. The weight function can take four different forms 
    depending on the values of <EM>\mu</EM> and <EM>\nu</EM>, </P>
  <DIV class="example"><PRE class="example">W(x) = (x-a)^alpha (b-x)^beta                   (mu = 0, nu = 0)
W(x) = (x-a)^alpha (b-x)^beta log(x-a)          (mu = 1, nu = 0)
W(x) = (x-a)^alpha (b-x)^beta log(b-x)          (mu = 0, nu = 1)
W(x) = (x-a)^alpha (b-x)^beta log(x-a) log(b-x) (mu = 1, nu = 1)
</PRE></DIV>
  <P>The singular points <EM>(a,b)</EM> do not have to be specified until the   
  integral is computed, where they are the endpoints of the integration range.   
  </P>
  <P>The function returns a pointer to the newly allocated table   
  <CODE>gsl_integration_qaws_table</CODE> if no errors were detected, and 0 in   
  the case of error. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqaws_005ftable_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_integration_qaws_table_set</STRONG><EM>(gsl_integration_qaws_table 
  * <VAR>t</VAR>, double <VAR>alpha</VAR>,   double <VAR>beta</VAR>, int 
  <VAR>mu</VAR>, int <VAR>nu</VAR>)</EM></DT>
  <DD>
  <P>This function modifies the parameters <EM>(\alpha, \beta, \mu, \nu)</EM> of 
    an existing <CODE>gsl_integration_qaws_table</CODE> struct <VAR>t</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqaws_005ftable_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_integration_qaws_table_free</STRONG><EM>(gsl_integration_qaws_table 
  * <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the   
  <CODE>gsl_integration_qaws_table</CODE> struct <VAR>t</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqaws"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qaws</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>, const   double <VAR>a</VAR>, const double <VAR>b</VAR>, 
  gsl_integration_qaws_table *   <VAR>t</VAR>, const double <VAR>epsabs</VAR>, 
  const double <VAR>epsrel</VAR>,   const size_t <VAR>limit</VAR>, 
  gsl_integration_workspace *   <VAR>workspace</VAR>, double * 
  <VAR>result</VAR>, double *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the integral of the function <EM>f(x)</EM> over the  
   interval <EM>(a,b)</EM> with the singular weight function <EM>(x-a)^\alpha   
  (b-x)^\beta \log^\mu (x-a) \log^\nu (b-x)</EM>. The parameters of the weight   
  function <EM>(\alpha, \beta, \mu, \nu)</EM> are taken from the table   
  <VAR>t</VAR>. The integral is, </P>
  <DIV class="example"><PRE class="example">I = \int_a^b dx f(x) (x-a)^alpha (b-x)^beta log^mu (x-a) log^nu (b-x).
</PRE></DIV>
  <P>The adaptive bisection algorithm of QAG is used. When a subinterval   
  contains one of the endpoints then a special 25-point modified Clenshaw-Curtis 
    rule is used to control the singularities. For subintervals which do not   
  include the endpoints an ordinary 15-point Gauss-Kronrod integration rule is   
  used. </P></DD></DL>
<HR>
<A name="QAWO-adaptive-integration-for-oscillatory-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#QAWF-adaptive-integration-for-Fourier-integrals" 
rel="next">QAWF adaptive integration for Fourier integrals</A>, Previous: <A 
accessKey="p" href="#QAWS-adaptive-integration-for-singular-functions" 
rel="previous">QAWS adaptive integration for singular functions</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAWO-adaptive-integration-for-oscillatory-functions-1"></A>
<H3 class="section">17.9 QAWO adaptive integration for oscillatory 
 functions</H3><A name="index-QAWO-quadrature-algorithm"></A><A name="index-oscillatory-functions_002c-numerical-integration-of"></A>
<P>The QAWO algorithm is designed for integrands with an oscillatory factor, 
<EM>\sin(\omega x)</EM> or <EM>\cos(\omega x)</EM>. In order to work efficiently 
 the algorithm requires a table of Chebyshev moments which must be pre-computed 
 with calls to the functions below. </P>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqawo_005ftable_005falloc"></A>Function:   
  <EM>gsl_integration_qawo_table 
  *</EM><STRONG>gsl_integration_qawo_table_alloc</STRONG> <EM>(double   
  <VAR>omega</VAR>, double <VAR>L</VAR>, enum gsl_integration_qawo_enum   
  <VAR>sine</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fintegration_005fqawo_005ftable"></A>
  <P>This function allocates space for a <CODE>gsl_integration_qawo_table</CODE> 
    struct and its associated workspace describing a sine or cosine weight   
  function <EM>W(x)</EM> with the parameters <EM>(\omega, L)</EM>, </P>
  <DIV class="example"><PRE class="example">W(x) = sin(omega x)
W(x) = cos(omega x)
</PRE></DIV>
  <P>The parameter <VAR>L</VAR> must be the length of the interval over which   
  the function will be integrated <EM>L = b - a</EM>. The choice of sine or   
  cosine is made with the parameter <VAR>sine</VAR> which should be chosen from  
   one of the two following symbolic values: </P>
  <DIV class="example"><PRE class="example">GSL_INTEG_COSINE
GSL_INTEG_SINE
</PRE></DIV>
  <P>The <CODE>gsl_integration_qawo_table</CODE> is a table of the trigonometric 
    coefficients required in the integration process. The parameter <VAR>n</VAR> 
    determines the number of levels of coefficients that are computed. Each 
  level   corresponds to one bisection of the interval <EM>L</EM>, so that 
  <VAR>n</VAR>   levels are sufficient for subintervals down to the length 
  <EM>L/2^n</EM>. The   integration routine <CODE>gsl_integration_qawo</CODE> 
  returns the error   <CODE>GSL_ETABLE</CODE> if the number of levels is 
  insufficient for the   requested accuracy. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqawo_005ftable_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_integration_qawo_table_set</STRONG><EM>(gsl_integration_qawo_table 
  * <VAR>t</VAR>, double <VAR>omega</VAR>,   double <VAR>L</VAR>, enum 
  gsl_integration_qawo_enum <VAR>sine</VAR>)</EM></DT>
  <DD>
  <P>This function changes the parameters <VAR>omega</VAR>, <VAR>L</VAR> and   
  <VAR>sine</VAR> of the existing workspace <VAR>t</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqawo_005ftable_005fset_005flength"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_integration_qawo_table_set_length</STRONG><EM>(gsl_integration_qawo_table 
  * <VAR>t</VAR>, double <VAR>L</VAR>)</EM></DT>
  <DD>
  <P>This function allows the length parameter <VAR>L</VAR> of the workspace   
  <VAR>t</VAR> to be changed. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fqawo_005ftable_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_integration_qawo_table_free</STRONG><EM>(gsl_integration_qawo_table 
  * <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the workspace   
  <VAR>t</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqawo"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qawo</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>, const   double <VAR>a</VAR>, const double <VAR>epsabs</VAR>, 
  const double   <VAR>epsrel</VAR>, const size_t <VAR>limit</VAR>, 
  gsl_integration_workspace *   <VAR>workspace</VAR>, gsl_integration_qawo_table 
  * <VAR>wf</VAR>, double *   <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function uses an adaptive algorithm to compute the integral of   
  <EM>f</EM> over <EM>(a,b)</EM> with the weight function <EM>\sin(\omega   
  x)</EM> or <EM>\cos(\omega x)</EM> defined by the table <VAR>wf</VAR>, </P>
  <DIV class="example"><PRE class="example">I = \int_a^b dx f(x) sin(omega x)
I = \int_a^b dx f(x) cos(omega x)
</PRE></DIV>
  <P>The results are extrapolated using the epsilon-algorithm to accelerate the  
   convergence of the integral. The function returns the final approximation 
  from   the extrapolation, <VAR>result</VAR>, and an estimate of the absolute 
  error,   <VAR>abserr</VAR>. The subintervals and their results are stored in 
  the memory   provided by <VAR>workspace</VAR>. The maximum number of 
  subintervals is given   by <VAR>limit</VAR>, which may not exceed the 
  allocated size of the workspace.   </P>
  <P>Those subintervals with “large” widths <EM>d</EM> where <EM>d\omega &gt;   
  4</EM> are computed using a 25-point Clenshaw-Curtis integration rule, which   
  handles the oscillatory behavior. Subintervals with a “small” widths where   
  <EM>d\omega &lt; 4</EM> are computed using a 15-point Gauss-Kronrod   
  integration. </P></DD></DL>
<HR>
<A name="QAWF-adaptive-integration-for-Fourier-integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#CQUAD-doubly_002dadaptive-integration" 
rel="next">CQUAD doubly-adaptive integration</A>, Previous: <A accessKey="p" 
href="#QAWO-adaptive-integration-for-oscillatory-functions" 
rel="previous">QAWO adaptive integration for oscillatory functions</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="QAWF-adaptive-integration-for-Fourier-integrals-1"></A>
<H3 class="section">17.10 QAWF adaptive integration for Fourier integrals</H3><A 
name="index-QAWF-quadrature-algorithm"></A><A name="index-Fourier-integrals_002c-numerical"></A>
<DL>
  <DT><A name="index-gsl_005fintegration_005fqawf"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_qawf</STRONG> <EM>(gsl_function * 
  <VAR>f</VAR>, const   double <VAR>a</VAR>, const double <VAR>epsabs</VAR>, 
  const size_t   <VAR>limit</VAR>, gsl_integration_workspace * 
  <VAR>workspace</VAR>,   gsl_integration_workspace * 
  <VAR>cycle_workspace</VAR>,   gsl_integration_qawo_table * <VAR>wf</VAR>, 
  double * <VAR>result</VAR>, double   * <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function attempts to compute a Fourier integral of the function   
  <VAR>f</VAR> over the semi-infinite interval <EM>[a,+\infty)</EM>. </P>
  <DIV class="example"><PRE class="example">I = \int_a^{+\infty} dx f(x) sin(omega x)
I = \int_a^{+\infty} dx f(x) cos(omega x)
</PRE></DIV>
  <P>The parameter <EM>\omega</EM> and choice of <EM>\sin</EM> or <EM>\cos</EM>  
   is taken from the table <VAR>wf</VAR> (the length <VAR>L</VAR> can take any   
  value, since it is overridden by this function to a value appropriate for the  
   Fourier integration). The integral is computed using the QAWO algorithm over  
   each of the subintervals, </P>
  <DIV class="example"><PRE class="example">C_1 = [a, a + c]
C_2 = [a + c, a + 2 c]
... = ...
C_k = [a + (k-1) c, a + k c]
</PRE></DIV>
  <P>where <EM>c = (2 floor(|\omega|) + 1) \pi/|\omega|</EM>. The width   
  <EM>c</EM> is chosen to cover an odd number of periods so that the   
  contributions from the intervals alternate in sign and are monotonically   
  decreasing when <VAR>f</VAR> is positive and monotonically decreasing. The sum 
    of this sequence of contributions is accelerated using the 
  epsilon-algorithm.   </P>
  <P>This function works to an overall absolute tolerance of <VAR>abserr</VAR>.  
   The following strategy is used: on each interval <EM>C_k</EM> the algorithm   
  tries to achieve the tolerance </P>
  <DIV class="example"><PRE class="example">TOL_k = u_k abserr
</PRE></DIV>
  <P>where <EM>u_k = (1 - p)p^{k-1}</EM> and <EM>p = 9/10</EM>. The sum of the   
  geometric series of contributions from each interval gives an overall   
  tolerance of <VAR>abserr</VAR>. </P>
  <P>If the integration of a subinterval leads to difficulties then the accuracy 
    requirement for subsequent intervals is relaxed, </P>
  <DIV class="example"><PRE class="example">TOL_k = u_k max(abserr, max_{i&lt;k}{E_i})
</PRE></DIV>
  <P>where <EM>E_k</EM> is the estimated error on the interval <EM>C_k</EM>. 
</P>
  <P>The subintervals and their results are stored in the memory provided by   
  <VAR>workspace</VAR>. The maximum number of subintervals is given by   
  <VAR>limit</VAR>, which may not exceed the allocated size of the workspace.   
  The integration over each subinterval uses the memory provided by   
  <VAR>cycle_workspace</VAR> as workspace for the QAWO algorithm. </P></DD></DL>
<HR>
<A name="CQUAD-doubly_002dadaptive-integration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fixed-order-Gauss_002dLegendre-integration" 
rel="next">Fixed order Gauss-Legendre integration</A>, Previous: <A accessKey="p" 
href="#QAWF-adaptive-integration-for-Fourier-integrals" 
rel="previous">QAWF adaptive integration for Fourier integrals</A>, Up: <A 
accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="CQUAD-doubly_002dadaptive-integration-1"></A>
<H3 class="section">17.11 CQUAD doubly-adaptive integration</H3><A name="index-cquad_002c-doubly_002dadaptive-integration"></A>
<P><SMALL>CQUAD</SMALL> is a new doubly-adaptive general-purpose quadrature 
 routine which can handle most types of singularities, non-numerical function 
 values such as <CODE>Inf</CODE> or <CODE>NaN</CODE>, as well as some divergent 
 integrals. It generally requires more function evaluations than the integration 
 routines in <SMALL>QUADPACK</SMALL>, yet fails less often for difficult 
 integrands. </P>
<P>The underlying algorithm uses a doubly-adaptive scheme in which 
 Clenshaw-Curtis quadrature rules of increasing degree are used to compute the 
 integral in each interval. The <EM>L_2</EM>-norm of the difference between the 
 underlying interpolatory polynomials of two successive rules is used as an 
error  estimate. The interval is subdivided if the difference between two 
successive  rules is too large or a rule of maximum degree has been reached. 
</P>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fcquad_005fworkspace_005falloc"></A>Function: 
    <EM>gsl_integration_cquad_workspace 
  *</EM><STRONG>gsl_integration_cquad_workspace_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>) </EM></DT>
  <DD><A name="index-gsl_005fintegration_005fcquad_005fworkspace"></A>
  <P>This function allocates a workspace sufficient to hold the data for   
  <VAR>n</VAR> intervals. The number <VAR>n</VAR> is not the maximum number of   
  intervals that will be evaluated. If the workspace is full, intervals with   
  smaller error estimates will be discarded. A minimum of 3 intervals is   
  required and for most functions, a workspace of size 100 is sufficient.   
  </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fcquad_005fworkspace_005ffree"></A>Function: 
    <EM>void</EM> 
  <STRONG>gsl_integration_cquad_workspace_free</STRONG><EM>(gsl_integration_cquad_workspace 
  * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fcquad"></A>Function: 
  <EM>int</EM><STRONG>gsl_integration_cquad</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>a</VAR>, double <VAR>b</VAR>, double 
  <VAR>epsabs</VAR>, double   <VAR>epsrel</VAR>, gsl_integration_cquad_workspace 
  * <VAR>workspace</VAR>,   double * <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>, size_t *   <VAR>nevals</VAR>)</EM></DT>
  <DD>
  <P>This function computes the integral of <EM>f</EM> over <EM>(a,b)</EM>   
  within the desired absolute and relative error limits, <VAR>epsabs</VAR> and   
  <VAR>epsrel</VAR> using the <SMALL>CQUAD</SMALL> algorithm. The function   
  returns the final approximation, <VAR>result</VAR>, an estimate of the   
  absolute error, <VAR>abserr</VAR>, and the number of function evaluations   
  required, <VAR>nevals</VAR>. </P>
  <P>The <SMALL>CQUAD</SMALL> algorithm divides the integration region into   
  subintervals, and in each iteration, the subinterval with the largest   
  estimated error is processed. The algorithm uses Clenshaw-Curits quadrature   
  rules of degree 4, 8, 16 and 32 over 5, 9, 17 and 33 nodes respectively. Each  
   interval is initialized with the lowest-degree rule. When an interval is   
  processed, the next-higher degree rule is evaluated and an error estimate is   
  computed based on the <EM>L_2</EM>-norm of the difference between the   
  underlying interpolating polynomials of both rules. If the highest-degree rule 
    has already been used, or the interpolatory polynomials differ 
  significantly,   the interval is bisected. </P>
  <P>The subintervals and their results are stored in the memory provided by   
  <VAR>workspace</VAR>. If the error estimate or the number of function   
  evaluations is not needed, the pointers <VAR>abserr</VAR> and   
  <VAR>nevals</VAR> can be set to <CODE>NULL</CODE>. </P></DD></DL>
<HR>
<A name="Fixed-order-Gauss_002dLegendre-integration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-integration-error-codes" 
rel="next">Numerical integration error codes</A>, Previous: <A accessKey="p" 
href="#CQUAD-doubly_002dadaptive-integration" 
rel="previous">CQUAD doubly-adaptive integration</A>, Up: <A accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Gauss_002dLegendre-integration"></A>
<H3 class="section">17.12 Gauss-Legendre integration</H3>
<P>The fixed-order Gauss-Legendre integration routines are provided for fast 
 integration of smooth functions with known polynomial order. The 
<EM>n</EM>-point Gauss-Legendre rule is exact for polynomials of order 
<EM>2*n-1</EM> or less. For example, these rules are useful when integrating 
 basis functions to form mass matrices for the Galerkin method. Unlike other 
 numerical integration routines within the library, these routines do not accept 
 absolute or relative error bounds. </P>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fglfixed_005ftable_005falloc"></A>Function: 
    <EM>gsl_integration_glfixed_table 
  *</EM><STRONG>gsl_integration_glfixed_table_alloc</STRONG> <EM>(size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fintegration_005fglfixed_005ftable"></A>
  <P>This function determines the Gauss-Legendre abscissae and weights necessary 
    for an <EM>n</EM>-point fixed order integration scheme. If possible, high   
  precision precomputed coefficients are used. If precomputed weights are not   
  available, lower precision coefficients are computed on the fly. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fglfixed"></A>Function:   
  <EM>double</EM> <STRONG>gsl_integration_glfixed</STRONG> <EM>(const   
  gsl_function * <VAR>f</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>, const   
  gsl_integration_glfixed_table * <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>This function applies the Gauss-Legendre integration rule contained in   
  table <VAR>t</VAR> and returns the result. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fintegration_005fglfixed_005fpoint"></A>Function:   
  <EM>int</EM> <STRONG>gsl_integration_glfixed_point</STRONG> <EM>(double   
  <VAR>a</VAR>, double <VAR>b</VAR>, size_t <VAR>i</VAR>, double *   
  <VAR>xi</VAR>, double * <VAR>wi</VAR>, const gsl_integration_glfixed_table *   
  <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>For <VAR>i</VAR> in <EM>[0, …, t-&gt;n - 1]</EM>, this function obtains the 
    <VAR>i</VAR>-th Gauss-Legendre point <VAR>xi</VAR> and weight <VAR>wi</VAR> 
  on   the interval [<VAR>a</VAR>,<VAR>b</VAR>]. The points and weights are 
  ordered   by increasing point value. A function <EM>f</EM> may be integrated 
  on   [<VAR>a</VAR>,<VAR>b</VAR>] by summing <EM>wi * f(xi)</EM> over 
  <VAR>i</VAR>.   </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fintegration_005fglfixed_005ftable_005ffree"></A>Function:  
   <EM>void</EM> 
  <STRONG>gsl_integration_glfixed_table_free</STRONG><EM>(gsl_integration_glfixed_table 
  * <VAR>t</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fintegration_005fglfixed_005ftable-1"></A>
  <P>This function frees the memory associated with the table <VAR>t</VAR>.   
  </P></DD></DL>
<HR>
<A name="Numerical-integration-error-codes"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-integration-examples" 
rel="next">Numerical integration examples</A>, Previous: <A accessKey="p" href="#Fixed-order-Gauss_002dLegendre-integration" 
rel="previous">Fixed order Gauss-Legendre integration</A>, Up: <A accessKey="u" 
href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Error-codes"></A>
<H3 class="section">17.13 Error codes</H3>
<P>In addition to the standard error codes for invalid arguments the functions 
 can return the following values, </P>
<DL compact="">
  <DT><CODE>GSL_EMAXITER</CODE></DT>
  <DD>
  <P>the maximum number of subdivisions was exceeded. </P></DD>
  <DT><CODE>GSL_EROUND</CODE></DT>
  <DD>
  <P>cannot reach tolerance because of roundoff error, or roundoff error was   
  detected in the extrapolation table. </P></DD>
  <DT><CODE>GSL_ESING</CODE></DT>
  <DD>
  <P>a non-integrable singularity or other bad integrand behavior was found in   
  the integration interval. </P></DD>
  <DT><CODE>GSL_EDIVERGE</CODE></DT>
  <DD>
  <P>the integral is divergent, or too slowly convergent to be integrated   
  numerically. </P></DD></DL>
<HR>
<A name="Numerical-integration-examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-integration-References-and-Further-Reading" 
rel="next">Numerical integration References and Further Reading</A>, Previous: 
<A accessKey="p" href="#Numerical-integration-error-codes" 
rel="previous">Numerical integration error codes</A>, Up: <A accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-10"></A>
<H3 class="section">17.14 Examples</H3>
<P>The integrator <CODE>QAGS</CODE> will handle a large class of definite 
 integrals. For example, consider the following integral, which has an 
 algebraic-logarithmic singularity at the origin, </P>
<DIV class="example"><PRE class="example">\int_0^1 x^{-1/2} log(x) dx = -4
</PRE></DIV>
<P>The program below computes this integral to a relative accuracy bound of 
<CODE>1e-7</CODE>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_integration.h&gt;

double f (double x, void * params) {
  double alpha = *(double *) params;
  double f = log(alpha*x) / sqrt(x);
  return f;
}

int
main (void)
{
  gsl_integration_workspace * w 
    = gsl_integration_workspace_alloc (1000);
  
  double result, error;
  double expected = -4.0;
  double alpha = 1.0;

  gsl_function F;
  F.function = &amp;f;
  F.params = &amp;alpha;

  gsl_integration_qags (&amp;F, 0, 1, 0, 1e-7, 1000,
                        w, &amp;result, &amp;error); 

  printf ("result          = % .18f\n", result);
  printf ("exact result    = % .18f\n", expected);
  printf ("estimated error = % .18f\n", error);
  printf ("actual error    = % .18f\n", result - expected);
  printf ("intervals =  %d\n", w-&gt;size);

  gsl_integration_workspace_free (w);

  return 0;
}
</PRE></DIV>
<P>The results below show that the desired accuracy is achieved after 8 
 subdivisions. </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">result          = -3.999999999999973799
exact result    = -4.000000000000000000
estimated error =  0.000000000000246025
actual error    =  0.000000000000026201
intervals =  8
</PRE></DIV>
<P>In fact, the extrapolation procedure used by <CODE>QAGS</CODE> produces an 
 accuracy of almost twice as many digits. The error estimate returned by the 
 extrapolation procedure is larger than the actual error, giving a margin of 
 safety of one order of magnitude. </P>
<HR>
<A name="Numerical-integration-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Numerical-integration-examples" 
rel="previous">Numerical integration examples</A>, Up: <A accessKey="u" href="#Numerical-Integration" 
rel="up">Numerical Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-11"></A>
<H3 class="section">17.15 References and Further Reading</H3>
<P>The following book is the definitive reference for <SMALL>QUADPACK</SMALL>, 
 and was written by the original authors. It provides descriptions of the 
 algorithms, program listings, test programs and examples. It also includes 
 useful advice on numerical integration and many references to the numerical 
 integration literature used in developing <SMALL>QUADPACK</SMALL>. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->R. Piessens, E. de Doncker-Kapenga, C.W. Ueberhuber, D.K.   
  Kahaner. <CITE><SMALL>QUADPACK</SMALL> A subroutine package for automatic   
  integration</CITE> Springer Verlag, 1983. </LI></UL>
<P>The <SMALL>CQUAD</SMALL> integration algorithm is described in the following 
 paper: </P>
<UL class="no-bullet">
  <LI><!-- /@w -->P. Gonnet, “Increasing the Reliability of Adaptive Quadrature  
   Using Explicit Interpolants”, <CITE>ACM Transactions on Mathematical   
  Software</CITE>, Volume 37 (2010), Issue 3, Article 26. </LI></UL>
<HR>
<A name="Random-Number-Generation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Quasi_002dRandom-Sequences" 
rel="next">Quasi-Random Sequences</A>, Previous: <A accessKey="p" href="#Numerical-Integration" 
rel="previous">Numerical Integration</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Random-Number-Generation-1"></A>
<H2 class="chapter">18 Random Number Generation</H2><A name="index-random-number-generators"></A>
<P>The library provides a large collection of random number generators which can 
 be accessed through a uniform interface. Environment variables allow you to 
 select different generators and seeds at runtime, so that you can easily switch 
 between generators without needing to recompile your program. Each instance of 
a  generator keeps track of its own state, allowing the generators to be used in 
 multi-threaded programs. Additional functions are available for transforming 
 uniform random numbers into samples from continuous or discrete probability 
 distributions such as the Gaussian, log-normal or Poisson distributions. </P>
<P>These functions are declared in the header file <SAMP>gsl_rng.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#General-comments-on-random-numbers">General 
            comments on random numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#The-Random-Number-Generator-Interface">The 
            Random Number Generator Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Random-number-generator-initialization">Random 
            number generator initialization</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Sampling-from-a-random-number-generator">Sampling 
            from a random number generator</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Random-number-environment-variables">Random 
            number environment variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Copying-random-number-generator-state">Copying 
            random number generator state</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Reading-and-writing-random-number-generator-state">Reading 
            and writing random number generator state</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Unix-random-number-generators">Unix 
            random number generators</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Other-random-number-generators">Other 
            random number generators</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Generator-Performance">Random 
            Number Generator Performance</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Generator-Examples">Random 
            Number Generator Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-References-and-Further-Reading">Random 
            Number References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Acknowledgements">Random 
            Number Acknowledgements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="General-comments-on-random-numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Random-Number-Generator-Interface" 
rel="next">The Random Number Generator Interface</A>, Up: <A accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="General-comments-on-random-numbers-1"></A>
<H3 class="section">18.1 General comments on random numbers</H3>
<P>In 1988, Park and Miller wrote a paper entitled “Random number generators: 
 good ones are hard to find.” [Commun. ACM, 31, 1192–1201]. Fortunately, some 
 excellent random number generators are available, though poor ones are still in 
 common use. You may be happy with the system-supplied random number generator 
on  your computer, but you should be aware that as computers get faster, 
 requirements on random number generators increase. Nowadays, a simulation that 
 calls a random number generator millions of times can often finish before you 
 can make it down the hall to the coffee machine and back. </P>
<P>A very nice review of random number generators was written by Pierre 
 L’Ecuyer, as Chapter 4 of the book: Handbook on Simulation, Jerry Banks, ed. 
 (Wiley, 1997). The chapter is available in postscript from L’Ecuyer’s ftp site 
 (see references). Knuth’s volume on Seminumerical Algorithms (originally 
 published in 1968) devotes 170 pages to random number generators, and has 
 recently been updated in its 3rd edition (1997). It is brilliant, a classic. If 
 you don’t own it, you should stop reading right now, run to the nearest 
 bookstore, and buy it. </P>
<P>A good random number generator will satisfy both theoretical and statistical 
 properties. Theoretical properties are often hard to obtain (they require real 
 math!), but one prefers a random number generator with a long period, low 
serial  correlation, and a tendency <EM>not</EM> to “fall mainly on the planes.” 
Statistical tests are performed with numerical simulations. Generally, a random 
 number generator is used to estimate some quantity for which the theory of 
 probability provides an exact answer. Comparison to this exact answer provides 
a  measure of “randomness”. </P>
<HR>
<A name="The-Random-Number-Generator-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-number-generator-initialization" 
rel="next">Random number generator initialization</A>, Previous: <A accessKey="p" 
href="#General-comments-on-random-numbers" 
rel="previous">General comments on random numbers</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Random-Number-Generator-Interface-1"></A>
<H3 class="section">18.2 The Random Number Generator Interface</H3>
<P>It is important to remember that a random number generator is not a “real” 
function like sine or cosine. Unlike real functions, successive calls to a 
 random number generator yield different return values. Of course that is just 
 what you want for a random number generator, but to achieve this effect, the 
 generator must keep track of some kind of “state” variable. Sometimes this 
state  is just an integer (sometimes just the value of the previously generated 
random  number), but often it is more complicated than that and may involve a 
whole  array of numbers, possibly with some indices thrown in. To use the random 
number  generators, you do not need to know the details of what comprises the 
state, and  besides that varies from algorithm to algorithm. </P><A name="index-gsl_005frng_005ftype"></A>
<P>The random number generator library uses two special structs, 
<CODE>gsl_rng_type</CODE> which holds static information about each type of 
 generator and <CODE>gsl_rng</CODE> which describes an instance of a generator 
 created from a given <CODE>gsl_rng_type</CODE>. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_rng.h</SAMP>. </P>
<HR>
<A name="Random-number-generator-initialization"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sampling-from-a-random-number-generator" 
rel="next">Sampling from a random number generator</A>, Previous: <A accessKey="p" 
href="#The-Random-Number-Generator-Interface" 
rel="previous">The Random Number Generator Interface</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Random-number-generator-initialization-1"></A>
<H3 class="section">18.3 Random number generator initialization</H3>
<DL>
  <DT><A name="index-gsl_005frng_005falloc"></A>Function: <EM>gsl_rng 
  *</EM><STRONG>gsl_rng_alloc</STRONG> <EM>(const gsl_rng_type *   
  <VAR>T</VAR>)</EM></DT>
  <DD><A name="index-gsl_005frng"></A>
  <P>This function returns a pointer to a newly-created instance of a random   
  number generator of type <VAR>T</VAR>. For example, the following code creates 
    an instance of the Tausworthe generator, </P>
  <DIV class="example"><PRE class="example">gsl_rng * r = gsl_rng_alloc (gsl_rng_taus);
</PRE></DIV>
  <P>If there is insufficient memory to create the generator then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P><A 
  name="index-gsl_005frng_005fdefault_005fseed"></A><A name="index-GSL_005fRNG_005fSEED-1"></A><A 
  name="index-GSL_005fRNG_005fSEED"></A>
  <P>The generator is automatically initialized with the default seed,   
  <CODE>gsl_rng_default_seed</CODE>. This is zero by default but can be changed  
   either directly or by using the environment variable 
  <CODE>GSL_RNG_SEED</CODE>   (see <A href="#Random-number-environment-variables">Random 
    number environment variables</A>). </P>
  <P>The details of the available generator types are described later in this   
  chapter. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fset"></A>Function: 
  <EM>void</EM><STRONG>gsl_rng_set</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
  unsigned long   int <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function initializes (or ‘seeds’) the random number generator. If the  
   generator is seeded with the same value of <VAR>s</VAR> on two different 
  runs,   the same stream of random numbers will be generated by successive 
  calls to the   routines below. If different values of <EM><VAR>s</VAR> &gt;= 
  1</EM> are   supplied, then the generated streams of random numbers should be 
  completely   different. If the seed <VAR>s</VAR> is zero then the standard 
  seed from the   original implementation is used instead. For example, the 
  original Fortran   source code for the <CODE>ranlux</CODE> generator used a 
  seed of 314159265,   and so choosing <VAR>s</VAR> equal to zero reproduces 
  this when using   <CODE>gsl_rng_ranlux</CODE>. </P>
  <P>When using multiple seeds with the same generator, choose seed values   
  greater than zero to avoid collisions with the default setting. </P>
  <P>Note that the most generators only accept 32-bit seeds, with higher values  
   being reduced modulo <EM>2^32</EM>. For generators with smaller ranges the   
  maximum seed value will typically be lower. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_rng_free</STRONG> <EM>(gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the generator   
  <VAR>r</VAR>. </P></DD></DL>
<HR>
<A name="Sampling-from-a-random-number-generator"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Auxiliary-random-number-generator-functions" 
rel="next">Auxiliary random number generator functions</A>, Previous: <A 
accessKey="p" href="#Random-number-generator-initialization" 
rel="previous">Random number generator initialization</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sampling-from-a-random-number-generator-1"></A>
<H3 class="section">18.4 Sampling from a random number generator</H3>
<P>The following functions return uniformly distributed random numbers, either 
 as integers or double precision floating point numbers. Inline versions of 
these  functions are used when <CODE>HAVE_INLINE</CODE> is defined. To obtain 
 non-uniform distributions see <A href="#Random-Number-Distributions">Random 
 Number Distributions</A>. </P>
<DL>
  <DT><A name="index-gsl_005frng_005fget"></A>Function: <EM>unsigned long 
  int</EM><STRONG>gsl_rng_get</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function returns a random integer from the generator <VAR>r</VAR>. The 
    minimum and maximum values depend on the algorithm used, but all integers in 
    the range [<VAR>min</VAR>,<VAR>max</VAR>] are equally likely. The values of  
   <VAR>min</VAR> and <VAR>max</VAR> can be determined using the auxiliary   
  functions <CODE>gsl_rng_max (r)</CODE> and <CODE>gsl_rng_min (r)</CODE>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005funiform"></A>Function: 
  <EM>double</EM><STRONG>gsl_rng_uniform</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function returns a double precision floating point number uniformly   
  distributed in the range [0,1). The range includes 0.0 but excludes 1.0. The   
  value is typically obtained by dividing the result of   
  <CODE>gsl_rng_get(r)</CODE> by <CODE>gsl_rng_max(r) + 1.0</CODE> in double   
  precision. Some generators compute this ratio internally so that they can   
  provide floating point numbers with more than 32 bits of randomness (the   
  maximum number of bits that can be portably represented in a single   
  <CODE>unsigned long int</CODE>). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005funiform_005fpos"></A>Function:   
  <EM>double</EM> <STRONG>gsl_rng_uniform_pos</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function returns a positive double precision floating point number   
  uniformly distributed in the range (0,1), excluding both 0.0 and 1.0. The   
  number is obtained by sampling the generator with the algorithm of   
  <CODE>gsl_rng_uniform</CODE> until a non-zero value is obtained. You can use   
  this function if you need to avoid a singularity at 0.0. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005funiform_005fint"></A>Function: <EM>unsigned 
    long int</EM> <STRONG>gsl_rng_uniform_int</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, unsigned long int <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns a random integer from 0 to <EM>n-1</EM> inclusive by  
   scaling down and/or discarding samples from the generator <VAR>r</VAR>. All   
  integers in the range <EM>[0,n-1]</EM> are produced with equal probability.   
  For generators with a non-zero minimum value an offset is applied so that zero 
    is returned with the correct probability. </P>
  <P>Note that this function is designed for sampling from ranges smaller than   
  the range of the underlying generator. The parameter <VAR>n</VAR> must be less 
    than or equal to the range of the generator <VAR>r</VAR>. If <VAR>n</VAR> is 
    larger than the range of the generator then the function calls the error   
  handler with an error code of <CODE>GSL_EINVAL</CODE> and returns zero. </P>
  <P>In particular, this function is not intended for generating the full range  
   of unsigned integer values <EM>[0,2^32-1]</EM>. Instead choose a generator   
  with the maximal integer range and zero minimum value, such as   
  <CODE>gsl_rng_ranlxd1</CODE>, <CODE>gsl_rng_mt19937</CODE> or   
  <CODE>gsl_rng_taus</CODE>, and sample it directly using   
  <CODE>gsl_rng_get</CODE>. The range of each generator can be found using the   
  auxiliary functions described in the next section. </P></DD></DL>
<HR>
<A name="Auxiliary-random-number-generator-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-number-environment-variables" 
rel="next">Random number environment variables</A>, Previous: <A accessKey="p" 
href="#Sampling-from-a-random-number-generator" 
rel="previous">Sampling from a random number generator</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Auxiliary-random-number-generator-functions-1"></A>
<H3 class="section">18.5 Auxiliary random number generator functions</H3>
<P>The following functions provide information about an existing generator. You 
 should use them in preference to hard-coding the generator parameters into your 
 own code. </P>
<DL>
  <DT><A name="index-gsl_005frng_005fname"></A>Function: <EM>const char 
  *</EM><STRONG>gsl_rng_name</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the generator. For example,  
   </P>
  <DIV class="example"><PRE class="example">printf ("r is a '%s' generator\n", 
        gsl_rng_name (r));
</PRE></DIV>
  <P>would print something like <CODE>r is a 'taus' generator</CODE>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fmax"></A>Function: <EM>unsigned long 
  int</EM><STRONG>gsl_rng_max</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P><CODE>gsl_rng_max</CODE> returns the largest value that   
  <CODE>gsl_rng_get</CODE> can return. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fmin"></A>Function: <EM>unsigned long 
  int</EM><STRONG>gsl_rng_min</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P><CODE>gsl_rng_min</CODE> returns the smallest value that   
  <CODE>gsl_rng_get</CODE> can return. Usually this value is zero. There are   
  some generators with algorithms that cannot return zero, and for these   
  generators the minimum value is 1. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fstate"></A>Function: <EM>void 
  *</EM><STRONG>gsl_rng_state</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DT><A name="index-gsl_005frng_005fsize"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_rng_size</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the state of generator <VAR>r</VAR> and 
    its size. You can use this information to access the state directly. For   
  example, the following code will write the state of a generator to a stream,   
  </P>
  <DIV class="example"><PRE class="example">void * state = gsl_rng_state (r);
size_t n = gsl_rng_size (r);
fwrite (state, n, 1, stream);
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ftypes_005fsetup"></A>Function: <EM>const   
  gsl_rng_type **</EM> <STRONG>gsl_rng_types_setup</STRONG> <EM>(void)</EM></DT>
  <DD>
  <P>This function returns a pointer to an array of all the available generator  
   types, terminated by a null pointer. The function should be called once at 
  the   start of the program, if needed. The following code fragment shows how 
  to   iterate over the array of generator types to print the names of the 
  available   algorithms, </P>
  <DIV class="example"><PRE class="example">const gsl_rng_type **t, **t0;

t0 = gsl_rng_types_setup ();

printf ("Available generators:\n");

for (t = t0; *t != 0; t++)
  {
    printf ("%s\n", (*t)-&gt;name);
  }
</PRE></DIV></DD></DL>
<HR>
<A name="Random-number-environment-variables"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-random-number-generator-state" 
rel="next">Copying random number generator state</A>, Previous: <A accessKey="p" 
href="#Auxiliary-random-number-generator-functions" 
rel="previous">Auxiliary random number generator functions</A>, Up: <A 
accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Random-number-environment-variables-1"></A>
<H3 class="section">18.6 Random number environment variables</H3>
<P>The library allows you to choose a default generator and seed from the 
 environment variables <CODE>GSL_RNG_TYPE</CODE> and <CODE>GSL_RNG_SEED</CODE> 
 and the function <CODE>gsl_rng_env_setup</CODE>. This makes it easy try out 
 different generators and seeds without having to recompile your program. </P>
<DL>
  <DT><A name="index-gsl_005frng_005fenv_005fsetup"></A>Function: <EM>const   
  gsl_rng_type *</EM> <STRONG>gsl_rng_env_setup</STRONG> <EM>(void)</EM></DT>
  <DD><A name="index-GSL_005fRNG_005fTYPE"></A><A name="index-GSL_005fRNG_005fSEED-2"></A><A 
  name="index-gsl_005frng_005fdefault"></A><A name="index-gsl_005frng_005fdefault_005fseed-1"></A>
  <P>This function reads the environment variables <CODE>GSL_RNG_TYPE</CODE> and 
    <CODE>GSL_RNG_SEED</CODE> and uses their values to set the corresponding   
  library variables <CODE>gsl_rng_default</CODE> and   
  <CODE>gsl_rng_default_seed</CODE>. These global variables are defined as   
  follows, </P>
  <DIV class="example"><PRE class="example">extern const gsl_rng_type *gsl_rng_default
extern unsigned long int gsl_rng_default_seed
</PRE></DIV>
  <P>The environment variable <CODE>GSL_RNG_TYPE</CODE> should be the name of a  
   generator, such as <CODE>taus</CODE> or <CODE>mt19937</CODE>. The environment 
    variable <CODE>GSL_RNG_SEED</CODE> should contain the desired seed value. It 
    is converted to an <CODE>unsigned long int</CODE> using the C library 
  function   <CODE>strtoul</CODE>. </P>
  <P>If you don’t specify a generator for <CODE>GSL_RNG_TYPE</CODE> then   
  <CODE>gsl_rng_mt19937</CODE> is used as the default. The initial value of   
  <CODE>gsl_rng_default_seed</CODE> is zero. </P></DD></DL>
<P>Here is a short program which shows how to create a global generator using 
 the environment variables <CODE>GSL_RNG_TYPE</CODE> and 
<CODE>GSL_RNG_SEED</CODE>, </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;

gsl_rng * r;  /* global generator */

int
main (void)
{
  const gsl_rng_type * T;

  gsl_rng_env_setup();

  T = gsl_rng_default;
  r = gsl_rng_alloc (T);
  
  printf ("generator type: %s\n", gsl_rng_name (r));
  printf ("seed = %lu\n", gsl_rng_default_seed);
  printf ("first value = %lu\n", gsl_rng_get (r));

  gsl_rng_free (r);
  return 0;
}
</PRE></DIV>
<P>Running the program without any environment variables uses the initial 
 defaults, an <CODE>mt19937</CODE> generator with a seed of 0, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">generator type: mt19937
seed = 0
first value = 4293858116
</PRE></DIV>
<P>By setting the two variables on the command line we can change the default 
 generator and the seed, </P>
<DIV class="example"><PRE class="example">$ GSL_RNG_TYPE="taus" GSL_RNG_SEED=123 ./a.out 
GSL_RNG_TYPE=taus
GSL_RNG_SEED=123
generator type: taus
seed = 123
first value = 2720986350
</PRE></DIV>
<HR>
<A name="Copying-random-number-generator-state"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-random-number-generator-state" 
rel="next">Reading and writing random number generator state</A>, Previous: <A 
accessKey="p" href="#Random-number-environment-variables" 
rel="previous">Random number environment variables</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-random-number-generator-state-1"></A>
<H3 class="section">18.7 Copying random number generator state</H3>
<P>The above methods do not expose the random number ‘state’ which changes from 
 call to call. It is often useful to be able to save and restore the state. To 
 permit these practices, a few somewhat more advanced functions are supplied. 
 These include: </P>
<DL>
  <DT><A name="index-gsl_005frng_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_rng_memcpy</STRONG> <EM>(gsl_rng * <VAR>dest</VAR>, 
  const gsl_rng   * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the random number generator <VAR>src</VAR> into the   
  pre-existing generator <VAR>dest</VAR>, making <VAR>dest</VAR> into an exact   
  copy of <VAR>src</VAR>. The two generators must be of the same type. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fclone"></A>Function: <EM>gsl_rng 
  *</EM><STRONG>gsl_rng_clone</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to a newly created generator which is an   
  exact copy of the generator <VAR>r</VAR>. </P></DD></DL>
<HR>
<A name="Reading-and-writing-random-number-generator-state"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-number-generator-algorithms" 
rel="next">Random number generator algorithms</A>, Previous: <A accessKey="p" 
href="#Copying-random-number-generator-state" 
rel="previous">Copying random number generator state</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-and-writing-random-number-generator-state-1"></A>
<H3 class="section">18.8 Reading and writing random number generator state</H3>
<P>The library provides functions for reading and writing the random number 
 state to a file as binary data. </P>
<DL>
  <DT><A name="index-gsl_005frng_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_rng_fwrite</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  const gsl_rng *   <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function writes the random number state of the random number generator 
    <VAR>r</VAR> to the stream <VAR>stream</VAR> in binary format. The return   
  value is 0 for success and <CODE>GSL_EFAILED</CODE> if there was a problem   
  writing to the file. Since the data is written in the native binary format it  
   may not be portable between different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_rng_fread</STRONG> <EM>(FILE * <VAR>stream</VAR>, 
  gsl_rng *   <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function reads the random number state into the random number   
  generator <VAR>r</VAR> from the open stream <VAR>stream</VAR> in binary   
  format. The random number generator <VAR>r</VAR> must be preinitialized with   
  the correct random number generator type since type information is not saved.  
   The return value is 0 for success and <CODE>GSL_EFAILED</CODE> if there was a 
    problem reading from the file. The data is assumed to have been written in 
  the   native binary format on the same architecture. </P></DD></DL>
<HR>
<A name="Random-number-generator-algorithms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Unix-random-number-generators" 
rel="next">Unix random number generators</A>, Previous: <A accessKey="p" href="#Reading-and-writing-random-number-generator-state" 
rel="previous">Reading and writing random number generator state</A>, Up: <A 
accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Random-number-generator-algorithms-1"></A>
<H3 class="section">18.9 Random number generator algorithms</H3>
<P>The functions described above make no reference to the actual algorithm used. 
 This is deliberate so that you can switch algorithms without having to change 
 any of your application source code. The library provides a large number of 
 generators of different types, including simulation quality generators, 
 generators provided for compatibility with other libraries and historical 
 generators from the past. </P>
<P>The following generators are recommended for use in simulation. They have 
 extremely long periods, low correlation and pass most statistical tests. For 
the  most reliable source of uncorrelated numbers, the second-generation 
<SMALL>RANLUX</SMALL> generators have the strongest proof of randomness. </P>
<DL>
  <DT><A name="index-gsl_005frng_005fmt19937"></A>Generator:   
  <STRONG>gsl_rng_mt19937</STRONG></DT>
  <DD><A name="index-MT19937-random-number-generator"></A>
  <P>The MT19937 generator of Makoto Matsumoto and Takuji Nishimura is a variant 
    of the twisted generalized feedback shift-register algorithm, and is known 
  as   the “Mersenne Twister” generator. It has a Mersenne prime period of   
  <EM>2^19937 - 1</EM> (about <EM>10^6000</EM>) and is equi-distributed in 623   
  dimensions. It has passed the <SMALL>DIEHARD</SMALL> statistical tests. It   
  uses 624 words of state per generator and is comparable in speed to the other  
   generators. The original generator used a default seed of 4357 and choosing   
  <VAR>s</VAR> equal to zero in <CODE>gsl_rng_set</CODE> reproduces this. Later  
   versions switched to 5489 as the default seed, you can choose this explicitly 
    via <CODE>gsl_rng_set</CODE> instead if you require it. </P>
  <P>For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->Makoto Matsumoto and Takuji Nishimura, “Mersenne Twister: A  
       623-dimensionally equidistributed uniform pseudorandom number generator”. 
        <CITE>ACM Transactions on Modeling and Computer Simulation</CITE>, Vol. 
    8,     No. 1 (Jan. 1998), Pages 3–30 </LI></UL>
  <P>The generator <CODE>gsl_rng_mt19937</CODE> uses the second revision of the  
   seeding procedure published by the two authors above in 2002. The original   
  seeding procedures could cause spurious artifacts for some seed values. They   
  are still available through the alternative generators   
  <CODE>gsl_rng_mt19937_1999</CODE> and <CODE>gsl_rng_mt19937_1998</CODE>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005franlxs0"></A>Generator:   
  <STRONG>gsl_rng_ranlxs0</STRONG></DT>
  <DT><A name="index-gsl_005frng_005franlxs1"></A>Generator:   
  <STRONG>gsl_rng_ranlxs1</STRONG></DT>
  <DT><A name="index-gsl_005frng_005franlxs2"></A>Generator:   
  <STRONG>gsl_rng_ranlxs2</STRONG></DT>
  <DD><A name="index-RANLXS-random-number-generator"></A>
  <P>The generator <CODE>ranlxs0</CODE> is a second-generation version of the   
  <SMALL>RANLUX</SMALL> algorithm of Lüscher, which produces “luxury random   
  numbers”. This generator provides single precision output (24 bits) at three   
  luxury levels <CODE>ranlxs0</CODE>, <CODE>ranlxs1</CODE> and   
  <CODE>ranlxs2</CODE>, in increasing order of strength. It uses   
  double-precision floating point arithmetic internally and can be significantly 
    faster than the integer version of <CODE>ranlux</CODE>, particularly on 
  64-bit   architectures. The period of the generator is about <EM>10^171</EM>. 
  The   algorithm has mathematically proven properties and can provide truly   
  decorrelated numbers at a known level of randomness. The higher luxury levels  
   provide increased decorrelation between samples as an additional safety   
  margin. </P>
  <P>Note that the range of allowed seeds for this generator is   
  <EM>[0,2^31-1]</EM>. Higher seed values are wrapped modulo <EM>2^31</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005franlxd1"></A>Generator:   
  <STRONG>gsl_rng_ranlxd1</STRONG></DT>
  <DT><A name="index-gsl_005frng_005franlxd2"></A>Generator:   
  <STRONG>gsl_rng_ranlxd2</STRONG></DT>
  <DD><A name="index-RANLXD-random-number-generator"></A>
  <P>These generators produce double precision output (48 bits) from the   
  <SMALL>RANLXS</SMALL> generator. The library provides two luxury levels   
  <CODE>ranlxd1</CODE> and <CODE>ranlxd2</CODE>, in increasing order of   
  strength. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005franlux"></A>Generator:   
  <STRONG>gsl_rng_ranlux</STRONG></DT>
  <DT><A name="index-gsl_005frng_005franlux389"></A>Generator:   
  <STRONG>gsl_rng_ranlux389</STRONG></DT>
  <DD><A name="index-RANLUX-random-number-generator"></A>
  <P>The <CODE>ranlux</CODE> generator is an implementation of the original   
  algorithm developed by Lüscher. It uses a lagged-fibonacci-with-skipping   
  algorithm to produce “luxury random numbers”. It is a 24-bit generator,   
  originally designed for single-precision IEEE floating point numbers. This   
  implementation is based on integer arithmetic, while the second-generation   
  versions <SMALL>RANLXS</SMALL> and <SMALL>RANLXD</SMALL> described above   
  provide floating-point implementations which will be faster on many platforms. 
    The period of the generator is about <EM>10^171</EM>. The algorithm has   
  mathematically proven properties and it can provide truly decorrelated numbers 
    at a known level of randomness. The default level of decorrelation 
  recommended   by Lüscher is provided by <CODE>gsl_rng_ranlux</CODE>, while   
  <CODE>gsl_rng_ranlux389</CODE> gives the highest level of randomness, with all 
    24 bits decorrelated. Both types of generator use 24 words of state per   
  generator. </P>
  <P>For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->M. Lüscher, “A portable high-quality random number generator 
        for lattice field theory calculations”, <CITE>Computer Physics     
    Communications</CITE>, 79 (1994) 100–110. </LI>
    <LI><!-- /@w -->F. James, “RANLUX: A Fortran implementation of the     
    high-quality pseudo-random number generator of Lüscher”, <CITE>Computer     
    Physics Communications</CITE>, 79 (1994) 111–114 </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fcmrg"></A>Generator:   
  <STRONG>gsl_rng_cmrg</STRONG></DT>
  <DD><A name="index-CMRG_002c-combined-multiple-recursive-random-number-generator"></A>
  <P>This is a combined multiple recursive generator by L’Ecuyer. Its sequence   
  is, </P>
  <DIV class="example"><PRE class="example">z_n = (x_n - y_n) mod m_1
</PRE></DIV>
  <P>where the two underlying generators <EM>x_n</EM> and <EM>y_n</EM> are, </P>
  <DIV class="example"><PRE class="example">x_n = (a_1 x_{n-1} + a_2 x_{n-2} + a_3 x_{n-3}) mod m_1
y_n = (b_1 y_{n-1} + b_2 y_{n-2} + b_3 y_{n-3}) mod m_2
</PRE></DIV>
  <P>with coefficients <EM>a_1 = 0</EM>, <EM>a_2 = 63308</EM>, <EM>a_3 =   
  -183326</EM>, <EM>b_1 = 86098</EM>, <EM>b_2 = 0</EM>, <EM>b_3 = -539608</EM>,  
   and moduli <EM>m_1 = 2^31 - 1 = 2147483647</EM> and <EM>m_2 = 
  2145483479</EM>.   </P>
  <P>The period of this generator is <EM>lcm(m_1^3-1, m_2^3-1)</EM>, which is   
  approximately <EM>2^185</EM> (about <EM>10^56</EM>). It uses 6 words of state  
   per generator. For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->P. L’Ecuyer, “Combined Multiple Recursive Random Number     
    Generators”, <CITE>Operations Research</CITE>, 44, 5 (1996), 816–822.   
  </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fmrg"></A>Generator:   
  <STRONG>gsl_rng_mrg</STRONG></DT>
  <DD><A name="index-MRG_002c-multiple-recursive-random-number-generator"></A>
  <P>This is a fifth-order multiple recursive generator by L’Ecuyer, Blouin and  
   Coutre. Its sequence is, </P>
  <DIV class="example"><PRE class="example">x_n = (a_1 x_{n-1} + a_5 x_{n-5}) mod m
</PRE></DIV>
  <P>with <EM>a_1 = 107374182</EM>, <EM>a_2 = a_3 = a_4 = 0</EM>, <EM>a_5 =   
  104480</EM> and <EM>m = 2^31 - 1</EM>. </P>
  <P>The period of this generator is about <EM>10^46</EM>. It uses 5 words of   
  state per generator. More information can be found in the following paper, 
</P>
  <UL class="no-bullet">
    <LI><!-- /@w -->P. L’Ecuyer, F. Blouin, and R. Coutre, “A search for good    
     multiple recursive random number generators”, <CITE>ACM Transactions on     
    Modeling and Computer Simulation</CITE> 3, 87–98 (1993). </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ftaus"></A>Generator:   
  <STRONG>gsl_rng_taus</STRONG></DT>
  <DT><A name="index-gsl_005frng_005ftaus2"></A>Generator:   
  <STRONG>gsl_rng_taus2</STRONG></DT>
  <DD><A name="index-Tausworthe-random-number-generator"></A>
  <P>This is a maximally equidistributed combined Tausworthe generator by   
  L’Ecuyer. The sequence is, </P>
  <DIV class="example"><PRE class="example">x_n = (s1_n ^^ s2_n ^^ s3_n) 
</PRE></DIV>
  <P>where, </P>
  <DIV class="example"><PRE class="example">s1_{n+1} = (((s1_n&amp;4294967294)&lt;&lt;12)^^(((s1_n&lt;&lt;13)^^s1_n)&gt;&gt;19))
s2_{n+1} = (((s2_n&amp;4294967288)&lt;&lt; 4)^^(((s2_n&lt;&lt; 2)^^s2_n)&gt;&gt;25))
s3_{n+1} = (((s3_n&amp;4294967280)&lt;&lt;17)^^(((s3_n&lt;&lt; 3)^^s3_n)&gt;&gt;11))
</PRE></DIV>
  <P>computed modulo <EM>2^32</EM>. In the formulas above <EM>^^</EM> denotes   
  “exclusive-or”. Note that the algorithm relies on the properties of 32-bit   
  unsigned integers and has been implemented using a bitmask of   
  <CODE>0xFFFFFFFF</CODE> to make it work on 64 bit machines. </P>
  <P>The period of this generator is <EM>2^88</EM> (about <EM>10^26</EM>). It   
  uses 3 words of state per generator. For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->P. L’Ecuyer, “Maximally Equidistributed Combined Tausworthe  
       Generators”, <CITE>Mathematics of Computation</CITE>, 65, 213 (1996),     
    203–213. </LI></UL>
  <P>The generator <CODE>gsl_rng_taus2</CODE> uses the same algorithm as   
  <CODE>gsl_rng_taus</CODE> but with an improved seeding procedure described in  
   the paper, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->P. L’Ecuyer, “Tables of Maximally Equidistributed Combined   
      LFSR Generators”, <CITE>Mathematics of Computation</CITE>, 68, 225 (1999), 
        261–269 </LI></UL>
  <P>The generator <CODE>gsl_rng_taus2</CODE> should now be used in preference   
  to <CODE>gsl_rng_taus</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fgfsr4"></A>Generator:   
  <STRONG>gsl_rng_gfsr4</STRONG></DT>
  <DD><A name="index-Four_002dtap-Generalized-Feedback-Shift-Register"></A>
  <P>The <CODE>gfsr4</CODE> generator is like a lagged-fibonacci generator, and  
   produces each number as an <CODE>xor</CODE>’d sum of four previous values. 
  </P>
  <DIV class="example"><PRE class="example">r_n = r_{n-A} ^^ r_{n-B} ^^ r_{n-C} ^^ r_{n-D}
</PRE></DIV>
  <P>Ziff (ref below) notes that “it is now widely known” that two-tap registers 
    (such as R250, which is described below) have serious flaws, the most 
  obvious   one being the three-point correlation that comes from the definition 
  of the   generator. Nice mathematical properties can be derived for GFSR’s, 
  and   numerics bears out the claim that 4-tap GFSR’s with appropriately chosen 
    offsets are as random as can be measured, using the author’s test. </P>
  <P>This implementation uses the values suggested the example on p392 of Ziff’s 
    article: <EM>A=471</EM>, <EM>B=1586</EM>, <EM>C=6988</EM>, <EM>D=9689</EM>.  
   </P>
  <P>If the offsets are appropriately chosen (such as the one ones in this   
  implementation), then the sequence is said to be maximal; that means that the  
   period is <EM>2^D - 1</EM>, where <EM>D</EM> is the longest lag. (It is one   
  less than <EM>2^D</EM> because it is not permitted to have all zeros in the   
  <CODE>ra[]</CODE> array.) For this implementation with <EM>D=9689</EM> that   
  works out to about <EM>10^2917</EM>. </P>
  <P>Note that the implementation of this generator using a 32-bit integer   
  amounts to 32 parallel implementations of one-bit generators. One consequence  
   of this is that the period of this 32-bit generator is the same as for the   
  one-bit generator. Moreover, this independence means that all 32-bit patterns  
   are equally likely, and in particular that 0 is an allowed random value. (We  
   are grateful to Heiko Bauke for clarifying for us these properties of GFSR   
  random number generators.) </P>
  <P>For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->Robert M. Ziff, “Four-tap shift-register-sequence     
    random-number generators”, <CITE>Computers in Physics</CITE>, 12(4), Jul/Aug 
        1998, pp 385–392. </LI></UL></DD></DL>
<HR>
<A name="Unix-random-number-generators"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Other-random-number-generators" 
rel="next">Other random number generators</A>, Previous: <A accessKey="p" href="#Random-number-generator-algorithms" 
rel="previous">Random number generator algorithms</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Unix-random-number-generators-1"></A>
<H3 class="section">18.10 Unix random number generators</H3>
<P>The standard Unix random number generators <CODE>rand</CODE>, 
<CODE>random</CODE> and <CODE>rand48</CODE> are provided as part of GSL. 
 Although these generators are widely available individually often they aren’t 
 all available on the same platform. This makes it difficult to write portable 
 code using them and so we have included the complete set of Unix generators in 
 GSL for convenience. Note that these generators don’t produce high-quality 
 randomness and aren’t suitable for work requiring accurate statistics. However, 
 if you won’t be measuring statistical quantities and just want to introduce 
some  variation into your program then these generators are quite acceptable. 
</P><A name="index-rand_002c-BSD-random-number-generator"></A><A name="index-Unix-random-number-generators_002c-rand"></A><A 
name="index-Unix-random-number-generators_002c-rand48"></A>
<DL>
  <DT><A name="index-gsl_005frng_005frand"></A>Generator:   
  <STRONG>gsl_rng_rand</STRONG></DT>
  <DD><A name="index-BSD-random-number-generator"></A>
  <P>This is the BSD <CODE>rand</CODE> generator. Its sequence is </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n + c) mod m
</PRE></DIV>
  <P>with <EM>a = 1103515245</EM>, <EM>c = 12345</EM> and <EM>m = 2^31</EM>. The 
    seed specifies the initial value, <EM>x_1</EM>. The period of this generator 
    is <EM>2^31</EM>, and it uses 1 word of storage per generator. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005frandom_005fbsd"></A>Generator:   
  <STRONG>gsl_rng_random_bsd</STRONG></DT>
  <DT><A name="index-gsl_005frng_005frandom_005flibc5"></A>Generator:   
  <STRONG>gsl_rng_random_libc5</STRONG></DT>
  <DT><A name="index-gsl_005frng_005frandom_005fglibc2"></A>Generator:   
  <STRONG>gsl_rng_random_glibc2</STRONG></DT>
  <DD>
  <P>These generators implement the <CODE>random</CODE> family of functions, a   
  set of linear feedback shift register generators originally used in BSD Unix.  
   There are several versions of <CODE>random</CODE> in use today: the original  
   BSD version (e.g. on SunOS4), a libc5 version (found on older GNU/Linux   
  systems) and a glibc2 version. Each version uses a different seeding   
  procedure, and thus produces different sequences. </P>
  <P>The original BSD routines accepted a variable length buffer for the   
  generator state, with longer buffers providing higher-quality randomness. The  
   <CODE>random</CODE> function implemented algorithms for buffer lengths of 8,  
   32, 64, 128 and 256 bytes, and the algorithm with the largest length that   
  would fit into the user-supplied buffer was used. To support these algorithms  
   additional generators are available with the following names, </P>
  <DIV class="example"><PRE class="example">gsl_rng_random8_bsd
gsl_rng_random32_bsd
gsl_rng_random64_bsd
gsl_rng_random128_bsd
gsl_rng_random256_bsd
</PRE></DIV>
  <P>where the numeric suffix indicates the buffer length. The original BSD   
  <CODE>random</CODE> function used a 128-byte default buffer and so   
  <CODE>gsl_rng_random_bsd</CODE> has been made equivalent to   
  <CODE>gsl_rng_random128_bsd</CODE>. Corresponding versions of the   
  <CODE>libc5</CODE> and <CODE>glibc2</CODE> generators are also available, with 
    the names <CODE>gsl_rng_random8_libc5</CODE>,   
  <CODE>gsl_rng_random8_glibc2</CODE>, etc. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005frand48"></A>Generator:   
  <STRONG>gsl_rng_rand48</STRONG></DT>
  <DD><A name="index-rand48-random-number-generator"></A>
  <P>This is the Unix <CODE>rand48</CODE> generator. Its sequence is </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n + c) mod m
</PRE></DIV>
  <P>defined on 48-bit unsigned integers with <EM>a = 25214903917</EM>, <EM>c =  
   11</EM> and <EM>m = 2^48</EM>. The seed specifies the upper 32 bits of the   
  initial value, <EM>x_1</EM>, with the lower 16 bits set to   
  <CODE>0x330E</CODE>. The function <CODE>gsl_rng_get</CODE> returns the upper   
  32 bits from each term of the sequence. This does not have a direct parallel   
  in the original <CODE>rand48</CODE> functions, but forcing the result to type  
   <CODE>long int</CODE> reproduces the output of <CODE>mrand48</CODE>. The   
  function <CODE>gsl_rng_uniform</CODE> uses the full 48 bits of internal state  
   to return the double precision number <EM>x_n/m</EM>, which is equivalent to  
   the function <CODE>drand48</CODE>. Note that some versions of the GNU C   
  Library contained a bug in <CODE>mrand48</CODE> function which caused it to   
  produce different results (only the lower 16-bits of the return value were   
  set). </P></DD></DL>
<HR>
<A name="Other-random-number-generators"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Generator-Performance" 
rel="next">Random Number Generator Performance</A>, Previous: <A accessKey="p" 
href="#Unix-random-number-generators" 
rel="previous">Unix random number generators</A>, Up: <A accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Other-random-number-generators-1"></A>
<H3 class="section">18.11 Other random number generators</H3>
<P>The generators in this section are provided for compatibility with existing 
 libraries. If you are converting an existing program to use GSL then you can 
 select these generators to check your new implementation against the original 
 one, using the same random number generator. After verifying that your new 
 program reproduces the original results you can then switch to a higher-quality 
 generator. </P>
<P>Note that most of the generators in this section are based on single linear 
 congruence relations, which are the least sophisticated type of generator. In 
 particular, linear congruences have poor properties when used with a non-prime 
 modulus, as several of these routines do (e.g. with a power of two modulus, 
<EM>2^31</EM> or <EM>2^32</EM>). This leads to periodicity in the least 
 significant bits of each number, with only the higher bits having any 
 randomness. Thus if you want to produce a random bitstream it is best to avoid 
 using the least significant bits. </P>
<DL>
  <DT><A name="index-gsl_005frng_005franf"></A>Generator:   
  <STRONG>gsl_rng_ranf</STRONG></DT>
  <DD><A name="index-RANF-random-number-generator"></A><A name="index-CRAY-random-number-generator_002c-RANF"></A>
  <P>This is the CRAY random number generator <CODE>RANF</CODE>. Its sequence is 
    </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n) mod m
</PRE></DIV>
  <P>defined on 48-bit unsigned integers with <EM>a = 44485709377909</EM> and   
  <EM>m = 2^48</EM>. The seed specifies the lower 32 bits of the initial value,  
   <EM>x_1</EM>, with the lowest bit set to prevent the seed taking an even   
  value. The upper 16 bits of <EM>x_1</EM> are set to 0. A consequence of this   
  procedure is that the pairs of seeds 2 and 3, 4 and 5, etc. produce the same   
  sequences. </P>
  <P>The generator compatible with the CRAY MATHLIB routine RANF. It produces   
  double precision floating point numbers which should be identical to those   
  from the original RANF. </P>
  <P>There is a subtlety in the implementation of the seeding. The initial state 
    is reversed through one step, by multiplying by the modular inverse of   
  <EM>a</EM> mod <EM>m</EM>. This is done for compatibility with the original   
  CRAY implementation. </P>
  <P>Note that you can only seed the generator with integers up to   
  <EM>2^32</EM>, while the original CRAY implementation uses non-portable wide   
  integers which can cover all <EM>2^48</EM> states of the generator. </P>
  <P>The function <CODE>gsl_rng_get</CODE> returns the upper 32 bits from each   
  term of the sequence. The function <CODE>gsl_rng_uniform</CODE> uses the full  
   48 bits to return the double precision number <EM>x_n/m</EM>. </P>
  <P>The period of this generator is <EM>2^46</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005franmar"></A>Generator:   
  <STRONG>gsl_rng_ranmar</STRONG></DT>
  <DD><A name="index-RANMAR-random-number-generator"></A>
  <P>This is the RANMAR lagged-fibonacci generator of Marsaglia, Zaman and   
  Tsang. It is a 24-bit generator, originally designed for single-precision IEEE 
    floating point numbers. It was included in the CERNLIB high-energy physics   
  library. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fr250"></A>Generator:   
  <STRONG>gsl_rng_r250</STRONG></DT>
  <DD><A name="index-shift_002dregister-random-number-generator"></A><A name="index-R250-shift_002dregister-random-number-generator"></A>
  <P>This is the shift-register generator of Kirkpatrick and Stoll. The sequence 
    is based on the recurrence </P>
  <DIV class="example"><PRE class="example">x_n = x_{n-103} ^^ x_{n-250}
</PRE></DIV>
  <P>where <EM>^^</EM> denotes “exclusive-or”, defined on 32-bit words. The   
  period of this generator is about <EM>2^250</EM> and it uses 250 words of   
  state per generator. </P>
  <P>For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->S. Kirkpatrick and E. Stoll, “A very fast shift-register     
    sequence random number generator”, <CITE>Journal of Computational     
    Physics</CITE>, 40, 517–526 (1981) </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ftt800"></A>Generator:   
  <STRONG>gsl_rng_tt800</STRONG></DT>
  <DD><A name="index-TT800-random-number-generator"></A>
  <P>This is an earlier version of the twisted generalized feedback   
  shift-register generator, and has been superseded by the development of   
  MT19937. However, it is still an acceptable generator in its own right. It has 
    a period of <EM>2^800</EM> and uses 33 words of storage per generator. </P>
  <P>For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->Makoto Matsumoto and Yoshiharu Kurita, “Twisted GFSR     
    Generators II”, <CITE>ACM Transactions on Modelling and Computer     
    Simulation</CITE>, Vol. 4, No. 3, 1994, pages 254–266. </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fvax"></A>Generator:   
  <STRONG>gsl_rng_vax</STRONG></DT>
  <DD><A name="index-VAX-random-number-generator"></A>
  <P>This is the VAX generator <CODE>MTH$RANDOM</CODE>. Its sequence is, </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n + c) mod m
</PRE></DIV>
  <P>with <EM>a = 69069</EM>, <EM>c = 1</EM> and <EM>m = 2^32</EM>. The seed   
  specifies the initial value, <EM>x_1</EM>. The period of this generator is   
  <EM>2^32</EM> and it uses 1 word of storage per generator. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ftransputer"></A>Generator:   
  <STRONG>gsl_rng_transputer</STRONG></DT>
  <DD>
  <P>This is the random number generator from the INMOS Transputer Development   
  system. Its sequence is, </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n) mod m
</PRE></DIV>
  <P>with <EM>a = 1664525</EM> and <EM>m = 2^32</EM>. The seed specifies the   
  initial value, <EM>x_1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005frandu"></A>Generator:   
  <STRONG>gsl_rng_randu</STRONG></DT>
  <DD><A name="index-RANDU-random-number-generator"></A>
  <P>This is the IBM <CODE>RANDU</CODE> generator. Its sequence is </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n) mod m
</PRE></DIV>
  <P>with <EM>a = 65539</EM> and <EM>m = 2^31</EM>. The seed specifies the   
  initial value, <EM>x_1</EM>. The period of this generator was only   
  <EM>2^29</EM>. It has become a textbook example of a poor generator. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fminstd"></A>Generator:   
  <STRONG>gsl_rng_minstd</STRONG></DT>
  <DD><A name="index-RANMAR-random-number-generator-1"></A>
  <P>This is Park and Miller’s “minimal standard” <SMALL>MINSTD</SMALL>   
  generator, a simple linear congruence which takes care to avoid the major   
  pitfalls of such algorithms. Its sequence is, </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n) mod m
</PRE></DIV>
  <P>with <EM>a = 16807</EM> and <EM>m = 2^31 - 1 = 2147483647</EM>. The seed   
  specifies the initial value, <EM>x_1</EM>. The period of this generator is   
  about <EM>2^31</EM>. </P>
  <P>This generator was used in the IMSL Library (subroutine RNUN) and in MATLAB 
    (the RAND function) in the past. It is also sometimes known by the acronym   
  “GGL” (I’m not sure what that stands for). </P>
  <P>For more information see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->Park and Miller, “Random Number Generators: Good ones are    
     hard to find”, <CITE>Communications of the ACM</CITE>, October 1988, Volume 
        31, No 10, pages 1192–1201. </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005funi"></A>Generator:   
  <STRONG>gsl_rng_uni</STRONG></DT>
  <DT><A name="index-gsl_005frng_005funi32"></A>Generator:   
  <STRONG>gsl_rng_uni32</STRONG></DT>
  <DD>
  <P>This is a reimplementation of the 16-bit SLATEC random number generator   
  RUNIF. A generalization of the generator to 32 bits is provided by   
  <CODE>gsl_rng_uni32</CODE>. The original source code is available from NETLIB. 
    </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fslatec"></A>Generator:   
  <STRONG>gsl_rng_slatec</STRONG></DT>
  <DD>
  <P>This is the SLATEC random number generator RAND. It is ancient. The   
  original source code is available from NETLIB. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fzuf"></A>Generator:   
  <STRONG>gsl_rng_zuf</STRONG></DT>
  <DD>
  <P>This is the ZUFALL lagged Fibonacci series generator of Peterson. Its   
  sequence is, </P>
  <DIV class="example"><PRE class="example">t = u_{n-273} + u_{n-607}
u_n  = t - floor(t)
</PRE></DIV>
  <P>The original source code is available from NETLIB. For more information   
  see, </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->W. Petersen, “Lagged Fibonacci Random Number Generators for  
       the NEC SX-3”, <CITE>International Journal of High Speed Computing</CITE> 
        (1994). </LI></UL></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fknuthran2"></A>Generator:   
  <STRONG>gsl_rng_knuthran2</STRONG></DT>
  <DD>
  <P>This is a second-order multiple recursive generator described by Knuth in   
  <CITE>Seminumerical Algorithms</CITE>, 3rd Ed., page 108. Its sequence is, 
</P>
  <DIV class="example"><PRE class="example">x_n = (a_1 x_{n-1} + a_2 x_{n-2}) mod m
</PRE></DIV>
  <P>with <EM>a_1 = 271828183</EM>, <EM>a_2 = 314159269</EM>, and <EM>m = 2^31 - 
    1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fknuthran2002"></A>Generator:   
  <STRONG>gsl_rng_knuthran2002</STRONG></DT>
  <DT><A name="index-gsl_005frng_005fknuthran"></A>Generator:   
  <STRONG>gsl_rng_knuthran</STRONG></DT>
  <DD>
  <P>This is a second-order multiple recursive generator described by Knuth in   
  <CITE>Seminumerical Algorithms</CITE>, 3rd Ed., Section 3.6. Knuth provides   
  its C code. The updated routine <CODE>gsl_rng_knuthran2002</CODE> is from the  
   revised 9th printing and corrects some weaknesses in the earlier version,   
  which is implemented as <CODE>gsl_rng_knuthran</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fborosh13"></A>Generator:   
  <STRONG>gsl_rng_borosh13</STRONG></DT>
  <DT><A name="index-gsl_005frng_005ffishman18"></A>Generator:   
  <STRONG>gsl_rng_fishman18</STRONG></DT>
  <DT><A name="index-gsl_005frng_005ffishman20"></A>Generator:   
  <STRONG>gsl_rng_fishman20</STRONG></DT>
  <DT><A name="index-gsl_005frng_005flecuyer21"></A>Generator:   
  <STRONG>gsl_rng_lecuyer21</STRONG></DT>
  <DT><A name="index-gsl_005frng_005fwaterman14"></A>Generator:   
  <STRONG>gsl_rng_waterman14</STRONG></DT>
  <DD>
  <P>These multiplicative generators are taken from Knuth’s <CITE>Seminumerical  
   Algorithms</CITE>, 3rd Ed., pages 106–108. Their sequence is, </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (a x_n) mod m
</PRE></DIV>
  <P>where the seed specifies the initial value, <EM>x_1</EM>. The parameters   
  <EM>a</EM> and <EM>m</EM> are as follows, Borosh-Niederreiter: <EM>a =   
  1812433253</EM>, <EM>m = 2^32</EM>, Fishman18: <EM>a = 62089911</EM>, <EM>m =  
   2^31 - 1</EM>, Fishman20: <EM>a = 48271</EM>, <EM>m = 2^31 - 1</EM>, 
  L’Ecuyer:   <EM>a = 40692</EM>, <EM>m = 2^31 - 249</EM>, Waterman: <EM>a =   
  1566083941</EM>, <EM>m = 2^32</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005ffishman2x"></A>Generator:   
  <STRONG>gsl_rng_fishman2x</STRONG></DT>
  <DD>
  <P>This is the L’Ecuyer–Fishman random number generator. It is taken from   
  Knuth’s <CITE>Seminumerical Algorithms</CITE>, 3rd Ed., page 108. Its sequence 
    is, </P>
  <DIV class="example"><PRE class="example">z_{n+1} = (x_n - y_n) mod m
</PRE></DIV>
  <P>with <EM>m = 2^31 - 1</EM>. <EM>x_n</EM> and <EM>y_n</EM> are given by the  
   <CODE>fishman20</CODE> and <CODE>lecuyer21</CODE> algorithms. The seed   
  specifies the initial value, <EM>x_1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frng_005fcoveyou"></A>Generator:   
  <STRONG>gsl_rng_coveyou</STRONG></DT>
  <DD>
  <P>This is the Coveyou random number generator. It is taken from Knuth’s   
  <CITE>Seminumerical Algorithms</CITE>, 3rd Ed., Section 3.2.2. Its sequence   
  is, </P>
  <DIV class="example"><PRE class="example">x_{n+1} = (x_n (x_n + 1)) mod m
</PRE></DIV>
  <P>with <EM>m = 2^32</EM>. The seed specifies the initial value, <EM>x_1</EM>. 
    </P></DD></DL>
<HR>
<A name="Random-Number-Generator-Performance"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Generator-Examples" 
rel="next">Random Number Generator Examples</A>, Previous: <A accessKey="p" 
href="#Other-random-number-generators" 
rel="previous">Other random number generators</A>, Up: <A accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Performance"></A>
<H3 class="section">18.12 Performance</H3>
<P>The following table shows the relative performance of a selection the 
 available random number generators. The fastest simulation quality generators 
 are <CODE>taus</CODE>, <CODE>gfsr4</CODE> and <CODE>mt19937</CODE>. The 
 generators which offer the best mathematically-proven quality are those based 
on  the <SMALL>RANLUX</SMALL> algorithm. </P>
<DIV class="example"><PRE class="example">1754 k ints/sec,    870 k doubles/sec, taus
1613 k ints/sec,    855 k doubles/sec, gfsr4
1370 k ints/sec,    769 k doubles/sec, mt19937
 565 k ints/sec,    571 k doubles/sec, ranlxs0
 400 k ints/sec,    405 k doubles/sec, ranlxs1
 490 k ints/sec,    389 k doubles/sec, mrg
 407 k ints/sec,    297 k doubles/sec, ranlux
 243 k ints/sec,    254 k doubles/sec, ranlxd1
 251 k ints/sec,    253 k doubles/sec, ranlxs2
 238 k ints/sec,    215 k doubles/sec, cmrg
 247 k ints/sec,    198 k doubles/sec, ranlux389
 141 k ints/sec,    140 k doubles/sec, ranlxd2
</PRE></DIV>
<HR>
<A name="Random-Number-Generator-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-References-and-Further-Reading" 
rel="next">Random Number References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Random-Number-Generator-Performance" 
rel="previous">Random Number Generator Performance</A>, Up: <A accessKey="u" 
href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-11"></A>
<H3 class="section">18.13 Examples</H3>
<P>The following program demonstrates the use of a random number generator to 
 produce uniform random numbers in the range [0.0, 1.0), </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;

int
main (void)
{
  const gsl_rng_type * T;
  gsl_rng * r;

  int i, n = 10;

  gsl_rng_env_setup();

  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  for (i = 0; i &lt; n; i++) 
    {
      double u = gsl_rng_uniform (r);
      printf ("%.5f\n", u);
    }

  gsl_rng_free (r);

  return 0;
}
</PRE></DIV>
<P>Here is the output of the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">0.99974
0.16291
0.28262
0.94720
0.23166
0.48497
0.95748
0.74431
0.54004
0.73995
</PRE></DIV>
<P>The numbers depend on the seed used by the generator. The default seed can be 
 changed with the <CODE>GSL_RNG_SEED</CODE> environment variable to produce a 
 different stream of numbers. The generator itself can be changed using the 
 environment variable <CODE>GSL_RNG_TYPE</CODE>. Here is the output of the 
 program using a seed value of 123 and the multiple-recursive generator 
<CODE>mrg</CODE>, </P>
<DIV class="example"><PRE class="example">$ GSL_RNG_SEED=123 GSL_RNG_TYPE=mrg ./a.out 
</PRE><PRE class="verbatim">GSL_RNG_TYPE=mrg
GSL_RNG_SEED=123
0.33050
0.86631
0.32982
0.67620
0.53391
0.06457
0.16847
0.70229
0.04371
0.86374
</PRE></DIV>
<HR>
<A name="Random-Number-References-and-Further-Reading"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Acknowledgements" 
rel="next">Random Number Acknowledgements</A>, Previous: <A accessKey="p" href="#Random-Number-Generator-Examples" 
rel="previous">Random Number Generator Examples</A>, Up: <A accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-12"></A>
<H3 class="section">18.14 References and Further Reading</H3>
<P>The subject of random number generation and testing is reviewed extensively 
 in Knuth’s <CITE>Seminumerical Algorithms</CITE>. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Donald E. Knuth, <CITE>The Art of Computer Programming:   
  Seminumerical Algorithms</CITE> (Vol 2, 3rd Ed, 1997), Addison-Wesley, ISBN   
  0201896842. </LI></UL>
<P>Further information is available in the review paper written by Pierre 
 L’Ecuyer, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->P. L’Ecuyer, “Random Number Generation”, Chapter 4 of the   
  Handbook on Simulation, Jerry Banks Ed., Wiley, 1998, 93–137.   
  <P><A 
  href="http://www.iro.umontreal.ca/~lecuyer/papers.html">http://www.iro.umontreal.ca/~lecuyer/papers.html</A> 
    in the file <SAMP>handsim.ps</SAMP>. </P></LI></UL>
<P>The source code for the <SMALL>DIEHARD</SMALL> random number generator tests 
 is also available online, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>DIEHARD source code</CITE> G. Marsaglia, </LI>
  <LI><!-- /@w --><A 
  href="http://stat.fsu.edu/pub/diehard/">http://stat.fsu.edu/pub/diehard/</A></LI></UL>
<P>A comprehensive set of random number generator tests is available from 
<SMALL>NIST</SMALL>, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->NIST Special Publication 800-22, “A Statistical Test Suite for 
    the Validation of Random Number Generators and Pseudo Random Number 
  Generators   for Cryptographic Applications”. </LI>
  <LI><!-- /@w --><A 
  href="http://csrc.nist.gov/rng/">http://csrc.nist.gov/rng/</A> </LI></UL>
<HR>
<A name="Random-Number-Acknowledgements"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Random-Number-References-and-Further-Reading" 
rel="previous">Random Number References and Further Reading</A>, Up: <A 
accessKey="u" href="#Random-Number-Generation" 
rel="up">Random Number Generation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Acknowledgements"></A>
<H3 class="section">18.15 Acknowledgements</H3>
<P>Thanks to Makoto Matsumoto, Takuji Nishimura and Yoshiharu Kurita for making 
 the source code to their generators (MT19937, MM&amp;TN; TT800, MM&amp;YK) 
 available under the GNU General Public License. Thanks to Martin Lüscher for 
 providing notes and source code for the <SMALL>RANLXS</SMALL> and 
<SMALL>RANLXD</SMALL> generators. </P>
<HR>
<A name="Quasi_002dRandom-Sequences"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Distributions" 
rel="next">Random Number Distributions</A>, Previous: <A accessKey="p" href="#Random-Number-Generation" 
rel="previous">Random Number Generation</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Quasi_002dRandom-Sequences-1"></A>
<H2 class="chapter">19 Quasi-Random Sequences</H2><A name="index-quasi_002drandom-sequences"></A><A 
name="index-low-discrepancy-sequences"></A><A name="index-Sobol-sequence"></A><A 
name="index-Niederreiter-sequence"></A>
<P>This chapter describes functions for generating quasi-random sequences in 
 arbitrary dimensions. A quasi-random sequence progressively covers a 
<EM>d</EM>-dimensional space with a set of points that are uniformly 
 distributed. Quasi-random sequences are also known as low-discrepancy 
sequences.  The quasi-random sequence generators use an interface that is 
similar to the  interface for random number generators, except that seeding is 
not required—each  generator produces a single sequence. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_qrng.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Quasi_002drandom-number-generator-initialization">Quasi-random 
            number generator initialization</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Sampling-from-a-quasi_002drandom-number-generator">Sampling 
            from a quasi-random number generator</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Auxiliary-quasi_002drandom-number-generator-functions">Auxiliary 
            quasi-random number generator functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Saving-and-restoring-quasi_002drandom-number-generator-state">Saving 
            and restoring quasi-random number generator state</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Quasi_002drandom-number-generator-algorithms">Quasi-random 
            number generator algorithms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Quasi_002drandom-number-generator-examples">Quasi-random 
            number generator examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Quasi_002drandom-number-references">Quasi-random 
            number references</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Quasi_002drandom-number-generator-initialization"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sampling-from-a-quasi_002drandom-number-generator" 
rel="next">Sampling from a quasi-random number generator</A>, Up: <A accessKey="u" 
href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Quasi_002drandom-number-generator-initialization-1"></A>
<H3 class="section">19.1 Quasi-random number generator initialization</H3>
<DL>
  <DT><A name="index-gsl_005fqrng_005falloc"></A>Function: <EM>gsl_qrng 
  *</EM><STRONG>gsl_qrng_alloc</STRONG> <EM>(const gsl_qrng_type * <VAR>T</VAR>, 
    unsigned int <VAR>d</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fqrng"></A><A 
name="index-gsl_005fqrng_005ftype"></A>
  <P>This function returns a pointer to a newly-created instance of a   
  quasi-random sequence generator of type <VAR>T</VAR> and dimension   
  <VAR>d</VAR>. If there is insufficient memory to create the generator then the 
    function returns a null pointer and the error handler is invoked with an 
  error   code of <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fqrng_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_qrng_free</STRONG> <EM>(gsl_qrng * 
  <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the generator   
  <VAR>q</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fqrng_005finit"></A>Function: 
  <EM>void</EM><STRONG>gsl_qrng_init</STRONG> <EM>(gsl_qrng * 
  <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>This function reinitializes the generator <VAR>q</VAR> to its starting   
  point. Note that quasi-random sequences do not use a seed and always produce   
  the same set of values. </P></DD></DL>
<HR>
<A name="Sampling-from-a-quasi_002drandom-number-generator"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Auxiliary-quasi_002drandom-number-generator-functions" 
rel="next">Auxiliary quasi-random number generator functions</A>, Previous: <A 
accessKey="p" href="#Quasi_002drandom-number-generator-initialization" 
rel="previous">Quasi-random number generator initialization</A>, Up: <A 
accessKey="u" href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sampling-from-a-quasi_002drandom-number-generator-1"></A>
<H3 class="section">19.2 Sampling from a quasi-random number generator</H3>
<DL>
  <DT><A name="index-gsl_005fqrng_005fget"></A>Function: 
  <EM>int</EM><STRONG>gsl_qrng_get</STRONG> <EM>(const gsl_qrng * <VAR>q</VAR>, 
  double   <VAR>x</VAR>[])</EM></DT>
  <DD>
  <P>This function stores the next point from the sequence generator   
  <VAR>q</VAR> in the array <VAR>x</VAR>. The space available for <VAR>x</VAR>   
  must match the dimension of the generator. The point <VAR>x</VAR> will lie in  
   the range <EM>0 &lt; x_i &lt; 1</EM> for each <EM>x_i</EM>. An inline version 
    of this function is used when <CODE>HAVE_INLINE</CODE> is defined. 
</P></DD></DL>
<HR>
<A name="Auxiliary-quasi_002drandom-number-generator-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Saving-and-restoring-quasi_002drandom-number-generator-state" 
rel="next">Saving and restoring quasi-random number generator state</A>, 
Previous: <A accessKey="p" href="#Sampling-from-a-quasi_002drandom-number-generator" 
rel="previous">Sampling from a quasi-random number generator</A>, Up: <A 
accessKey="u" href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Auxiliary-quasi_002drandom-number-generator-functions-1"></A>
<H3 class="section">19.3 Auxiliary quasi-random number generator functions</H3>
<DL>
  <DT><A name="index-gsl_005fqrng_005fname"></A>Function: <EM>const char 
  *</EM><STRONG>gsl_qrng_name</STRONG> <EM>(const gsl_qrng * 
  <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the generator. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fqrng_005fsize"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_qrng_size</STRONG> <EM>(const gsl_qrng * 
  <VAR>q</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fqrng_005fstate"></A>Function: <EM>void 
  *</EM><STRONG>gsl_qrng_state</STRONG> <EM>(const gsl_qrng * 
  <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the state of generator <VAR>r</VAR> and 
    its size. You can use this information to access the state directly. For   
  example, the following code will write the state of a generator to a stream,   
  </P>
  <DIV class="example"><PRE class="example">void * state = gsl_qrng_state (q);
size_t n = gsl_qrng_size (q);
fwrite (state, n, 1, stream);
</PRE></DIV></DD></DL>
<HR>
<A name="Saving-and-restoring-quasi_002drandom-number-generator-state"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Quasi_002drandom-number-generator-algorithms" 
rel="next">Quasi-random number generator algorithms</A>, Previous: <A accessKey="p" 
href="#Auxiliary-quasi_002drandom-number-generator-functions" 
rel="previous">Auxiliary quasi-random number generator functions</A>, Up: <A 
accessKey="u" href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Saving-and-restoring-quasi_002drandom-number-generator-state-1"></A>
<H3 class="section">19.4 Saving and restoring quasi-random number generator 
 state</H3>
<DL>
  <DT><A name="index-gsl_005fqrng_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_qrng_memcpy</STRONG> <EM>(gsl_qrng * <VAR>dest</VAR>, 
  const   gsl_qrng * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the quasi-random sequence generator <VAR>src</VAR>   
  into the pre-existing generator <VAR>dest</VAR>, making <VAR>dest</VAR> into   
  an exact copy of <VAR>src</VAR>. The two generators must be of the same type.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fqrng_005fclone"></A>Function: <EM>gsl_qrng 
  *</EM><STRONG>gsl_qrng_clone</STRONG> <EM>(const gsl_qrng * 
  <VAR>q</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to a newly created generator which is an   
  exact copy of the generator <VAR>q</VAR>. </P></DD></DL>
<HR>
<A name="Quasi_002drandom-number-generator-algorithms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Quasi_002drandom-number-generator-examples" 
rel="next">Quasi-random number generator examples</A>, Previous: <A accessKey="p" 
href="#Saving-and-restoring-quasi_002drandom-number-generator-state" 
rel="previous">Saving and restoring quasi-random number generator state</A>, Up: 
<A accessKey="u" href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Quasi_002drandom-number-generator-algorithms-1"></A>
<H3 class="section">19.5 Quasi-random number generator algorithms</H3>
<P>The following quasi-random sequence algorithms are available, </P>
<DL>
  <DT><A name="index-gsl_005fqrng_005fniederreiter_005f2"></A>Generator:   
  <STRONG>gsl_qrng_niederreiter_2</STRONG></DT>
  <DD>
  <P>This generator uses the algorithm described in Bratley, Fox, Niederreiter,  
   <CITE>ACM Trans. Model. Comp. Sim.</CITE> 2, 195 (1992). It is valid up to 12 
    dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fqrng_005fsobol"></A>Generator:   
  <STRONG>gsl_qrng_sobol</STRONG></DT>
  <DD>
  <P>This generator uses the Sobol sequence described in Antonov, Saleev,   
  <CITE>USSR Comput. Maths. Math. Phys.</CITE> 19, 252 (1980). It is valid up to 
    40 dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fqrng_005fhalton"></A>Generator:   
  <STRONG>gsl_qrng_halton</STRONG></DT>
  <DT><A name="index-gsl_005fqrng_005freversehalton"></A>Generator:   
  <STRONG>gsl_qrng_reversehalton</STRONG></DT>
  <DD>
  <P>These generators use the Halton and reverse Halton sequences described in   
  J.H. Halton, <CITE>Numerische Mathematik</CITE> 2, 84-90 (1960) and B.   
  Vandewoestyne and R. Cools <CITE>Computational and Applied Mathematics</CITE>  
   189, 1&amp;2, 341-361 (2006). They are valid up to 1229 dimensions. 
</P></DD></DL>
<HR>
<A name="Quasi_002drandom-number-generator-examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Quasi_002drandom-number-references" 
rel="next">Quasi-random number references</A>, Previous: <A accessKey="p" href="#Quasi_002drandom-number-generator-algorithms" 
rel="previous">Quasi-random number generator algorithms</A>, Up: <A accessKey="u" 
href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-12"></A>
<H3 class="section">19.6 Examples</H3>
<P>The following program prints the first 1024 points of the 2-dimensional Sobol 
 sequence. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_qrng.h&gt;

int
main (void)
{
  int i;
  gsl_qrng * q = gsl_qrng_alloc (gsl_qrng_sobol, 2);

  for (i = 0; i &lt; 1024; i++)
    {
      double v[2];
      gsl_qrng_get (q, v);
      printf ("%.5f %.5f\n", v[0], v[1]);
    }

  gsl_qrng_free (q);
  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out
0.50000 0.50000
0.75000 0.25000
0.25000 0.75000
0.37500 0.37500
0.87500 0.87500
0.62500 0.12500
0.12500 0.62500
....
</PRE></DIV>
<P>It can be seen that successive points progressively fill-in the spaces 
 between previous points. </P>
<HR>
<A name="Quasi_002drandom-number-references"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Quasi_002drandom-number-generator-examples" 
rel="previous">Quasi-random number generator examples</A>, Up: <A accessKey="u" 
href="#Quasi_002dRandom-Sequences" 
rel="up">Quasi-Random Sequences</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References"></A>
<H3 class="section">19.7 References</H3>
<P>The implementations of the quasi-random sequence routines are based on the 
 algorithms described in the following paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->P. Bratley and B.L. Fox and H. Niederreiter, “Algorithm 738:   
  Programs to Generate Niederreiter’s Low-discrepancy Sequences”, <CITE>ACM   
  Transactions on Mathematical Software</CITE>, Vol. 20, No. 4, December, 1994,  
   p. 494–495. </LI></UL>
<HR>
<A name="Random-Number-Distributions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Statistics" 
rel="next">Statistics</A>, Previous: <A accessKey="p" href="#Quasi_002dRandom-Sequences" 
rel="previous">Quasi-Random Sequences</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Random-Number-Distributions-1"></A>
<H2 class="chapter">20 Random Number Distributions</H2><A name="index-random-number-distributions"></A><A 
name="index-cumulative-distribution-functions-_0028CDFs_0029"></A><A name="index-CDFs_002c-cumulative-distribution-functions"></A><A 
name="index-inverse-cumulative-distribution-functions"></A><A name="index-quantile-functions"></A>
<P>This chapter describes functions for generating random variates and computing 
 their probability distributions. Samples from the distributions described in 
 this chapter can be obtained using any of the random number generators in the 
 library as an underlying source of randomness. </P>
<P>In the simplest cases a non-uniform distribution can be obtained analytically 
 from the uniform distribution of a random number generator by applying an 
 appropriate transformation. This method uses one call to the random number 
 generator. More complicated distributions are created by the 
<EM>acceptance-rejection</EM> method, which compares the desired distribution 
 against a distribution which is similar and known analytically. This usually 
 requires several samples from the generator. </P>
<P>The library also provides cumulative distribution functions and inverse 
 cumulative distribution functions, sometimes referred to as quantile functions. 
 The cumulative distribution functions and their inverses are computed 
separately  for the upper and lower tails of the distribution, allowing full 
accuracy to be  retained for small results. </P>
<P>The functions for random variates and probability density functions described 
 in this section are declared in <SAMP>gsl_randist.h</SAMP>. The corresponding 
 cumulative distribution functions are declared in <SAMP>gsl_cdf.h</SAMP>. </P>
<P>Note that the discrete random variate functions always return a value of type 
<CODE>unsigned int</CODE>, and on most platforms this has a maximum value of 
<EM>2^32-1 ~=~ 4.29e9</EM>. They should only be called with a safe range of 
 parameters (where there is a negligible probability of a variate exceeding this 
 limit) to prevent incorrect results due to overflow. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Random-Number-Distribution-Introduction">Random 
            Number Distribution Introduction</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#The-Gaussian-Tail-Distribution">The 
            Gaussian Tail Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#The-Bivariate-Gaussian-Distribution">The 
            Bivariate Gaussian Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#The-Exponential-Distribution">The 
            Exponential Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#The-Laplace-Distribution">The 
            Laplace Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#The-Exponential-Power-Distribution">The 
            Exponential Power Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Rayleigh-Tail-Distribution">The 
            Rayleigh Tail Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Landau-Distribution">The 
            Landau Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Levy-alpha_002dStable-Distributions">The 
            Levy alpha-Stable Distributions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Levy-skew-alpha_002dStable-Distribution">The 
            Levy skew alpha-Stable Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-F_002ddistribution">The 
            F-distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-t_002ddistribution">The 
            t-distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Beta-Distribution">The 
            Beta Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Dirichlet-Distribution">The 
            Dirichlet Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Poisson-Distribution">The 
            Poisson Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Bernoulli-Distribution">The 
            Bernoulli Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Binomial-Distribution">The 
            Binomial Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Multinomial-Distribution">The 
            Multinomial Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Negative-Binomial-Distribution">The 
            Negative Binomial Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Pascal-Distribution">The 
            Pascal Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Geometric-Distribution">The 
            Geometric Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-Logarithmic-Distribution">The 
            Logarithmic Distribution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Shuffling-and-Sampling">Shuffling 
            and Sampling</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Distribution-Examples">Random 
            Number Distribution Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Random-Number-Distribution-References-and-Further-Reading">Random 
            Number Distribution References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Random-Number-Distribution-Introduction"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Gaussian-Distribution" 
rel="next">The Gaussian Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Introduction-3"></A>
<H3 class="section">20.1 Introduction</H3>
<P>Continuous random number distributions are defined by a probability density 
 function, <EM>p(x)</EM>, such that the probability of <EM>x</EM> occurring in 
 the infinitesimal range <EM>x</EM> to <EM>x+dx</EM> is <EM>p dx</EM>. </P>
<P>The cumulative distribution function for the lower tail <EM>P(x)</EM> is 
 defined by the integral, </P>
<DIV class="example"><PRE class="example">P(x) = \int_{-\infty}^{x} dx' p(x')
</PRE></DIV>
<P>and gives the probability of a variate taking a value less than <EM>x</EM>. 
</P>
<P>The cumulative distribution function for the upper tail <EM>Q(x)</EM> is 
 defined by the integral, </P>
<DIV class="example"><PRE class="example">Q(x) = \int_{x}^{+\infty} dx' p(x')
</PRE></DIV>
<P>and gives the probability of a variate taking a value greater than 
<EM>x</EM>. </P>
<P>The upper and lower cumulative distribution functions are related by <EM>P(x) 
 + Q(x) = 1</EM> and satisfy <EM>0 &lt;= P(x) &lt;= 1</EM>, <EM>0 &lt;= Q(x) 
&lt; = 1</EM>. </P>
<P>The inverse cumulative distributions, <EM>x=P^{-1}(P)</EM> and 
<EM>x=Q^{-1}(Q)</EM> give the values of <EM>x</EM> which correspond to a 
 specific value of <EM>P</EM> or <EM>Q</EM>. They can be used to find confidence 
 limits from probability values. </P>
<P>For discrete distributions the probability of sampling the integer value 
<EM>k</EM> is given by <EM>p(k)</EM>, where <EM>\sum_k p(k) = 1</EM>. The 
 cumulative distribution for the lower tail <EM>P(k)</EM> of a discrete 
 distribution is defined as, </P>
<DIV class="example"><PRE class="example">P(k) = \sum_{i &lt;= k} p(i)
</PRE></DIV>
<P>where the sum is over the allowed range of the distribution less than or 
 equal to <EM>k</EM>. </P>
<P>The cumulative distribution for the upper tail of a discrete distribution 
<EM>Q(k)</EM> is defined as </P>
<DIV class="example"><PRE class="example">Q(k) = \sum_{i &gt; k} p(i)
</PRE></DIV>
<P>giving the sum of probabilities for all values greater than <EM>k</EM>. These 
 two definitions satisfy the identity <EM>P(k)+Q(k)=1</EM>. </P>
<P>If the range of the distribution is 1 to <EM>n</EM> inclusive then 
<EM>P(n)=1</EM>, <EM>Q(n)=0</EM> while <EM>P(1) = p(1)</EM>, 
<EM>Q(1)=1-p(1)</EM>. </P>
<HR>
<A name="The-Gaussian-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Gaussian-Tail-Distribution" 
rel="next">The Gaussian Tail Distribution</A>, Previous: <A accessKey="p" href="#Random-Number-Distribution-Introduction" 
rel="previous">Random Number Distribution Introduction</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Gaussian-Distribution-1"></A>
<H3 class="section">20.2 The Gaussian Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fgaussian"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_gaussian</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>sigma</VAR>)</EM></DT>
  <DD><A name="index-Gaussian-distribution"></A>
  <P>This function returns a Gaussian random variate, with mean zero and   
  standard deviation <VAR>sigma</VAR>. The probability distribution for Gaussian 
    random variates is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over \sqrt{2 \pi \sigma^2}} \exp (-x^2 / 2\sigma^2) dx
</PRE></DIV>
  <P>for <EM>x</EM> in the range <EM>-\infty</EM> to <EM>+\infty</EM>. Use the   
  transformation <EM>z = \mu + x</EM> on the numbers returned by   
  <CODE>gsl_ran_gaussian</CODE> to obtain a Gaussian distribution with mean   
  <EM>\mu</EM>. This function uses the Box-Muller algorithm which requires two   
  calls to the random number generator <VAR>r</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgaussian_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gaussian_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Gaussian distribution with standard deviation   
  <VAR>sigma</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fran_005fgaussian_005fziggurat"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gaussian_ziggurat</STRONG> <EM>(const gsl_rng  
   * <VAR>r</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fran_005fgaussian_005fratio_005fmethod"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gaussian_ratio_method</STRONG> <EM>(const   
  gsl_rng * <VAR>r</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD><A name="index-Ziggurat-method"></A>
  <P>This function computes a Gaussian random variate using the alternative   
  Marsaglia-Tsang ziggurat and Kinderman-Monahan-Leva ratio methods. The   
  Ziggurat algorithm is the fastest available algorithm in most cases. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fugaussian"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_ugaussian</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fran_005fugaussian_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_ugaussian_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fran_005fugaussian_005fratio_005fmethod"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_ugaussian_ratio_method</STRONG> <EM>(const   
  gsl_rng * <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>These functions compute results for the unit Gaussian distribution. They   
  are equivalent to the functions above with a standard deviation of one,   
  <VAR>sigma</VAR> = 1. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcdf_005fgaussian_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gaussian_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgaussian_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gaussian_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgaussian_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_gaussian_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgaussian_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_gaussian_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Gaussian distribution  
   with standard deviation <VAR>sigma</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcdf_005fugaussian_005fP"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_ugaussian_P</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fugaussian_005fQ"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_ugaussian_Q</STRONG> <EM>(double   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fugaussian_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_ugaussian_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fugaussian_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_ugaussian_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the unit Gaussian   
  distribution. </P></DD></DL>
<HR>
<A name="The-Gaussian-Tail-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Bivariate-Gaussian-Distribution" 
rel="next">The Bivariate Gaussian Distribution</A>, Previous: <A accessKey="p" 
href="#The-Gaussian-Distribution" 
rel="previous">The Gaussian Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Gaussian-Tail-Distribution-1"></A>
<H3 class="section">20.3 The Gaussian Tail Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fgaussian_005ftail"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gaussian_tail</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, double <VAR>a</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD><A name="index-Gaussian-Tail-distribution"></A>
  <P>This function provides random variates from the upper tail of a Gaussian   
  distribution with standard deviation <VAR>sigma</VAR>. The values returned are 
    larger than the lower limit <VAR>a</VAR>, which must be positive. The method 
    is based on Marsaglia’s famous rectangle-wedge-tail algorithm (Ann. Math.   
  Stat. 32, 894–899 (1961)), with this aspect explained in Knuth, v2, 3rd ed,   
  p139,586 (exercise 11). </P>
  <P>The probability distribution for Gaussian tail random variates is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over N(a;\sigma) \sqrt{2 \pi \sigma^2}} \exp (- x^2/(2 \sigma^2)) dx
</PRE></DIV>
  <P>for <EM>x &gt; a</EM> where <EM>N(a;\sigma)</EM> is the normalization   
  constant, </P>
  <DIV class="example"><PRE class="example">N(a;\sigma) = (1/2) erfc(a / sqrt(2 sigma^2)).
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgaussian_005ftail_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gaussian_tail_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>a</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Gaussian tail distribution with standard deviation   
  <VAR>sigma</VAR> and lower limit <VAR>a</VAR>, using the formula given above.  
   </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fran_005fugaussian_005ftail"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_ugaussian_tail</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fran_005fugaussian_005ftail_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_ugaussian_tail_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>These functions compute results for the tail of a unit Gaussian   
  distribution. They are equivalent to the functions above with a standard   
  deviation of one, <VAR>sigma</VAR> = 1. </P></DD></DL>
<HR>
<A name="The-Bivariate-Gaussian-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Exponential-Distribution" 
rel="next">The Exponential Distribution</A>, Previous: <A accessKey="p" href="#The-Gaussian-Tail-Distribution" 
rel="previous">The Gaussian Tail Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-Bivariate-Gaussian-Distribution-1"></A>
<H3 class="section">20.4 The Bivariate Gaussian Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fbivariate_005fgaussian"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ran_bivariate_gaussian</STRONG> <EM>(const gsl_rng * 
    <VAR>r</VAR>, double <VAR>sigma_x</VAR>, double <VAR>sigma_y</VAR>, double   
  <VAR>rho</VAR>, double * <VAR>x</VAR>, double * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-Bivariate-Gaussian-distribution"></A><A name="index-two-dimensional-Gaussian-distribution"></A><A 
  name="index-Gaussian-distribution_002c-bivariate"></A>
  <P>This function generates a pair of correlated Gaussian variates, with mean   
  zero, correlation coefficient <VAR>rho</VAR> and standard deviations   
  <VAR>sigma_x</VAR> and <VAR>sigma_y</VAR> in the <EM>x</EM> and <EM>y</EM>   
  directions. The probability distribution for bivariate Gaussian random   
  variates is, </P>
  <DIV class="example"><PRE class="example">p(x,y) dx dy = {1 \over 2 \pi \sigma_x \sigma_y \sqrt{1-\rho^2}} \exp (-(x^2/\sigma_x^2 + y^2/\sigma_y^2 - 2 \rho x y/(\sigma_x\sigma_y))/2(1-\rho^2)) dx dy
</PRE></DIV>
  <P>for <EM>x,y</EM> in the range <EM>-\infty</EM> to <EM>+\infty</EM>. The   
  correlation coefficient <VAR>rho</VAR> should lie between <EM>1</EM> and   
  <EM>-1</EM>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fran_005fbivariate_005fgaussian_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_bivariate_gaussian_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>y</VAR>, double <VAR>sigma_x</VAR>, double   
  <VAR>sigma_y</VAR>, double <VAR>rho</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x,y)</EM> at   
  (<VAR>x</VAR>,<VAR>y</VAR>) for a bivariate Gaussian distribution with   
  standard deviations <VAR>sigma_x</VAR>, <VAR>sigma_y</VAR> and correlation   
  coefficient <VAR>rho</VAR>, using the formula given above. </P></DD></DL><BR>
<HR>
<A name="The-Exponential-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Laplace-Distribution" 
rel="next">The Laplace Distribution</A>, Previous: <A accessKey="p" href="#The-Bivariate-Gaussian-Distribution" 
rel="previous">The Bivariate Gaussian Distribution</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Exponential-Distribution-1"></A>
<H3 class="section">20.5 The Exponential Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fexponential"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_exponential</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>mu</VAR>)</EM></DT>
  <DD><A name="index-Exponential-distribution"></A>
  <P>This function returns a random variate from the exponential distribution   
  with mean <VAR>mu</VAR>. The distribution is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over \mu} \exp(-x/\mu) dx
</PRE></DIV>
  <P>for <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fexponential_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_exponential_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>mu</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for an exponential distribution with mean <VAR>mu</VAR>, using   
  the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fexponential_005fP"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_exponential_P</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>mu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fexponential_005fQ"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_exponential_Q</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>mu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fexponential_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_exponential_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>mu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fexponential_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_exponential_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>mu</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the exponential   
  distribution with mean <VAR>mu</VAR>. </P></DD></DL>
<HR>
<A name="The-Laplace-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Exponential-Power-Distribution" 
rel="next">The Exponential Power Distribution</A>, Previous: <A accessKey="p" 
href="#The-Exponential-Distribution" 
rel="previous">The Exponential Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Laplace-Distribution-1"></A>
<H3 class="section">20.6 The Laplace Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flaplace"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_laplace</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>)</EM></DT>
  <DD><A name="index-two_002dsided-exponential-distribution"></A><A name="index-Laplace-distribution"></A>
  <P>This function returns a random variate from the Laplace distribution with   
  width <VAR>a</VAR>. The distribution is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over 2 a}  \exp(-|x/a|) dx
</PRE></DIV>
  <P>for <EM>-\infty &lt; x &lt; \infty</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005flaplace_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_laplace_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
    double <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Laplace distribution with width <VAR>a</VAR>, using the   
  formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005flaplace_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_laplace_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flaplace_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_laplace_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flaplace_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_laplace_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flaplace_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_laplace_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Laplace distribution   
  with width <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="The-Exponential-Power-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Cauchy-Distribution" 
rel="next">The Cauchy Distribution</A>, Previous: <A accessKey="p" href="#The-Laplace-Distribution" 
rel="previous">The Laplace Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-Exponential-Power-Distribution-1"></A>
<H3 class="section">20.7 The Exponential Power Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fexppow"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_exppow</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Exponential-power-distribution"></A>
  <P>This function returns a random variate from the exponential power   
  distribution with scale parameter <VAR>a</VAR> and exponent <VAR>b</VAR>. The  
   distribution is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over 2 a \Gamma(1+1/b)} \exp(-|x/a|^b) dx
</PRE></DIV>
  <P>for <EM>x &gt;= 0</EM>. For <EM>b = 1</EM> this reduces to the Laplace   
  distribution. For <EM>b = 2</EM> it has the same form as a Gaussian   
  distribution, but with <EM>a = \sqrt{2} \sigma</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fexppow_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_exppow_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for an exponential power distribution with scale parameter   
  <VAR>a</VAR> and exponent <VAR>b</VAR>, using the formula given above.   
  </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fexppow_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_exppow_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fexppow_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_exppow_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> for the exponential power distribution with   
  parameters <VAR>a</VAR> and <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Cauchy-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Rayleigh-Distribution" 
rel="next">The Rayleigh Distribution</A>, Previous: <A accessKey="p" href="#The-Exponential-Power-Distribution" 
rel="previous">The Exponential Power Distribution</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Cauchy-Distribution-1"></A>
<H3 class="section">20.8 The Cauchy Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fcauchy"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_cauchy</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>)</EM></DT>
  <DD><A name="index-Cauchy-distribution"></A>
  <P>This function returns a random variate from the Cauchy distribution with   
  scale parameter <VAR>a</VAR>. The probability distribution for Cauchy random   
  variates is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over a\pi (1 + (x/a)^2) } dx
</PRE></DIV>
  <P>for <EM>x</EM> in the range <EM>-\infty</EM> to <EM>+\infty</EM>. The   
  Cauchy distribution is also known as the Lorentz distribution. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fcauchy_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_cauchy_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Cauchy distribution with scale parameter <VAR>a</VAR>,   
  using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fcauchy_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_cauchy_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fcauchy_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_cauchy_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fcauchy_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_cauchy_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
    double <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fcauchy_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_cauchy_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
    double <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Cauchy distribution   
  with scale parameter <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="The-Rayleigh-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Rayleigh-Tail-Distribution" 
rel="next">The Rayleigh Tail Distribution</A>, Previous: <A accessKey="p" href="#The-Cauchy-Distribution" 
rel="previous">The Cauchy Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Rayleigh-Distribution-1"></A>
<H3 class="section">20.9 The Rayleigh Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005frayleigh"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_rayleigh</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>sigma</VAR>)</EM></DT>
  <DD><A name="index-Rayleigh-distribution"></A>
  <P>This function returns a random variate from the Rayleigh distribution with  
   scale parameter <VAR>sigma</VAR>. The distribution is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {x \over \sigma^2} \exp(- x^2/(2 \sigma^2)) dx
</PRE></DIV>
  <P>for <EM>x &gt; 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005frayleigh_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_rayleigh_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Rayleigh distribution with scale parameter   
  <VAR>sigma</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005frayleigh_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_rayleigh_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005frayleigh_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_rayleigh_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005frayleigh_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_rayleigh_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005frayleigh_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_rayleigh_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Rayleigh distribution  
   with scale parameter <VAR>sigma</VAR>. </P></DD></DL>
<HR>
<A name="The-Rayleigh-Tail-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Landau-Distribution" 
rel="next">The Landau Distribution</A>, Previous: <A accessKey="p" href="#The-Rayleigh-Distribution" 
rel="previous">The Rayleigh Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Rayleigh-Tail-Distribution-1"></A>
<H3 class="section">20.10 The Rayleigh Tail Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005frayleigh_005ftail"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_rayleigh_tail</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, double <VAR>a</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD><A name="index-Rayleigh-Tail-distribution"></A>
  <P>This function returns a random variate from the tail of the Rayleigh   
  distribution with scale parameter <VAR>sigma</VAR> and a lower limit of   
  <VAR>a</VAR>. The distribution is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {x \over \sigma^2} \exp ((a^2 - x^2) /(2 \sigma^2)) dx
</PRE></DIV>
  <P>for <EM>x &gt; a</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005frayleigh_005ftail_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_rayleigh_tail_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>a</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Rayleigh tail distribution with scale parameter   
  <VAR>sigma</VAR> and lower limit <VAR>a</VAR>, using the formula given above.  
   </P></DD></DL><BR>
<HR>
<A name="The-Landau-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Levy-alpha_002dStable-Distributions" 
rel="next">The Levy alpha-Stable Distributions</A>, Previous: <A accessKey="p" 
href="#The-Rayleigh-Tail-Distribution" 
rel="previous">The Rayleigh Tail Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Landau-Distribution-1"></A>
<H3 class="section">20.11 The Landau Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flandau"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_landau</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>)</EM></DT>
  <DD><A name="index-Landau-distribution"></A>
  <P>This function returns a random variate from the Landau distribution. The   
  probability distribution for Landau random variates is defined analytically by 
    the complex integral, </P>
  <DIV class="example"><PRE class="example">p(x) = (1/(2 \pi i)) \int_{c-i\infty}^{c+i\infty} ds exp(s log(s) + x s) 
</PRE></DIV>
  <P>For numerical purposes it is more convenient to use the following   
  equivalent form of the integral, </P>
  <DIV class="example"><PRE class="example">p(x) = (1/\pi) \int_0^\infty dt \exp(-t \log(t) - x t) \sin(\pi t).
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005flandau_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_landau_pdf</STRONG> <EM>(double 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for the Landau distribution using an approximation to the formula 
    given above. </P></DD></DL><BR>
<HR>
<A name="The-Levy-alpha_002dStable-Distributions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Levy-skew-alpha_002dStable-Distribution" 
rel="next">The Levy skew alpha-Stable Distribution</A>, Previous: <A accessKey="p" 
href="#The-Landau-Distribution" 
rel="previous">The Landau Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Levy-alpha_002dStable-Distributions-1"></A>
<H3 class="section">20.12 The Levy alpha-Stable Distributions</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flevy"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_levy</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>c</VAR>, double <VAR>alpha</VAR>)</EM></DT>
  <DD><A name="index-Levy-distribution"></A>
  <P>This function returns a random variate from the Levy symmetric stable   
  distribution with scale <VAR>c</VAR> and exponent <VAR>alpha</VAR>. The   
  symmetric stable probability distribution is defined by a Fourier transform,   
  </P>
  <DIV class="example"><PRE class="example">p(x) = {1 \over 2 \pi} \int_{-\infty}^{+\infty} dt \exp(-it x - |c t|^alpha)
</PRE></DIV>
  <P>There is no explicit solution for the form of <EM>p(x)</EM> and the library 
    does not define a corresponding <CODE>pdf</CODE> function. For <EM>\alpha =  
   1</EM> the distribution reduces to the Cauchy distribution. For <EM>\alpha =  
   2</EM> it is a Gaussian distribution with <EM>\sigma = \sqrt{2} c</EM>. For   
  <EM>\alpha &lt; 1</EM> the tails of the distribution become extremely wide.   
  </P>
  <P>The algorithm only works for <EM>0 &lt; alpha &lt;= 2</EM>. 
</P></DD></DL><BR>
<HR>
<A name="The-Levy-skew-alpha_002dStable-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Gamma-Distribution" 
rel="next">The Gamma Distribution</A>, Previous: <A accessKey="p" href="#The-Levy-alpha_002dStable-Distributions" 
rel="previous">The Levy alpha-Stable Distributions</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Levy-skew-alpha_002dStable-Distribution-1"></A>
<H3 class="section">20.13 The Levy skew alpha-Stable Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flevy_005fskew"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_levy_skew</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>c</VAR>, double <VAR>alpha</VAR>, double 
  <VAR>beta</VAR>)</EM></DT>
  <DD><A name="index-Levy-distribution_002c-skew"></A><A name="index-Skew-Levy-distribution"></A>
  <P>This function returns a random variate from the Levy skew stable   
  distribution with scale <VAR>c</VAR>, exponent <VAR>alpha</VAR> and skewness   
  parameter <VAR>beta</VAR>. The skewness parameter must lie in the range   
  <EM>[-1,1]</EM>. The Levy skew stable probability distribution is defined by a 
    Fourier transform, </P>
  <DIV class="example"><PRE class="example">p(x) = {1 \over 2 \pi} \int_{-\infty}^{+\infty} dt \exp(-it x - |c t|^alpha (1-i beta sign(t) tan(pi alpha/2)))
</PRE></DIV>
  <P>When <EM>\alpha = 1</EM> the term <EM>\tan(\pi \alpha/2)</EM> is replaced   
  by <EM>-(2/\pi)\log|t|</EM>. There is no explicit solution for the form of   
  <EM>p(x)</EM> and the library does not define a corresponding <CODE>pdf</CODE> 
    function. For <EM>\alpha = 2</EM> the distribution reduces to a Gaussian   
  distribution with <EM>\sigma = \sqrt{2} c</EM> and the skewness parameter has  
   no effect. For <EM>\alpha &lt; 1</EM> the tails of the distribution become   
  extremely wide. The symmetric distribution corresponds to <EM>\beta = 0</EM>.  
   </P>
  <P>The algorithm only works for <EM>0 &lt; alpha &lt;= 2</EM>. </P></DD></DL>
<P>The Levy alpha-stable distributions have the property that if <EM>N</EM> 
 alpha-stable variates are drawn from the distribution <EM>p(c, \alpha, 
 \beta)</EM> then the sum <EM>Y = X_1 + X_2 + \dots + X_N</EM> will also be 
 distributed as an alpha-stable variate, <EM>p(N^(1/\alpha) c, \alpha, 
 \beta)</EM>. </P><BR>
<HR>
<A name="The-Gamma-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Flat-_0028Uniform_0029-Distribution" 
rel="next">The Flat (Uniform) Distribution</A>, Previous: <A accessKey="p" href="#The-Levy-skew-alpha_002dStable-Distribution" 
rel="previous">The Levy skew alpha-Stable Distribution</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Gamma-Distribution-1"></A>
<H3 class="section">20.14 The Gamma Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fgamma"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_gamma</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Gamma-distribution"></A>
  <P>This function returns a random variate from the gamma distribution. The   
  distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over \Gamma(a) b^a} x^{a-1} e^{-x/b} dx
</PRE></DIV>
  <P>for <EM>x &gt; 0</EM>. </P><A name="index-Erlang-distribution"></A>
  <P>The gamma distribution with an integer parameter <VAR>a</VAR> is known as   
  the Erlang distribution. </P>
  <P>The variates are computed using the Marsaglia-Tsang fast gamma method. This 
    function for this method was previously called <CODE>gsl_ran_gamma_mt</CODE> 
    and can still be accessed using this name. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgamma_005fknuth"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gamma_knuth</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns a gamma variate using the algorithms from Knuth (vol  
   2). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgamma_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_gamma_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a gamma distribution with parameters <VAR>a</VAR> and   
  <VAR>b</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fgamma_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gamma_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgamma_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gamma_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgamma_005fPinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gamma_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgamma_005fQinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gamma_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the gamma distribution   
  with parameters <VAR>a</VAR> and <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Flat-_0028Uniform_0029-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Lognormal-Distribution" 
rel="next">The Lognormal Distribution</A>, Previous: <A accessKey="p" href="#The-Gamma-Distribution" 
rel="previous">The Gamma Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Flat-_0028Uniform_0029-Distribution-1"></A>
<H3 class="section">20.15 The Flat (Uniform) Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fflat"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_flat</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-flat-distribution"></A><A 
  name="index-uniform-distribution"></A>
  <P>This function returns a random variate from the flat (uniform) distribution 
    from <VAR>a</VAR> to <VAR>b</VAR>. The distribution is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over (b-a)} dx
</PRE></DIV>
  <P>if <EM>a &lt;= x &lt; b</EM> and 0 otherwise. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fflat_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_flat_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a uniform distribution from <VAR>a</VAR> to <VAR>b</VAR>,   
  using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fflat_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_flat_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double <VAR>a</VAR>,   double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fflat_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_flat_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double <VAR>a</VAR>,   double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fflat_005fPinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_flat_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fflat_005fQinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_flat_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for a uniform distribution   
  from <VAR>a</VAR> to <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Lognormal-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Chi_002dsquared-Distribution" 
rel="next">The Chi-squared Distribution</A>, Previous: <A accessKey="p" href="#The-Flat-_0028Uniform_0029-Distribution" 
rel="previous">The Flat (Uniform) Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Lognormal-Distribution-1"></A>
<H3 class="section">20.16 The Lognormal Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flognormal"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_lognormal</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>zeta</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD><A name="index-Lognormal-distribution"></A>
  <P>This function returns a random variate from the lognormal distribution. The 
    distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over x \sqrt{2 \pi \sigma^2} } \exp(-(\ln(x) - \zeta)^2/2 \sigma^2) dx
</PRE></DIV>
  <P>for <EM>x &gt; 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005flognormal_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_lognormal_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>zeta</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a lognormal distribution with parameters <VAR>zeta</VAR> and  
   <VAR>sigma</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005flognormal_005fP"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_lognormal_P</STRONG> <EM>(double <VAR>x</VAR>, 
    double <VAR>zeta</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flognormal_005fQ"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_lognormal_Q</STRONG> <EM>(double <VAR>x</VAR>, 
    double <VAR>zeta</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flognormal_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_lognormal_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>zeta</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flognormal_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_lognormal_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>zeta</VAR>, double <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the lognormal distribution 
    with parameters <VAR>zeta</VAR> and <VAR>sigma</VAR>. </P></DD></DL>
<HR>
<A name="The-Chi_002dsquared-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-F_002ddistribution" 
rel="next">The F-distribution</A>, Previous: <A accessKey="p" href="#The-Lognormal-Distribution" 
rel="previous">The Lognormal Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-Chi_002dsquared-Distribution-1"></A>
<H3 class="section">20.17 The Chi-squared Distribution</H3>
<P>The chi-squared distribution arises in statistics. If <EM>Y_i</EM> are 
<EM>n</EM> independent Gaussian random variates with unit variance then the 
 sum-of-squares, </P>
<DIV class="example"><PRE class="example">X_i = \sum_i Y_i^2
</PRE></DIV>
<P>has a chi-squared distribution with <EM>n</EM> degrees of freedom. </P>
<DL>
  <DT><A name="index-gsl_005fran_005fchisq"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_chisq</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>nu</VAR>)</EM></DT>
  <DD><A name="index-Chi_002dsquared-distribution"></A>
  <P>This function returns a random variate from the chi-squared distribution   
  with <VAR>nu</VAR> degrees of freedom. The distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {1 \over 2 \Gamma(\nu/2) } (x/2)^{\nu/2 - 1} \exp(-x/2) dx
</PRE></DIV>
  <P>for <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fchisq_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_chisq_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a chi-squared distribution with <VAR>nu</VAR> degrees of   
  freedom, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fchisq_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_chisq_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fchisq_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_chisq_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fchisq_005fPinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_chisq_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fchisq_005fQinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_chisq_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the chi-squared   
  distribution with <VAR>nu</VAR> degrees of freedom. </P></DD></DL>
<HR>
<A name="The-F_002ddistribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-t_002ddistribution" 
rel="next">The t-distribution</A>, Previous: <A accessKey="p" href="#The-Chi_002dsquared-Distribution" 
rel="previous">The Chi-squared Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-F_002ddistribution-1"></A>
<H3 class="section">20.18 The F-distribution</H3>
<P>The F-distribution arises in statistics. If <EM>Y_1</EM> and <EM>Y_2</EM> are 
 chi-squared deviates with <EM>\nu_1</EM> and <EM>\nu_2</EM> degrees of freedom 
 then the ratio, </P>
<DIV class="example"><PRE class="example">X = { (Y_1 / \nu_1) \over (Y_2 / \nu_2) }
</PRE></DIV>
<P>has an F-distribution <EM>F(x;\nu_1,\nu_2)</EM>. </P>
<DL>
  <DT><A name="index-gsl_005fran_005ffdist"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_fdist</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>nu1</VAR>, double <VAR>nu2</VAR>)</EM></DT>
  <DD><A name="index-F_002ddistribution"></A>
  <P>This function returns a random variate from the F-distribution with degrees 
    of freedom <VAR>nu1</VAR> and <VAR>nu2</VAR>. The distribution function is,  
   </P>
  <DIV class="example"><PRE class="example">p(x) dx = 
   { \Gamma((\nu_1 + \nu_2)/2)
        \over \Gamma(\nu_1/2) \Gamma(\nu_2/2) } 
   \nu_1^{\nu_1/2} \nu_2^{\nu_2/2} 
   x^{\nu_1/2 - 1} (\nu_2 + \nu_1 x)^{-\nu_1/2 -\nu_2/2}
</PRE></DIV>
  <P>for <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005ffdist_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_fdist_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu1</VAR>, double <VAR>nu2</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for an F-distribution with <VAR>nu1</VAR> and <VAR>nu2</VAR>   
  degrees of freedom, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005ffdist_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_fdist_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu1</VAR>, double <VAR>nu2</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005ffdist_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_fdist_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu1</VAR>, double <VAR>nu2</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005ffdist_005fPinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_fdist_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
  double   <VAR>nu1</VAR>, double <VAR>nu2</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005ffdist_005fQinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_fdist_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
  double   <VAR>nu1</VAR>, double <VAR>nu2</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the F-distribution with   
  <VAR>nu1</VAR> and <VAR>nu2</VAR> degrees of freedom. </P></DD></DL>
<HR>
<A name="The-t_002ddistribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Beta-Distribution" 
rel="next">The Beta Distribution</A>, Previous: <A accessKey="p" href="#The-F_002ddistribution" 
rel="previous">The F-distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-t_002ddistribution-1"></A>
<H3 class="section">20.19 The t-distribution</H3>
<P>The t-distribution arises in statistics. If <EM>Y_1</EM> has a normal 
 distribution and <EM>Y_2</EM> has a chi-squared distribution with <EM>\nu</EM> 
 degrees of freedom then the ratio, </P>
<DIV class="example"><PRE class="example">X = { Y_1 \over \sqrt{Y_2 / \nu} }
</PRE></DIV>
<P>has a t-distribution <EM>t(x;\nu)</EM> with <EM>\nu</EM> degrees of freedom. 
</P>
<DL>
  <DT><A name="index-gsl_005fran_005ftdist"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_tdist</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>nu</VAR>)</EM></DT>
  <DD><A name="index-t_002ddistribution"></A><A name="index-Student-t_002ddistribution"></A>
  <P>This function returns a random variate from the t-distribution. The   
  distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {\Gamma((\nu + 1)/2) \over \sqrt{\pi \nu} \Gamma(\nu/2)}
   (1 + x^2/\nu)^{-(\nu + 1)/2} dx
</PRE></DIV>
  <P>for <EM>-\infty &lt; x &lt; +\infty</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005ftdist_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_tdist_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a t-distribution with <VAR>nu</VAR> degrees of freedom, using 
    the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005ftdist_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_tdist_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005ftdist_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_tdist_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005ftdist_005fPinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_tdist_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005ftdist_005fQinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_tdist_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
  double   <VAR>nu</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the t-distribution with   
  <VAR>nu</VAR> degrees of freedom. </P></DD></DL>
<HR>
<A name="The-Beta-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Logistic-Distribution" 
rel="next">The Logistic Distribution</A>, Previous: <A accessKey="p" href="#The-t_002ddistribution" 
rel="previous">The t-distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Beta-Distribution-1"></A>
<H3 class="section">20.20 The Beta Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fbeta"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_beta</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Beta-distribution"></A>
  <P>This function returns a random variate from the beta distribution. The   
  distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {\Gamma(a+b) \over \Gamma(a) \Gamma(b)} x^{a-1} (1-x)^{b-1} dx
</PRE></DIV>
  <P>for <EM>0 &lt;= x &lt;= 1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fbeta_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_beta_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a beta distribution with parameters <VAR>a</VAR> and   
  <VAR>b</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fbeta_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_beta_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double <VAR>a</VAR>,   double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fbeta_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_beta_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double <VAR>a</VAR>,   double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fbeta_005fPinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_beta_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fbeta_005fQinv"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_beta_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the beta distribution with 
    parameters <VAR>a</VAR> and <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Logistic-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Pareto-Distribution" 
rel="next">The Pareto Distribution</A>, Previous: <A accessKey="p" href="#The-Beta-Distribution" 
rel="previous">The Beta Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Logistic-Distribution-1"></A>
<H3 class="section">20.21 The Logistic Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flogistic"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_logistic</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>)</EM></DT>
  <DD><A name="index-Logistic-distribution"></A>
  <P>This function returns a random variate from the logistic distribution. The  
   distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = { \exp(-x/a) \over a (1 + \exp(-x/a))^2 } dx
</PRE></DIV>
  <P>for <EM>-\infty &lt; x &lt; +\infty</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005flogistic_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_logistic_pdf</STRONG> <EM>(double   
  <VAR>x</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a logistic distribution with scale parameter <VAR>a</VAR>,   
  using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005flogistic_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_logistic_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flogistic_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_logistic_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flogistic_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_logistic_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005flogistic_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_logistic_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>a</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the logistic distribution  
   with scale parameter <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="The-Pareto-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Spherical-Vector-Distributions" 
rel="next">Spherical Vector Distributions</A>, Previous: <A accessKey="p" href="#The-Logistic-Distribution" 
rel="previous">The Logistic Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Pareto-Distribution-1"></A>
<H3 class="section">20.22 The Pareto Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fpareto"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_pareto</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Pareto-distribution"></A>
  <P>This function returns a random variate from the Pareto distribution of   
  order <VAR>a</VAR>. The distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = (a/b) / (x/b)^{a+1} dx
</PRE></DIV>
  <P>for <EM>x &gt;= b</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fpareto_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_pareto_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Pareto distribution with exponent <VAR>a</VAR> and scale   
  <VAR>b</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fpareto_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_pareto_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fpareto_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_pareto_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fpareto_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_pareto_Pinv</STRONG> <EM>(double <VAR>P</VAR>, 
    double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fpareto_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_pareto_Qinv</STRONG> <EM>(double <VAR>Q</VAR>, 
    double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Pareto distribution   
  with exponent <VAR>a</VAR> and scale <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="Spherical-Vector-Distributions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Weibull-Distribution" 
rel="next">The Weibull Distribution</A>, Previous: <A accessKey="p" href="#The-Pareto-Distribution" 
rel="previous">The Pareto Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Spherical-Vector-Distributions-1"></A>
<H3 class="section">20.23 Spherical Vector Distributions</H3>
<P>The spherical distributions generate random vectors, located on a spherical 
 surface. They can be used as random directions, for example in the steps of a 
 random walk. </P>
<DL>
  <DT><A name="index-gsl_005fran_005fdir_005f2d"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_dir_2d</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double *   <VAR>x</VAR>, double * <VAR>y</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fran_005fdir_005f2d_005ftrig_005fmethod"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ran_dir_2d_trig_method</STRONG> <EM>(const gsl_rng * 
    <VAR>r</VAR>, double * <VAR>x</VAR>, double * <VAR>y</VAR>)</EM></DT>
  <DD><A name="index-2D-random-direction-vector"></A><A name="index-direction-vector_002c-random-2D"></A><A 
  name="index-spherical-random-variates_002c-2D"></A>
  <P>This function returns a random direction vector <EM>v</EM> =   
  (<VAR>x</VAR>,<VAR>y</VAR>) in two dimensions. The vector is normalized such   
  that <EM>|v|^2 = x^2 + y^2 = 1</EM>. The obvious way to do this is to take a   
  uniform random number between 0 and <EM>2\pi</EM> and let <VAR>x</VAR> and   
  <VAR>y</VAR> be the sine and cosine respectively. Two trig functions would   
  have been expensive in the old days, but with modern hardware implementations, 
    this is sometimes the fastest way to go. This is the case for the Pentium 
  (but   not the case for the Sun Sparcstation). One can avoid the trig 
  evaluations by   choosing <VAR>x</VAR> and <VAR>y</VAR> in the interior of a 
  unit circle   (choose them at random from the interior of the enclosing 
  square, and then   reject those that are outside the unit circle), and then 
  dividing by   <EM>\sqrt{x^2 + y^2}</EM>. A much cleverer approach, attributed 
  to von Neumann   (See Knuth, v2, 3rd ed, p140, exercise 23), requires neither 
  trig nor a square   root. In this approach, <VAR>u</VAR> and <VAR>v</VAR> are 
  chosen at random   from the interior of a unit circle, and then 
  <EM>x=(u^2-v^2)/(u^2+v^2)</EM>   and <EM>y=2uv/(u^2+v^2)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdir_005f3d"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_dir_3d</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double *   <VAR>x</VAR>, double * <VAR>y</VAR>, double * 
  <VAR>z</VAR>)</EM></DT>
  <DD><A name="index-3D-random-direction-vector"></A><A name="index-direction-vector_002c-random-3D"></A><A 
  name="index-spherical-random-variates_002c-3D"></A>
  <P>This function returns a random direction vector <EM>v</EM> =   
  (<VAR>x</VAR>,<VAR>y</VAR>,<VAR>z</VAR>) in three dimensions. The vector is   
  normalized such that <EM>|v|^2 = x^2 + y^2 + z^2 = 1</EM>. The method employed 
    is due to Robert E. Knop (CACM 13, 326 (1970)), and explained in Knuth, v2,  
   3rd ed, p136. It uses the surprising fact that the distribution projected   
  along any axis is actually uniform (this is only true for 3 dimensions).   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdir_005fnd"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_dir_nd</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, size_t   <VAR>n</VAR>, double * <VAR>x</VAR>)</EM></DT>
  <DD><A name="index-N_002ddimensional-random-direction-vector"></A><A name="index-direction-vector_002c-random-N_002ddimensional"></A><A 
  name="index-spherical-random-variates_002c-N_002ddimensional"></A>
  <P>This function returns a random direction vector <EM>v =   
  (x_1,x_2,...,x_n)</EM> in <VAR>n</VAR> dimensions. The vector is normalized   
  such that <EM>|v|^2 = x_1^2 + x_2^2 + ... + x_n^2 = 1</EM>. The method uses   
  the fact that a multivariate Gaussian distribution is spherically symmetric.   
  Each component is generated to have a Gaussian distribution, and then the   
  components are normalized. The method is described by Knuth, v2, 3rd ed,   
  p135–136, and attributed to G. W. Brown, Modern Mathematics for the Engineer   
  (1956). </P></DD></DL>
<HR>
<A name="The-Weibull-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Type_002d1-Gumbel-Distribution" 
rel="next">The Type-1 Gumbel Distribution</A>, Previous: <A accessKey="p" href="#Spherical-Vector-Distributions" 
rel="previous">Spherical Vector Distributions</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Weibull-Distribution-1"></A>
<H3 class="section">20.24 The Weibull Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fweibull"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_weibull</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Weibull-distribution"></A>
  <P>This function returns a random variate from the Weibull distribution. The   
  distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = {b \over a^b} x^{b-1}  \exp(-(x/a)^b) dx
</PRE></DIV>
  <P>for <EM>x &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fweibull_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_weibull_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
    double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Weibull distribution with scale <VAR>a</VAR> and exponent   
  <VAR>b</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fweibull_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_weibull_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fweibull_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_weibull_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fweibull_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_weibull_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fweibull_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_weibull_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Weibull distribution   
  with scale <VAR>a</VAR> and exponent <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Type_002d1-Gumbel-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Type_002d2-Gumbel-Distribution" 
rel="next">The Type-2 Gumbel Distribution</A>, Previous: <A accessKey="p" href="#The-Weibull-Distribution" 
rel="previous">The Weibull Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-Type_002d1-Gumbel-Distribution-1"></A>
<H3 class="section">20.25 The Type-1 Gumbel Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fgumbel1"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_gumbel1</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Gumbel-distribution-_0028Type-1_0029"></A><A name="index-Type-1-Gumbel-distribution_002c-random-variates"></A>
  <P>This function returns a random variate from the Type-1 Gumbel distribution. 
    The Type-1 Gumbel distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = a b \exp(-(b \exp(-ax) + ax)) dx
</PRE></DIV>
  <P>for <EM>-\infty &lt; x &lt; \infty</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgumbel1_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gumbel1_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
    double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Type-1 Gumbel distribution with parameters <VAR>a</VAR> and 
    <VAR>b</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fgumbel1_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gumbel1_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgumbel1_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gumbel1_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgumbel1_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_gumbel1_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgumbel1_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_gumbel1_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Type-1 Gumbel   
  distribution with parameters <VAR>a</VAR> and <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Type_002d2-Gumbel-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Dirichlet-Distribution" 
rel="next">The Dirichlet Distribution</A>, Previous: <A accessKey="p" href="#The-Type_002d1-Gumbel-Distribution" 
rel="previous">The Type-1 Gumbel Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-Type_002d2-Gumbel-Distribution-1"></A>
<H3 class="section">20.26 The Type-2 Gumbel Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fgumbel2"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_gumbel2</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD><A name="index-Gumbel-distribution-_0028Type-2_0029"></A><A name="index-Type-2-Gumbel-distribution"></A>
  <P>This function returns a random variate from the Type-2 Gumbel distribution. 
    The Type-2 Gumbel distribution function is, </P>
  <DIV class="example"><PRE class="example">p(x) dx = a b x^{-a-1} \exp(-b x^{-a}) dx
</PRE></DIV>
  <P>for <EM>0 &lt; x &lt; \infty</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgumbel2_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_gumbel2_pdf</STRONG> <EM>(double <VAR>x</VAR>, 
    double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(x)</EM> at   
  <VAR>x</VAR> for a Type-2 Gumbel distribution with parameters <VAR>a</VAR> and 
    <VAR>b</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fgumbel2_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gumbel2_P</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgumbel2_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_gumbel2_Q</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgumbel2_005fPinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_gumbel2_Pinv</STRONG> <EM>(double   
  <VAR>P</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgumbel2_005fQinv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_gumbel2_Qinv</STRONG> <EM>(double   
  <VAR>Q</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(x)</EM>, <EM>Q(x)</EM> and their inverses for the Type-2 Gumbel   
  distribution with parameters <VAR>a</VAR> and <VAR>b</VAR>. </P></DD></DL>
<HR>
<A name="The-Dirichlet-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#General-Discrete-Distributions" 
rel="next">General Discrete Distributions</A>, Previous: <A accessKey="p" href="#The-Type_002d2-Gumbel-Distribution" 
rel="previous">The Type-2 Gumbel Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Dirichlet-Distribution-1"></A>
<H3 class="section">20.27 The Dirichlet Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fdirichlet"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_dirichlet</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, size_t   <VAR>K</VAR>, const double <VAR>alpha</VAR>[], double   
  <VAR>theta</VAR>[])</EM></DT>
  <DD><A name="index-Dirichlet-distribution"></A>
  <P>This function returns an array of <VAR>K</VAR> random variates from a   
  Dirichlet distribution of order <VAR>K</VAR>-1. The distribution function is   
  </P>
  <DIV class="example"><PRE class="example">p(\theta_1, ..., \theta_K) d\theta_1 ... d\theta_K = 
  (1/Z) \prod_{i=1}^K \theta_i^{\alpha_i - 1} \delta(1 -\sum_{i=1}^K \theta_i) d\theta_1 ... d\theta_K
</PRE></DIV>
  <P>for <EM>theta_i &gt;= 0</EM> and <EM>alpha_i &gt; 0</EM>. The delta   
  function ensures that <EM>\sum \theta_i = 1</EM>. The normalization factor   
  <EM>Z</EM> is </P>
  <DIV class="example"><PRE class="example">Z = {\prod_{i=1}^K \Gamma(\alpha_i)} / {\Gamma( \sum_{i=1}^K \alpha_i)}
</PRE></DIV>
  <P>The random variates are generated by sampling <VAR>K</VAR> values from   
  gamma distributions with parameters <EM>a=alpha_i, b=1</EM>, and   
  renormalizing. See A.M. Law, W.D. Kelton, <CITE>Simulation Modeling and   
  Analysis</CITE> (1991). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdirichlet_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_dirichlet_pdf</STRONG> <EM>(size_t   
  <VAR>K</VAR>, const double <VAR>alpha</VAR>[], const double   
  <VAR>theta</VAR>[]) </EM></DT>
  <DD>
  <P>This function computes the probability density <EM>p(\theta_1, ... ,   
  \theta_K)</EM> at <VAR>theta</VAR>[<VAR>K</VAR>] for a Dirichlet distribution  
   with parameters <VAR>alpha</VAR>[<VAR>K</VAR>], using the formula given 
  above.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdirichlet_005flnpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_dirichlet_lnpdf</STRONG> <EM>(size_t   
  <VAR>K</VAR>, const double <VAR>alpha</VAR>[], const double   
  <VAR>theta</VAR>[]) </EM></DT>
  <DD>
  <P>This function computes the logarithm of the probability density   
  <EM>p(\theta_1, ... , \theta_K)</EM> for a Dirichlet distribution with   
  parameters <VAR>alpha</VAR>[<VAR>K</VAR>]. </P></DD></DL>
<HR>
<A name="General-Discrete-Distributions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Poisson-Distribution" 
rel="next">The Poisson Distribution</A>, Previous: <A accessKey="p" href="#The-Dirichlet-Distribution" 
rel="previous">The Dirichlet Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="General-Discrete-Distributions-1"></A>
<H3 class="section">20.28 General Discrete Distributions</H3>
<P>Given <EM>K</EM> discrete events with different probabilities <EM>P[k]</EM>, 
 produce a random value <EM>k</EM> consistent with its probability. </P>
<P>The obvious way to do this is to preprocess the probability list by 
 generating a cumulative probability array with <EM>K+1</EM> elements: </P>
<DIV class="example"><PRE class="example">  C[0] = 0 
C[k+1] = C[k]+P[k].
</PRE></DIV>
<P>Note that this construction produces <EM>C[K]=1</EM>. Now choose a uniform 
 deviate <EM>u</EM> between 0 and 1, and find the value of <EM>k</EM> such that 
<EM>C[k] &lt;= u &lt; C[k+1]</EM>. Although this in principle requires of order 
<EM>\log K</EM> steps per random number generation, they are fast steps, and if 
 you use something like <EM>\lfloor uK \rfloor</EM> as a starting point, you can 
 often do pretty well. </P>
<P>But faster methods have been devised. Again, the idea is to preprocess the 
 probability list, and save the result in some form of lookup table; then the 
 individual calls for a random discrete event can go rapidly. An approach 
 invented by G. Marsaglia (Generating discrete random variables in a computer, 
 Comm ACM 6, 37–38 (1963)) is very clever, and readers interested in examples of 
 good algorithm design are directed to this short and well-written paper. 
 Unfortunately, for large <EM>K</EM>, Marsaglia’s lookup table can be quite 
 large. </P>
<P>A much better approach is due to Alastair J. Walker (An efficient method for 
 generating discrete random variables with general distributions, ACM Trans on 
 Mathematical Software 3, 253–256 (1977); see also Knuth, v2, 3rd ed, 
 p120–121,139). This requires two lookup tables, one floating point and one 
 integer, but both only of size <EM>K</EM>. After preprocessing, the random 
 numbers are generated in O(1) time, even for large <EM>K</EM>. The 
preprocessing  suggested by Walker requires <EM>O(K^2)</EM> effort, but that is 
not actually  necessary, and the implementation provided here only takes 
<EM>O(K)</EM> effort.  In general, more preprocessing leads to faster generation 
of the individual  random numbers, but a diminishing return is reached pretty 
early. Knuth points  out that the optimal preprocessing is combinatorially 
difficult for large <EM>K</EM>. </P>
<P>This method can be used to speed up some of the discrete random number 
 generators below, such as the binomial distribution. To use it for something 
 like the Poisson Distribution, a modification would have to be made, since it 
 only takes a finite set of <EM>K</EM> outcomes. </P>
<DL>
  <DT><A name="index-gsl_005fran_005fdiscrete_005fpreproc"></A>Function:   
  <EM>gsl_ran_discrete_t *</EM> 
  <STRONG>gsl_ran_discrete_preproc</STRONG><EM>(size_t <VAR>K</VAR>, const 
  double * <VAR>P</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fran_005fdiscrete_005ft"></A><A name="index-Discrete-random-numbers"></A><A 
  name="index-Discrete-random-numbers_002c-preprocessing"></A>
  <P>This function returns a pointer to a structure that contains the lookup   
  table for the discrete random number generator. The array <VAR>P</VAR>[]   
  contains the probabilities of the discrete events; these array elements must   
  all be positive, but they needn’t add up to one (so you can think of them more 
    generally as “weights”)—the preprocessor will normalize appropriately. This  
   return value is used as an argument for the <CODE>gsl_ran_discrete</CODE>   
  function below. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdiscrete"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_ran_discrete</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, const   gsl_ran_discrete_t * <VAR>g</VAR>)</EM></DT>
  <DD><A name="index-Discrete-random-numbers-1"></A>
  <P>After the preprocessor, above, has been called, you use this function to   
  get the discrete random numbers. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdiscrete_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_discrete_pdf</STRONG> <EM>(size_t   
  <VAR>k</VAR>, const gsl_ran_discrete_t * <VAR>g</VAR>)</EM></DT>
  <DD><A name="index-Discrete-random-numbers-2"></A>
  <P>Returns the probability <EM>P[k]</EM> of observing the variable   
  <VAR>k</VAR>. Since <EM>P[k]</EM> is not stored as part of the lookup table,   
  it must be recomputed; this computation takes <EM>O(K)</EM>, so if   
  <VAR>K</VAR> is large and you care about the original array <EM>P[k]</EM> used 
    to create the lookup table, then you should just keep this original array   
  <EM>P[k]</EM> around. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fdiscrete_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ran_discrete_free</STRONG> <EM>(gsl_ran_discrete_t * 
    <VAR>g</VAR>)</EM></DT>
  <DD><A name="index-Discrete-random-numbers-3"></A>
  <P>De-allocates the lookup table pointed to by <VAR>g</VAR>. </P></DD></DL>
<HR>
<A name="The-Poisson-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Bernoulli-Distribution" 
rel="next">The Bernoulli Distribution</A>, Previous: <A accessKey="p" href="#General-Discrete-Distributions" 
rel="previous">General Discrete Distributions</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Poisson-Distribution-1"></A>
<H3 class="section">20.29 The Poisson Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fpoisson"></A>Function: <EM>unsigned 
  int</EM><STRONG>gsl_ran_poisson</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
  double   <VAR>mu</VAR>)</EM></DT>
  <DD><A name="index-Poisson-random-numbers"></A>
  <P>This function returns a random integer from the Poisson distribution with   
  mean <VAR>mu</VAR>. The probability distribution for Poisson variates is, </P>
  <DIV class="example"><PRE class="example">p(k) = {\mu^k \over k!} \exp(-\mu)
</PRE></DIV>
  <P>for <EM>k &gt;= 0</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fpoisson_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_poisson_pdf</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>mu</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a Poisson distribution with mean <VAR>mu</VAR>, using the   
  formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fpoisson_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_poisson_P</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>mu</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fpoisson_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_poisson_Q</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>mu</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(k)</EM>, <EM>Q(k)</EM> for the Poisson distribution with parameter   
  <VAR>mu</VAR>. </P></DD></DL>
<HR>
<A name="The-Bernoulli-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Binomial-Distribution" 
rel="next">The Binomial Distribution</A>, Previous: <A accessKey="p" href="#The-Poisson-Distribution" 
rel="previous">The Poisson Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Bernoulli-Distribution-1"></A>
<H3 class="section">20.30 The Bernoulli Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fbernoulli"></A>Function: <EM>unsigned   
  int</EM> <STRONG>gsl_ran_bernoulli</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
    double <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-Bernoulli-trial_002c-random-variates"></A>
  <P>This function returns either 0 or 1, the result of a Bernoulli trial with   
  probability <VAR>p</VAR>. The probability distribution for a Bernoulli trial   
  is, </P>
  <DIV class="example"><PRE class="example">p(0) = 1 - p
p(1) = p
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fbernoulli_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_bernoulli_pdf</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a Bernoulli distribution with probability parameter   
  <VAR>p</VAR>, using the formula given above. </P></DD></DL><BR>
<HR>
<A name="The-Binomial-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Multinomial-Distribution" 
rel="next">The Multinomial Distribution</A>, Previous: <A accessKey="p" href="#The-Bernoulli-Distribution" 
rel="previous">The Bernoulli Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Binomial-Distribution-1"></A>
<H3 class="section">20.31 The Binomial Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fbinomial"></A>Function: <EM>unsigned 
  int</EM><STRONG>gsl_ran_binomial</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
  double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-Binomial-random-variates"></A>
  <P>This function returns a random integer from the binomial distribution, the  
   number of successes in <VAR>n</VAR> independent trials with probability   
  <VAR>p</VAR>. The probability distribution for binomial variates is, </P>
  <DIV class="example"><PRE class="example">p(k) = {n! \over k! (n-k)! } p^k (1-p)^{n-k}
</PRE></DIV>
  <P>for <EM>0 &lt;= k &lt;= n</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fbinomial_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_binomial_pdf</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a binomial distribution with parameters <VAR>p</VAR> and   
  <VAR>n</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fbinomial_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_binomial_P</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fbinomial_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_binomial_Q</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(k)</EM>, <EM>Q(k)</EM> for the binomial distribution with parameters   
  <VAR>p</VAR> and <VAR>n</VAR>. </P></DD></DL>
<HR>
<A name="The-Multinomial-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Negative-Binomial-Distribution" 
rel="next">The Negative Binomial Distribution</A>, Previous: <A accessKey="p" 
href="#The-Binomial-Distribution" 
rel="previous">The Binomial Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Multinomial-Distribution-1"></A>
<H3 class="section">20.32 The Multinomial Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fmultinomial"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_multinomial</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, size_t   <VAR>K</VAR>, unsigned int <VAR>N</VAR>, const double 
  <VAR>p</VAR>[], unsigned   int <VAR>n</VAR>[])</EM></DT>
  <DD><A name="index-Multinomial-distribution"></A>
  <P>This function computes a random sample <VAR>n</VAR>[] from the multinomial  
   distribution formed by <VAR>N</VAR> trials from an underlying distribution   
  <VAR>p</VAR>[<VAR>K</VAR>]. The distribution function for <VAR>n</VAR>[] is,   
  </P>
  <DIV class="example"><PRE class="example">P(n_1, n_2, ..., n_K) = 
  (N!/(n_1! n_2! ... n_K!)) p_1^n_1 p_2^n_2 ... p_K^n_K
</PRE></DIV>
  <P>where <EM>(n_1, n_2, ..., n_K)</EM> are nonnegative integers with   
  <EM>sum_{k=1}^K n_k = N</EM>, and <EM>(p_1, p_2, ..., p_K)</EM> is a   
  probability distribution with <EM>\sum p_i = 1</EM>. If the array   
  <VAR>p</VAR>[<VAR>K</VAR>] is not normalized then its entries will be treated  
   as weights and normalized appropriately. The arrays <VAR>n</VAR>[] and   
  <VAR>p</VAR>[] must both be of length <VAR>K</VAR>. </P>
  <P>Random variates are generated using the conditional binomial method (see   
  C.S. Davis, <CITE>The computer generation of multinomial random   
  variates</CITE>, Comp. Stat. Data Anal. 16 (1993) 205–217 for details).   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fmultinomial_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_multinomial_pdf</STRONG> <EM>(size_t   
  <VAR>K</VAR>, const double <VAR>p</VAR>[], const unsigned int <VAR>n</VAR>[])  
   </EM></DT>
  <DD>
  <P>This function computes the probability <EM>P(n_1, n_2, ..., n_K)</EM> of   
  sampling <VAR>n</VAR>[<VAR>K</VAR>] from a multinomial distribution with   
  parameters <VAR>p</VAR>[<VAR>K</VAR>], using the formula given above. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fmultinomial_005flnpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_multinomial_lnpdf</STRONG> <EM>(size_t   
  <VAR>K</VAR>, const double <VAR>p</VAR>[], const unsigned int <VAR>n</VAR>[])  
   </EM></DT>
  <DD>
  <P>This function returns the logarithm of the probability for the multinomial  
   distribution <EM>P(n_1, n_2, ..., n_K)</EM> with parameters   
  <VAR>p</VAR>[<VAR>K</VAR>]. </P></DD></DL>
<HR>
<A name="The-Negative-Binomial-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Pascal-Distribution" 
rel="next">The Pascal Distribution</A>, Previous: <A accessKey="p" href="#The-Multinomial-Distribution" 
rel="previous">The Multinomial Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="The-Negative-Binomial-Distribution-1"></A>
<H3 class="section">20.33 The Negative Binomial Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fnegative_005fbinomial"></A>Function:   
  <EM>unsigned int</EM> <STRONG>gsl_ran_negative_binomial</STRONG> <EM>(const   
  gsl_rng * <VAR>r</VAR>, double <VAR>p</VAR>, double <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-Negative-Binomial-distribution_002c-random-variates"></A>
  <P>This function returns a random integer from the negative binomial   
  distribution, the number of failures occurring before <VAR>n</VAR> successes   
  in independent trials with probability <VAR>p</VAR> of success. The   
  probability distribution for negative binomial variates is, </P>
  <DIV class="example"><PRE class="example">p(k) = {\Gamma(n + k) \over \Gamma(k+1) \Gamma(n) } p^n (1-p)^k
</PRE></DIV>
  <P>Note that <EM>n</EM> is not required to be an integer. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fran_005fnegative_005fbinomial_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_negative_binomial_pdf</STRONG> <EM>(unsigned   
  int <VAR>k</VAR>, double <VAR>p</VAR>, double <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a negative binomial distribution with parameters   
  <VAR>p</VAR> and <VAR>n</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fnegative_005fbinomial_005fP"></A>Function:  
   <EM>double</EM> <STRONG>gsl_cdf_negative_binomial_P</STRONG> <EM>(unsigned 
  int   <VAR>k</VAR>, double <VAR>p</VAR>, double <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fnegative_005fbinomial_005fQ"></A>Function:  
   <EM>double</EM> <STRONG>gsl_cdf_negative_binomial_Q</STRONG> <EM>(unsigned 
  int   <VAR>k</VAR>, double <VAR>p</VAR>, double <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(k)</EM>, <EM>Q(k)</EM> for the negative binomial distribution with   
  parameters <VAR>p</VAR> and <VAR>n</VAR>. </P></DD></DL>
<HR>
<A name="The-Pascal-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Geometric-Distribution" 
rel="next">The Geometric Distribution</A>, Previous: <A accessKey="p" href="#The-Negative-Binomial-Distribution" 
rel="previous">The Negative Binomial Distribution</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Pascal-Distribution-1"></A>
<H3 class="section">20.34 The Pascal Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fpascal"></A>Function: <EM>unsigned 
  int</EM><STRONG>gsl_ran_pascal</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
  double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns a random integer from the Pascal distribution. The   
  Pascal distribution is simply a negative binomial distribution with an integer 
    value of <EM>n</EM>. </P>
  <DIV class="example"><PRE class="example">p(k) = {(n + k - 1)! \over k! (n - 1)! } p^n (1-p)^k
</PRE></DIV>
  <P>for <EM>k &gt;= 0</EM> </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fpascal_005fpdf"></A>Function: 
  <EM>double</EM><STRONG>gsl_ran_pascal_pdf</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a Pascal distribution with parameters <VAR>p</VAR> and   
  <VAR>n</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fpascal_005fP"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_pascal_P</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fpascal_005fQ"></A>Function: 
  <EM>double</EM><STRONG>gsl_cdf_pascal_Q</STRONG> <EM>(unsigned int 
  <VAR>k</VAR>, double   <VAR>p</VAR>, unsigned int <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(k)</EM>, <EM>Q(k)</EM> for the Pascal distribution with parameters   
  <VAR>p</VAR> and <VAR>n</VAR>. </P></DD></DL>
<HR>
<A name="The-Geometric-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Hypergeometric-Distribution" 
rel="next">The Hypergeometric Distribution</A>, Previous: <A accessKey="p" href="#The-Pascal-Distribution" 
rel="previous">The Pascal Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Geometric-Distribution-1"></A>
<H3 class="section">20.35 The Geometric Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005fgeometric"></A>Function: <EM>unsigned   
  int</EM> <STRONG>gsl_ran_geometric</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
    double <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-Geometric-random-variates"></A>
  <P>This function returns a random integer from the geometric distribution, the 
    number of independent trials with probability <VAR>p</VAR> until the first   
  success. The probability distribution for geometric variates is, </P>
  <DIV class="example"><PRE class="example">p(k) =  p (1-p)^(k-1)
</PRE></DIV>
  <P>for <EM>k &gt;= 1</EM>. Note that the distribution begins with <EM>k=1</EM> 
    with this definition. There is another convention in which the exponent   
  <EM>k-1</EM> is replaced by <EM>k</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fgeometric_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_geometric_pdf</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a geometric distribution with probability parameter   
  <VAR>p</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fgeometric_005fP"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_geometric_P</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>p</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fgeometric_005fQ"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_geometric_Q</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(k)</EM>, <EM>Q(k)</EM> for the geometric distribution with parameter   
  <VAR>p</VAR>. </P></DD></DL>
<HR>
<A name="The-Hypergeometric-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-Logarithmic-Distribution" 
rel="next">The Logarithmic Distribution</A>, Previous: <A accessKey="p" href="#The-Geometric-Distribution" 
rel="previous">The Geometric Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Hypergeometric-Distribution-1"></A>
<H3 class="section">20.36 The Hypergeometric Distribution</H3><A name="index-hypergeometric-random-variates"></A>
<DL>
  <DT><A name="index-gsl_005fran_005fhypergeometric"></A>Function: <EM>unsigned  
   int</EM> <STRONG>gsl_ran_hypergeometric</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, unsigned int <VAR>n1</VAR>, unsigned int <VAR>n2</VAR>, unsigned 
    int <VAR>t</VAR>)</EM></DT>
  <DD><A name="index-Geometric-random-variates-1"></A>
  <P>This function returns a random integer from the hypergeometric   
  distribution. The probability distribution for hypergeometric random variates  
   is, </P>
  <DIV class="example"><PRE class="example">p(k) =  C(n_1, k) C(n_2, t - k) / C(n_1 + n_2, t)
</PRE></DIV>
  <P>where <EM>C(a,b) = a!/(b!(a-b)!)</EM> and <EM>t &lt;= n_1 + n_2</EM>. The   
  domain of <EM>k</EM> is <EM>max(0,t-n_2), ..., min(t,n_1)</EM>. </P>
  <P>If a population contains <EM>n_1</EM> elements of “type 1” and <EM>n_2</EM> 
    elements of “type 2” then the hypergeometric distribution gives the   
  probability of obtaining <EM>k</EM> elements of “type 1” in <EM>t</EM> samples 
    from the population without replacement. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fhypergeometric_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_hypergeometric_pdf</STRONG> <EM>(unsigned int  
   <VAR>k</VAR>, unsigned int <VAR>n1</VAR>, unsigned int <VAR>n2</VAR>, 
  unsigned   int <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a hypergeometric distribution with parameters <VAR>n1</VAR>, 
    <VAR>n2</VAR>, <VAR>t</VAR>, using the formula given above. </P></DD></DL><BR>
<DL>
  <DT><A name="index-gsl_005fcdf_005fhypergeometric_005fP"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_hypergeometric_P</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, unsigned int <VAR>n1</VAR>, unsigned int <VAR>n2</VAR>, unsigned 
    int <VAR>t</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcdf_005fhypergeometric_005fQ"></A>Function:   
  <EM>double</EM> <STRONG>gsl_cdf_hypergeometric_Q</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, unsigned int <VAR>n1</VAR>, unsigned int <VAR>n2</VAR>, unsigned 
    int <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the cumulative distribution functions   
  <EM>P(k)</EM>, <EM>Q(k)</EM> for the hypergeometric distribution with   
  parameters <VAR>n1</VAR>, <VAR>n2</VAR> and <VAR>t</VAR>. </P></DD></DL>
<HR>
<A name="The-Logarithmic-Distribution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Shuffling-and-Sampling" 
rel="next">Shuffling and Sampling</A>, Previous: <A accessKey="p" href="#The-Hypergeometric-Distribution" 
rel="previous">The Hypergeometric Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-Logarithmic-Distribution-1"></A>
<H3 class="section">20.37 The Logarithmic Distribution</H3>
<DL>
  <DT><A name="index-gsl_005fran_005flogarithmic"></A>Function: <EM>unsigned   
  int</EM> <STRONG>gsl_ran_logarithmic</STRONG> <EM>(const gsl_rng *   
  <VAR>r</VAR>, double <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-Logarithmic-random-variates"></A>
  <P>This function returns a random integer from the logarithmic distribution.   
  The probability distribution for logarithmic random variates is, </P>
  <DIV class="example"><PRE class="example">p(k) = {-1 \over \log(1-p)} {(p^k \over k)}
</PRE></DIV>
  <P>for <EM>k &gt;= 1</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005flogarithmic_005fpdf"></A>Function:   
  <EM>double</EM> <STRONG>gsl_ran_logarithmic_pdf</STRONG> <EM>(unsigned int   
  <VAR>k</VAR>, double <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function computes the probability <EM>p(k)</EM> of obtaining   
  <VAR>k</VAR> from a logarithmic distribution with probability parameter   
  <VAR>p</VAR>, using the formula given above. </P></DD></DL><BR>
<HR>
<A name="Shuffling-and-Sampling"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Distribution-Examples" 
rel="next">Random Number Distribution Examples</A>, Previous: <A accessKey="p" 
href="#The-Logarithmic-Distribution" 
rel="previous">The Logarithmic Distribution</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Shuffling-and-Sampling-1"></A>
<H3 class="section">20.38 Shuffling and Sampling</H3>
<P>The following functions allow the shuffling and sampling of a set of objects. 
 The algorithms rely on a random number generator as a source of randomness and 
a  poor quality generator can lead to correlations in the output. In particular 
it  is important to avoid generators with a short period. For more information 
see  Knuth, v2, 3rd ed, Section 3.4.2, “Random Sampling and Shuffling”. </P>
<DL>
  <DT><A name="index-gsl_005fran_005fshuffle"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_shuffle</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, void *   <VAR>base</VAR>, size_t <VAR>n</VAR>, size_t 
  <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function randomly shuffles the order of <VAR>n</VAR> objects, each of  
   size <VAR>size</VAR>, stored in the array <VAR>base</VAR>[0..<VAR>n</VAR>-1]. 
    The output of the random number generator <VAR>r</VAR> is used to produce 
  the   permutation. The algorithm generates all possible <EM>n!</EM> 
  permutations   with equal probability, assuming a perfect source of random 
  numbers. </P>
  <P>The following code shows how to shuffle the numbers from 0 to 51, </P>
  <DIV class="example"><PRE class="example">int a[52];

for (i = 0; i &lt; 52; i++)
  {
    a[i] = i;
  }

gsl_ran_shuffle (r, a, 52, sizeof (int));
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fchoose"></A>Function: 
  <EM>int</EM><STRONG>gsl_ran_choose</STRONG> <EM>(const gsl_rng * <VAR>r</VAR>, 
  void *   <VAR>dest</VAR>, size_t <VAR>k</VAR>, void * <VAR>src</VAR>, size_t   
  <VAR>n</VAR>, size_t <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function fills the array <VAR>dest</VAR>[k] with <VAR>k</VAR> objects  
   taken randomly from the <VAR>n</VAR> elements of the array   
  <VAR>src</VAR>[0..<VAR>n</VAR>-1]. The objects are each of size   
  <VAR>size</VAR>. The output of the random number generator <VAR>r</VAR> is   
  used to make the selection. The algorithm ensures all possible samples are   
  equally likely, assuming a perfect source of randomness. </P>
  <P>The objects are sampled <EM>without</EM> replacement, thus each object can  
   only appear once in <VAR>dest</VAR>[k]. It is required that <VAR>k</VAR> be   
  less than or equal to <CODE>n</CODE>. The objects in <VAR>dest</VAR> will be   
  in the same relative order as those in <VAR>src</VAR>. You will need to call   
  <CODE>gsl_ran_shuffle(r, dest, n, size)</CODE> if you want to randomize the   
  order. </P>
  <P>The following code shows how to select a random sample of three unique   
  numbers from the set 0 to 99, </P>
  <DIV class="example"><PRE class="example">double a[3], b[100];

for (i = 0; i &lt; 100; i++)
  {
    b[i] = (double) i;
  }

gsl_ran_choose (r, a, 3, b, 100, sizeof (double));
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fran_005fsample"></A>Function: 
  <EM>void</EM><STRONG>gsl_ran_sample</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, void *   <VAR>dest</VAR>, size_t <VAR>k</VAR>, void * 
  <VAR>src</VAR>, size_t   <VAR>n</VAR>, size_t <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function is like <CODE>gsl_ran_choose</CODE> but samples <VAR>k</VAR>  
   items from the original array of <VAR>n</VAR> items <VAR>src</VAR> with   
  replacement, so the same object can appear more than once in the output   
  sequence <VAR>dest</VAR>. There is no requirement that <VAR>k</VAR> be less   
  than <VAR>n</VAR> in this case. </P></DD></DL>
<HR>
<A name="Random-Number-Distribution-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Random-Number-Distribution-References-and-Further-Reading" 
rel="next">Random Number Distribution References and Further Reading</A>, 
 Previous: <A accessKey="p" href="#Shuffling-and-Sampling" 
rel="previous">Shuffling and Sampling</A>, Up: <A accessKey="u" href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-13"></A>
<H3 class="section">20.39 Examples</H3>
<P>The following program demonstrates the use of a random number generator to 
 produce variates from a distribution. It prints 10 samples from the Poisson 
 distribution with a mean of 3. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;

int
main (void)
{
  const gsl_rng_type * T;
  gsl_rng * r;

  int i, n = 10;
  double mu = 3.0;

  /* create a generator chosen by the 
     environment variable GSL_RNG_TYPE */

  gsl_rng_env_setup();

  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  /* print n random variates chosen from 
     the poisson distribution with mean 
     parameter mu */

  for (i = 0; i &lt; n; i++) 
    {
      unsigned int k = gsl_ran_poisson (r, mu);
      printf (" %u", k);
    }

  printf ("\n");
  gsl_rng_free (r);
  return 0;
}
</PRE></DIV>
<P>If the library and header files are installed under <SAMP>/usr/local</SAMP> 
 (the default location) then the program can be compiled with these options, 
</P>
<DIV class="example"><PRE class="example">$ gcc -Wall demo.c -lgsl -lgslcblas -lm
</PRE></DIV>
<P>Here is the output of the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim"> 2 5 5 2 1 0 3 4 1 1
</PRE></DIV>
<P>The variates depend on the seed used by the generator. The seed for the 
 default generator type <CODE>gsl_rng_default</CODE> can be changed with the 
<CODE>GSL_RNG_SEED</CODE> environment variable to produce a different stream of 
 variates, </P>
<DIV class="example"><PRE class="example">$ GSL_RNG_SEED=123 ./a.out 
</PRE><PRE class="verbatim">GSL_RNG_SEED=123
 4 5 6 3 3 1 4 2 5 5
</PRE></DIV>
<P>The following program generates a random walk in two dimensions. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;

int
main (void)
{
  int i;
  double x = 0, y = 0, dx, dy;

  const gsl_rng_type * T;
  gsl_rng * r;

  gsl_rng_env_setup();
  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  printf ("%g %g\n", x, y);

  for (i = 0; i &lt; 10; i++)
    {
      gsl_ran_dir_2d (r, &amp;dx, &amp;dy);
      x += dx; y += dy; 
      printf ("%g %g\n", x, y);
    }

  gsl_rng_free (r);
  return 0;
}
</PRE></DIV>
<P>Here is some output from the program, four 10-step random walks from the 
 origin, </P>
<P>The following program computes the upper and lower cumulative distribution 
 functions for the standard normal distribution at <EM>x=2</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_cdf.h&gt;

int
main (void)
{
  double P, Q;
  double x = 2.0;

  P = gsl_cdf_ugaussian_P (x);
  printf ("prob(x &lt; %f) = %f\n", x, P);

  Q = gsl_cdf_ugaussian_Q (x);
  printf ("prob(x &gt; %f) = %f\n", x, Q);

  x = gsl_cdf_ugaussian_Pinv (P);
  printf ("Pinv(%f) = %f\n", P, x);

  x = gsl_cdf_ugaussian_Qinv (Q);
  printf ("Qinv(%f) = %f\n", Q, x);

  return 0;
}
</PRE></DIV>
<P>Here is the output of the program, </P>
<DIV class="example"><PRE class="verbatim">prob(x &lt; 2.000000) = 0.977250
prob(x &gt; 2.000000) = 0.022750
Pinv(0.977250) = 2.000000
Qinv(0.022750) = 2.000000
</PRE></DIV>
<HR>
<A name="Random-Number-Distribution-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Random-Number-Distribution-Examples" 
rel="previous">Random Number Distribution Examples</A>, Up: <A accessKey="u" 
href="#Random-Number-Distributions" 
rel="up">Random Number Distributions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-13"></A>
<H3 class="section">20.40 References and Further Reading</H3>
<P>For an encyclopaedic coverage of the subject readers are advised to consult 
 the book <CITE>Non-Uniform Random Variate Generation</CITE> by Luc Devroye. It 
 covers every imaginable distribution and provides hundreds of algorithms. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Luc Devroye, <CITE>Non-Uniform Random Variate   
  Generation</CITE>, Springer-Verlag, ISBN 0-387-96305-7. Available online at <A 
  href="http://cg.scs.carleton.ca/~luc/rnbookindex.html">http://cg.scs.carleton.ca/~luc/rnbookindex.html</A>. 
    </LI></UL>
<P>The subject of random variate generation is also reviewed by Knuth, who 
 describes algorithms for all the major distributions. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Donald E. Knuth, <CITE>The Art of Computer Programming:   
  Seminumerical Algorithms</CITE> (Vol 2, 3rd Ed, 1997), Addison-Wesley, ISBN   
  0201896842. </LI></UL>
<P>The Particle Data Group provides a short review of techniques for generating 
 distributions of random numbers in the “Monte Carlo” section of its Annual 
 Review of Particle Physics. </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>Review of Particle Properties</CITE> R.M. Barnett et   
  al., Physical Review D54, 1 (1996) <A 
  href="http://pdg.lbl.gov/">http://pdg.lbl.gov/</A>. </LI></UL>
<P>The Review of Particle Physics is available online in postscript and pdf 
 format. </P>
<P>An overview of methods used to compute cumulative distribution functions can 
 be found in <CITE>Statistical Computing</CITE> by W.J. Kennedy and J.E. Gentle. 
 Another general reference is <CITE>Elements of Statistical Computing</CITE> by 
 R.A. Thisted. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->William E. Kennedy and James E. Gentle, <CITE>Statistical   
  Computing</CITE> (1980), Marcel Dekker, ISBN 0-8247-6898-1. </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w -->Ronald A. Thisted, <CITE>Elements of Statistical   
  Computing</CITE> (1988), Chapman &amp; Hall, ISBN 0-412-01371-1. </LI></UL>
<P>The cumulative distribution functions for the Gaussian distribution are based 
 on the following papers, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>Rational Chebyshev Approximations Using Linear   
  Equations</CITE>, W.J. Cody, W. Fraser, J.F. Hart. Numerische Mathematik 12,   
  242–251 (1968). </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>Rational Chebyshev Approximations for the Error   
  Function</CITE>, W.J. Cody. Mathematics of Computation 23, n107, 631–637 (July 
    1969). </LI></UL>
<HR>
<A name="Statistics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Running-Statistics" 
rel="next">Running Statistics</A>, Previous: <A accessKey="p" href="#Random-Number-Distributions" 
rel="previous">Random Number Distributions</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Statistics-1"></A>
<H2 class="chapter">21 Statistics</H2><A name="index-statistics"></A><A name="index-mean"></A><A 
name="index-standard-deviation"></A><A name="index-variance"></A><A name="index-estimated-standard-deviation"></A><A 
name="index-estimated-variance"></A><A name="index-t_002dtest"></A><A name="index-range"></A><A 
name="index-min"></A><A name="index-max"></A>
<P>This chapter describes the statistical functions in the library. The basic 
 statistical functions include routines to compute the mean, variance and 
 standard deviation. More advanced functions allow you to calculate absolute 
 deviations, skewness, and kurtosis as well as the median and arbitrary 
 percentiles. The algorithms use recurrence relations to compute average 
 quantities in a stable way, without large intermediate values that might 
 overflow. </P>
<P>The functions are available in versions for datasets in the standard 
 floating-point and integer types. The versions for double precision 
 floating-point data have the prefix <CODE>gsl_stats</CODE> and are declared in 
 the header file <SAMP>gsl_statistics_double.h</SAMP>. The versions for integer 
 data have the prefix <CODE>gsl_stats_int</CODE> and are declared in the header 
 file <SAMP>gsl_statistics_int.h</SAMP>. All the functions operate on C arrays 
 with a <VAR>stride</VAR> parameter specifying the spacing between elements. 
</P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Absolute-deviation">Absolute 
            deviation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Autocorrelation">Autocorrelation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Covariance">Covariance</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Correlation">Correlation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Weighted-Samples">Weighted 
            Samples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Median-and-Percentiles">Median 
            and Percentiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Example-statistical-programs">Example 
            statistical programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Statistics-References-and-Further-Reading">Statistics 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Mean-and-standard-deviation-and-variance"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Absolute-deviation" 
rel="next">Absolute deviation</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mean_002c-Standard-Deviation-and-Variance"></A>
<H3 class="section">21.1 Mean, Standard Deviation and Variance</H3>
<DL>
  <DT><A name="index-gsl_005fstats_005fmean"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_mean</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the arithmetic mean of <VAR>data</VAR>, a dataset of  
   length <VAR>n</VAR> with stride <VAR>stride</VAR>. The arithmetic mean, or   
  <EM>sample mean</EM>, is denoted by <EM>\Hat\mu</EM> and defined as, </P>
  <DIV class="example"><PRE class="example">\Hat\mu = (1/N) \sum x_i
</PRE></DIV>
  <P>where <EM>x_i</EM> are the elements of the dataset <VAR>data</VAR>. For   
  samples drawn from a gaussian distribution the variance of <EM>\Hat\mu</EM> is 
    <EM>\sigma^2 / N</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fvariance"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_variance</STRONG> <EM>(const double 
  <VAR>data</VAR>[],   size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the estimated, or <EM>sample</EM>, variance of   
  <VAR>data</VAR>, a dataset of length <VAR>n</VAR> with stride   
  <VAR>stride</VAR>. The estimated variance is denoted by <EM>\Hat\sigma^2</EM>  
   and is defined by, </P>
  <DIV class="example"><PRE class="example">\Hat\sigma^2 = (1/(N-1)) \sum (x_i - \Hat\mu)^2
</PRE></DIV>
  <P>where <EM>x_i</EM> are the elements of the dataset <VAR>data</VAR>. Note   
  that the normalization factor of <EM>1/(N-1)</EM> results from the derivation  
   of <EM>\Hat\sigma^2</EM> as an unbiased estimator of the population variance  
   <EM>\sigma^2</EM>. For samples drawn from a Gaussian distribution the 
  variance   of <EM>\Hat\sigma^2</EM> itself is <EM>2 \sigma^4 / N</EM>. </P>
  <P>This function computes the mean via a call to <CODE>gsl_stats_mean</CODE>.  
   If you have already computed the mean then you can pass it directly to   
  <CODE>gsl_stats_variance_m</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fvariance_005fm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_variance_m</STRONG> <EM>(const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double   
  <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>This function returns the sample variance of <VAR>data</VAR> relative to   
  the given value of <VAR>mean</VAR>. The function is computed with   
  <EM>\Hat\mu</EM> replaced by the value of <VAR>mean</VAR> that you supply, 
</P>
  <DIV class="example"><PRE class="example">\Hat\sigma^2 = (1/(N-1)) \sum (x_i - mean)^2
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fsd"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_sd</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fstats_005fsd_005fm"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_sd_m</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>, double 
  <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>The standard deviation is defined as the square root of the variance. These 
    functions return the square root of the corresponding variance functions   
  above. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005ftss"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_tss</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fstats_005ftss_005fm"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_tss_m</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>, double 
  <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>These functions return the total sum of squares (TSS) of <VAR>data</VAR>   
  about the mean. For <CODE>gsl_stats_tss_m</CODE> the user-supplied value of   
  <VAR>mean</VAR> is used, and for <CODE>gsl_stats_tss</CODE> it is computed   
  using <CODE>gsl_stats_mean</CODE>. </P>
  <DIV class="example"><PRE class="example">TSS =  \sum (x_i - mean)^2
</PRE></DIV></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005fvariance_005fwith_005ffixed_005fmean"></A>Function: 
    <EM>double</EM> <STRONG>gsl_stats_variance_with_fixed_mean</STRONG> 
  <EM>(const   double <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>,   double <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>This function computes an unbiased estimate of the variance of   
  <VAR>data</VAR> when the population mean <VAR>mean</VAR> of the underlying   
  distribution is known <EM>a priori</EM>. In this case the estimator for the   
  variance uses the factor <EM>1/N</EM> and the sample mean <EM>\Hat\mu</EM> is  
   replaced by the known population mean <EM>\mu</EM>, </P>
  <DIV class="example"><PRE class="example">\Hat\sigma^2 = (1/N) \sum (x_i - \mu)^2
</PRE></DIV></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005fsd_005fwith_005ffixed_005fmean"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_sd_with_fixed_mean</STRONG> <EM>(const   
  double <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>,   
  double <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>This function calculates the standard deviation of <VAR>data</VAR> for a   
  fixed population mean <VAR>mean</VAR>. The result is the square root of the   
  corresponding variance function. </P></DD></DL>
<HR>
<A name="Absolute-deviation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Higher-moments-_0028skewness-and-kurtosis_0029" 
rel="next">Higher moments (skewness and kurtosis)</A>, Previous: <A accessKey="p" 
href="#Mean-and-standard-deviation-and-variance" 
rel="previous">Mean and standard deviation and variance</A>, Up: <A accessKey="u" 
href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Absolute-deviation-1"></A>
<H3 class="section">21.2 Absolute deviation</H3>
<DL>
  <DT><A name="index-gsl_005fstats_005fabsdev"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_absdev</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the absolute deviation from the mean of   
  <VAR>data</VAR>, a dataset of length <VAR>n</VAR> with stride   
  <VAR>stride</VAR>. The absolute deviation from the mean is defined as, </P>
  <DIV class="example"><PRE class="example">absdev  = (1/N) \sum |x_i - \Hat\mu|
</PRE></DIV>
  <P>where <EM>x_i</EM> are the elements of the dataset <VAR>data</VAR>. The   
  absolute deviation from the mean provides a more robust measure of the width   
  of a distribution than the variance. This function computes the mean of   
  <VAR>data</VAR> via a call to <CODE>gsl_stats_mean</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fabsdev_005fm"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_absdev_m</STRONG> <EM>(const double 
  <VAR>data</VAR>[],   size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double   
  <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>This function computes the absolute deviation of the dataset   
  <VAR>data</VAR> relative to the given value of <VAR>mean</VAR>, </P>
  <DIV class="example"><PRE class="example">absdev  = (1/N) \sum |x_i - mean|
</PRE></DIV>
  <P>This function is useful if you have already computed the mean of   
  <VAR>data</VAR> (and want to avoid recomputing it), or wish to calculate the   
  absolute deviation relative to another value (such as zero, or the median).   
  </P></DD></DL>
<HR>
<A name="Higher-moments-_0028skewness-and-kurtosis_0029"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Autocorrelation" 
rel="next">Autocorrelation</A>, Previous: <A accessKey="p" href="#Absolute-deviation" 
rel="previous">Absolute deviation</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Higher-moments-_0028skewness-and-kurtosis_0029-1"></A>
<H3 class="section">21.3 Higher moments (skewness and kurtosis)</H3><A name="index-skewness"></A><A 
name="index-kurtosis"></A>
<DL>
  <DT><A name="index-gsl_005fstats_005fskew"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_skew</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the skewness of <VAR>data</VAR>, a dataset of length 
    <VAR>n</VAR> with stride <VAR>stride</VAR>. The skewness is defined as, </P>
  <DIV class="example"><PRE class="example">skew = (1/N) \sum ((x_i - \Hat\mu)/\Hat\sigma)^3
</PRE></DIV>
  <P>where <EM>x_i</EM> are the elements of the dataset <VAR>data</VAR>. The   
  skewness measures the asymmetry of the tails of a distribution. </P>
  <P>The function computes the mean and estimated standard deviation of   
  <VAR>data</VAR> via calls to <CODE>gsl_stats_mean</CODE> and   
  <CODE>gsl_stats_sd</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fskew_005fm_005fsd"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_skew_m_sd</STRONG> <EM>(const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double   
  <VAR>mean</VAR>, double <VAR>sd</VAR>)</EM></DT>
  <DD>
  <P>This function computes the skewness of the dataset <VAR>data</VAR> using   
  the given values of the mean <VAR>mean</VAR> and standard deviation   
  <VAR>sd</VAR>, </P>
  <DIV class="example"><PRE class="example">skew = (1/N) \sum ((x_i - mean)/sd)^3
</PRE></DIV>
  <P>These functions are useful if you have already computed the mean and   
  standard deviation of <VAR>data</VAR> and want to avoid recomputing them.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fkurtosis"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_kurtosis</STRONG> <EM>(const double 
  <VAR>data</VAR>[],   size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the kurtosis of <VAR>data</VAR>, a dataset of length 
    <VAR>n</VAR> with stride <VAR>stride</VAR>. The kurtosis is defined as, </P>
  <DIV class="example"><PRE class="example">kurtosis = ((1/N) \sum ((x_i - \Hat\mu)/\Hat\sigma)^4)  - 3
</PRE></DIV>
  <P>The kurtosis measures how sharply peaked a distribution is, relative to its 
    width. The kurtosis is normalized to zero for a Gaussian distribution.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fkurtosis_005fm_005fsd"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_kurtosis_m_sd</STRONG> <EM>(const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double   
  <VAR>mean</VAR>, double <VAR>sd</VAR>)</EM></DT>
  <DD>
  <P>This function computes the kurtosis of the dataset <VAR>data</VAR> using   
  the given values of the mean <VAR>mean</VAR> and standard deviation   
  <VAR>sd</VAR>, </P>
  <DIV class="example"><PRE class="example">kurtosis = ((1/N) \sum ((x_i - mean)/sd)^4) - 3
</PRE></DIV>
  <P>This function is useful if you have already computed the mean and standard  
   deviation of <VAR>data</VAR> and want to avoid recomputing them. </P></DD></DL>
<HR>
<A name="Autocorrelation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Covariance" 
rel="next">Covariance</A>, Previous: <A accessKey="p" href="#Higher-moments-_0028skewness-and-kurtosis_0029" 
rel="previous">Higher moments (skewness and kurtosis)</A>, Up: <A accessKey="u" 
href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Autocorrelation-1"></A>
<H3 class="section">21.4 Autocorrelation</H3>
<DL>
  <DT><A name="index-gsl_005fstats_005flag1_005fautocorrelation"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_lag1_autocorrelation</STRONG> <EM>(const   
  double <VAR>data</VAR>[], const size_t <VAR>stride</VAR>, const size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the lag-1 autocorrelation of the dataset   
  <VAR>data</VAR>. </P>
  <DIV class="example"><PRE class="example">a_1 = {\sum_{i = 1}^{n} (x_{i} - \Hat\mu) (x_{i-1} - \Hat\mu)
       \over
       \sum_{i = 1}^{n} (x_{i} - \Hat\mu) (x_{i} - \Hat\mu)}
</PRE></DIV></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005flag1_005fautocorrelation_005fm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_lag1_autocorrelation_m</STRONG> <EM>(const   
  double <VAR>data</VAR>[], const size_t <VAR>stride</VAR>, const size_t   
  <VAR>n</VAR>, const double <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>This function computes the lag-1 autocorrelation of the dataset   
  <VAR>data</VAR> using the given value of the mean <VAR>mean</VAR>. 
</P></DD></DL>
<HR>
<A name="Covariance"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Correlation" 
rel="next">Correlation</A>, Previous: <A accessKey="p" href="#Autocorrelation" 
rel="previous">Autocorrelation</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Covariance-1"></A>
<H3 class="section">21.5 Covariance</H3><A name="index-covariance_002c-of-two-datasets"></A>
<DL>
  <DT><A name="index-gsl_005fstats_005fcovariance"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_covariance</STRONG> <EM>(const double 
  <VAR>data1</VAR>[],   const size_t <VAR>stride1</VAR>, const double 
  <VAR>data2</VAR>[], const size_t   <VAR>stride2</VAR>, const size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the covariance of the datasets <VAR>data1</VAR> and  
   <VAR>data2</VAR> which must both be of the same length <VAR>n</VAR>. </P>
  <DIV class="example"><PRE class="example">covar = (1/(n - 1)) \sum_{i = 1}^{n} (x_i - \Hat x) (y_i - \Hat y)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fcovariance_005fm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_covariance_m</STRONG> <EM>(const double   
  <VAR>data1</VAR>[], const size_t <VAR>stride1</VAR>, const double   
  <VAR>data2</VAR>[], const size_t <VAR>stride2</VAR>, const size_t   
  <VAR>n</VAR>, const double <VAR>mean1</VAR>, const double   
  <VAR>mean2</VAR>)</EM></DT>
  <DD>
  <P>This function computes the covariance of the datasets <VAR>data1</VAR> and  
   <VAR>data2</VAR> using the given values of the means, <VAR>mean1</VAR> and   
  <VAR>mean2</VAR>. This is useful if you have already computed the means of   
  <VAR>data1</VAR> and <VAR>data2</VAR> and want to avoid recomputing them.   
  </P></DD></DL>
<HR>
<A name="Correlation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Weighted-Samples" 
rel="next">Weighted Samples</A>, Previous: <A accessKey="p" href="#Covariance" 
rel="previous">Covariance</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Correlation-1"></A>
<H3 class="section">21.6 Correlation</H3><A name="index-correlation_002c-of-two-datasets"></A>
<DL>
  <DT><A name="index-gsl_005fstats_005fcorrelation"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_correlation</STRONG> <EM>(const double 
  <VAR>data1</VAR>[],   const size_t <VAR>stride1</VAR>, const double 
  <VAR>data2</VAR>[], const size_t   <VAR>stride2</VAR>, const size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function efficiently computes the Pearson correlation coefficient   
  between the datasets <VAR>data1</VAR> and <VAR>data2</VAR> which must both be  
   of the same length <VAR>n</VAR>. </P>
  <DIV class="example"><PRE class="example">r = cov(x, y) / (\Hat\sigma_x \Hat\sigma_y)
  = {1/(n-1) \sum (x_i - \Hat x) (y_i - \Hat y)
     \over
     \sqrt{1/(n-1) \sum (x_i - \Hat x)^2} \sqrt{1/(n-1) \sum (y_i - \Hat y)^2}
    }
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fspearman"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_spearman</STRONG> <EM>(const double 
  <VAR>data1</VAR>[],   const size_t <VAR>stride1</VAR>, const double 
  <VAR>data2</VAR>[], const size_t   <VAR>stride2</VAR>, const size_t 
  <VAR>n</VAR>, double   <VAR>work</VAR>[])</EM></DT>
  <DD>
  <P>This function computes the Spearman rank correlation coefficient between   
  the datasets <VAR>data1</VAR> and <VAR>data2</VAR> which must both be of the   
  same length <VAR>n</VAR>. Additional workspace of size 2*<VAR>n</VAR> is   
  required in <VAR>work</VAR>. The Spearman rank correlation between vectors   
  <EM>x</EM> and <EM>y</EM> is equivalent to the Pearson correlation between the 
    ranked vectors <EM>x_R</EM> and <EM>y_R</EM>, where ranks are defined to be  
   the average of the positions of an element in the ascending order of the   
  values. </P></DD></DL>
<HR>
<A name="Weighted-Samples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Maximum-and-Minimum-values" 
rel="next">Maximum and Minimum values</A>, Previous: <A accessKey="p" href="#Correlation" 
rel="previous">Correlation</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Weighted-Samples-1"></A>
<H3 class="section">21.7 Weighted Samples</H3>
<P>The functions described in this section allow the computation of statistics 
 for weighted samples. The functions accept an array of samples, <EM>x_i</EM>, 
 with associated weights, <EM>w_i</EM>. Each sample <EM>x_i</EM> is considered 
as  having been drawn from a Gaussian distribution with variance 
<EM>\sigma_i^2</EM>. The sample weight <EM>w_i</EM> is defined as the reciprocal 
 of this variance, <EM>w_i = 1/\sigma_i^2</EM>. Setting a weight to zero 
 corresponds to removing a sample from a dataset. </P>
<DL>
  <DT><A name="index-gsl_005fstats_005fwmean"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wmean</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the weighted mean of the dataset <VAR>data</VAR> with 
    stride <VAR>stride</VAR> and length <VAR>n</VAR>, using the set of weights   
  <VAR>w</VAR> with stride <VAR>wstride</VAR> and length <VAR>n</VAR>. The   
  weighted mean is defined as, </P>
  <DIV class="example"><PRE class="example">\Hat\mu = (\sum w_i x_i) / (\sum w_i)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwvariance"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wvariance</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the estimated variance of the dataset <VAR>data</VAR> 
    with stride <VAR>stride</VAR> and length <VAR>n</VAR>, using the set of   
  weights <VAR>w</VAR> with stride <VAR>wstride</VAR> and length <VAR>n</VAR>.   
  The estimated variance of a weighted dataset is calculated as, </P>
  <DIV class="example"><PRE class="example">\Hat\sigma^2 = ((\sum w_i)/((\sum w_i)^2 - \sum (w_i^2))) 
                \sum w_i (x_i - \Hat\mu)^2
</PRE></DIV>
  <P>Note that this expression reduces to an unweighted variance with the   
  familiar <EM>1/(N-1)</EM> factor when there are <EM>N</EM> equal non-zero   
  weights. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwvariance_005fm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_wvariance_m</STRONG> <EM>(const double   
  <VAR>w</VAR>[], size_t <VAR>wstride</VAR>, const double <VAR>data</VAR>[],   
  size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double   
  <VAR>wmean</VAR>)</EM></DT>
  <DD>
  <P>This function returns the estimated variance of the weighted dataset   
  <VAR>data</VAR> using the given weighted mean <VAR>wmean</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwsd"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wsd</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>The standard deviation is defined as the square root of the variance. This  
   function returns the square root of the corresponding variance function   
  <CODE>gsl_stats_wvariance</CODE> above. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwsd_005fm"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wsd_m</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>, double 
  <VAR>wmean</VAR>)</EM></DT>
  <DD>
  <P>This function returns the square root of the corresponding variance   
  function <CODE>gsl_stats_wvariance_m</CODE> above. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005fwvariance_005fwith_005ffixed_005fmean"></A>Function: 
    <EM>double</EM> 
  <STRONG>gsl_stats_wvariance_with_fixed_mean</STRONG><EM>(const double 
  <VAR>w</VAR>[], size_t <VAR>wstride</VAR>, const double   <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, const double   
  <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>This function computes an unbiased estimate of the variance of the weighted 
    dataset <VAR>data</VAR> when the population mean <VAR>mean</VAR> of the   
  underlying distribution is known <EM>a priori</EM>. In this case the estimator 
    for the variance replaces the sample mean <EM>\Hat\mu</EM> by the known   
  population mean <EM>\mu</EM>, </P>
  <DIV class="example"><PRE class="example">\Hat\sigma^2 = (\sum w_i (x_i - \mu)^2) / (\sum w_i)
</PRE></DIV></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005fwsd_005fwith_005ffixed_005fmean"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_wsd_with_fixed_mean</STRONG> <EM>(const   
  double <VAR>w</VAR>[], size_t <VAR>wstride</VAR>, const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, const double 
    <VAR>mean</VAR>)</EM></DT>
  <DD>
  <P>The standard deviation is defined as the square root of the variance. This  
   function returns the square root of the corresponding variance function 
  above.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwtss"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wtss</STRONG> <EM>(const double 
  <VAR>w</VAR>[], const size_t   <VAR>wstride</VAR>, const double 
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fstats_005fwtss_005fm"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wtss_m</STRONG> <EM>(const double 
  <VAR>w</VAR>[], const   size_t <VAR>wstride</VAR>, const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>, double 
  <VAR>wmean</VAR>)</EM></DT>
  <DD>
  <P>These functions return the weighted total sum of squares (TSS) of   
  <VAR>data</VAR> about the weighted mean. For <CODE>gsl_stats_wtss_m</CODE> the 
    user-supplied value of <VAR>wmean</VAR> is used, and for   
  <CODE>gsl_stats_wtss</CODE> it is computed using <CODE>gsl_stats_wmean</CODE>. 
    </P>
  <DIV class="example"><PRE class="example">TSS =  \sum w_i (x_i - wmean)^2
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwabsdev"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wabsdev</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the weighted absolute deviation from the weighted   
  mean of <VAR>data</VAR>. The absolute deviation from the mean is defined as,   
  </P>
  <DIV class="example"><PRE class="example">absdev = (\sum w_i |x_i - \Hat\mu|) / (\sum w_i)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwabsdev_005fm"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_wabsdev_m</STRONG> <EM>(const double   
  <VAR>w</VAR>[], size_t <VAR>wstride</VAR>, const double <VAR>data</VAR>[],   
  size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double   
  <VAR>wmean</VAR>)</EM></DT>
  <DD>
  <P>This function computes the absolute deviation of the weighted dataset   
  <VAR>data</VAR> about the given weighted mean <VAR>wmean</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwskew"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wskew</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the weighted skewness of the dataset   
  <VAR>data</VAR>. </P>
  <DIV class="example"><PRE class="example">skew = (\sum w_i ((x_i - \Hat x)/\Hat \sigma)^3) / (\sum w_i)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwskew_005fm_005fsd"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_wskew_m_sd</STRONG> <EM>(const double   
  <VAR>w</VAR>[], size_t <VAR>wstride</VAR>, const double <VAR>data</VAR>[],   
  size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double <VAR>wmean</VAR>, double 
    <VAR>wsd</VAR>)</EM></DT>
  <DD>
  <P>This function computes the weighted skewness of the dataset <VAR>data</VAR> 
    using the given values of the weighted mean and weighted standard deviation, 
    <VAR>wmean</VAR> and <VAR>wsd</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwkurtosis"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_wkurtosis</STRONG> <EM>(const double 
  <VAR>w</VAR>[], size_t   <VAR>wstride</VAR>, const double <VAR>data</VAR>[], 
  size_t <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function computes the weighted kurtosis of the dataset   
  <VAR>data</VAR>. </P>
  <DIV class="example"><PRE class="example">kurtosis = ((\sum w_i ((x_i - \Hat x)/\Hat \sigma)^4) / (\sum w_i)) - 3
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fwkurtosis_005fm_005fsd"></A>Function:   
  <EM>double</EM> <STRONG>gsl_stats_wkurtosis_m_sd</STRONG> <EM>(const double   
  <VAR>w</VAR>[], size_t <VAR>wstride</VAR>, const double <VAR>data</VAR>[],   
  size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>, double <VAR>wmean</VAR>, double 
    <VAR>wsd</VAR>)</EM></DT>
  <DD>
  <P>This function computes the weighted kurtosis of the dataset <VAR>data</VAR> 
    using the given values of the weighted mean and weighted standard deviation, 
    <VAR>wmean</VAR> and <VAR>wsd</VAR>. </P></DD></DL>
<HR>
<A name="Maximum-and-Minimum-values"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Median-and-Percentiles" 
rel="next">Median and Percentiles</A>, Previous: <A accessKey="p" href="#Weighted-Samples" 
rel="previous">Weighted Samples</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Maximum-and-Minimum-values-1"></A>
<H3 class="section">21.8 Maximum and Minimum values</H3>
<P>The following functions find the maximum and minimum values of a dataset (or 
 their indices). If the data contains <CODE>NaN</CODE>s then a <CODE>NaN</CODE> 
 will be returned, since the maximum or minimum value is undefined. For 
functions  which return an index, the location of the first <CODE>NaN</CODE> in 
the array  is returned. </P>
<DL>
  <DT><A name="index-gsl_005fstats_005fmax"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_max</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum value in <VAR>data</VAR>, a dataset of   
  length <VAR>n</VAR> with stride <VAR>stride</VAR>. The maximum value is   
  defined as the value of the element <EM>x_i</EM> which satisfies <EM>x_i &gt;= 
    x_j</EM> for all <EM>j</EM>. </P>
  <P>If you want instead to find the element with the largest absolute magnitude 
    you will need to apply <CODE>fabs</CODE> or <CODE>abs</CODE> to your data   
  before calling this function. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fmin"></A>Function: 
  <EM>double</EM><STRONG>gsl_stats_min</STRONG> <EM>(const double 
  <VAR>data</VAR>[], size_t   <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum value in <VAR>data</VAR>, a dataset of   
  length <VAR>n</VAR> with stride <VAR>stride</VAR>. The minimum value is   
  defined as the value of the element <EM>x_i</EM> which satisfies <EM>x_i &lt;= 
    x_j</EM> for all <EM>j</EM>. </P>
  <P>If you want instead to find the element with the smallest absolute   
  magnitude you will need to apply <CODE>fabs</CODE> or <CODE>abs</CODE> to your 
    data before calling this function. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fminmax"></A>Function: 
  <EM>void</EM><STRONG>gsl_stats_minmax</STRONG> <EM>(double * <VAR>min</VAR>, 
  double *   <VAR>max</VAR>, const double <VAR>data</VAR>[], size_t 
  <VAR>stride</VAR>,   size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function finds both the minimum and maximum values <VAR>min</VAR>,   
  <VAR>max</VAR> in <VAR>data</VAR> in a single pass. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fmax_005findex"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_stats_max_index</STRONG> <EM>(const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index of the maximum value in <VAR>data</VAR>, a  
   dataset of length <VAR>n</VAR> with stride <VAR>stride</VAR>. The maximum   
  value is defined as the value of the element <EM>x_i</EM> which satisfies   
  <EM>x_i &gt;= x_j</EM> for all <EM>j</EM>. When there are several equal   
  maximum elements then the first one is chosen. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fmin_005findex"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_stats_min_index</STRONG> <EM>(const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index of the minimum value in <VAR>data</VAR>, a  
   dataset of length <VAR>n</VAR> with stride <VAR>stride</VAR>. The minimum   
  value is defined as the value of the element <EM>x_i</EM> which satisfies   
  <EM>x_i &gt;= x_j</EM> for all <EM>j</EM>. When there are several equal   
  minimum elements then the first one is chosen. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fstats_005fminmax_005findex"></A>Function:   
  <EM>void</EM> <STRONG>gsl_stats_minmax_index</STRONG> <EM>(size_t *   
  <VAR>min_index</VAR>, size_t * <VAR>max_index</VAR>, const double   
  <VAR>data</VAR>[], size_t <VAR>stride</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the indexes <VAR>min_index</VAR>,   
  <VAR>max_index</VAR> of the minimum and maximum values in <VAR>data</VAR> in a 
    single pass. </P></DD></DL>
<HR>
<A name="Median-and-Percentiles"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-statistical-programs" 
rel="next">Example statistical programs</A>, Previous: <A accessKey="p" href="#Maximum-and-Minimum-values" 
rel="previous">Maximum and Minimum values</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Median-and-Percentiles-1"></A>
<H3 class="section">21.9 Median and Percentiles</H3>
<P>The median and percentile functions described in this section operate on 
 sorted data. For convenience we use <EM>quantiles</EM>, measured on a scale of 
0  to 1, instead of percentiles (which use a scale of 0 to 100). </P>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005fmedian_005ffrom_005fsorted_005fdata"></A>Function: 
    <EM>double</EM> <STRONG>gsl_stats_median_from_sorted_data</STRONG> 
  <EM>(const   double <VAR>sorted_data</VAR>[], size_t <VAR>stride</VAR>, size_t 
    <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the median value of <VAR>sorted_data</VAR>, a dataset 
    of length <VAR>n</VAR> with stride <VAR>stride</VAR>. The elements of the   
  array must be in ascending numerical order. There are no checks to see whether 
    the data are sorted, so the function <CODE>gsl_sort</CODE> should always be  
   used first. </P>
  <P>When the dataset has an odd number of elements the median is the value of   
  element <EM>(n-1)/2</EM>. When the dataset has an even number of elements the  
   median is the mean of the two nearest middle values, elements 
  <EM>(n-1)/2</EM>   and <EM>n/2</EM>. Since the algorithm for computing the 
  median involves   interpolation this function always returns a floating-point 
  number, even for   integer data types. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fstats_005fquantile_005ffrom_005fsorted_005fdata"></A>Function: 
    <EM>double</EM> 
  <STRONG>gsl_stats_quantile_from_sorted_data</STRONG><EM>(const double 
  <VAR>sorted_data</VAR>[], size_t <VAR>stride</VAR>, size_t   <VAR>n</VAR>, 
  double <VAR>f</VAR>)</EM></DT>
  <DD>
  <P>This function returns a quantile value of <VAR>sorted_data</VAR>, a   
  double-precision array of length <VAR>n</VAR> with stride <VAR>stride</VAR>.   
  The elements of the array must be in ascending numerical order. The quantile   
  is determined by the <VAR>f</VAR>, a fraction between 0 and 1. For example, to 
    compute the value of the 75th percentile <VAR>f</VAR> should have the value  
   0.75. </P>
  <P>There are no checks to see whether the data are sorted, so the function   
  <CODE>gsl_sort</CODE> should always be used first. </P>
  <P>The quantile is found by interpolation, using the formula </P>
  <DIV class="example"><PRE class="example">quantile = (1 - \delta) x_i + \delta x_{i+1}
</PRE></DIV>
  <P>where <EM>i</EM> is <CODE>floor</CODE>(<EM>(n - 1)f</EM>) and   
  <EM>\delta</EM> is <EM>(n-1)f - i</EM>. </P>
  <P>Thus the minimum value of the array (<CODE>data[0*stride]</CODE>) is given  
   by <VAR>f</VAR> equal to zero, the maximum value   
  (<CODE>data[(n-1)*stride]</CODE>) is given by <VAR>f</VAR> equal to one and   
  the median value is given by <VAR>f</VAR> equal to 0.5. Since the algorithm   
  for computing quantiles involves interpolation this function always returns a  
   floating-point number, even for integer data types. </P></DD></DL>
<HR>
<A name="Example-statistical-programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Statistics-References-and-Further-Reading" 
rel="next">Statistics References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Median-and-Percentiles" 
rel="previous">Median and Percentiles</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-14"></A>
<H3 class="section">21.10 Examples</H3>
<P>Here is a basic example of how to use the statistical functions: </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_statistics.h&gt;

int
main(void)
{
  double data[5] = {17.2, 18.1, 16.5, 18.3, 12.6};
  double mean, variance, largest, smallest;

  mean     = gsl_stats_mean(data, 1, 5);
  variance = gsl_stats_variance(data, 1, 5);
  largest  = gsl_stats_max(data, 1, 5);
  smallest = gsl_stats_min(data, 1, 5);

  printf ("The dataset is %g, %g, %g, %g, %g\n",
         data[0], data[1], data[2], data[3], data[4]);

  printf ("The sample mean is %g\n", mean);
  printf ("The estimated variance is %g\n", variance);
  printf ("The largest value is %g\n", largest);
  printf ("The smallest value is %g\n", smallest);
  return 0;
}
</PRE></DIV>
<P>The program should produce the following output, </P>
<DIV class="example"><PRE class="verbatim">The dataset is 17.2, 18.1, 16.5, 18.3, 12.6
The sample mean is 16.54
The estimated variance is 5.373
The largest value is 18.3
The smallest value is 12.6
</PRE></DIV>
<P>Here is an example using sorted data, </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_sort.h&gt;
#include &lt;gsl/gsl_statistics.h&gt;

int
main(void)
{
  double data[5] = {17.2, 18.1, 16.5, 18.3, 12.6};
  double median, upperq, lowerq;

  printf ("Original dataset:  %g, %g, %g, %g, %g\n",
         data[0], data[1], data[2], data[3], data[4]);

  gsl_sort (data, 1, 5);

  printf ("Sorted dataset: %g, %g, %g, %g, %g\n",
         data[0], data[1], data[2], data[3], data[4]);

  median 
    = gsl_stats_median_from_sorted_data (data, 
                                         1, 5);

  upperq 
    = gsl_stats_quantile_from_sorted_data (data, 
                                           1, 5,
                                           0.75);
  lowerq 
    = gsl_stats_quantile_from_sorted_data (data, 
                                           1, 5,
                                           0.25);

  printf ("The median is %g\n", median);
  printf ("The upper quartile is %g\n", upperq);
  printf ("The lower quartile is %g\n", lowerq);
  return 0;
}
</PRE></DIV>
<P>This program should produce the following output, </P>
<DIV class="example"><PRE class="verbatim">Original dataset: 17.2, 18.1, 16.5, 18.3, 12.6
Sorted dataset: 12.6, 16.5, 17.2, 18.1, 18.3
The median is 17.2
The upper quartile is 18.1
The lower quartile is 16.5
</PRE></DIV>
<HR>
<A name="Statistics-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Example-statistical-programs" 
rel="previous">Example statistical programs</A>, Up: <A accessKey="u" href="#Statistics" 
rel="up">Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-14"></A>
<H3 class="section">21.11 References and Further Reading</H3>
<P>The standard reference for almost any topic in statistics is the multi-volume 
<CITE>Advanced Theory of Statistics</CITE> by Kendall and Stuart. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Maurice Kendall, Alan Stuart, and J. Keith Ord. <CITE>The   
  Advanced Theory of Statistics</CITE> (multiple volumes) reprinted as   
  <CITE>Kendall’s Advanced Theory of Statistics</CITE>. Wiley, ISBN 047023380X.  
   </LI></UL>
<P>Many statistical concepts can be more easily understood by a Bayesian 
 approach. The following book by Gelman, Carlin, Stern and Rubin gives a 
 comprehensive coverage of the subject. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Andrew Gelman, John B. Carlin, Hal S. Stern, Donald B. Rubin.  
   <CITE>Bayesian Data Analysis</CITE>. Chapman &amp; Hall, ISBN 0412039915. 
  </LI></UL>
<P>For physicists the Particle Data Group provides useful reviews of Probability 
 and Statistics in the “Mathematical Tools” section of its Annual Review of 
 Particle Physics. </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>Review of Particle Properties</CITE> R.M. Barnett et   
  al., Physical Review D54, 1 (1996) </LI></UL>
<P>The Review of Particle Physics is available online at the website <A href="http://pdg.lbl.gov/">http://pdg.lbl.gov/</A>. 
</P>
<HR>
<A name="Running-Statistics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Histograms" 
rel="next">Histograms</A>, Previous: <A accessKey="p" href="#Statistics" 
rel="previous">Statistics</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Running-Statistics-1"></A>
<H2 class="chapter">22 Running Statistics</H2><A 
name="index-running-statistics"></A><A name="index-online-statistics"></A>
<P>This chapter describes routines for computing running statistics, also known 
 as online statistics, of data. These routines are suitable for handling large 
 datasets for which it may be inconvenient or impractical to store in memory all 
 at once. The data can be processed in a single pass, one point at a time. Each 
 time a data point is added to the accumulator, internal parameters are updated 
 in order to compute the current mean, variance, standard deviation, skewness, 
 and kurtosis. These statistics are exact, and are updated with numerically 
 stable single-pass algorithms. The median and arbitrary quantiles are also 
 available, however these calculations use algorithms which provide 
 approximations, and grow more accurate as more data is added to the 
accumulator. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_rstat.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Running-Statistics-Initializing-the-Accumulator">Running 
            Statistics Initializing the Accumulator</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Running-Statistics-Adding-Data-to-the-Accumulator">Running 
            Statistics Adding Data to the Accumulator</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Running-Statistics-Quantiles">Running 
            Statistics Quantiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Running-Statistics-Example-programs">Running 
            Statistics Example programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Running-Statistics-References-and-Further-Reading">Running 
            Statistics References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Running-Statistics-Initializing-the-Accumulator"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Running-Statistics-Adding-Data-to-the-Accumulator" 
rel="next">Running Statistics Adding Data to the Accumulator</A>, Up: <A 
accessKey="u" href="#Running-Statistics" 
rel="up">Running Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-Accumulator"></A>
<H3 class="section">22.1 Initializing the Accumulator</H3>
<DL>
  <DT><A name="index-gsl_005frstat_005falloc"></A>Function:   
  <EM>gsl_rstat_workspace *</EM> 
  <STRONG>gsl_rstat_alloc</STRONG><EM>(void)</EM></DT>
  <DD>
  <P>This function allocates a workspace for computing running statistics. The   
  size of the workspace is <EM>O(1)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_rstat_free</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005freset"></A>Function: 
  <EM>int</EM><STRONG>gsl_rstat_reset</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function resets the workspace <VAR>w</VAR> to its initial state, so it 
    can begin working on a new set of data. </P></DD></DL>
<HR>
<A name="Running-Statistics-Adding-Data-to-the-Accumulator"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Running-Statistics-Current-Statistics" 
rel="next">Running Statistics Current Statistics</A>, Previous: <A accessKey="p" 
href="#Running-Statistics-Initializing-the-Accumulator" 
rel="previous">Running Statistics Initializing the Accumulator</A>, Up: <A 
accessKey="u" href="#Running-Statistics" 
rel="up">Running Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Adding-Data-to-the-Accumulator"></A>
<H3 class="section">22.2 Adding Data to the Accumulator</H3>
<DL>
  <DT><A name="index-gsl_005frstat_005fadd"></A>Function: 
  <EM>int</EM><STRONG>gsl_rstat_add</STRONG> <EM>(const double <VAR>x</VAR>,   
  gsl_rstat_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function adds the data point <VAR>x</VAR> to the statistical   
  accumulator, updating calculations of the mean, variance, standard deviation,  
   skewness, kurtosis, and median. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fn"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_rstat_n</STRONG> <EM>(gsl_rstat_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the number of data so far added to the accumulator.   
  </P></DD></DL>
<HR>
<A name="Running-Statistics-Current-Statistics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Running-Statistics-Quantiles" 
rel="next">Running Statistics Quantiles</A>, Previous: <A accessKey="p" href="#Running-Statistics-Adding-Data-to-the-Accumulator" 
rel="previous">Running Statistics Adding Data to the Accumulator</A>, Up: <A 
accessKey="u" href="#Running-Statistics" 
rel="up">Running Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Current-Statistics"></A>
<H3 class="section">22.3 Current Statistics</H3>
<DL>
  <DT><A name="index-gsl_005frstat_005fmin"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_min</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum value added to the accumulator. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fmax"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_max</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum value added to the accumulator. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fmean"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_mean</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the mean of all data added to the accumulator,   
  defined as </P>
  <DIV class="example"><PRE class="example">\Hat\mu = (1/N) \sum x_i
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fvariance"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_variance</STRONG> <EM>(gsl_rstat_workspace *  
   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the variance of all data added to the accumulator,   
  defined as </P>
  <DIV class="example"><PRE class="example">\Hat\sigma^2 = (1/(N-1)) \sum (x_i - \Hat\mu)^2
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fsd"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_sd</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the standard deviation of all data added to the   
  accumulator, defined as the square root of the variance given above. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fskew"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_skew</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the skewness of all data added to the accumulator,   
  defined as </P>
  <DIV class="example"><PRE class="example">skew = (1/N) \sum ((x_i - \Hat\mu)/\Hat\sigma)^3
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fkurtosis"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_kurtosis</STRONG> <EM>(gsl_rstat_workspace *  
   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the kurtosis of all data added to the accumulator,   
  defined as </P>
  <DIV class="example"><PRE class="example">kurtosis = ((1/N) \sum ((x_i - \Hat\mu)/\Hat\sigma)^4)  - 3
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fmedian"></A>Function: 
  <EM>double</EM><STRONG>gsl_rstat_median</STRONG> <EM>(gsl_rstat_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns an estimate of the median of the data added to the   
  accumulator. </P></DD></DL>
<HR>
<A name="Running-Statistics-Quantiles"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Running-Statistics-Example-programs" 
rel="next">Running Statistics Example programs</A>, Previous: <A accessKey="p" 
href="#Running-Statistics-Current-Statistics" 
rel="previous">Running Statistics Current Statistics</A>, Up: <A accessKey="u" 
href="#Running-Statistics" 
rel="up">Running Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Quantiles"></A>
<H3 class="section">22.4 Quantiles</H3>
<P>The functions in this section estimate quantiles dynamically without storing 
 the entire dataset, using the algorithm of Jain and Chlamtec, 1985. Only five 
 points (markers) are stored which represent the minimum and maximum of the 
data,  as well as current estimates of the <EM>p/2</EM>-, <EM>p</EM>-, and 
<EM>(1+p)/2</EM>-quantiles. Each time a new data point is added, the marker 
 positions and heights are updated. </P>
<DL>
  <DT><A name="index-gsl_005frstat_005fquantile_005falloc"></A>Function:   
  <EM>gsl_rstat_quantile_workspace 
  *</EM><STRONG>gsl_rstat_quantile_alloc</STRONG> <EM>(const double   
  <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function allocates a workspace for the dynamic estimation of   
  <VAR>p</VAR>-quantiles, where <VAR>p</VAR> is between <EM>0</EM> and   
  <EM>1</EM>. The median corresponds to <EM>p = 0.5</EM>. The size of the   
  workspace is <EM>O(1)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fquantile_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_rstat_quantile_free</STRONG><EM>(gsl_rstat_quantile_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fquantile_005fadd"></A>Function:   
  <EM>int</EM> <STRONG>gsl_rstat_quantile_add</STRONG> <EM>(const double   
  <VAR>x</VAR>, gsl_rstat_quantile_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function updates the estimate of the <EM>p</EM>-quantile with the new  
   data point <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005frstat_005fquantile_005fget"></A>Function:   
  <EM>double</EM> 
  <STRONG>gsl_rstat_quantile_get</STRONG><EM>(gsl_rstat_quantile_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the current estimate of the <EM>p</EM>-quantile.   
  </P></DD></DL>
<HR>
<A name="Running-Statistics-Example-programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Running-Statistics-References-and-Further-Reading" 
rel="next">Running Statistics References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Running-Statistics-Quantiles" 
rel="previous">Running Statistics Quantiles</A>, Up: <A accessKey="u" href="#Running-Statistics" 
rel="up">Running Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-15"></A>
<H3 class="section">22.5 Examples</H3>
<P>Here is a basic example of how to use the statistical functions: </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rstat.h&gt;

int
main(void)
{
  double data[5] = {17.2, 18.1, 16.5, 18.3, 12.6};
  double mean, variance, largest, smallest;
  gsl_rstat_workspace *rstat_p = gsl_rstat_alloc();
  size_t i;

  /* add data to rstat accumulator */
  for (i = 0; i &lt; 5; ++i)
    gsl_rstat_add(data[i], rstat_p);

  mean     = gsl_rstat_mean(rstat_p);
  variance = gsl_rstat_variance(rstat_p);
  largest  = gsl_rstat_max(rstat_p);
  smallest = gsl_rstat_min(rstat_p);

  printf ("The dataset is %g, %g, %g, %g, %g\n",
         data[0], data[1], data[2], data[3], data[4]);

  printf ("The sample mean is %g\n", mean);
  printf ("The estimated variance is %g\n", variance);
  printf ("The largest value is %g\n", largest);
  printf ("The smallest value is %g\n", smallest);

  gsl_rstat_free(rstat_p);

  return 0;
}
</PRE></DIV>
<P>The program should produce the following output, </P>
<DIV class="example"><PRE class="verbatim">The dataset is 17.2, 18.1, 16.5, 18.3, 12.6
The sample mean is 16.54
The estimated variance is 5.373
The largest value is 18.3
The smallest value is 12.6
</PRE></DIV>
<P>This next program estimates the lower quartile, median and upper quartile 
 from 10,000 samples of a random Rayleigh distribution, using the <EM>P^2</EM> 
 algorithm of Jain and Chlamtec. For comparison, the exact values are also 
 computed from the sorted dataset. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;gsl/gsl_rstat.h&gt;
#include &lt;gsl/gsl_statistics.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;
#include &lt;gsl/gsl_sort.h&gt;

int
main(void)
{
  const size_t N = 10000;
  double *data = malloc(N * sizeof(double));
  gsl_rstat_quantile_workspace *work_25 = gsl_rstat_quantile_alloc(0.25);
  gsl_rstat_quantile_workspace *work_50 = gsl_rstat_quantile_alloc(0.5);
  gsl_rstat_quantile_workspace *work_75 = gsl_rstat_quantile_alloc(0.75);
  gsl_rng *r = gsl_rng_alloc(gsl_rng_default);
  double exact_p25, exact_p50, exact_p75;
  double val_p25, val_p50, val_p75;
  size_t i;

  /* add data to quantile accumulators; also store data for exact
   * comparisons */
  for (i = 0; i &lt; N; ++i)
    {
      data[i] = gsl_ran_rayleigh(r, 1.0);
      gsl_rstat_quantile_add(data[i], work_25);
      gsl_rstat_quantile_add(data[i], work_50);
      gsl_rstat_quantile_add(data[i], work_75);
    }

  /* exact values */
  gsl_sort(data, 1, N);
  exact_p25 = gsl_stats_quantile_from_sorted_data(data, 1, N, 0.25);
  exact_p50 = gsl_stats_quantile_from_sorted_data(data, 1, N, 0.5);
  exact_p75 = gsl_stats_quantile_from_sorted_data(data, 1, N, 0.75);

  /* estimated values */
  val_p25 = gsl_rstat_quantile_get(work_25);
  val_p50 = gsl_rstat_quantile_get(work_50);
  val_p75 = gsl_rstat_quantile_get(work_75);

  printf ("The dataset is %g, %g, %g, %g, %g, ...\n",
         data[0], data[1], data[2], data[3], data[4]);

  printf ("0.25 quartile: exact = %.5f, estimated = %.5f, error = %.6e\n",
          exact_p25, val_p25, (val_p25 - exact_p25) / exact_p25);
  printf ("0.50 quartile: exact = %.5f, estimated = %.5f, error = %.6e\n",
          exact_p50, val_p50, (val_p50 - exact_p50) / exact_p50);
  printf ("0.75 quartile: exact = %.5f, estimated = %.5f, error = %.6e\n",
          exact_p75, val_p75, (val_p75 - exact_p75) / exact_p75);

  gsl_rstat_quantile_free(work_25);
  gsl_rstat_quantile_free(work_50);
  gsl_rstat_quantile_free(work_75);
  gsl_rng_free(r);
  free(data);

  return 0;
}
</PRE></DIV>
<P>The program should produce the following output, </P>
<DIV class="example"><PRE class="verbatim">The dataset is 0.00645272, 0.0074002, 0.0120706, 0.0207256, 0.0227282, ...
0.25 quartile: exact = 0.75766, estimated = 0.75580, error = -2.450209e-03
0.50 quartile: exact = 1.17508, estimated = 1.17438, error = -5.995912e-04
0.75 quartile: exact = 1.65347, estimated = 1.65696, error = 2.110571e-03
</PRE></DIV>
<HR>
<A name="Running-Statistics-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Running-Statistics-Example-programs" 
rel="previous">Running Statistics Example programs</A>, Up: <A accessKey="u" 
href="#Running-Statistics" 
rel="up">Running Statistics</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-15"></A>
<H3 class="section">22.6 References and Further Reading</H3>
<P>The algorithm used to dynamically estimate <EM>p</EM>-quantiles is described 
 in the paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->R. Jain and I. Chlamtac. <CITE>The P^2 algorithm for dynamic   
  calculation of quantiles and histograms without storing observations</CITE>,   
  Communications of the ACM, Volume 28 (October), Number 10, 1985, p. 1076-1085. 
    </LI></UL>
<HR>
<A name="Histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#N_002dtuples" 
rel="next">N-tuples</A>, Previous: <A accessKey="p" href="#Running-Statistics" 
rel="previous">Running Statistics</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Histograms-1"></A>
<H2 class="chapter">23 Histograms</H2><A name="index-histograms"></A><A name="index-binning-data"></A>
<P>This chapter describes functions for creating histograms. Histograms provide 
 a convenient way of summarizing the distribution of a set of data. A histogram 
 consists of a set of <EM>bins</EM> which count the number of events falling 
into  a given range of a continuous variable <EM>x</EM>. In GSL the bins of a 
 histogram contain floating-point numbers, so they can be used to record both 
 integer and non-integer distributions. The bins can use arbitrary sets of 
ranges  (uniformly spaced bins are the default). Both one and two-dimensional 
histograms  are supported. </P>
<P>Once a histogram has been created it can also be converted into a probability 
 distribution function. The library provides efficient routines for selecting 
 random samples from probability distributions. This can be useful for 
generating  simulations based on real data. </P>
<P>The functions are declared in the header files <SAMP>gsl_histogram.h</SAMP> 
 and <SAMP>gsl_histogram2d.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#The-histogram-struct">The 
            histogram struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Histogram-allocation">Histogram 
            allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Copying-Histograms">Copying 
            Histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Searching-histogram-ranges">Searching 
            histogram ranges</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Histogram-Statistics">Histogram 
            Statistics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Histogram-Operations">Histogram 
            Operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Reading-and-writing-histograms">Reading 
            and writing histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Resampling-from-histograms">Resampling 
            from histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Example-programs-for-histograms">Example 
            programs for histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Two-dimensional-histograms">Two 
            dimensional histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#The-2D-histogram-struct">The 
            2D histogram struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Histogram-allocation">2D 
            Histogram allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Copying-2D-Histograms">Copying 
            2D Histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Searching-2D-histogram-ranges">Searching 
            2D histogram ranges</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Reading-and-writing-2D-histograms">Reading 
            and writing 2D histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Resampling-from-2D-histograms">Resampling 
            from 2D histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Example-programs-for-2D-histograms">Example 
            programs for 2D histograms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="The-histogram-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Histogram-allocation" 
rel="next">Histogram allocation</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-histogram-struct-1"></A>
<H3 class="section">23.1 The histogram struct</H3>
<P>A histogram is defined by the following struct, </P>
<DL>
  <DT><A name="index-gsl_005fhistogram"></A>Data Type:   
  <STRONG>gsl_histogram</STRONG></DT>
  <DD>
  <DL compact="">
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>This is the number of histogram bins </P></DD>
    <DT><CODE>double * range</CODE></DT>
    <DD>
    <P>The ranges of the bins are stored in an array of <EM><VAR>n</VAR>+1</EM>  
       elements pointed to by <VAR>range</VAR>. </P></DD>
    <DT><CODE>double * bin</CODE></DT>
    <DD>
    <P>The counts for each bin are stored in an array of <VAR>n</VAR> elements   
      pointed to by <VAR>bin</VAR>. The bins are floating-point numbers, so you  
       can increment them by non-integer values if necessary. 
</P></DD></DL></DD></DL>
<P>The range for <VAR>bin</VAR>[i] is given by <VAR>range</VAR>[i] to 
<VAR>range</VAR>[i+1]. For <EM>n</EM> bins there are <EM>n+1</EM> entries in the 
 array <VAR>range</VAR>. Each bin is inclusive at the lower end and exclusive at 
 the upper end. Mathematically this means that the bins are defined by the 
 following inequality, </P>
<DIV class="display"><PRE class="display">bin[i] corresponds to range[i] &lt;= x &lt; range[i+1]
</PRE></DIV>
<P>Here is a diagram of the correspondence between ranges and bins on the 
 number-line for <EM>x</EM>, </P>
<DIV class="smallexample"><PRE class="smallexample">     [ bin[0] )[ bin[1] )[ bin[2] )[ bin[3] )[ bin[4] )
  ---|---------|---------|---------|---------|---------|---  x
   r[0]      r[1]      r[2]      r[3]      r[4]      r[5]

</PRE></DIV>
<P>In this picture the values of the <VAR>range</VAR> array are denoted by 
<EM>r</EM>. On the left-hand side of each bin the square bracket 
‘<SAMP>[</SAMP>’ denotes an inclusive lower bound (<EM>r &lt;= x</EM>), and the 
 round parentheses ‘<SAMP>)</SAMP>’ on the right-hand side denote an exclusive 
 upper bound (<EM>x &lt; r</EM>). Thus any samples which fall on the upper end 
of  the histogram are excluded. If you want to include this value for the last 
bin  you will need to add an extra bin to your histogram. </P>
<P>The <CODE>gsl_histogram</CODE> struct and its associated functions are 
 defined in the header file <SAMP>gsl_histogram.h</SAMP>. </P>
<HR>
<A name="Histogram-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-Histograms" 
rel="next">Copying Histograms</A>, Previous: <A accessKey="p" href="#The-histogram-struct" 
rel="previous">The histogram struct</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Histogram-allocation-1"></A>
<H3 class="section">23.2 Histogram allocation</H3>
<P>The functions for allocating memory to a histogram follow the style of 
<CODE>malloc</CODE> and <CODE>free</CODE>. In addition they also perform their 
 own error checking. If there is insufficient memory available to allocate a 
 histogram then the functions call the error handler (with an error number of 
<CODE>GSL_ENOMEM</CODE>) in addition to returning a null pointer. Thus if you 
 use the library error handler to abort your program then it isn’t necessary to 
 check every histogram <CODE>alloc</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram_005falloc"></A>Function: 
  <EM>gsl_histogram   *</EM> <STRONG>gsl_histogram_alloc</STRONG> <EM>(size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a histogram with <VAR>n</VAR> bins, and  
   returns a pointer to a newly created <CODE>gsl_histogram</CODE> struct. If   
  insufficient memory is available a null pointer is returned and the error   
  handler is invoked with an error code of <CODE>GSL_ENOMEM</CODE>. The bins and 
    ranges are not initialized, and should be prepared using one of the   
  range-setting functions below in order to make the histogram ready for use.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fset_005franges"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram_set_ranges</STRONG> <EM>(gsl_histogram *   
  <VAR>h</VAR>, const double <VAR>range</VAR>[], size_t   
  <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function sets the ranges of the existing histogram <VAR>h</VAR> using  
   the array <VAR>range</VAR> of size <VAR>size</VAR>. The values of the   
  histogram bins are reset to zero. The <CODE>range</CODE> array should contain  
   the desired bin limits. The ranges can be arbitrary, subject to the   
  restriction that they are monotonically increasing. </P>
  <P>The following example shows how to create a histogram with logarithmic bins 
    with ranges [1,10), [10,100) and [100,1000). </P>
  <DIV class="example"><PRE class="example">gsl_histogram * h = gsl_histogram_alloc (3);

/* bin[0] covers the range 1 &lt;= x &lt; 10 */
/* bin[1] covers the range 10 &lt;= x &lt; 100 */
/* bin[2] covers the range 100 &lt;= x &lt; 1000 */

double range[4] = { 1.0, 10.0, 100.0, 1000.0 };

gsl_histogram_set_ranges (h, range, 4);
</PRE></DIV>
  <P>Note that the size of the <VAR>range</VAR> array should be defined to be   
  one element bigger than the number of bins. The additional element is required 
    for the upper value of the final bin. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fhistogram_005fset_005franges_005funiform"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_histogram_set_ranges_uniform</STRONG><EM>(gsl_histogram * 
  <VAR>h</VAR>, double <VAR>xmin</VAR>, double   <VAR>xmax</VAR>)</EM></DT>
  <DD>
  <P>This function sets the ranges of the existing histogram <VAR>h</VAR> to   
  cover the range <VAR>xmin</VAR> to <VAR>xmax</VAR> uniformly. The values of   
  the histogram bins are reset to zero. The bin ranges are shown in the table   
  below, </P>
  <DIV class="display"><PRE class="display">bin[0] corresponds to xmin &lt;= x &lt; xmin + d
bin[1] corresponds to xmin + d &lt;= x &lt; xmin + 2 d
......
bin[n-1] corresponds to xmin + (n-1)d &lt;= x &lt; xmax
</PRE></DIV>
  <P>where <EM>d</EM> is the bin spacing, <EM>d = (xmax-xmin)/n</EM>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_histogram_free</STRONG> <EM>(gsl_histogram *   
  <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function frees the histogram <VAR>h</VAR> and all of the memory   
  associated with it. </P></DD></DL>
<HR>
<A name="Copying-Histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Updating-and-accessing-histogram-elements" 
rel="next">Updating and accessing histogram elements</A>, Previous: <A 
accessKey="p" href="#Histogram-allocation" 
rel="previous">Histogram allocation</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-Histograms-1"></A>
<H3 class="section">23.3 Copying Histograms</H3>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_memcpy</STRONG> <EM>(gsl_histogram * 
  <VAR>dest</VAR>,   const gsl_histogram * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the histogram <VAR>src</VAR> into the pre-existing   
  histogram <VAR>dest</VAR>, making <VAR>dest</VAR> into an exact copy of   
  <VAR>src</VAR>. The two histograms must be of the same size. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fclone"></A>Function: 
  <EM>gsl_histogram   *</EM> <STRONG>gsl_histogram_clone</STRONG> <EM>(const 
  gsl_histogram *   <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to a newly created histogram which is an   
  exact copy of the histogram <VAR>src</VAR>. </P></DD></DL>
<HR>
<A name="Updating-and-accessing-histogram-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Searching-histogram-ranges" 
rel="next">Searching histogram ranges</A>, Previous: <A accessKey="p" href="#Copying-Histograms" 
rel="previous">Copying Histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Updating-and-accessing-histogram-elements-1"></A>
<H3 class="section">23.4 Updating and accessing histogram elements</H3>
<P>There are two ways to access histogram bins, either by specifying an 
<EM>x</EM> coordinate or by using the bin-index directly. The functions for 
 accessing the histogram through <EM>x</EM> coordinates use a binary search to 
 identify the bin which covers the appropriate range. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fincrement"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_increment</STRONG> <EM>(gsl_histogram * 
  <VAR>h</VAR>,   double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function updates the histogram <VAR>h</VAR> by adding one (1.0) to the 
    bin whose range contains the coordinate <VAR>x</VAR>. </P>
  <P>If <VAR>x</VAR> lies in the valid range of the histogram then the function  
   returns zero to indicate success. If <VAR>x</VAR> is less than the lower 
  limit   of the histogram then the function returns <CODE>GSL_EDOM</CODE>, and 
  none of   bins are modified. Similarly, if the value of <VAR>x</VAR> is 
  greater than or   equal to the upper limit of the histogram then the function 
  returns   <CODE>GSL_EDOM</CODE>, and none of the bins are modified. The error 
  handler is   not called, however, since it is often necessary to compute 
  histograms for a   small range of a larger dataset, ignoring the values 
  outside the range of   interest. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005faccumulate"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_accumulate</STRONG> <EM>(gsl_histogram * 
  <VAR>h</VAR>,   double <VAR>x</VAR>, double <VAR>weight</VAR>)</EM></DT>
  <DD>
  <P>This function is similar to <CODE>gsl_histogram_increment</CODE> but   
  increases the value of the appropriate bin in the histogram <VAR>h</VAR> by   
  the floating-point number <VAR>weight</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram_get</STRONG> <EM>(const gsl_histogram * 
  <VAR>h</VAR>,   size_t <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function returns the contents of the <VAR>i</VAR>-th bin of the   
  histogram <VAR>h</VAR>. If <VAR>i</VAR> lies outside the valid range of   
  indices for the histogram then the error handler is called with an error code  
   of <CODE>GSL_EDOM</CODE> and the function returns 0. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fget_005frange"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram_get_range</STRONG> <EM>(const gsl_histogram 
    * <VAR>h</VAR>, size_t <VAR>i</VAR>, double * <VAR>lower</VAR>, double *   
  <VAR>upper</VAR>)</EM></DT>
  <DD>
  <P>This function finds the upper and lower range limits of the <VAR>i</VAR>-th 
    bin of the histogram <VAR>h</VAR>. If the index <VAR>i</VAR> is valid then 
  the   corresponding range limits are stored in <VAR>lower</VAR> and   
  <VAR>upper</VAR>. The lower limit is inclusive (i.e. events with this   
  coordinate are included in the bin) and the upper limit is exclusive (i.e.   
  events with the coordinate of the upper limit are excluded and fall in the   
  neighboring higher bin, if it exists). The function returns 0 to indicate   
  success. If <VAR>i</VAR> lies outside the valid range of indices for the   
  histogram then the error handler is called and the function returns an error   
  code of <CODE>GSL_EDOM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmax"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram_max</STRONG> <EM>(const gsl_histogram *   
  <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram_005fmin"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram_min</STRONG> <EM>(const gsl_histogram *   
  <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram_005fbins"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_histogram_bins</STRONG> <EM>(const gsl_histogram *  
   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>These functions return the maximum upper and minimum lower range limits and 
    the number of bins of the histogram <VAR>h</VAR>. They provide a way of   
  determining these values without accessing the <CODE>gsl_histogram</CODE>   
  struct directly. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005freset"></A>Function: 
  <EM>void</EM><STRONG>gsl_histogram_reset</STRONG> <EM>(gsl_histogram *   
  <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function resets all the bins in the histogram <VAR>h</VAR> to zero.   
  </P></DD></DL>
<HR>
<A name="Searching-histogram-ranges"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Histogram-Statistics" 
rel="next">Histogram Statistics</A>, Previous: <A accessKey="p" href="#Updating-and-accessing-histogram-elements" 
rel="previous">Updating and accessing histogram elements</A>, Up: <A accessKey="u" 
href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Searching-histogram-ranges-1"></A>
<H3 class="section">23.5 Searching histogram ranges</H3>
<P>The following functions are used by the access and update routines to locate 
 the bin which corresponds to a given <EM>x</EM> coordinate. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram_005ffind"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_find</STRONG> <EM>(const gsl_histogram * 
  <VAR>h</VAR>,   double <VAR>x</VAR>, size_t * <VAR>i</VAR>)</EM></DT>
  <DD>
  <P>This function finds and sets the index <VAR>i</VAR> to the bin number which 
    covers the coordinate <VAR>x</VAR> in the histogram <VAR>h</VAR>. The bin is 
    located using a binary search. The search includes an optimization for   
  histograms with uniform range, and will return the correct bin immediately in  
   this case. If <VAR>x</VAR> is found in the range of the histogram then the   
  function sets the index <VAR>i</VAR> and returns <CODE>GSL_SUCCESS</CODE>. If  
   <VAR>x</VAR> lies outside the valid range of the histogram then the function  
   returns <CODE>GSL_EDOM</CODE> and the error handler is invoked. </P></DD></DL>
<HR>
<A name="Histogram-Statistics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Histogram-Operations" 
rel="next">Histogram Operations</A>, Previous: <A accessKey="p" href="#Searching-histogram-ranges" 
rel="previous">Searching histogram ranges</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Histogram-Statistics-1"></A>
<H3 class="section">23.6 Histogram Statistics</H3><A name="index-histogram-statistics"></A><A 
name="index-statistics_002c-from-histogram"></A><A name="index-maximum-value_002c-from-histogram"></A><A 
name="index-minimum-value_002c-from-histogram"></A>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmax_005fval"></A>Function:   
  <EM>double</EM> <STRONG>gsl_histogram_max_val</STRONG> <EM>(const   
  gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum value contained in the histogram bins.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmax_005fbin"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_histogram_max_bin</STRONG> <EM>(const   
  gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index of the bin containing the maximum value. In 
    the case where several bins contain the same maximum value the smallest 
  index   is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmin_005fval"></A>Function:   
  <EM>double</EM> <STRONG>gsl_histogram_min_val</STRONG> <EM>(const   
  gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum value contained in the histogram bins.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmin_005fbin"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_histogram_min_bin</STRONG> <EM>(const   
  gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index of the bin containing the minimum value. In 
    the case where several bins contain the same maximum value the smallest 
  index   is returned. </P></DD></DL><A name="index-mean-value_002c-from-histogram"></A>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmean"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram_mean</STRONG> <EM>(const gsl_histogram *  
   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the mean of the histogrammed variable, where the   
  histogram is regarded as a probability distribution. Negative bin values are   
  ignored for the purposes of this calculation. The accuracy of the result is   
  limited by the bin width. </P></DD></DL><A name="index-standard-deviation_002c-from-histogram"></A><A 
name="index-variance_002c-from-histogram"></A>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fsigma"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram_sigma</STRONG> <EM>(const gsl_histogram * 
    <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the standard deviation of the histogrammed variable,  
   where the histogram is regarded as a probability distribution. Negative bin   
  values are ignored for the purposes of this calculation. The accuracy of the   
  result is limited by the bin width. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fsum"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram_sum</STRONG> <EM>(const gsl_histogram *   
  <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the sum of all bin values. Negative bin values are   
  included in the sum. </P></DD></DL>
<HR>
<A name="Histogram-Operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-histograms" 
rel="next">Reading and writing histograms</A>, Previous: <A accessKey="p" href="#Histogram-Statistics" 
rel="previous">Histogram Statistics</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Histogram-Operations-1"></A>
<H3 class="section">23.7 Histogram Operations</H3>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fequal_005fbins_005fp"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram_equal_bins_p</STRONG> <EM>(const   
  gsl_histogram * <VAR>h1</VAR>, const gsl_histogram * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if the all of the individual bin ranges of the two  
   histograms are identical, and 0 otherwise. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fadd"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_add</STRONG> <EM>(gsl_histogram * 
  <VAR>h1</VAR>, const   gsl_histogram * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function adds the contents of the bins in histogram <VAR>h2</VAR> to   
  the corresponding bins of histogram <VAR>h1</VAR>, i.e. <EM>h'_1(i) = h_1(i) + 
    h_2(i)</EM>. The two histograms must have identical bin ranges. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fsub"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_sub</STRONG> <EM>(gsl_histogram * 
  <VAR>h1</VAR>, const   gsl_histogram * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function subtracts the contents of the bins in histogram <VAR>h2</VAR> 
    from the corresponding bins of histogram <VAR>h1</VAR>, i.e. <EM>h'_1(i) =   
  h_1(i) - h_2(i)</EM>. The two histograms must have identical bin ranges.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fmul"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_mul</STRONG> <EM>(gsl_histogram * 
  <VAR>h1</VAR>, const   gsl_histogram * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the contents of the bins of histogram   
  <VAR>h1</VAR> by the contents of the corresponding bins in histogram   
  <VAR>h2</VAR>, i.e. <EM>h'_1(i) = h_1(i) * h_2(i)</EM>. The two histograms   
  must have identical bin ranges. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fdiv"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_div</STRONG> <EM>(gsl_histogram * 
  <VAR>h1</VAR>, const   gsl_histogram * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function divides the contents of the bins of histogram <VAR>h1</VAR>   
  by the contents of the corresponding bins in histogram <VAR>h2</VAR>, i.e.   
  <EM>h'_1(i) = h_1(i) / h_2(i)</EM>. The two histograms must have identical bin 
    ranges. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fscale"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_scale</STRONG> <EM>(gsl_histogram * 
  <VAR>h</VAR>, double   <VAR>scale</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the contents of the bins of histogram <VAR>h</VAR> 
    by the constant <VAR>scale</VAR>, i.e. <EM>h'_1(i) = h_1(i) * scale</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fshift"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_shift</STRONG> <EM>(gsl_histogram * 
  <VAR>h</VAR>, double   <VAR>offset</VAR>)</EM></DT>
  <DD>
  <P>This function shifts the contents of the bins of histogram <VAR>h</VAR> by  
   the constant <VAR>offset</VAR>, i.e. <EM>h'_1(i) = h_1(i) + offset</EM>.   
  </P></DD></DL>
<HR>
<A name="Reading-and-writing-histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Resampling-from-histograms" 
rel="next">Resampling from histograms</A>, Previous: <A accessKey="p" href="#Histogram-Operations" 
rel="previous">Histogram Operations</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-and-writing-histograms-1"></A>
<H3 class="section">23.8 Reading and writing histograms</H3>
<P>The library provides functions for reading and writing histograms to a file 
 as binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_fwrite</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function writes the ranges and bins of the histogram <VAR>h</VAR> to   
  the stream <VAR>stream</VAR> in binary format. The return value is 0 for   
  success and <CODE>GSL_EFAILED</CODE> if there was a problem writing to the   
  file. Since the data is written in the native binary format it may not be   
  portable between different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_fread</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function reads into the histogram <VAR>h</VAR> from the open stream   
  <VAR>stream</VAR> in binary format. The histogram <VAR>h</VAR> must be   
  preallocated with the correct size since the function uses the number of bins  
   in <VAR>h</VAR> to determine how many bytes to read. The return value is 0 
  for   success and <CODE>GSL_EFAILED</CODE> if there was a problem reading from 
  the   file. The data is assumed to have been written in the native binary 
  format on   the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_fprintf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_histogram * <VAR>h</VAR>, const char * 
  <VAR>range_format</VAR>, const char   * <VAR>bin_format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the ranges and bins of the histogram <VAR>h</VAR>   
  line-by-line to the stream <VAR>stream</VAR> using the format specifiers   
  <VAR>range_format</VAR> and <VAR>bin_format</VAR>. These should be one of the  
   <CODE>%g</CODE>, <CODE>%e</CODE> or <CODE>%f</CODE> formats for floating 
  point   numbers. The function returns 0 for success and 
  <CODE>GSL_EFAILED</CODE> if   there was a problem writing to the file. The 
  histogram output is formatted in   three columns, and the columns are 
  separated by spaces, like this, </P>
  <DIV class="example"><PRE class="example">range[0] range[1] bin[0]
range[1] range[2] bin[1]
range[2] range[3] bin[2]
....
range[n-1] range[n] bin[n-1]
</PRE></DIV>
  <P>The values of the ranges are formatted using <VAR>range_format</VAR> and   
  the value of the bins are formatted using <VAR>bin_format</VAR>. Each line   
  contains the lower and upper limit of the range of the bins and the value of   
  the bin itself. Since the upper limit of one bin is the lower limit of the   
  next there is duplication of these values between lines but this allows the   
  histogram to be manipulated with line-oriented tools. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram_fscanf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the histogram <VAR>h</VAR>. The data is assumed to be in the three-column   
  format used by <CODE>gsl_histogram_fprintf</CODE>. The histogram <VAR>h</VAR>  
   must be preallocated with the correct length since the function uses the size 
    of <VAR>h</VAR> to determine how many numbers to read. The function returns 
  0   for success and <CODE>GSL_EFAILED</CODE> if there was a problem reading 
  from   the file. </P></DD></DL>
<HR>
<A name="Resampling-from-histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-histogram-probability-distribution-struct" 
rel="next">The histogram probability distribution struct</A>, Previous: <A 
accessKey="p" href="#Reading-and-writing-histograms" 
rel="previous">Reading and writing histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Resampling-from-histograms-1"></A>
<H3 class="section">23.9 Resampling from histograms</H3><A name="index-resampling-from-histograms"></A><A 
name="index-sampling-from-histograms"></A><A name="index-probability-distributions_002c-from-histograms"></A>
<P>A histogram made by counting events can be regarded as a measurement of a 
 probability distribution. Allowing for statistical error, the height of each 
bin  represents the probability of an event where the value of <EM>x</EM> falls 
in  the range of that bin. The probability distribution function has the 
 one-dimensional form <EM>p(x)dx</EM> where, </P>
<DIV class="example"><PRE class="example">p(x) = n_i/ (N w_i)
</PRE></DIV>
<P>In this equation <EM>n_i</EM> is the number of events in the bin which 
 contains <EM>x</EM>, <EM>w_i</EM> is the width of the bin and <EM>N</EM> is the 
 total number of events. The distribution of events within each bin is assumed 
to  be uniform. </P>
<HR>
<A name="The-histogram-probability-distribution-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-histograms" 
rel="next">Example programs for histograms</A>, Previous: <A accessKey="p" href="#Resampling-from-histograms" 
rel="previous">Resampling from histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-histogram-probability-distribution-struct-1"></A>
<H3 class="section">23.10 The histogram probability distribution struct</H3><A 
name="index-probability-distribution_002c-from-histogram"></A><A name="index-sampling-from-histograms-1"></A><A 
name="index-random-sampling-from-histograms"></A><A name="index-histograms_002c-random-sampling-from"></A>
<P>The probability distribution function for a histogram consists of a set of 
<EM>bins</EM> which measure the probability of an event falling into a given 
 range of a continuous variable <EM>x</EM>. A probability distribution function 
 is defined by the following struct, which actually stores the cumulative 
 probability distribution function. This is the natural quantity for generating 
 samples via the inverse transform method, because there is a one-to-one mapping 
 between the cumulative probability distribution and the range [0,1]. It can be 
 shown that by taking a uniform random number in this range and finding its 
 corresponding coordinate in the cumulative probability distribution we obtain 
 samples with the desired probability distribution. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fpdf"></A>Data Type:   
  <STRONG>gsl_histogram_pdf</STRONG></DT>
  <DD>
  <DL compact="">
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>This is the number of bins used to approximate the probability     
    distribution function. </P></DD>
    <DT><CODE>double * range</CODE></DT>
    <DD>
    <P>The ranges of the bins are stored in an array of <EM><VAR>n</VAR>+1</EM>  
       elements pointed to by <VAR>range</VAR>. </P></DD>
    <DT><CODE>double * sum</CODE></DT>
    <DD>
    <P>The cumulative probability for the bins is stored in an array of     
    <VAR>n</VAR> elements pointed to by <VAR>sum</VAR>. </P></DD></DL></DD></DL>
<P>The following functions allow you to create a <CODE>gsl_histogram_pdf</CODE> 
 struct which represents this probability distribution and generate random 
 samples from it. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fpdf_005falloc"></A>Function:   
  <EM>gsl_histogram_pdf *</EM> 
  <STRONG>gsl_histogram_pdf_alloc</STRONG><EM>(size_t <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a probability distribution with   
  <VAR>n</VAR> bins and returns a pointer to a newly initialized   
  <CODE>gsl_histogram_pdf</CODE> struct. If insufficient memory is available a   
  null pointer is returned and the error handler is invoked with an error code   
  of <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fpdf_005finit"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram_pdf_init</STRONG> <EM>(gsl_histogram_pdf *  
   <VAR>p</VAR>, const gsl_histogram * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the probability distribution <VAR>p</VAR> with   
  the contents of the histogram <VAR>h</VAR>. If any of the bins of <VAR>h</VAR> 
    are negative then the error handler is invoked with an error code of   
  <CODE>GSL_EDOM</CODE> because a probability distribution cannot contain   
  negative values. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fpdf_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_histogram_pdf_free</STRONG> <EM>(gsl_histogram_pdf * 
    <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function frees the probability distribution function <VAR>p</VAR> and  
   all of the memory associated with it. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram_005fpdf_005fsample"></A>Function:   
  <EM>double</EM> <STRONG>gsl_histogram_pdf_sample</STRONG> <EM>(const   
  gsl_histogram_pdf * <VAR>p</VAR>, double <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function uses <VAR>r</VAR>, a uniform random number between zero and   
  one, to compute a single random sample from the probability distribution   
  <VAR>p</VAR>. The algorithm used to compute the sample <EM>s</EM> is given by  
   the following formula, </P>
  <DIV class="example"><PRE class="example">s = range[i] + delta * (range[i+1] - range[i])
</PRE></DIV>
  <P>where <EM>i</EM> is the index which satisfies <EM>sum[i] &lt;= r &lt;   
  sum[i+1]</EM> and <EM>delta</EM> is <EM>(r - sum[i])/(sum[i+1] - sum[i])</EM>. 
    </P></DD></DL>
<HR>
<A name="Example-programs-for-histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Two-dimensional-histograms" 
rel="next">Two dimensional histograms</A>, Previous: <A accessKey="p" href="#The-histogram-probability-distribution-struct" 
rel="previous">The histogram probability distribution struct</A>, Up: <A 
accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Example-programs-for-histograms-1"></A>
<H3 class="section">23.11 Example programs for histograms</H3>
<P>The following program shows how to make a simple histogram of a column of 
 numerical data supplied on <CODE>stdin</CODE>. The program takes three 
 arguments, specifying the upper and lower bounds of the histogram and the 
number  of bins. It then reads numbers from <CODE>stdin</CODE>, one line at a 
time, and  adds them to the histogram. When there is no more data to read it 
prints out the  accumulated histogram using <CODE>gsl_histogram_fprintf</CODE>. 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;gsl/gsl_histogram.h&gt;

int
main (int argc, char **argv)
{
  double a, b;
  size_t n;

  if (argc != 4)
    {
      printf ("Usage: gsl-histogram xmin xmax n\n"
              "Computes a histogram of the data "
              "on stdin using n bins from xmin "
              "to xmax\n");
      exit (0);
    }

  a = atof (argv[1]);
  b = atof (argv[2]);
  n = atoi (argv[3]);

  {
    double x;
    gsl_histogram * h = gsl_histogram_alloc (n);
    gsl_histogram_set_ranges_uniform (h, a, b);

    while (fscanf (stdin, "%lg", &amp;x) == 1)
      {
        gsl_histogram_increment (h, x);
      }
    gsl_histogram_fprintf (stdout, h, "%g", "%g");
    gsl_histogram_free (h);
  }
  exit (0);
}
</PRE></DIV>
<P>Here is an example of the program in use. We generate 10000 random samples 
 from a Cauchy distribution with a width of 30 and histogram them over the range 
 -100 to 100, using 200 bins. </P>
<DIV class="example"><PRE class="example">$ gsl-randist 0 10000 cauchy 30 
   | gsl-histogram -100 100 200 &gt; histogram.dat
</PRE></DIV>
<P>A plot of the resulting histogram shows the familiar shape of the Cauchy 
 distribution and the fluctuations caused by the finite sample size. </P>
<DIV class="example"><PRE class="example">$ awk '{print $1, $3 ; print $2, $3}' histogram.dat 
   | graph -T X
</PRE></DIV>
<HR>
<A name="Two-dimensional-histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#The-2D-histogram-struct" 
rel="next">The 2D histogram struct</A>, Previous: <A accessKey="p" href="#Example-programs-for-histograms" 
rel="previous">Example programs for histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Two-dimensional-histograms-1"></A>
<H3 class="section">23.12 Two dimensional histograms</H3><A name="index-two-dimensional-histograms"></A><A 
name="index-2D-histograms"></A>
<P>A two dimensional histogram consists of a set of <EM>bins</EM> which count 
 the number of events falling in a given area of the <EM>(x,y)</EM> plane. The 
 simplest way to use a two dimensional histogram is to record two-dimensional 
 position information, <EM>n(x,y)</EM>. Another possibility is to form a 
<EM>joint distribution</EM> by recording related variables. For example a 
 detector might record both the position of an event (<EM>x</EM>) and the amount 
 of energy it deposited <EM>E</EM>. These could be histogrammed as the joint 
 distribution <EM>n(x,E)</EM>. </P>
<HR>
<A name="The-2D-histogram-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Histogram-allocation" 
rel="next">2D Histogram allocation</A>, Previous: <A accessKey="p" href="#Two-dimensional-histograms" 
rel="previous">Two dimensional histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-2D-histogram-struct-1"></A>
<H3 class="section">23.13 The 2D histogram struct</H3>
<P>Two dimensional histograms are defined by the following struct, </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d"></A>Data Type:   
  <STRONG>gsl_histogram2d</STRONG></DT>
  <DD>
  <DL compact="">
    <DT><CODE>size_t nx, ny</CODE></DT>
    <DD>
    <P>This is the number of histogram bins in the x and y directions. </P></DD>
    <DT><CODE>double * xrange</CODE></DT>
    <DD>
    <P>The ranges of the bins in the x-direction are stored in an array of     
    <EM><VAR>nx</VAR> + 1</EM> elements pointed to by <VAR>xrange</VAR>.     
    </P></DD>
    <DT><CODE>double * yrange</CODE></DT>
    <DD>
    <P>The ranges of the bins in the y-direction are stored in an array of     
    <EM><VAR>ny</VAR> + 1</EM> elements pointed to by <VAR>yrange</VAR>.     
    </P></DD>
    <DT><CODE>double * bin</CODE></DT>
    <DD>
    <P>The counts for each bin are stored in an array pointed to by     
    <VAR>bin</VAR>. The bins are floating-point numbers, so you can increment    
     them by non-integer values if necessary. The array <VAR>bin</VAR> stores 
    the     two dimensional array of bins in a single block of memory according 
    to the     mapping <CODE>bin(i,j)</CODE> = <CODE>bin[i * ny + j]</CODE>.   
    </P></DD></DL></DD></DL>
<P>The range for <CODE>bin(i,j)</CODE> is given by <CODE>xrange[i]</CODE> to 
<CODE>xrange[i+1]</CODE> in the x-direction and <CODE>yrange[j]</CODE> to 
<CODE>yrange[j+1]</CODE> in the y-direction. Each bin is inclusive at the lower 
 end and exclusive at the upper end. Mathematically this means that the bins are 
 defined by the following inequality, </P>
<DIV class="display"><PRE class="display">bin(i,j) corresponds to xrange[i] &lt;= x &lt; xrange[i+1]
                    and yrange[j] &lt;= y &lt; yrange[j+1]
</PRE></DIV>
<P>Note that any samples which fall on the upper sides of the histogram are 
 excluded. If you want to include these values for the side bins you will need 
to  add an extra row or column to your histogram. </P>
<P>The <CODE>gsl_histogram2d</CODE> struct and its associated functions are 
 defined in the header file <SAMP>gsl_histogram2d.h</SAMP>. </P>
<HR>
<A name="g_t2D-Histogram-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-2D-Histograms" 
rel="next">Copying 2D Histograms</A>, Previous: <A accessKey="p" href="#The-2D-histogram-struct" 
rel="previous">The 2D histogram struct</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Histogram-allocation-1"></A>
<H3 class="section">23.14 2D Histogram allocation</H3>
<P>The functions for allocating memory to a 2D histogram follow the style of 
<CODE>malloc</CODE> and <CODE>free</CODE>. In addition they also perform their 
 own error checking. If there is insufficient memory available to allocate a 
 histogram then the functions call the error handler (with an error number of 
<CODE>GSL_ENOMEM</CODE>) in addition to returning a null pointer. Thus if you 
 use the library error handler to abort your program then it isn’t necessary to 
 check every 2D histogram <CODE>alloc</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005falloc"></A>Function:   
  <EM>gsl_histogram2d *</EM> <STRONG>gsl_histogram2d_alloc</STRONG> <EM>(size_t  
   <VAR>nx</VAR>, size_t <VAR>ny</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a two-dimensional histogram with   
  <VAR>nx</VAR> bins in the x direction and <VAR>ny</VAR> bins in the y   
  direction. The function returns a pointer to a newly created   
  <CODE>gsl_histogram2d</CODE> struct. If insufficient memory is available a   
  null pointer is returned and the error handler is invoked with an error code   
  of <CODE>GSL_ENOMEM</CODE>. The bins and ranges must be initialized with one   
  of the functions below before the histogram is ready for use. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fset_005franges"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram2d_set_ranges</STRONG> <EM>(gsl_histogram2d  
   * <VAR>h</VAR>, const double <VAR>xrange</VAR>[], size_t <VAR>xsize</VAR>,   
  const double <VAR>yrange</VAR>[], size_t <VAR>ysize</VAR>)</EM></DT>
  <DD>
  <P>This function sets the ranges of the existing histogram <VAR>h</VAR> using  
   the arrays <VAR>xrange</VAR> and <VAR>yrange</VAR> of size <VAR>xsize</VAR>   
  and <VAR>ysize</VAR> respectively. The values of the histogram bins are reset  
   to zero. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fhistogram2d_005fset_005franges_005funiform"></A>Function:  
   <EM>int</EM> 
  <STRONG>gsl_histogram2d_set_ranges_uniform</STRONG><EM>(gsl_histogram2d * 
  <VAR>h</VAR>, double <VAR>xmin</VAR>, double   <VAR>xmax</VAR>, double 
  <VAR>ymin</VAR>, double <VAR>ymax</VAR>)</EM></DT>
  <DD>
  <P>This function sets the ranges of the existing histogram <VAR>h</VAR> to   
  cover the ranges <VAR>xmin</VAR> to <VAR>xmax</VAR> and <VAR>ymin</VAR> to   
  <VAR>ymax</VAR> uniformly. The values of the histogram bins are reset to zero. 
    </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_histogram2d_free</STRONG> <EM>(gsl_histogram2d *   
  <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function frees the 2D histogram <VAR>h</VAR> and all of the memory   
  associated with it. </P></DD></DL>
<HR>
<A name="Copying-2D-Histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Updating-and-accessing-2D-histogram-elements" 
rel="next">Updating and accessing 2D histogram elements</A>, Previous: <A 
accessKey="p" href="#g_t2D-Histogram-allocation" 
rel="previous">2D Histogram allocation</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-2D-Histograms-1"></A>
<H3 class="section">23.15 Copying 2D Histograms</H3>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_memcpy</STRONG> <EM>(gsl_histogram2d *   
  <VAR>dest</VAR>, const gsl_histogram2d * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the histogram <VAR>src</VAR> into the pre-existing   
  histogram <VAR>dest</VAR>, making <VAR>dest</VAR> into an exact copy of   
  <VAR>src</VAR>. The two histograms must be of the same size. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fclone"></A>Function:   
  <EM>gsl_histogram2d *</EM> <STRONG>gsl_histogram2d_clone</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to a newly created histogram which is an   
  exact copy of the histogram <VAR>src</VAR>. </P></DD></DL>
<HR>
<A name="Updating-and-accessing-2D-histogram-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Searching-2D-histogram-ranges" 
rel="next">Searching 2D histogram ranges</A>, Previous: <A accessKey="p" href="#Copying-2D-Histograms" 
rel="previous">Copying 2D Histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Updating-and-accessing-2D-histogram-elements-1"></A>
<H3 class="section">23.16 Updating and accessing 2D histogram elements</H3>
<P>You can access the bins of a two-dimensional histogram either by specifying a 
 pair of <EM>(x,y)</EM> coordinates or by using the bin indices <EM>(i,j)</EM> 
 directly. The functions for accessing the histogram through <EM>(x,y)</EM> 
 coordinates use binary searches in the x and y directions to identify the bin 
 which covers the appropriate range. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fincrement"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_increment</STRONG> <EM>(gsl_histogram2d *  
   <VAR>h</VAR>, double <VAR>x</VAR>, double <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function updates the histogram <VAR>h</VAR> by adding one (1.0) to the 
    bin whose x and y ranges contain the coordinates 
  (<VAR>x</VAR>,<VAR>y</VAR>).   </P>
  <P>If the point <EM>(x,y)</EM> lies inside the valid ranges of the histogram   
  then the function returns zero to indicate success. If <EM>(x,y)</EM> lies   
  outside the limits of the histogram then the function returns   
  <CODE>GSL_EDOM</CODE>, and none of the bins are modified. The error handler is 
    not called, since it is often necessary to compute histograms for a small   
  range of a larger dataset, ignoring any coordinates outside the range of   
  interest. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005faccumulate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram2d_accumulate</STRONG> <EM>(gsl_histogram2d  
   * <VAR>h</VAR>, double <VAR>x</VAR>, double <VAR>y</VAR>, double   
  <VAR>weight</VAR>)</EM></DT>
  <DD>
  <P>This function is similar to <CODE>gsl_histogram2d_increment</CODE> but   
  increases the value of the appropriate bin in the histogram <VAR>h</VAR> by   
  the floating-point number <VAR>weight</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_get</STRONG> <EM>(const gsl_histogram2d 
  *   <VAR>h</VAR>, size_t <VAR>i</VAR>, size_t <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function returns the contents of the (<VAR>i</VAR>,<VAR>j</VAR>)-th   
  bin of the histogram <VAR>h</VAR>. If (<VAR>i</VAR>,<VAR>j</VAR>) lies outside 
    the valid range of indices for the histogram then the error handler is 
  called   with an error code of <CODE>GSL_EDOM</CODE> and the function returns 
  0.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fget_005fxrange"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram2d_get_xrange</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h</VAR>, size_t <VAR>i</VAR>, double *   
  <VAR>xlower</VAR>, double * <VAR>xupper</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram2d_005fget_005fyrange"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram2d_get_yrange</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h</VAR>, size_t <VAR>j</VAR>, double *   
  <VAR>ylower</VAR>, double * <VAR>yupper</VAR>)</EM></DT>
  <DD>
  <P>These functions find the upper and lower range limits of the   
  <VAR>i</VAR>-th and <VAR>j</VAR>-th bins in the x and y directions of the   
  histogram <VAR>h</VAR>. The range limits are stored in <VAR>xlower</VAR> and   
  <VAR>xupper</VAR> or <VAR>ylower</VAR> and <VAR>yupper</VAR>. The lower limits 
    are inclusive (i.e. events with these coordinates are included in the bin) 
  and   the upper limits are exclusive (i.e. events with the value of the upper 
  limit   are not included and fall in the neighboring higher bin, if it 
  exists). The   functions return 0 to indicate success. If <VAR>i</VAR> or 
  <VAR>j</VAR> lies   outside the valid range of indices for the histogram then 
  the error handler is   called with an error code of <CODE>GSL_EDOM</CODE>. 
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fxmax"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_xmax</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram2d_005fxmin"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_xmin</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram2d_005fnx"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_histogram2d_nx</STRONG> <EM>(const gsl_histogram2d 
  *   <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram2d_005fymax"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_ymax</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram2d_005fymin"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_ymin</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fhistogram2d_005fny"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_histogram2d_ny</STRONG> <EM>(const gsl_histogram2d 
  *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>These functions return the maximum upper and minimum lower range limits and 
    the number of bins for the x and y directions of the histogram <VAR>h</VAR>. 
    They provide a way of determining these values without accessing the   
  <CODE>gsl_histogram2d</CODE> struct directly. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005freset"></A>Function: 
  <EM>void</EM><STRONG>gsl_histogram2d_reset</STRONG> <EM>(gsl_histogram2d *   
  <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function resets all the bins of the histogram <VAR>h</VAR> to zero.   
  </P></DD></DL>
<HR>
<A name="Searching-2D-histogram-ranges"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Histogram-Statistics" 
rel="next">2D Histogram Statistics</A>, Previous: <A accessKey="p" href="#Updating-and-accessing-2D-histogram-elements" 
rel="previous">Updating and accessing 2D histogram elements</A>, Up: <A 
accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Searching-2D-histogram-ranges-1"></A>
<H3 class="section">23.17 Searching 2D histogram ranges</H3>
<P>The following functions are used by the access and update routines to locate 
 the bin which corresponds to a given <EM>(x,y)</EM> coordinate. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005ffind"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_find</STRONG> <EM>(const gsl_histogram2d * 
    <VAR>h</VAR>, double <VAR>x</VAR>, double <VAR>y</VAR>, size_t * 
  <VAR>i</VAR>,   size_t * <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function finds and sets the indices <VAR>i</VAR> and <VAR>j</VAR> to   
  the bin which covers the coordinates (<VAR>x</VAR>,<VAR>y</VAR>). The bin is   
  located using a binary search. The search includes an optimization for   
  histograms with uniform ranges, and will return the correct bin immediately in 
    this case. If <EM>(x,y)</EM> is found then the function sets the indices   
  (<VAR>i</VAR>,<VAR>j</VAR>) and returns <CODE>GSL_SUCCESS</CODE>. If   
  <EM>(x,y)</EM> lies outside the valid range of the histogram then the function 
    returns <CODE>GSL_EDOM</CODE> and the error handler is invoked. </P></DD></DL>
<HR>
<A name="g_t2D-Histogram-Statistics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Histogram-Operations" 
rel="next">2D Histogram Operations</A>, Previous: <A accessKey="p" href="#Searching-2D-histogram-ranges" 
rel="previous">Searching 2D histogram ranges</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Histogram-Statistics-1"></A>
<H3 class="section">23.18 2D Histogram Statistics</H3>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fmax_005fval"></A>Function:   
  <EM>double</EM> <STRONG>gsl_histogram2d_max_val</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the maximum value contained in the histogram bins.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fmax_005fbin"></A>Function:   
  <EM>void</EM> <STRONG>gsl_histogram2d_max_bin</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h</VAR>, size_t * <VAR>i</VAR>, size_t *   
  <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function finds the indices of the bin containing the maximum value in  
   the histogram <VAR>h</VAR> and stores the result in   
  (<VAR>i</VAR>,<VAR>j</VAR>). In the case where several bins contain the same   
  maximum value the first bin found is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fmin_005fval"></A>Function:   
  <EM>double</EM> <STRONG>gsl_histogram2d_min_val</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum value contained in the histogram bins.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fmin_005fbin"></A>Function:   
  <EM>void</EM> <STRONG>gsl_histogram2d_min_bin</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h</VAR>, size_t * <VAR>i</VAR>, size_t *   
  <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function finds the indices of the bin containing the minimum value in  
   the histogram <VAR>h</VAR> and stores the result in   
  (<VAR>i</VAR>,<VAR>j</VAR>). In the case where several bins contain the same   
  maximum value the first bin found is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fxmean"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_xmean</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the mean of the histogrammed x variable, where the   
  histogram is regarded as a probability distribution. Negative bin values are   
  ignored for the purposes of this calculation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fymean"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_ymean</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the mean of the histogrammed y variable, where the   
  histogram is regarded as a probability distribution. Negative bin values are   
  ignored for the purposes of this calculation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fxsigma"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_xsigma</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the standard deviation of the histogrammed x   
  variable, where the histogram is regarded as a probability distribution.   
  Negative bin values are ignored for the purposes of this calculation. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fysigma"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_ysigma</STRONG> <EM>(const 
  gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the standard deviation of the histogrammed y   
  variable, where the histogram is regarded as a probability distribution.   
  Negative bin values are ignored for the purposes of this calculation. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fcov"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_cov</STRONG> <EM>(const gsl_histogram2d 
  *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the covariance of the histogrammed x and y variables, 
    where the histogram is regarded as a probability distribution. Negative bin  
   values are ignored for the purposes of this calculation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fsum"></A>Function: 
  <EM>double</EM><STRONG>gsl_histogram2d_sum</STRONG> <EM>(const gsl_histogram2d 
  *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function returns the sum of all bin values. Negative bin values are   
  included in the sum. </P></DD></DL>
<HR>
<A name="g_t2D-Histogram-Operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-and-writing-2D-histograms" 
rel="next">Reading and writing 2D histograms</A>, Previous: <A accessKey="p" 
href="#g_t2D-Histogram-Statistics" 
rel="previous">2D Histogram Statistics</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Histogram-Operations-1"></A>
<H3 class="section">23.19 2D Histogram Operations</H3>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fequal_005fbins_005fp"></A>Function: 
    <EM>int</EM> <STRONG>gsl_histogram2d_equal_bins_p</STRONG> <EM>(const   
  gsl_histogram2d * <VAR>h1</VAR>, const gsl_histogram2d *   
  <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if all the individual bin ranges of the two   
  histograms are identical, and 0 otherwise. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fadd"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_add</STRONG> <EM>(gsl_histogram2d * 
  <VAR>h1</VAR>,   const gsl_histogram2d * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function adds the contents of the bins in histogram <VAR>h2</VAR> to   
  the corresponding bins of histogram <VAR>h1</VAR>, i.e. <EM>h'_1(i,j) =   
  h_1(i,j) + h_2(i,j)</EM>. The two histograms must have identical bin ranges.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fsub"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_sub</STRONG> <EM>(gsl_histogram2d * 
  <VAR>h1</VAR>,   const gsl_histogram2d * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function subtracts the contents of the bins in histogram <VAR>h2</VAR> 
    from the corresponding bins of histogram <VAR>h1</VAR>, i.e. <EM>h'_1(i,j) = 
    h_1(i,j) - h_2(i,j)</EM>. The two histograms must have identical bin ranges. 
    </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fmul"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_mul</STRONG> <EM>(gsl_histogram2d * 
  <VAR>h1</VAR>,   const gsl_histogram2d * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the contents of the bins of histogram   
  <VAR>h1</VAR> by the contents of the corresponding bins in histogram   
  <VAR>h2</VAR>, i.e. <EM>h'_1(i,j) = h_1(i,j) * h_2(i,j)</EM>. The two   
  histograms must have identical bin ranges. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fdiv"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_div</STRONG> <EM>(gsl_histogram2d * 
  <VAR>h1</VAR>,   const gsl_histogram2d * <VAR>h2</VAR>)</EM></DT>
  <DD>
  <P>This function divides the contents of the bins of histogram <VAR>h1</VAR>   
  by the contents of the corresponding bins in histogram <VAR>h2</VAR>, i.e.   
  <EM>h'_1(i,j) = h_1(i,j) / h_2(i,j)</EM>. The two histograms must have   
  identical bin ranges. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fscale"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_scale</STRONG> <EM>(gsl_histogram2d * 
  <VAR>h</VAR>,   double <VAR>scale</VAR>)</EM></DT>
  <DD>
  <P>This function multiplies the contents of the bins of histogram <VAR>h</VAR> 
    by the constant <VAR>scale</VAR>, i.e. <EM>h'_1(i,j) = h_1(i,j) scale</EM>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fshift"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_shift</STRONG> <EM>(gsl_histogram2d * 
  <VAR>h</VAR>,   double <VAR>offset</VAR>)</EM></DT>
  <DD>
  <P>This function shifts the contents of the bins of histogram <VAR>h</VAR> by  
   the constant <VAR>offset</VAR>, i.e. <EM>h'_1(i,j) = h_1(i,j) + offset</EM>.  
   </P></DD></DL>
<HR>
<A name="Reading-and-writing-2D-histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Resampling-from-2D-histograms" 
rel="next">Resampling from 2D histograms</A>, Previous: <A accessKey="p" href="#g_t2D-Histogram-Operations" 
rel="previous">2D Histogram Operations</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Reading-and-writing-2D-histograms-1"></A>
<H3 class="section">23.20 Reading and writing 2D histograms</H3>
<P>The library provides functions for reading and writing two dimensional 
 histograms to a file as binary data or formatted text. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005ffwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_fwrite</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_histogram2d * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function writes the ranges and bins of the histogram <VAR>h</VAR> to   
  the stream <VAR>stream</VAR> in binary format. The return value is 0 for   
  success and <CODE>GSL_EFAILED</CODE> if there was a problem writing to the   
  file. Since the data is written in the native binary format it may not be   
  portable between different architectures. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005ffread"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_fread</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_histogram2d * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function reads into the histogram <VAR>h</VAR> from the stream   
  <VAR>stream</VAR> in binary format. The histogram <VAR>h</VAR> must be   
  preallocated with the correct size since the function uses the number of x and 
    y bins in <VAR>h</VAR> to determine how many bytes to read. The return value 
    is 0 for success and <CODE>GSL_EFAILED</CODE> if there was a problem reading 
    from the file. The data is assumed to have been written in the native binary 
    format on the same architecture. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005ffprintf"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_fprintf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>, const   gsl_histogram2d * <VAR>h</VAR>, const char * 
  <VAR>range_format</VAR>, const   char * <VAR>bin_format</VAR>)</EM></DT>
  <DD>
  <P>This function writes the ranges and bins of the histogram <VAR>h</VAR>   
  line-by-line to the stream <VAR>stream</VAR> using the format specifiers   
  <VAR>range_format</VAR> and <VAR>bin_format</VAR>. These should be one of the  
   <CODE>%g</CODE>, <CODE>%e</CODE> or <CODE>%f</CODE> formats for floating 
  point   numbers. The function returns 0 for success and 
  <CODE>GSL_EFAILED</CODE> if   there was a problem writing to the file. The 
  histogram output is formatted in   five columns, and the columns are separated 
  by spaces, like this, </P>
  <DIV class="smallexample"><PRE class="smallexample">xrange[0] xrange[1] yrange[0] yrange[1] bin(0,0)
xrange[0] xrange[1] yrange[1] yrange[2] bin(0,1)
xrange[0] xrange[1] yrange[2] yrange[3] bin(0,2)
....
xrange[0] xrange[1] yrange[ny-1] yrange[ny] bin(0,ny-1)

xrange[1] xrange[2] yrange[0] yrange[1] bin(1,0)
xrange[1] xrange[2] yrange[1] yrange[2] bin(1,1)
xrange[1] xrange[2] yrange[1] yrange[2] bin(1,2)
....
xrange[1] xrange[2] yrange[ny-1] yrange[ny] bin(1,ny-1)

....

xrange[nx-1] xrange[nx] yrange[0] yrange[1] bin(nx-1,0)
xrange[nx-1] xrange[nx] yrange[1] yrange[2] bin(nx-1,1)
xrange[nx-1] xrange[nx] yrange[1] yrange[2] bin(nx-1,2)
....
xrange[nx-1] xrange[nx] yrange[ny-1] yrange[ny] bin(nx-1,ny-1)
</PRE></DIV>
  <P>Each line contains the lower and upper limits of the bin and the contents   
  of the bin. Since the upper limits of the each bin are the lower limits of the 
    neighboring bins there is duplication of these values but this allows the   
  histogram to be manipulated with line-oriented tools. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005ffscanf"></A>Function: 
  <EM>int</EM><STRONG>gsl_histogram2d_fscanf</STRONG> <EM>(FILE * 
  <VAR>stream</VAR>,   gsl_histogram2d * <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function reads formatted data from the stream <VAR>stream</VAR> into   
  the histogram <VAR>h</VAR>. The data is assumed to be in the five-column   
  format used by <CODE>gsl_histogram2d_fprintf</CODE>. The histogram   
  <VAR>h</VAR> must be preallocated with the correct lengths since the function  
   uses the sizes of <VAR>h</VAR> to determine how many numbers to read. The   
  function returns 0 for success and <CODE>GSL_EFAILED</CODE> if there was a   
  problem reading from the file. </P></DD></DL>
<HR>
<A name="Resampling-from-2D-histograms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-2D-histograms" 
rel="next">Example programs for 2D histograms</A>, Previous: <A accessKey="p" 
href="#Reading-and-writing-2D-histograms" 
rel="previous">Reading and writing 2D histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Resampling-from-2D-histograms-1"></A>
<H3 class="section">23.21 Resampling from 2D histograms</H3>
<P>As in the one-dimensional case, a two-dimensional histogram made by counting 
 events can be regarded as a measurement of a probability distribution. Allowing 
 for statistical error, the height of each bin represents the probability of an 
 event where (<EM>x</EM>,<EM>y</EM>) falls in the range of that bin. For a 
 two-dimensional histogram the probability distribution takes the form 
<EM>p(x,y)  dx dy</EM> where, </P>
<DIV class="example"><PRE class="example">p(x,y) = n_{ij}/ (N A_{ij})
</PRE></DIV>
<P>In this equation <EM>n_{ij}</EM> is the number of events in the bin which 
 contains <EM>(x,y)</EM>, <EM>A_{ij}</EM> is the area of the bin and <EM>N</EM> 
 is the total number of events. The distribution of events within each bin is 
 assumed to be uniform. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fpdf"></A>Data Type:   
  <STRONG>gsl_histogram2d_pdf</STRONG></DT>
  <DD>
  <DL compact="">
    <DT><CODE>size_t nx, ny</CODE></DT>
    <DD>
    <P>This is the number of histogram bins used to approximate the probability  
       distribution function in the x and y directions. </P></DD>
    <DT><CODE>double * xrange</CODE></DT>
    <DD>
    <P>The ranges of the bins in the x-direction are stored in an array of     
    <EM><VAR>nx</VAR> + 1</EM> elements pointed to by <VAR>xrange</VAR>.     
    </P></DD>
    <DT><CODE>double * yrange</CODE></DT>
    <DD>
    <P>The ranges of the bins in the y-direction are stored in an array of     
    <EM><VAR>ny</VAR> + 1</EM> pointed to by <VAR>yrange</VAR>. </P></DD>
    <DT><CODE>double * sum</CODE></DT>
    <DD>
    <P>The cumulative probability for the bins is stored in an array of     
    <VAR>nx</VAR>*<VAR>ny</VAR> elements pointed to by <VAR>sum</VAR>.   
    </P></DD></DL></DD></DL>
<P>The following functions allow you to create a 
<CODE>gsl_histogram2d_pdf</CODE> struct which represents a two dimensional 
 probability distribution and generate random samples from it. </P>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fpdf_005falloc"></A>Function:   
  <EM>gsl_histogram2d_pdf *</EM> 
  <STRONG>gsl_histogram2d_pdf_alloc</STRONG><EM>(size_t <VAR>nx</VAR>, size_t 
  <VAR>ny</VAR>)</EM></DT>
  <DD>
  <P>This function allocates memory for a two-dimensional probability   
  distribution of size <VAR>nx</VAR>-by-<VAR>ny</VAR> and returns a pointer to a 
    newly initialized <CODE>gsl_histogram2d_pdf</CODE> struct. If insufficient   
  memory is available a null pointer is returned and the error handler is   
  invoked with an error code of <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fpdf_005finit"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram2d_pdf_init</STRONG><EM>(gsl_histogram2d_pdf 
  * <VAR>p</VAR>, const gsl_histogram2d *   <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the two-dimensional probability distribution   
  calculated <VAR>p</VAR> from the histogram <VAR>h</VAR>. If any of the bins of 
    <VAR>h</VAR> are negative then the error handler is invoked with an error 
  code   of <CODE>GSL_EDOM</CODE> because a probability distribution cannot 
  contain   negative values. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fpdf_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_histogram2d_pdf_free</STRONG><EM>(gsl_histogram2d_pdf * 
  <VAR>p</VAR>)</EM></DT>
  <DD>
  <P>This function frees the two-dimensional probability distribution function   
  <VAR>p</VAR> and all of the memory associated with it. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fhistogram2d_005fpdf_005fsample"></A>Function:   
  <EM>int</EM> <STRONG>gsl_histogram2d_pdf_sample</STRONG> <EM>(const   
  gsl_histogram2d_pdf * <VAR>p</VAR>, double <VAR>r1</VAR>, double   
  <VAR>r2</VAR>, double * <VAR>x</VAR>, double * <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function uses two uniform random numbers between zero and one,   
  <VAR>r1</VAR> and <VAR>r2</VAR>, to compute a single random sample from the   
  two-dimensional probability distribution <VAR>p</VAR>. </P></DD></DL>
<HR>
<A name="Example-programs-for-2D-histograms"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Resampling-from-2D-histograms" 
rel="previous">Resampling from 2D histograms</A>, Up: <A accessKey="u" href="#Histograms" 
rel="up">Histograms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Example-programs-for-2D-histograms-1"></A>
<H3 class="section">23.22 Example programs for 2D histograms</H3>
<P>This program demonstrates two features of two-dimensional histograms. First a 
 10-by-10 two-dimensional histogram is created with x and y running from 0 to 1. 
 Then a few sample points are added to the histogram, at (0.3,0.3) with a height 
 of 1, at (0.8,0.1) with a height of 5 and at (0.7,0.9) with a height of 0.5. 
 This histogram with three events is used to generate a random sample of 1000 
 simulated events, which are printed out. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_histogram2d.h&gt;

int
main (void)
{
  const gsl_rng_type * T;
  gsl_rng * r;

  gsl_histogram2d * h = gsl_histogram2d_alloc (10, 10);

  gsl_histogram2d_set_ranges_uniform (h, 
                                      0.0, 1.0,
                                      0.0, 1.0);

  gsl_histogram2d_accumulate (h, 0.3, 0.3, 1);
  gsl_histogram2d_accumulate (h, 0.8, 0.1, 5);
  gsl_histogram2d_accumulate (h, 0.7, 0.9, 0.5);

  gsl_rng_env_setup ();
  
  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  {
    int i;
    gsl_histogram2d_pdf * p 
      = gsl_histogram2d_pdf_alloc (h-&gt;nx, h-&gt;ny);
    
    gsl_histogram2d_pdf_init (p, h);

    for (i = 0; i &lt; 1000; i++) {
      double x, y;
      double u = gsl_rng_uniform (r);
      double v = gsl_rng_uniform (r);
       
      gsl_histogram2d_pdf_sample (p, u, v, &amp;x, &amp;y);
      
      printf ("%g %g\n", x, y);
    }

    gsl_histogram2d_pdf_free (p);
  }

  gsl_histogram2d_free (h);
  gsl_rng_free (r);

  return 0;
}
</PRE></DIV>
<HR>
<A name="N_002dtuples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Monte-Carlo-Integration" 
rel="next">Monte Carlo Integration</A>, Previous: <A accessKey="p" href="#Histograms" 
rel="previous">Histograms</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="N_002dtuples-1"></A>
<H2 class="chapter">24 N-tuples</H2><A name="index-ntuples"></A>
<P>This chapter describes functions for creating and manipulating 
<EM>ntuples</EM>, sets of values associated with events. The ntuples are stored 
 in files. Their values can be extracted in any combination and <EM>booked</EM> 
 in a histogram using a selection function. </P>
<P>The values to be stored are held in a user-defined data structure, and an 
 ntuple is created associating this data structure with a file. The values are 
 then written to the file (normally inside a loop) using the ntuple functions 
 described below. </P>
<P>A histogram can be created from ntuple data by providing a selection function 
 and a value function. The selection function specifies whether an event should 
 be included in the subset to be analyzed or not. The value function computes 
the  entry to be added to the histogram for each event. </P>
<P>All the ntuple functions are defined in the header file 
<SAMP>gsl_ntuple.h</SAMP> </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#The-ntuple-struct">The 
            ntuple struct</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Creating-ntuples">Creating 
            ntuples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Opening-an-existing-ntuple-file">Opening 
            an existing ntuple file</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Writing-ntuples">Writing 
            ntuples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Reading-ntuples">Reading 
            ntuples </A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Closing-an-ntuple-file">Closing 
            an ntuple file</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Example-ntuple-programs">Example 
            ntuple programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Ntuple-References-and-Further-Reading">Ntuple 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="The-ntuple-struct"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Creating-ntuples" 
rel="next">Creating ntuples</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="The-ntuple-struct-1"></A>
<H3 class="section">24.1 The ntuple struct</H3><A 
name="index-gsl_005fntuple"></A>
<P>Ntuples are manipulated using the <CODE>gsl_ntuple</CODE> struct. This struct 
 contains information on the file where the ntuple data is stored, a pointer to 
 the current ntuple data row and the size of the user-defined ntuple data 
struct. </P>
<DIV class="example"><PRE class="example">typedef struct {
    FILE * file;
    void * ntuple_data;
    size_t size;
} gsl_ntuple;
</PRE></DIV>
<HR>
<A name="Creating-ntuples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Opening-an-existing-ntuple-file" 
rel="next">Opening an existing ntuple file</A>, Previous: <A accessKey="p" href="#The-ntuple-struct" 
rel="previous">The ntuple struct</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Creating-ntuples-1"></A>
<H3 class="section">24.2 Creating ntuples</H3>
<DL>
  <DT><A name="index-gsl_005fntuple_005fcreate"></A>Function: <EM>gsl_ntuple   
  *</EM> <STRONG>gsl_ntuple_create</STRONG> <EM>(char * <VAR>filename</VAR>,   
  void * <VAR>ntuple_data</VAR>, size_t <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function creates a new write-only ntuple file <VAR>filename</VAR> for  
   ntuples of size <VAR>size</VAR> and returns a pointer to the newly created   
  ntuple struct. Any existing file with the same name is truncated to zero   
  length and overwritten. A pointer to memory for the current ntuple row   
  <VAR>ntuple_data</VAR> must be supplied—this is used to copy ntuples in and   
  out of the file. </P></DD></DL>
<HR>
<A name="Opening-an-existing-ntuple-file"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Writing-ntuples" 
rel="next">Writing ntuples</A>, Previous: <A accessKey="p" href="#Creating-ntuples" 
rel="previous">Creating ntuples</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Opening-an-existing-ntuple-file-1"></A>
<H3 class="section">24.3 Opening an existing ntuple file</H3>
<DL>
  <DT><A name="index-gsl_005fntuple_005fopen"></A>Function: <EM>gsl_ntuple 
  *</EM><STRONG>gsl_ntuple_open</STRONG> <EM>(char * <VAR>filename</VAR>, void * 
    <VAR>ntuple_data</VAR>, size_t <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function opens an existing ntuple file <VAR>filename</VAR> for reading 
    and returns a pointer to a corresponding ntuple struct. The ntuples in the   
  file must have size <VAR>size</VAR>. A pointer to memory for the current   
  ntuple row <VAR>ntuple_data</VAR> must be supplied—this is used to copy   
  ntuples in and out of the file. </P></DD></DL>
<HR>
<A name="Writing-ntuples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Reading-ntuples" 
rel="next">Reading ntuples</A>, Previous: <A accessKey="p" href="#Opening-an-existing-ntuple-file" 
rel="previous">Opening an existing ntuple file</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Writing-ntuples-1"></A>
<H3 class="section">24.4 Writing ntuples</H3>
<DL>
  <DT><A name="index-gsl_005fntuple_005fwrite"></A>Function: 
  <EM>int</EM><STRONG>gsl_ntuple_write</STRONG> <EM>(gsl_ntuple *   
  <VAR>ntuple</VAR>)</EM></DT>
  <DD>
  <P>This function writes the current ntuple <VAR>ntuple-&gt;ntuple_data</VAR>   
  of size <VAR>ntuple-&gt;size</VAR> to the corresponding file. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fntuple_005fbookdata"></A>Function: 
  <EM>int</EM><STRONG>gsl_ntuple_bookdata</STRONG> <EM>(gsl_ntuple *   
  <VAR>ntuple</VAR>)</EM></DT>
  <DD>
  <P>This function is a synonym for <CODE>gsl_ntuple_write</CODE>. </P></DD></DL>
<HR>
<A name="Reading-ntuples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Closing-an-ntuple-file" 
rel="next">Closing an ntuple file</A>, Previous: <A accessKey="p" href="#Writing-ntuples" 
rel="previous">Writing ntuples</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Reading-ntuples-1"></A>
<H3 class="section">24.5 Reading ntuples</H3>
<DL>
  <DT><A name="index-gsl_005fntuple_005fread"></A>Function: 
  <EM>int</EM><STRONG>gsl_ntuple_read</STRONG> <EM>(gsl_ntuple * 
  <VAR>ntuple</VAR>)</EM></DT>
  <DD>
  <P>This function reads the current row of the ntuple file for   
  <VAR>ntuple</VAR> and stores the values in <VAR>ntuple-&gt;data</VAR>.   
  </P></DD></DL>
<HR>
<A name="Closing-an-ntuple-file"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Histogramming-ntuple-values" 
rel="next">Histogramming ntuple values</A>, Previous: <A accessKey="p" href="#Reading-ntuples" 
rel="previous">Reading ntuples</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Closing-an-ntuple-file-1"></A>
<H3 class="section">24.6 Closing an ntuple file</H3>
<DL>
  <DT><A name="index-gsl_005fntuple_005fclose"></A>Function: 
  <EM>int</EM><STRONG>gsl_ntuple_close</STRONG> <EM>(gsl_ntuple *   
  <VAR>ntuple</VAR>)</EM></DT>
  <DD>
  <P>This function closes the ntuple file <VAR>ntuple</VAR> and frees its   
  associated allocated memory. </P></DD></DL>
<HR>
<A name="Histogramming-ntuple-values"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-ntuple-programs" 
rel="next">Example ntuple programs</A>, Previous: <A accessKey="p" href="#Closing-an-ntuple-file" 
rel="previous">Closing an ntuple file</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Histogramming-ntuple-values-1"></A>
<H3 class="section">24.7 Histogramming ntuple values</H3>
<P>Once an ntuple has been created its contents can be histogrammed in various 
 ways using the function <CODE>gsl_ntuple_project</CODE>. Two user-defined 
 functions must be provided, a function to select events and a function to 
 compute scalar values. The selection function and the value function both 
accept  the ntuple row as a first argument and other parameters as a second 
argument. </P><A name="index-selection-function_002c-ntuples"></A><A name="index-gsl_005fntuple_005fselect_005ffn"></A>
<P>The <EM>selection function</EM> determines which ntuple rows are selected for 
 histogramming. It is defined by the following struct, </P>
<DIV class="smallexample"><PRE class="smallexample">typedef struct {
  int (* function) (void * ntuple_data, void * params);
  void * params;
} gsl_ntuple_select_fn;
</PRE></DIV>
<P>The struct component <VAR>function</VAR> should return a non-zero value for 
 each ntuple row that is to be included in the histogram. </P><A name="index-value-function_002c-ntuples"></A><A 
name="index-gsl_005fntuple_005fvalue_005ffn"></A>
<P>The <EM>value function</EM> computes scalar values for those ntuple rows 
 selected by the selection function, </P>
<DIV class="smallexample"><PRE class="smallexample">typedef struct {
  double (* function) (void * ntuple_data, void * params);
  void * params;
} gsl_ntuple_value_fn;
</PRE></DIV>
<P>In this case the struct component <VAR>function</VAR> should return the value 
 to be added to the histogram for the ntuple row. </P><A name="index-histogram_002c-from-ntuple"></A><A 
name="index-projection-of-ntuples"></A>
<DL>
  <DT><A name="index-gsl_005fntuple_005fproject"></A>Function: 
  <EM>int</EM><STRONG>gsl_ntuple_project</STRONG> <EM>(gsl_histogram * 
  <VAR>h</VAR>,   gsl_ntuple * <VAR>ntuple</VAR>, gsl_ntuple_value_fn * 
  <VAR>value_func</VAR>,   gsl_ntuple_select_fn * 
  <VAR>select_func</VAR>)</EM></DT>
  <DD>
  <P>This function updates the histogram <VAR>h</VAR> from the ntuple   
  <VAR>ntuple</VAR> using the functions <VAR>value_func</VAR> and   
  <VAR>select_func</VAR>. For each ntuple row where the selection function   
  <VAR>select_func</VAR> is non-zero the corresponding value of that row is   
  computed using the function <VAR>value_func</VAR> and added to the histogram.  
   Those ntuple rows where <VAR>select_func</VAR> returns zero are ignored. New  
   entries are added to the histogram, so subsequent calls can be used to   
  accumulate further data in the same histogram. </P></DD></DL>
<HR>
<A name="Example-ntuple-programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Ntuple-References-and-Further-Reading" 
rel="next">Ntuple References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Histogramming-ntuple-values" 
rel="previous">Histogramming ntuple values</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-16"></A>
<H3 class="section">24.8 Examples</H3>
<P>The following example programs demonstrate the use of ntuples in managing a 
 large dataset. The first program creates a set of 10,000 simulated “events”, 
each with 3 associated values <EM>(x,y,z)</EM>. These are generated from a 
 Gaussian distribution with unit variance, for demonstration purposes, and 
 written to the ntuple file <SAMP>test.dat</SAMP>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;gsl/gsl_ntuple.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;

struct data
{
  double x;
  double y;
  double z;
};

int
main (void)
{
  const gsl_rng_type * T;
  gsl_rng * r;

  struct data ntuple_row;
  int i;

  gsl_ntuple *ntuple 
    = gsl_ntuple_create ("test.dat", &amp;ntuple_row, 
                         sizeof (ntuple_row));

  gsl_rng_env_setup ();

  T = gsl_rng_default; 
  r = gsl_rng_alloc (T);

  for (i = 0; i &lt; 10000; i++)
    {
      ntuple_row.x = gsl_ran_ugaussian (r);
      ntuple_row.y = gsl_ran_ugaussian (r);
      ntuple_row.z = gsl_ran_ugaussian (r);
      
      gsl_ntuple_write (ntuple);
    }
  
  gsl_ntuple_close (ntuple);
  gsl_rng_free (r);

  return 0;
}
</PRE></DIV>
<P>The next program analyses the ntuple data in the file <SAMP>test.dat</SAMP>. 
 The analysis procedure is to compute the squared-magnitude of each event, 
<EM>E^2=x^2+y^2+z^2</EM>, and select only those which exceed a lower limit of 
 1.5. The selected events are then histogrammed using their <EM>E^2</EM> values. 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;math.h&gt;
#include &lt;gsl/gsl_ntuple.h&gt;
#include &lt;gsl/gsl_histogram.h&gt;

struct data
{
  double x;
  double y;
  double z;
};

int sel_func (void *ntuple_data, void *params);
double val_func (void *ntuple_data, void *params);

int
main (void)
{
  struct data ntuple_row;

  gsl_ntuple *ntuple 
    = gsl_ntuple_open ("test.dat", &amp;ntuple_row,
                       sizeof (ntuple_row));
  double lower = 1.5;

  gsl_ntuple_select_fn S;
  gsl_ntuple_value_fn V;

  gsl_histogram *h = gsl_histogram_alloc (100);
  gsl_histogram_set_ranges_uniform(h, 0.0, 10.0);

  S.function = &amp;sel_func;
  S.params = &amp;lower;

  V.function = &amp;val_func;
  V.params = 0;

  gsl_ntuple_project (h, ntuple, &amp;V, &amp;S);
  gsl_histogram_fprintf (stdout, h, "%f", "%f");
  gsl_histogram_free (h);
  gsl_ntuple_close (ntuple);

  return 0;
}

int
sel_func (void *ntuple_data, void *params)
{
  struct data * data = (struct data *) ntuple_data;  
  double x, y, z, E2, scale;
  scale = *(double *) params;
  
  x = data-&gt;x;
  y = data-&gt;y;
  z = data-&gt;z;

  E2 = x * x + y * y + z * z;

  return E2 &gt; scale;
}

double
val_func (void *ntuple_data, void *params)
{
  struct data * data = (struct data *) ntuple_data;  
  double x, y, z;

  x = data-&gt;x;
  y = data-&gt;y;
  z = data-&gt;z;

  return x * x + y * y + z * z;
}
</PRE></DIV>
<P>The following plot shows the distribution of the selected events. Note the 
 cut-off at the lower bound. </P>
<HR>
<A name="Ntuple-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Example-ntuple-programs" 
rel="previous">Example ntuple programs</A>, Up: <A accessKey="u" href="#N_002dtuples" 
rel="up">N-tuples</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-16"></A>
<H3 class="section">24.9 References and Further Reading</H3><A 
name="index-PAW"></A><A name="index-HBOOK"></A>
<P>Further information on the use of ntuples can be found in the documentation 
 for the <SMALL>CERN</SMALL> packages <SMALL>PAW</SMALL> and 
<SMALL>HBOOK</SMALL>  (available online). </P>
<HR>
<A name="Monte-Carlo-Integration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Simulated-Annealing" 
rel="next">Simulated Annealing</A>, Previous: <A accessKey="p" href="#N_002dtuples" 
rel="previous">N-tuples</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Monte-Carlo-Integration-1"></A>
<H2 class="chapter">25 Monte Carlo Integration</H2><A name="index-Monte-Carlo-integration"></A><A 
name="index-stratified-sampling-in-Monte-Carlo-integration"></A><A name="index-multidimensional-integration"></A>
<P>This chapter describes routines for multidimensional Monte Carlo integration. 
 These include the traditional Monte Carlo method and adaptive algorithms such 
as <SMALL>VEGAS</SMALL> and <SMALL>MISER</SMALL> which use importance sampling 
and  stratified sampling techniques. Each algorithm computes an estimate of a 
 multidimensional definite integral of the form, </P>
<DIV class="example"><PRE class="example">I = \int_xl^xu dx \int_yl^yu  dy ...  f(x, y, ...)
</PRE></DIV>
<P>over a hypercubic region <EM>((x_l,x_u)</EM>, <EM>(y_l,y_u), ...)</EM> using 
 a fixed number of function calls. The routines also provide a statistical 
 estimate of the error on the result. This error estimate should be taken as a 
 guide rather than as a strict error bound—random sampling of the region may not 
 uncover all the important features of the function, resulting in an 
 underestimate of the error. </P>
<P>The functions are defined in separate header files for each routine, 
<SAMP>gsl_monte_plain.h</SAMP>, <SAMP>gsl_monte_miser.h</SAMP> and 
<SAMP>gsl_monte_vegas.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Monte-Carlo-Interface">Monte 
            Carlo Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#MISER">MISER</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#VEGAS">VEGAS</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Monte-Carlo-Examples">Monte 
            Carlo Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Monte-Carlo-Integration-References-and-Further-Reading">Monte 
            Carlo Integration References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Monte-Carlo-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#PLAIN-Monte-Carlo" 
rel="next">PLAIN Monte Carlo</A>, Up: <A accessKey="u" href="#Monte-Carlo-Integration" 
rel="up">Monte Carlo Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Interface"></A>
<H3 class="section">25.1 Interface</H3>
<P>All of the Monte Carlo integration routines use the same general form of 
 interface. There is an allocator to allocate memory for control variables and 
 workspace, a routine to initialize those control variables, the integrator 
 itself, and a function to free the space when done. </P>
<P>Each integration function requires a random number generator to be supplied, 
 and returns an estimate of the integral and its standard deviation. The 
accuracy  of the result is determined by the number of function calls specified 
by the  user. If a known level of accuracy is required this can be achieved by 
calling  the integrator several times and averaging the individual results until 
the  desired accuracy is obtained. </P>
<P>Random sample points used within the Monte Carlo routines are always chosen 
 strictly within the integration region, so that endpoint singularities are 
 automatically avoided. </P>
<P>The function to be integrated has its own datatype, defined in the header 
 file <SAMP>gsl_monte.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005ffunction"></A>Data Type:   
  <STRONG>gsl_monte_function</STRONG></DT>
  <DD>
  <P>This data type defines a general function with parameters for Monte Carlo   
  integration. </P>
  <DL compact="">
    <DT><CODE>double (* f) (double * <VAR>x</VAR>, size_t <VAR>dim</VAR>, void * 
        <VAR>params</VAR>)</CODE></DT>
    <DD>
    <P>this function should return the value <EM>f(x,params)</EM> for the     
    argument <VAR>x</VAR> and parameters <VAR>params</VAR>, where <VAR>x</VAR>   
      is an array of size <VAR>dim</VAR> giving the coordinates of the point 
    where     the function is to be evaluated. </P></DD>
    <DT><CODE>size_t dim</CODE></DT>
    <DD>
    <P>the number of dimensions for <VAR>x</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function. </P></DD></DL></DD></DL>
<P>Here is an example for a quadratic function in two dimensions, </P>
<DIV class="example"><PRE class="example">f(x,y) = a x^2 + b x y + c y^2
</PRE></DIV>
<P>with <EM>a = 3</EM>, <EM>b = 2</EM>, <EM>c = 1</EM>. The following code 
 defines a <CODE>gsl_monte_function</CODE> <CODE>F</CODE> which you could pass 
to  an integrator: </P>
<DIV class="example"><PRE class="example">struct my_f_params { double a; double b; double c; };

double
my_f (double x[], size_t dim, void * p) {
   struct my_f_params * fp = (struct my_f_params *)p;

   if (dim != 2)
      {
        fprintf (stderr, "error: dim != 2");
        abort ();
      }

   return  fp-&gt;a * x[0] * x[0] 
             + fp-&gt;b * x[0] * x[1] 
               + fp-&gt;c * x[1] * x[1];
}

gsl_monte_function F;
struct my_f_params params = { 3.0, 2.0, 1.0 };

F.f = &amp;my_f;
F.dim = 2;
F.params = &amp;params;
</PRE></DIV>
<P>The function <EM>f(x)</EM> can be evaluated using the following macro, </P>
<DIV class="example"><PRE class="example">#define GSL_MONTE_FN_EVAL(F,x) 
    (*((F)-&gt;f))(x,(F)-&gt;dim,(F)-&gt;params)
</PRE></DIV>
<HR>
<A name="PLAIN-Monte-Carlo"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#MISER" 
rel="next">MISER</A>, Previous: <A accessKey="p" href="#Monte-Carlo-Interface" 
rel="previous">Monte Carlo Interface</A>, Up: <A accessKey="u" href="#Monte-Carlo-Integration" 
rel="up">Monte Carlo Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="PLAIN-Monte-Carlo-1"></A>
<H3 class="section">25.2 PLAIN Monte Carlo</H3><A 
name="index-plain-Monte-Carlo"></A>
<P>The plain Monte Carlo algorithm samples points randomly from the integration 
 region to estimate the integral and its error. Using this algorithm the 
estimate  of the integral <EM>E(f; N)</EM> for <EM>N</EM> randomly distributed 
points <EM>x_i</EM> is given by, </P>
<DIV class="example"><PRE class="example">E(f; N) = =  V &lt;f&gt; = (V / N) \sum_i^N f(x_i)
</PRE></DIV>
<P>where <EM>V</EM> is the volume of the integration region. The error on this 
 estimate <EM>\sigma(E;N)</EM> is calculated from the estimated variance of the 
 mean, </P>
<DIV class="example"><PRE class="example">\sigma^2 (E; N) = (V^2 / N^2) \sum_i^N (f(x_i) -  &lt;f&gt;)^2.
</PRE></DIV>
<P>For large <EM>N</EM> this variance decreases asymptotically as 
<EM>\Var(f)/N</EM>, where <EM>\Var(f)</EM> is the true variance of the function 
 over the integration region. The error estimate itself should decrease as 
<EM>\sigma(f)/\sqrt{N}</EM>. The familiar law of errors decreasing as 
<EM>1/\sqrt{N}</EM> applies—to reduce the error by a factor of 10 requires a 
 100-fold increase in the number of sample points. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_monte_plain.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005fplain_005falloc"></A>Function:   
  <EM>gsl_monte_plain_state *</EM> 
  <STRONG>gsl_monte_plain_alloc</STRONG><EM>(size_t <VAR>dim</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmonte_005fplain_005fstate"></A>
  <P>This function allocates and initializes a workspace for Monte Carlo   
  integration in <VAR>dim</VAR> dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fplain_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_monte_plain_init</STRONG> <EM>(gsl_monte_plain_state*  
   <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function initializes a previously allocated integration state. This   
  allows an existing workspace to be reused for different integrations. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fplain_005fintegrate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_monte_plain_integrate</STRONG><EM>(gsl_monte_function 
  * <VAR>f</VAR>, const double <VAR>xl</VAR>[], const   double <VAR>xu</VAR>[], 
  size_t <VAR>dim</VAR>, size_t <VAR>calls</VAR>,   gsl_rng * <VAR>r</VAR>, 
  gsl_monte_plain_state * <VAR>s</VAR>, double *   <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This routines uses the plain Monte Carlo algorithm to integrate the   
  function <VAR>f</VAR> over the <VAR>dim</VAR>-dimensional hypercubic region   
  defined by the lower and upper limits in the arrays <VAR>xl</VAR> and   
  <VAR>xu</VAR>, each of size <VAR>dim</VAR>. The integration uses a fixed   
  number of function calls <VAR>calls</VAR>, and obtains random sampling points  
   using the random number generator <VAR>r</VAR>. A previously allocated   
  workspace <VAR>s</VAR> must be supplied. The result of the integration is   
  returned in <VAR>result</VAR>, with an estimated absolute error   
  <VAR>abserr</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fplain_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_monte_plain_free</STRONG> <EM>(gsl_monte_plain_state 
  *   <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the integrator state   
  <VAR>s</VAR>. </P></DD></DL>
<HR>
<A name="MISER"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#VEGAS" 
rel="next">VEGAS</A>, Previous: <A accessKey="p" href="#PLAIN-Monte-Carlo" 
rel="previous">PLAIN Monte Carlo</A>, Up: <A accessKey="u" href="#Monte-Carlo-Integration" 
rel="up">Monte Carlo Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="MISER-1"></A>
<H3 class="section">25.3 MISER</H3><A 
name="index-MISER-monte-carlo-integration"></A><A name="index-recursive-stratified-sampling_002c-MISER"></A>
<P>The <SMALL>MISER</SMALL> algorithm of Press and Farrar is based on recursive 
 stratified sampling. This technique aims to reduce the overall integration 
error  by concentrating integration points in the regions of highest variance. 
</P>
<P>The idea of stratified sampling begins with the observation that for two 
 disjoint regions <EM>a</EM> and <EM>b</EM> with Monte Carlo estimates of the 
 integral <EM>E_a(f)</EM> and <EM>E_b(f)</EM> and variances 
<EM>\sigma_a^2(f)</EM> and <EM>\sigma_b^2(f)</EM>, the variance <EM>\Var(f)</EM> 
 of the combined estimate <EM>E(f) = (1/2) (E_a(f) + E_b(f))</EM> is given by, 
</P>
<DIV class="example"><PRE class="example">\Var(f) = (\sigma_a^2(f) / 4 N_a) + (\sigma_b^2(f) / 4 N_b).
</PRE></DIV>
<P>It can be shown that this variance is minimized by distributing the points 
 such that, </P>
<DIV class="example"><PRE class="example">N_a / (N_a + N_b) = \sigma_a / (\sigma_a + \sigma_b).
</PRE></DIV>
<P>Hence the smallest error estimate is obtained by allocating sample points in 
 proportion to the standard deviation of the function in each sub-region. </P>
<P>The <SMALL>MISER</SMALL> algorithm proceeds by bisecting the integration 
 region along one coordinate axis to give two sub-regions at each step. The 
 direction is chosen by examining all <EM>d</EM> possible bisections and 
 selecting the one which will minimize the combined variance of the two 
 sub-regions. The variance in the sub-regions is estimated by sampling with a 
 fraction of the total number of points available to the current step. The same 
 procedure is then repeated recursively for each of the two half-spaces from the 
 best bisection. The remaining sample points are allocated to the sub-regions 
 using the formula for <EM>N_a</EM> and <EM>N_b</EM>. This recursive allocation 
 of integration points continues down to a user-specified depth where each 
 sub-region is integrated using a plain Monte Carlo estimate. These individual 
 values and their error estimates are then combined upwards to give an overall 
 result and an estimate of its error. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_monte_miser.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005fmiser_005falloc"></A>Function:   
  <EM>gsl_monte_miser_state *</EM> 
  <STRONG>gsl_monte_miser_alloc</STRONG><EM>(size_t <VAR>dim</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmonte_005fmiser_005fstate"></A>
  <P>This function allocates and initializes a workspace for Monte Carlo   
  integration in <VAR>dim</VAR> dimensions. The workspace is used to maintain   
  the state of the integration. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fmiser_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_monte_miser_init</STRONG> <EM>(gsl_monte_miser_state*  
   <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function initializes a previously allocated integration state. This   
  allows an existing workspace to be reused for different integrations. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fmiser_005fintegrate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_monte_miser_integrate</STRONG><EM>(gsl_monte_function 
  * <VAR>f</VAR>, const double <VAR>xl</VAR>[], const   double <VAR>xu</VAR>[], 
  size_t <VAR>dim</VAR>, size_t <VAR>calls</VAR>,   gsl_rng * <VAR>r</VAR>, 
  gsl_monte_miser_state * <VAR>s</VAR>, double *   <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This routines uses the <SMALL>MISER</SMALL> Monte Carlo algorithm to   
  integrate the function <VAR>f</VAR> over the <VAR>dim</VAR>-dimensional   
  hypercubic region defined by the lower and upper limits in the arrays   
  <VAR>xl</VAR> and <VAR>xu</VAR>, each of size <VAR>dim</VAR>. The integration  
   uses a fixed number of function calls <VAR>calls</VAR>, and obtains random   
  sampling points using the random number generator <VAR>r</VAR>. A previously   
  allocated workspace <VAR>s</VAR> must be supplied. The result of the   
  integration is returned in <VAR>result</VAR>, with an estimated absolute error 
    <VAR>abserr</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fmiser_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_monte_miser_free</STRONG> <EM>(gsl_monte_miser_state 
  *   <VAR>s</VAR>) </EM></DT>
  <DD>
  <P>This function frees the memory associated with the integrator state   
  <VAR>s</VAR>. </P></DD></DL>
<P>The <SMALL>MISER</SMALL> algorithm has several configurable parameters which 
 can be changed using the following two functions.<A href="#FOOT13" 
name="DOCF13"><SUP>13</SUP></A> </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005fmiser_005fparams_005fget"></A>Function:   
  <EM>void</EM> <STRONG>gsl_monte_miser_params_get</STRONG> <EM>(const   
  gsl_monte_miser_state * <VAR>s</VAR>, gsl_monte_miser_params *   
  <VAR>params</VAR>) </EM></DT>
  <DD>
  <P>This function copies the parameters of the integrator state into the   
  user-supplied <VAR>params</VAR> structure. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fmiser_005fparams_005fset"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_monte_miser_params_set</STRONG><EM>(gsl_monte_miser_state * 
  <VAR>s</VAR>, const gsl_monte_miser_params *   <VAR>params</VAR>) </EM></DT>
  <DD>
  <P>This function sets the integrator parameters based on values provided in   
  the <VAR>params</VAR> structure. </P></DD></DL>
<P>Typically the values of the parameters are first read using 
<CODE>gsl_monte_miser_params_get</CODE>, the necessary changes are made to the 
 fields of the <VAR>params</VAR> structure, and the values are copied back into 
 the integrator state using <CODE>gsl_monte_miser_params_set</CODE>. The 
 functions use the <CODE>gsl_monte_miser_params</CODE> structure which contains 
 the following fields: </P>
<DL>
  <DT><A name="index-estimate_005ffrac"></A>Variable: 
  <EM>double</EM><STRONG>estimate_frac</STRONG></DT>
  <DD>
  <P>This parameter specifies the fraction of the currently available number of  
   function calls which are allocated to estimating the variance at each   
  recursive step. The default value is 0.1. </P></DD></DL>
<DL>
  <DT><A name="index-min_005fcalls"></A>Variable: 
  <EM>size_t</EM><STRONG>min_calls</STRONG></DT>
  <DD>
  <P>This parameter specifies the minimum number of function calls required for  
   each estimate of the variance. If the number of function calls allocated to   
  the estimate using <VAR>estimate_frac</VAR> falls below <VAR>min_calls</VAR>   
  then <VAR>min_calls</VAR> are used instead. This ensures that each estimate   
  maintains a reasonable level of accuracy. The default value of   
  <VAR>min_calls</VAR> is <CODE>16 * dim</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-min_005fcalls_005fper_005fbisection"></A>Variable:   
  <EM>size_t</EM> <STRONG>min_calls_per_bisection</STRONG></DT>
  <DD>
  <P>This parameter specifies the minimum number of function calls required to   
  proceed with a bisection step. When a recursive step has fewer calls available 
    than <VAR>min_calls_per_bisection</VAR> it performs a plain Monte Carlo   
  estimate of the current sub-region and terminates its branch of the recursion. 
    The default value of this parameter is <CODE>32 * min_calls</CODE>. 
</P></DD></DL>
<DL>
  <DT><A name="index-alpha"></A>Variable: 
  <EM>double</EM><STRONG>alpha</STRONG></DT>
  <DD>
  <P>This parameter controls how the estimated variances for the two sub-regions 
    of a bisection are combined when allocating points. With recursive sampling  
   the overall variance should scale better than <EM>1/N</EM>, since the values  
   from the sub-regions will be obtained using a procedure which explicitly   
  minimizes their variance. To accommodate this behavior the   
  <SMALL>MISER</SMALL> algorithm allows the total variance to depend on a   
  scaling parameter <EM>\alpha</EM>, </P>
  <DIV class="example"><PRE class="example">\Var(f) = {\sigma_a \over N_a^\alpha} + {\sigma_b \over N_b^\alpha}.
</PRE></DIV>
  <P>The authors of the original paper describing <SMALL>MISER</SMALL> recommend 
    the value <EM>\alpha = 2</EM> as a good choice, obtained from numerical   
  experiments, and this is used as the default value in this implementation.   
  </P></DD></DL>
<DL>
  <DT><A name="index-dither"></A>Variable: 
  <EM>double</EM><STRONG>dither</STRONG></DT>
  <DD>
  <P>This parameter introduces a random fractional variation of size   
  <VAR>dither</VAR> into each bisection, which can be used to break the symmetry 
    of integrands which are concentrated near the exact center of the hypercubic 
    integration region. The default value of dither is zero, so no variation is  
   introduced. If needed, a typical value of <VAR>dither</VAR> is 0.1. 
</P></DD></DL>
<HR>
<A name="VEGAS"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Monte-Carlo-Examples" 
rel="next">Monte Carlo Examples</A>, Previous: <A accessKey="p" href="#MISER" 
rel="previous">MISER</A>, Up: <A accessKey="u" href="#Monte-Carlo-Integration" 
rel="up">Monte Carlo Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="VEGAS-1"></A>
<H3 class="section">25.4 VEGAS</H3><A 
name="index-VEGAS-Monte-Carlo-integration"></A><A name="index-importance-sampling_002c-VEGAS"></A>
<P>The <SMALL>VEGAS</SMALL> algorithm of Lepage is based on importance sampling. 
 It samples points from the probability distribution described by the function 
<EM>|f|</EM>, so that the points are concentrated in the regions that make the 
 largest contribution to the integral. </P>
<P>In general, if the Monte Carlo integral of <EM>f</EM> is sampled with points 
 distributed according to a probability distribution described by the function 
<EM>g</EM>, we obtain an estimate <EM>E_g(f; N)</EM>, </P>
<DIV class="example"><PRE class="example">E_g(f; N) = E(f/g; N)
</PRE></DIV>
<P>with a corresponding variance, </P>
<DIV class="example"><PRE class="example">\Var_g(f; N) = \Var(f/g; N).
</PRE></DIV>
<P>If the probability distribution is chosen as <EM>g = |f|/I(|f|)</EM> then it 
 can be shown that the variance <EM>V_g(f; N)</EM> vanishes, and the error in 
the  estimate will be zero. In practice it is not possible to sample from the 
exact  distribution <EM>g</EM> for an arbitrary function, so importance sampling 
 algorithms aim to produce efficient approximations to the desired distribution. 
</P>
<P>The <SMALL>VEGAS</SMALL> algorithm approximates the exact distribution by 
 making a number of passes over the integration region while histogramming the 
 function <EM>f</EM>. Each histogram is used to define a sampling distribution 
 for the next pass. Asymptotically this procedure converges to the desired 
 distribution. In order to avoid the number of histogram bins growing like 
<EM>K^d</EM> the probability distribution is approximated by a separable 
 function: <EM>g(x_1, x_2, ...) = g_1(x_1) g_2(x_2) ...</EM> so that the number 
 of bins required is only <EM>Kd</EM>. This is equivalent to locating the peaks 
 of the function from the projections of the integrand onto the coordinate axes. 
 The efficiency of <SMALL>VEGAS</SMALL> depends on the validity of this 
 assumption. It is most efficient when the peaks of the integrand are 
 well-localized. If an integrand can be rewritten in a form which is 
 approximately separable this will increase the efficiency of integration with 
<SMALL>VEGAS</SMALL>. </P>
<P><SMALL>VEGAS</SMALL> incorporates a number of additional features, and 
 combines both stratified sampling and importance sampling. The integration 
 region is divided into a number of “boxes”, with each box getting a fixed 
number  of points (the goal is 2). Each box can then have a fractional number of 
bins,  but if the ratio of bins-per-box is less than two, Vegas switches to a 
kind  variance reduction (rather than importance sampling). </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005falloc"></A>Function:   
  <EM>gsl_monte_vegas_state *</EM> 
  <STRONG>gsl_monte_vegas_alloc</STRONG><EM>(size_t <VAR>dim</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmonte_005fvegas_005fstate"></A>
  <P>This function allocates and initializes a workspace for Monte Carlo   
  integration in <VAR>dim</VAR> dimensions. The workspace is used to maintain   
  the state of the integration. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_monte_vegas_init</STRONG> <EM>(gsl_monte_vegas_state*  
   <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function initializes a previously allocated integration state. This   
  allows an existing workspace to be reused for different integrations. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005fintegrate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_monte_vegas_integrate</STRONG><EM>(gsl_monte_function 
  * <VAR>f</VAR>, double <VAR>xl</VAR>[], double   <VAR>xu</VAR>[], size_t 
  <VAR>dim</VAR>, size_t <VAR>calls</VAR>, gsl_rng *   <VAR>r</VAR>, 
  gsl_monte_vegas_state * <VAR>s</VAR>, double *   <VAR>result</VAR>, double * 
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This routines uses the <SMALL>VEGAS</SMALL> Monte Carlo algorithm to   
  integrate the function <VAR>f</VAR> over the <VAR>dim</VAR>-dimensional   
  hypercubic region defined by the lower and upper limits in the arrays   
  <VAR>xl</VAR> and <VAR>xu</VAR>, each of size <VAR>dim</VAR>. The integration  
   uses a fixed number of function calls <VAR>calls</VAR>, and obtains random   
  sampling points using the random number generator <VAR>r</VAR>. A previously   
  allocated workspace <VAR>s</VAR> must be supplied. The result of the   
  integration is returned in <VAR>result</VAR>, with an estimated absolute error 
    <VAR>abserr</VAR>. The result and its error estimate are based on a weighted 
    average of independent samples. The chi-squared per degree of freedom for 
  the   weighted average is returned via the state struct component,   
  <VAR>s-&gt;chisq</VAR>, and must be consistent with 1 for the weighted average 
    to be reliable. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_monte_vegas_free</STRONG> <EM>(gsl_monte_vegas_state 
  *   <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the integrator state   
  <VAR>s</VAR>. </P></DD></DL>
<P>The <SMALL>VEGAS</SMALL> algorithm computes a number of independent estimates 
 of the integral internally, according to the <CODE>iterations</CODE> parameter 
 described below, and returns their weighted average. Random sampling of the 
 integrand can occasionally produce an estimate where the error is zero, 
 particularly if the function is constant in some regions. An estimate with zero 
 error causes the weighted average to break down and must be handled separately. 
 In the original Fortran implementations of <SMALL>VEGAS</SMALL> the error 
 estimate is made non-zero by substituting a small value (typically 
<CODE>1e-30</CODE>). The implementation in GSL differs from this and avoids the 
 use of an arbitrary constant—it either assigns the value a weight which is the 
 average weight of the preceding estimates or discards it according to the 
 following procedure, </P>
<DL compact="">
  <DT>current estimate has zero error, weighted average has finite error</DT>
  <DD>
  <P>The current estimate is assigned a weight which is the average weight of   
  the preceding estimates. </P></DD>
  <DT>current estimate has finite error, previous estimates had zero error</DT>
  <DD>
  <P>The previous estimates are discarded and the weighted averaging procedure   
  begins with the current estimate. </P></DD>
  <DT>current estimate has zero error, previous estimates had zero error</DT>
  <DD>
  <P>The estimates are averaged using the arithmetic mean, but no error is   
  computed. </P></DD></DL>
<P>The convergence of the algorithm can be tested using the overall chi-squared 
 value of the results, which is available from the following function: </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005fchisq"></A>Function:   
  <EM>double</EM> <STRONG>gsl_monte_vegas_chisq</STRONG> <EM>(const   
  gsl_monte_vegas_state * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function returns the chi-squared per degree of freedom for the   
  weighted estimate of the integral. The returned value should be close to 1. A  
   value which differs significantly from 1 indicates that the values from   
  different iterations are inconsistent. In this case the weighted error will be 
    under-estimated, and further iterations of the algorithm are needed to 
  obtain   reliable results. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005frunval"></A>Function:   
  <EM>void</EM> <STRONG>gsl_monte_vegas_runval</STRONG> <EM>(const   
  gsl_monte_vegas_state * <VAR>s</VAR>, double * <VAR>result</VAR>, double *   
  <VAR>sigma</VAR>)</EM></DT>
  <DD>
  <P>This function returns the raw (unaveraged) values of the integral   
  <VAR>result</VAR> and its error <VAR>sigma</VAR> from the most recent   
  iteration of the algorithm. </P></DD></DL>
<P>The <SMALL>VEGAS</SMALL> algorithm is highly configurable. Several parameters 
 can be changed using the following two functions. </P>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005fparams_005fget"></A>Function:   
  <EM>void</EM> <STRONG>gsl_monte_vegas_params_get</STRONG> <EM>(const   
  gsl_monte_vegas_state * <VAR>s</VAR>, gsl_monte_vegas_params *   
  <VAR>params</VAR>) </EM></DT>
  <DD>
  <P>This function copies the parameters of the integrator state into the   
  user-supplied <VAR>params</VAR> structure. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmonte_005fvegas_005fparams_005fset"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_monte_vegas_params_set</STRONG><EM>(gsl_monte_vegas_state * 
  <VAR>s</VAR>, const gsl_monte_vegas_params *   <VAR>params</VAR>) </EM></DT>
  <DD>
  <P>This function sets the integrator parameters based on values provided in   
  the <VAR>params</VAR> structure. </P></DD></DL>
<P>Typically the values of the parameters are first read using 
<CODE>gsl_monte_vegas_params_get</CODE>, the necessary changes are made to the 
 fields of the <VAR>params</VAR> structure, and the values are copied back into 
 the integrator state using <CODE>gsl_monte_vegas_params_set</CODE>. The 
 functions use the <CODE>gsl_monte_vegas_params</CODE> structure which contains 
 the following fields: </P>
<DL>
  <DT><A name="index-alpha-1"></A>Variable: 
  <EM>double</EM><STRONG>alpha</STRONG></DT>
  <DD>
  <P>The parameter <CODE>alpha</CODE> controls the stiffness of the rebinning   
  algorithm. It is typically set between one and two. A value of zero prevents   
  rebinning of the grid. The default value is 1.5. </P></DD></DL>
<DL>
  <DT><A name="index-iterations"></A>Variable: 
  <EM>size_t</EM><STRONG>iterations</STRONG></DT>
  <DD>
  <P>The number of iterations to perform for each call to the routine. The   
  default value is 5 iterations. </P></DD></DL>
<DL>
  <DT><A name="index-stage"></A>Variable: <EM>int</EM> 
  <STRONG>stage</STRONG></DT>
  <DD>
  <P>Setting this determines the <EM>stage</EM> of the calculation. Normally,   
  <CODE>stage = 0</CODE> which begins with a new uniform grid and empty weighted 
    average. Calling <SMALL>VEGAS</SMALL> with <CODE>stage = 1</CODE> retains 
  the   grid from the previous run but discards the weighted average, so that 
  one can   “tune” the grid using a relatively small number of points and then 
  do a large   run with <CODE>stage = 1</CODE> on the optimized grid. Setting 
  <CODE>stage =   2</CODE> keeps the grid and the weighted average from the 
  previous run, but   may increase (or decrease) the number of histogram bins in 
  the grid depending   on the number of calls available. Choosing <CODE>stage = 
  3</CODE> enters at   the main loop, so that nothing is changed, and is 
  equivalent to performing   additional iterations in a previous call. 
</P></DD></DL>
<DL>
  <DT><A name="index-mode"></A>Variable: <EM>int</EM> <STRONG>mode</STRONG></DT>
  <DD>
  <P>The possible choices are <CODE>GSL_VEGAS_MODE_IMPORTANCE</CODE>,   
  <CODE>GSL_VEGAS_MODE_STRATIFIED</CODE>,   
  <CODE>GSL_VEGAS_MODE_IMPORTANCE_ONLY</CODE>. This determines whether   
  <SMALL>VEGAS</SMALL> will use importance sampling or stratified sampling, or   
  whether it can pick on its own. In low dimensions <SMALL>VEGAS</SMALL> uses   
  strict stratified sampling (more precisely, stratified sampling is chosen if   
  there are fewer than 2 bins per box). </P></DD></DL>
<DL>
  <DT><A name="index-verbose"></A>Variable: 
  <EM>int</EM><STRONG>verbose</STRONG></DT>
  <DT><A name="index-ostream"></A>Variable: <EM>FILE 
  *</EM><STRONG>ostream</STRONG></DT>
  <DD>
  <P>These parameters set the level of information printed by   
  <SMALL>VEGAS</SMALL>. All information is written to the stream   
  <VAR>ostream</VAR>. The default setting of <VAR>verbose</VAR> is   
  <CODE>-1</CODE>, which turns off all output. A <VAR>verbose</VAR> value of   
  <CODE>0</CODE> prints summary information about the weighted average and final 
    result, while a value of <CODE>1</CODE> also displays the grid coordinates. 
  A   value of <CODE>2</CODE> prints information from the rebinning procedure 
  for   each iteration. </P></DD></DL>
<P>The above fields and the <VAR>chisq</VAR> value can also be accessed directly 
 in the <CODE>gsl_monte_vegas_state</CODE> but such use is deprecated. </P>
<HR>
<A name="Monte-Carlo-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Monte-Carlo-Integration-References-and-Further-Reading" 
rel="next">Monte Carlo Integration References and Further Reading</A>, Previous: 
<A accessKey="p" href="#VEGAS" 
rel="previous">VEGAS</A>, Up: <A accessKey="u" href="#Monte-Carlo-Integration" 
rel="up">Monte Carlo Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-17"></A>
<H3 class="section">25.5 Examples</H3>
<P>The example program below uses the Monte Carlo routines to estimate the value 
 of the following 3-dimensional integral from the theory of random walks, </P>
<DIV class="example"><PRE class="example">I = \int_{-pi}^{+pi} {dk_x/(2 pi)} 
    \int_{-pi}^{+pi} {dk_y/(2 pi)} 
    \int_{-pi}^{+pi} {dk_z/(2 pi)} 
     1 / (1 - cos(k_x)cos(k_y)cos(k_z)).
</PRE></DIV>
<P>The analytic value of this integral can be shown to be <EM>I = 
 \Gamma(1/4)^4/(4 \pi^3) = 1.393203929685676859...</EM>. The integral gives the 
 mean time spent at the origin by a random walk on a body-centered cubic lattice 
 in three dimensions. </P>
<P>For simplicity we will compute the integral over the region <EM>(0,0,0)</EM> 
 to <EM>(\pi,\pi,\pi)</EM> and multiply by 8 to obtain the full result. The 
 integral is slowly varying in the middle of the region but has integrable 
 singularities at the corners <EM>(0,0,0)</EM>, <EM>(0,\pi,\pi)</EM>, 
<EM>(\pi,0,\pi)</EM> and <EM>(\pi,\pi,0)</EM>. The Monte Carlo routines only 
 select points which are strictly within the integration region and so no 
special  measures are needed to avoid these singularities. </P>
<DIV class="smallexample"><PRE class="verbatim">#include &lt;stdlib.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_monte.h&gt;
#include &lt;gsl/gsl_monte_plain.h&gt;
#include &lt;gsl/gsl_monte_miser.h&gt;
#include &lt;gsl/gsl_monte_vegas.h&gt;

/* Computation of the integral,

      I = int (dx dy dz)/(2pi)^3  1/(1-cos(x)cos(y)cos(z))

   over (-pi,-pi,-pi) to (+pi, +pi, +pi).  The exact answer
   is Gamma(1/4)^4/(4 pi^3).  This example is taken from
   C.Itzykson, J.M.Drouffe, "Statistical Field Theory -
   Volume 1", Section 1.1, p21, which cites the original
   paper M.L.Glasser, I.J.Zucker, Proc.Natl.Acad.Sci.USA 74
   1800 (1977) */

/* For simplicity we compute the integral over the region 
   (0,0,0) -&gt; (pi,pi,pi) and multiply by 8 */

double exact = 1.3932039296856768591842462603255;

double
g (double *k, size_t dim, void *params)
{
  double A = 1.0 / (M_PI * M_PI * M_PI);
  return A / (1.0 - cos (k[0]) * cos (k[1]) * cos (k[2]));
}

void
display_results (char *title, double result, double error)
{
  printf ("%s ==================\n", title);
  printf ("result = % .6f\n", result);
  printf ("sigma  = % .6f\n", error);
  printf ("exact  = % .6f\n", exact);
  printf ("error  = % .6f = %.2g sigma\n", result - exact,
          fabs (result - exact) / error);
}

int
main (void)
{
  double res, err;

  double xl[3] = { 0, 0, 0 };
  double xu[3] = { M_PI, M_PI, M_PI };

  const gsl_rng_type *T;
  gsl_rng *r;

  gsl_monte_function G = { &amp;g, 3, 0 };

  size_t calls = 500000;

  gsl_rng_env_setup ();

  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  {
    gsl_monte_plain_state *s = gsl_monte_plain_alloc (3);
    gsl_monte_plain_integrate (&amp;G, xl, xu, 3, calls, r, s, 
                               &amp;res, &amp;err);
    gsl_monte_plain_free (s);

    display_results ("plain", res, err);
  }

  {
    gsl_monte_miser_state *s = gsl_monte_miser_alloc (3);
    gsl_monte_miser_integrate (&amp;G, xl, xu, 3, calls, r, s,
                               &amp;res, &amp;err);
    gsl_monte_miser_free (s);

    display_results ("miser", res, err);
  }

  {
    gsl_monte_vegas_state *s = gsl_monte_vegas_alloc (3);

    gsl_monte_vegas_integrate (&amp;G, xl, xu, 3, 10000, r, s,
                               &amp;res, &amp;err);
    display_results ("vegas warm-up", res, err);

    printf ("converging...\n");

    do
      {
        gsl_monte_vegas_integrate (&amp;G, xl, xu, 3, calls/5, r, s,
                                   &amp;res, &amp;err);
        printf ("result = % .6f sigma = % .6f "
                "chisq/dof = %.1f\n", res, err, gsl_monte_vegas_chisq (s));
      }
    while (fabs (gsl_monte_vegas_chisq (s) - 1.0) &gt; 0.5);

    display_results ("vegas final", res, err);

    gsl_monte_vegas_free (s);
  }

  gsl_rng_free (r);

  return 0;
}
</PRE></DIV>
<P>With 500,000 function calls the plain Monte Carlo algorithm achieves a 
 fractional error of 1%. The estimated error <CODE>sigma</CODE> is roughly 
 consistent with the actual error–the computed result differs from the true 
 result by about 1.4 standard deviations, </P>
<DIV class="example"><PRE class="example">plain ==================
result =  1.412209
sigma  =  0.013436
exact  =  1.393204
error  =  0.019005 = 1.4 sigma
</PRE></DIV>
<P>The <SMALL>MISER</SMALL> algorithm reduces the error by a factor of four, and 
 also correctly estimates the error, </P>
<DIV class="example"><PRE class="example">miser ==================
result =  1.391322
sigma  =  0.003461
exact  =  1.393204
error  = -0.001882 = 0.54 sigma
</PRE></DIV>
<P>In the case of the <SMALL>VEGAS</SMALL> algorithm the program uses an initial 
 warm-up run of 10,000 function calls to prepare, or “warm up”, the grid. This 
is  followed by a main run with five iterations of 100,000 function calls. The 
 chi-squared per degree of freedom for the five iterations are checked for 
 consistency with 1, and the run is repeated if the results have not converged. 
 In this case the estimates are consistent on the first pass. </P>
<DIV class="example"><PRE class="example">vegas warm-up ==================
result =  1.392673
sigma  =  0.003410
exact  =  1.393204
error  = -0.000531 = 0.16 sigma
converging...
result =  1.393281 sigma =  0.000362 chisq/dof = 1.5
vegas final ==================
result =  1.393281
sigma  =  0.000362
exact  =  1.393204
error  =  0.000077 = 0.21 sigma
</PRE></DIV>
<P>If the value of <CODE>chisq</CODE> had differed significantly from 1 it would 
 indicate inconsistent results, with a correspondingly underestimated error. The 
 final estimate from <SMALL>VEGAS</SMALL> (using a similar number of function 
 calls) is significantly more accurate than the other two algorithms. </P>
<HR>
<A name="Monte-Carlo-Integration-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Monte-Carlo-Examples" 
rel="previous">Monte Carlo Examples</A>, Up: <A accessKey="u" href="#Monte-Carlo-Integration" 
rel="up">Monte Carlo Integration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-17"></A>
<H3 class="section">25.6 References and Further Reading</H3>
<P>The <SMALL>MISER</SMALL> algorithm is described in the following article by 
 Press and Farrar, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->W.H. Press, G.R. Farrar, <CITE>Recursive Stratified Sampling   
  for Multidimensional Monte Carlo Integration</CITE>, Computers in Physics, v4  
   (1990), pp190–195. </LI></UL>
<P>The <SMALL>VEGAS</SMALL> algorithm is described in the following papers, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->G.P. Lepage, <CITE>A New Algorithm for Adaptive   
  Multidimensional Integration</CITE>, Journal of Computational Physics 27,   
  192–203, (1978) </LI>
  <LI><!-- /@w -->G.P. Lepage, <CITE>VEGAS: An Adaptive Multi-dimensional   
  Integration Program</CITE>, Cornell preprint CLNS 80-447, March 1980 </LI></UL>
<HR>
<A name="Simulated-Annealing"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Ordinary-Differential-Equations" 
rel="next">Ordinary Differential Equations</A>, Previous: <A accessKey="p" href="#Monte-Carlo-Integration" 
rel="previous">Monte Carlo Integration</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Simulated-Annealing-1"></A>
<H2 class="chapter">26 Simulated Annealing</H2><A name="index-simulated-annealing"></A><A 
name="index-combinatorial-optimization"></A><A name="index-optimization_002c-combinatorial"></A><A 
name="index-energy-function"></A><A name="index-cost-function"></A>
<P>Stochastic search techniques are used when the structure of a space is not 
 well understood or is not smooth, so that techniques like Newton’s method 
(which  requires calculating Jacobian derivative matrices) cannot be used. In 
 particular, these techniques are frequently used to solve combinatorial 
 optimization problems, such as the traveling salesman problem. </P>
<P>The goal is to find a point in the space at which a real valued <EM>energy 
 function</EM> (or <EM>cost function</EM>) is minimized. Simulated annealing is 
a  minimization technique which has given good results in avoiding local minima; 
it  is based on the idea of taking a random walk through the space at 
successively  lower temperatures, where the probability of taking a step is 
given by a  Boltzmann distribution. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_siman.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Simulated-Annealing-algorithm">Simulated 
            Annealing algorithm</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Examples-with-Simulated-Annealing">Examples 
            with Simulated Annealing</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Simulated-Annealing-References-and-Further-Reading">Simulated 
            Annealing References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Simulated-Annealing-algorithm"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Simulated-Annealing-functions" 
rel="next">Simulated Annealing functions</A>, Up: <A accessKey="u" href="#Simulated-Annealing" 
rel="up">Simulated Annealing</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Simulated-Annealing-algorithm-1"></A>
<H3 class="section">26.1 Simulated Annealing algorithm</H3>
<P>The simulated annealing algorithm takes random walks through the problem 
 space, looking for points with low energies; in these random walks, the 
 probability of taking a step is determined by the Boltzmann distribution, </P>
<DIV class="example"><PRE class="example">p = e^{-(E_{i+1} - E_i)/(kT)}
</PRE></DIV>
<P>if <EM>E_{i+1} &gt; E_i</EM>, and <EM>p = 1</EM> when <EM>E_{i+1} &lt;= 
 E_i</EM>. </P>
<P>In other words, a step will occur if the new energy is lower. If the new 
 energy is higher, the transition can still occur, and its likelihood is 
 proportional to the temperature <EM>T</EM> and inversely proportional to the 
 energy difference <EM>E_{i+1} - E_i</EM>. </P>
<P>The temperature <EM>T</EM> is initially set to a high value, and a random 
 walk is carried out at that temperature. Then the temperature is lowered very 
 slightly according to a <EM>cooling schedule</EM>, for example: <EM>T -&gt; 
 T/mu_T</EM> where <EM>\mu_T</EM> is slightly greater than 1. <A name="index-cooling-schedule"></A><A 
name="index-schedule_002c-cooling"></A></P>
<P>The slight probability of taking a step that gives higher energy is what 
 allows simulated annealing to frequently get out of local minima. </P>
<HR>
<A name="Simulated-Annealing-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Examples-with-Simulated-Annealing" 
rel="next">Examples with Simulated Annealing</A>, Previous: <A accessKey="p" 
href="#Simulated-Annealing-algorithm" 
rel="previous">Simulated Annealing algorithm</A>, Up: <A accessKey="u" href="#Simulated-Annealing" 
rel="up">Simulated Annealing</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Simulated-Annealing-functions-1"></A>
<H3 class="section">26.2 Simulated Annealing functions</H3>
<DL>
  <DT><A name="index-gsl_005fsiman_005fsolve"></A>Function: 
  <EM>void</EM><STRONG>gsl_siman_solve</STRONG> <EM>(const gsl_rng * 
  <VAR>r</VAR>, void *   <VAR>x0_p</VAR>, gsl_siman_Efunc_t <VAR>Ef</VAR>, 
  gsl_siman_step_t   <VAR>take_step</VAR>, gsl_siman_metric_t 
  <VAR>distance</VAR>,   gsl_siman_print_t <VAR>print_position</VAR>, 
  gsl_siman_copy_t   <VAR>copyfunc</VAR>, gsl_siman_copy_construct_t 
  <VAR>copy_constructor</VAR>,   gsl_siman_destroy_t <VAR>destructor</VAR>, 
  size_t <VAR>element_size</VAR>,   gsl_siman_params_t 
  <VAR>params</VAR>)</EM></DT>
  <DD>
  <P>This function performs a simulated annealing search through a given space.  
   The space is specified by providing the functions <VAR>Ef</VAR> and   
  <VAR>distance</VAR>. The simulated annealing steps are generated using the   
  random number generator <VAR>r</VAR> and the function <VAR>take_step</VAR>.   
  </P>
  <P>The starting configuration of the system should be given by   
  <VAR>x0_p</VAR>. The routine offers two modes for updating configurations, a   
  fixed-size mode and a variable-size mode. In the fixed-size mode the   
  configuration is stored as a single block of memory of size   
  <VAR>element_size</VAR>. Copies of this configuration are created, copied and  
   destroyed internally using the standard library functions 
  <CODE>malloc</CODE>,   <CODE>memcpy</CODE> and <CODE>free</CODE>. The function 
  pointers   <VAR>copyfunc</VAR>, <VAR>copy_constructor</VAR> and 
  <VAR>destructor</VAR>   should be null pointers in fixed-size mode. In the 
  variable-size mode the   functions <VAR>copyfunc</VAR>, 
  <VAR>copy_constructor</VAR> and   <VAR>destructor</VAR> are used to create, 
  copy and destroy configurations   internally. The variable 
  <VAR>element_size</VAR> should be zero in the   variable-size mode. </P>
  <P>The <VAR>params</VAR> structure (described below) controls the run by   
  providing the temperature schedule and other tunable parameters to the   
  algorithm. </P>
  <P>On exit the best result achieved during the search is placed in   
  <CODE>*<VAR>x0_p</VAR></CODE>. If the annealing process has been successful   
  this should be a good approximation to the optimal point in the space. </P>
  <P>If the function pointer <VAR>print_position</VAR> is not null, a debugging  
   log will be printed to <CODE>stdout</CODE> with the following columns: </P>
  <DIV class="example"><PRE class="example">#-iter  #-evals  temperature  position  energy  best_energy
</PRE></DIV>
  <P>and the output of the function <VAR>print_position</VAR> itself. If   
  <VAR>print_position</VAR> is null then no information is printed. </P></DD></DL>
<P>The simulated annealing routines require several user-specified functions to 
 define the configuration space and energy function. The prototypes for these 
 functions are given below. </P>
<DL>
  <DT><A name="index-gsl_005fsiman_005fEfunc_005ft"></A>Data Type:   
  <STRONG>gsl_siman_Efunc_t</STRONG></DT>
  <DD>
  <P>This function type should return the energy of a configuration   
  <VAR>xp</VAR>. </P>
  <DIV class="example"><PRE class="example">double (*gsl_siman_Efunc_t) (void *xp)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fstep_005ft"></A>Data Type:   
  <STRONG>gsl_siman_step_t</STRONG></DT>
  <DD>
  <P>This function type should modify the configuration <VAR>xp</VAR> using a   
  random step taken from the generator <VAR>r</VAR>, up to a maximum distance of 
    <VAR>step_size</VAR>. </P>
  <DIV class="example"><PRE class="example">void (*gsl_siman_step_t) (const gsl_rng *r, void *xp, 
                          double step_size)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fmetric_005ft"></A>Data Type:   
  <STRONG>gsl_siman_metric_t</STRONG></DT>
  <DD>
  <P>This function type should return the distance between two configurations   
  <VAR>xp</VAR> and <VAR>yp</VAR>. </P>
  <DIV class="example"><PRE class="example">double (*gsl_siman_metric_t) (void *xp, void *yp)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fprint_005ft"></A>Data Type:   
  <STRONG>gsl_siman_print_t</STRONG></DT>
  <DD>
  <P>This function type should print the contents of the configuration   
  <VAR>xp</VAR>. </P>
  <DIV class="example"><PRE class="example">void (*gsl_siman_print_t) (void *xp)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fcopy_005ft"></A>Data Type:   
  <STRONG>gsl_siman_copy_t</STRONG></DT>
  <DD>
  <P>This function type should copy the configuration <VAR>source</VAR> into   
  <VAR>dest</VAR>. </P>
  <DIV class="example"><PRE class="example">void (*gsl_siman_copy_t) (void *source, void *dest)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fcopy_005fconstruct_005ft"></A>Data Type:  
   <STRONG>gsl_siman_copy_construct_t</STRONG></DT>
  <DD>
  <P>This function type should create a new copy of the configuration   
  <VAR>xp</VAR>. </P>
  <DIV class="example"><PRE class="example">void * (*gsl_siman_copy_construct_t) (void *xp)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fdestroy_005ft"></A>Data Type:   
  <STRONG>gsl_siman_destroy_t</STRONG></DT>
  <DD>
  <P>This function type should destroy the configuration <VAR>xp</VAR>, freeing  
   its memory. </P>
  <DIV class="example"><PRE class="example">void (*gsl_siman_destroy_t) (void *xp)
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsiman_005fparams_005ft"></A>Data Type:   
  <STRONG>gsl_siman_params_t</STRONG></DT>
  <DD>
  <P>These are the parameters that control a run of   
  <CODE>gsl_siman_solve</CODE>. This structure contains all the information   
  needed to control the search, beyond the energy function, the step function   
  and the initial guess. </P>
  <DL compact="">
    <DT><CODE>int n_tries</CODE></DT>
    <DD>
    <P>The number of points to try for each step. </P></DD>
    <DT><CODE>int iters_fixed_T</CODE></DT>
    <DD>
    <P>The number of iterations at each temperature. </P></DD>
    <DT><CODE>double step_size</CODE></DT>
    <DD>
    <P>The maximum step size in the random walk. </P></DD>
    <DT><CODE>double k, t_initial, mu_t, t_min</CODE></DT>
    <DD>
    <P>The parameters of the Boltzmann distribution and cooling schedule.     
    </P></DD></DL></DD></DL>
<HR>
<A name="Examples-with-Simulated-Annealing"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Simulated-Annealing-References-and-Further-Reading" 
rel="next">Simulated Annealing References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Simulated-Annealing-functions" 
rel="previous">Simulated Annealing functions</A>, Up: <A accessKey="u" href="#Simulated-Annealing" 
rel="up">Simulated Annealing</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-18"></A>
<H3 class="section">26.3 Examples</H3>
<P>The simulated annealing package is clumsy, and it has to be because it is 
 written in C, for C callers, and tries to be polymorphic at the same time. But 
 here we provide some examples which can be pasted into your application with 
 little change and should make things easier. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Trivial-example">Trivial 
            example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Traveling-Salesman-Problem">Traveling 
            Salesman Problem</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Trivial-example"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Traveling-Salesman-Problem" 
rel="next">Traveling Salesman Problem</A>, Up: <A accessKey="u" href="#Examples-with-Simulated-Annealing" 
rel="up">Examples with Simulated Annealing</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Trivial-example-1"></A>
<H4 class="subsection">26.3.1 Trivial example</H4>
<P>The first example, in one dimensional Cartesian space, sets up an energy 
 function which is a damped sine wave; this has many local minima, but only one 
 global minimum, somewhere between 1.0 and 1.5. The initial guess given is 15.5, 
 which is several local minima away from the global minimum. </P>
<DIV class="smallexample"><PRE class="verbatim">#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;gsl/gsl_siman.h&gt;

/* set up parameters for this simulated annealing run */

/* how many points do we try before stepping */
#define N_TRIES 200             

/* how many iterations for each T? */
#define ITERS_FIXED_T 1000

/* max step size in random walk */
#define STEP_SIZE 1.0            

/* Boltzmann constant */
#define K 1.0                   

/* initial temperature */
#define T_INITIAL 0.008         

/* damping factor for temperature */
#define MU_T 1.003              
#define T_MIN 2.0e-6

gsl_siman_params_t params 
  = {N_TRIES, ITERS_FIXED_T, STEP_SIZE,
     K, T_INITIAL, MU_T, T_MIN};

/* now some functions to test in one dimension */
double E1(void *xp)
{
  double x = * ((double *) xp);

  return exp(-pow((x-1.0),2.0))*sin(8*x);
}

double M1(void *xp, void *yp)
{
  double x = *((double *) xp);
  double y = *((double *) yp);

  return fabs(x - y);
}

void S1(const gsl_rng * r, void *xp, double step_size)
{
  double old_x = *((double *) xp);
  double new_x;

  double u = gsl_rng_uniform(r);
  new_x = u * 2 * step_size - step_size + old_x;

  memcpy(xp, &amp;new_x, sizeof(new_x));
}

void P1(void *xp)
{
  printf ("%12g", *((double *) xp));
}

int
main(int argc, char *argv[])
{
  const gsl_rng_type * T;
  gsl_rng * r;

  double x_initial = 15.5;

  gsl_rng_env_setup();

  T = gsl_rng_default;
  r = gsl_rng_alloc(T);

  gsl_siman_solve(r, &amp;x_initial, E1, S1, M1, P1,
                  NULL, NULL, NULL, 
                  sizeof(double), params);

  gsl_rng_free (r);
  return 0;
}
</PRE></DIV>
<P>Here are a couple of plots that are generated by running 
<CODE>siman_test</CODE> in the following way: </P>
<DIV class="example"><PRE class="example">$ ./siman_test | awk '!/^#/ {print $1, $4}' 
 | graph -y 1.34 1.4 -W0 -X generation -Y position 
 | plot -Tps &gt; siman-test.eps
$ ./siman_test | awk '!/^#/ {print $1, $5}' 
 | graph -y -0.88 -0.83 -W0 -X generation -Y energy 
 | plot -Tps &gt; siman-energy.eps
</PRE></DIV>
<HR>
<A name="Traveling-Salesman-Problem"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Trivial-example" 
rel="previous">Trivial example</A>, Up: <A accessKey="u" href="#Examples-with-Simulated-Annealing" 
rel="up">Examples with Simulated Annealing</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Traveling-Salesman-Problem-1"></A>
<H4 class="subsection">26.3.2 Traveling Salesman Problem</H4><A 
name="index-TSP"></A><A name="index-traveling-salesman-problem"></A>
<P>The TSP (<EM>Traveling Salesman Problem</EM>) is the classic combinatorial 
 optimization problem. I have provided a very simple version of it, based on the 
 coordinates of twelve cities in the southwestern United States. This should 
 maybe be called the <EM>Flying Salesman Problem</EM>, since I am using the 
 great-circle distance between cities, rather than the driving distance. Also: I 
 assume the earth is a sphere, so I don’t use geoid distances. </P>
<P>The <CODE>gsl_siman_solve</CODE> routine finds a route which is 3490.62 
 Kilometers long; this is confirmed by an exhaustive search of all possible 
 routes with the same initial city. </P>
<P>The full code can be found in <SAMP>siman/siman_tsp.c</SAMP>, but I include 
 here some plots generated in the following way: </P>
<DIV class="smallexample"><PRE class="smallexample">$ ./siman_tsp &gt; tsp.output
$ grep -v "^#" tsp.output  
 | awk '{print $1, $NF}'
 | graph -y 3300 6500 -W0 -X generation -Y distance 
    -L "TSP - 12 southwest cities"
 | plot -Tps &gt; 12-cities.eps
$ grep initial_city_coord tsp.output 
  | awk '{print $2, $3}' 
  | graph -X "longitude (- means west)" -Y "latitude" 
     -L "TSP - initial-order" -f 0.03 -S 1 0.1 
  | plot -Tps &gt; initial-route.eps
$ grep final_city_coord tsp.output 
  | awk '{print $2, $3}' 
  | graph -X "longitude (- means west)" -Y "latitude" 
     -L "TSP - final-order" -f 0.03 -S 1 0.1 
  | plot -Tps &gt; final-route.eps
</PRE></DIV>
<P>This is the output showing the initial order of the cities; longitude is 
 negative, since it is west and I want the plot to look like a map. </P>
<DIV class="smallexample"><PRE class="smallexample"># initial coordinates of cities (longitude and latitude)
###initial_city_coord: -105.95 35.68 Santa Fe
###initial_city_coord: -112.07 33.54 Phoenix
###initial_city_coord: -106.62 35.12 Albuquerque
###initial_city_coord: -103.2 34.41 Clovis
###initial_city_coord: -107.87 37.29 Durango
###initial_city_coord: -96.77 32.79 Dallas
###initial_city_coord: -105.92 35.77 Tesuque
###initial_city_coord: -107.84 35.15 Grants
###initial_city_coord: -106.28 35.89 Los Alamos
###initial_city_coord: -106.76 32.34 Las Cruces
###initial_city_coord: -108.58 37.35 Cortez
###initial_city_coord: -108.74 35.52 Gallup
###initial_city_coord: -105.95 35.68 Santa Fe
</PRE></DIV>
<P>The optimal route turns out to be: </P>
<DIV class="smallexample"><PRE class="smallexample"># final coordinates of cities (longitude and latitude)
###final_city_coord: -105.95 35.68 Santa Fe
###final_city_coord: -103.2 34.41 Clovis
###final_city_coord: -96.77 32.79 Dallas
###final_city_coord: -106.76 32.34 Las Cruces
###final_city_coord: -112.07 33.54 Phoenix
###final_city_coord: -108.74 35.52 Gallup
###final_city_coord: -108.58 37.35 Cortez
###final_city_coord: -107.87 37.29 Durango
###final_city_coord: -107.84 35.15 Grants
###final_city_coord: -106.62 35.12 Albuquerque
###final_city_coord: -106.28 35.89 Los Alamos
###final_city_coord: -105.92 35.77 Tesuque
###final_city_coord: -105.95 35.68 Santa Fe
</PRE></DIV>
<P>Here’s a plot of the cost function (energy) versus generation (point in the 
 calculation at which a new temperature is set) for this problem: </P>
<HR>
<A name="Simulated-Annealing-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Examples-with-Simulated-Annealing" 
rel="previous">Examples with Simulated Annealing</A>, Up: <A accessKey="u" href="#Simulated-Annealing" 
rel="up">Simulated Annealing</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-18"></A>
<H3 class="section">26.4 References and Further Reading</H3>
<P>Further information is available in the following book, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>Modern Heuristic Techniques for Combinatorial   
  Problems</CITE>, Colin R. Reeves (ed.), McGraw-Hill, 1995 (ISBN   
  0-07-709239-2). </LI></UL>
<HR>
<A name="Ordinary-Differential-Equations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Interpolation" 
rel="next">Interpolation</A>, Previous: <A accessKey="p" href="#Simulated-Annealing" 
rel="previous">Simulated Annealing</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Ordinary-Differential-Equations-1"></A>
<H2 class="chapter">27 Ordinary Differential Equations</H2><A name="index-differential-equations_002c-initial-value-problems"></A><A 
name="index-initial-value-problems_002c-differential-equations"></A><A name="index-ordinary-differential-equations_002c-initial-value-problem"></A><A 
name="index-ODEs_002c-initial-value-problems"></A>
<P>This chapter describes functions for solving ordinary differential equation 
 (ODE) initial value problems. The library provides a variety of low-level 
 methods, such as Runge-Kutta and Bulirsch-Stoer routines, and higher-level 
 components for adaptive step-size control. The components can be combined by 
the  user to achieve the desired solution, with full access to any intermediate 
 steps. A driver object can be used as a high level wrapper for easy use of low 
 level functions. </P>
<P>These functions are declared in the header file <SAMP>gsl_odeiv2.h</SAMP>. 
 This is a new interface in version 1.15 and uses the prefix 
<CODE>gsl_odeiv2</CODE> for all functions. It is recommended over the previous 
<CODE>gsl_odeiv</CODE> implementation defined in <SAMP>gsl_odeiv.h</SAMP> The 
 old interface has been retained under the original name for backwards 
 compatibility. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Defining-the-ODE-System">Defining 
            the ODE System</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Stepping-Functions">Stepping 
            Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Evolution">Evolution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Driver">Driver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#ODE-Example-programs">ODE 
            Example programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#ODE-References-and-Further-Reading">ODE 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Defining-the-ODE-System"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Stepping-Functions" 
rel="next">Stepping Functions</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Defining-the-ODE-System-1"></A>
<H3 class="section">27.1 Defining the ODE System</H3>
<P>The routines solve the general <EM>n</EM>-dimensional first-order system, 
</P>
<DIV class="example"><PRE class="example">dy_i(t)/dt = f_i(t, y_1(t), ..., y_n(t))
</PRE></DIV>
<P>for <EM>i = 1, \dots, n</EM>. The stepping functions rely on the vector of 
 derivatives <EM>f_i</EM> and the Jacobian matrix, <EM>J_{ij} = df_i(t,y(t)) / 
 dy_j</EM>. A system of equations is defined using the 
<CODE>gsl_odeiv2_system</CODE> datatype. </P>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fsystem"></A>Data Type:   
  <STRONG>gsl_odeiv2_system</STRONG></DT>
  <DD>
  <P>This data type defines a general ODE system with arbitrary parameters. </P>
  <DL compact="">
    <DT><CODE>int (* function) (double t, const double y[], double dydt[], void  
       * params)</CODE></DT>
    <DD>
    <P>This function should store the vector elements <EM>f_i(t,y,params)</EM>   
      in the array <VAR>dydt</VAR>, for arguments (<VAR>t</VAR>,<VAR>y</VAR>) 
    and     parameters <VAR>params</VAR>. </P>
    <P>The function should return <CODE>GSL_SUCCESS</CODE> if the calculation    
     was completed successfully. Any other return value indicates an error. A    
     special return value <CODE>GSL_EBADFUNC</CODE> causes     
    <CODE>gsl_odeiv2</CODE> routines to immediately stop and return. If     
    <CODE>function</CODE> is modified (for example contents of     
    <VAR>params</VAR>), the user must call an appropriate reset function     
    (<CODE>gsl_odeiv2_driver_reset</CODE>, <CODE>gsl_odeiv2_evolve_reset</CODE>  
       or <CODE>gsl_odeiv2_step_reset</CODE>) before continuing. Use return 
    values     distinct from standard GSL error codes to distinguish your 
    function as the     source of the error. </P></DD>
    <DT><CODE>int (* jacobian) (double t, const double y[], double * dfdy,     
    double dfdt[], void * params);</CODE></DT>
    <DD><A name="index-Jacobian-matrix_002c-ODEs"></A>
    <P>This function should store the vector of derivative elements in the array 
        <VAR>dfdt</VAR> and the Jacobian matrix <EM>J_{ij}</EM> in the array     
    <VAR>dfdy</VAR>, regarded as a row-ordered matrix <CODE>J(i,j) = dfdy[i *    
     dimension + j]</CODE> where <CODE>dimension</CODE> is the dimension of the  
       system. </P>
    <P>Not all of the stepper algorithms of <CODE>gsl_odeiv2</CODE> make use of  
       the Jacobian matrix, so it may not be necessary to provide this function  
       (the <CODE>jacobian</CODE> element of the struct can be replaced by a 
    null     pointer for those algorithms). </P>
    <P>The function should return <CODE>GSL_SUCCESS</CODE> if the calculation    
     was completed successfully. Any other return value indicates an error. A    
     special return value <CODE>GSL_EBADFUNC</CODE> causes     
    <CODE>gsl_odeiv2</CODE> routines to immediately stop and return. If     
    <CODE>jacobian</CODE> is modified (for example contents of     
    <VAR>params</VAR>), the user must call an appropriate reset function     
    (<CODE>gsl_odeiv2_driver_reset</CODE>, <CODE>gsl_odeiv2_evolve_reset</CODE>  
       or <CODE>gsl_odeiv2_step_reset</CODE>) before continuing. Use return 
    values     distinct from standard GSL error codes to distinguish your 
    function as the     source of the error. </P></DD>
    <DT><CODE>size_t dimension;</CODE></DT>
    <DD>
    <P>This is the dimension of the system of equations. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>This is a pointer to the arbitrary parameters of the system.   
  </P></DD></DL></DD></DL>
<HR>
<A name="Stepping-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Adaptive-Step_002dsize-Control" 
rel="next">Adaptive Step-size Control</A>, Previous: <A accessKey="p" href="#Defining-the-ODE-System" 
rel="previous">Defining the ODE System</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Stepping-Functions-1"></A>
<H3 class="section">27.2 Stepping Functions</H3>
<P>The lowest level components are the <EM>stepping functions</EM> which advance 
 a solution from time <EM>t</EM> to <EM>t+h</EM> for a fixed step-size 
<EM>h</EM>  and estimate the resulting local error. </P>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005falloc"></A>Function:   
  <EM>gsl_odeiv2_step *</EM> <STRONG>gsl_odeiv2_step_alloc</STRONG> <EM>(const   
  gsl_odeiv2_step_type * <VAR>T</VAR>, size_t <VAR>dim</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fodeiv2_005fstep"></A><A name="index-gsl_005fodeiv2_005fstep_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a stepping 
    function of type <VAR>T</VAR> for a system of <VAR>dim</VAR> dimensions.   
  Please note that if you use a stepper method that requires access to a driver  
   object, it is advisable to use a driver allocation method, which 
  automatically   allocates a stepper, too. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005freset"></A>Function: 
  <EM>int</EM><STRONG>gsl_odeiv2_step_reset</STRONG> <EM>(gsl_odeiv2_step *   
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function resets the stepping function <VAR>s</VAR>. It should be used  
   whenever the next use of <VAR>s</VAR> will not be a continuation of a 
  previous   step. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_odeiv2_step_free</STRONG> <EM>(gsl_odeiv2_step *   
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the stepping function   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005fname"></A>Function: <EM>const   
  char *</EM> <STRONG>gsl_odeiv2_step_name</STRONG> <EM>(const gsl_odeiv2_step * 
    <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the stepping function. For   
  example, </P>
  <DIV class="example"><PRE class="example">printf ("step method is '%s'\n",
         gsl_odeiv2_step_name (s));
</PRE></DIV>
  <P>would print something like <CODE>step method is 'rkf45'</CODE>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005forder"></A>Function: 
  <EM>unsigned   int</EM> <STRONG>gsl_odeiv2_step_order</STRONG> <EM>(const 
  gsl_odeiv2_step *   <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function returns the order of the stepping function on the previous   
  step. The order can vary if the stepping function itself is adaptive. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005fset_005fdriver"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_step_set_driver</STRONG> <EM>(gsl_odeiv2_step  
   * <VAR>s</VAR>, const gsl_odeiv2_driver * <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>This function sets a pointer of the driver object <VAR>d</VAR> for stepper  
   <VAR>s</VAR>, to allow the stepper to access control (and evolve) object   
  through the driver object. This is a requirement for some steppers, to get the 
    desired error level for internal iteration of stepper. Allocation of a 
  driver   object calls this function automatically. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005fapply"></A>Function: 
  <EM>int</EM><STRONG>gsl_odeiv2_step_apply</STRONG> <EM>(gsl_odeiv2_step * 
  <VAR>s</VAR>,   double <VAR>t</VAR>, double <VAR>h</VAR>, double 
  <VAR>y</VAR>[], double   <VAR>yerr</VAR>[], const double <VAR>dydt_in</VAR>[], 
  double   <VAR>dydt_out</VAR>[], const gsl_odeiv2_system * 
  <VAR>sys</VAR>)</EM></DT>
  <DD>
  <P>This function applies the stepping function <VAR>s</VAR> to the system of   
  equations defined by <VAR>sys</VAR>, using the step-size <VAR>h</VAR> to   
  advance the system from time <VAR>t</VAR> and state <VAR>y</VAR> to time   
  <VAR>t</VAR>+<VAR>h</VAR>. The new state of the system is stored in   
  <VAR>y</VAR> on output, with an estimate of the absolute error in each   
  component stored in <VAR>yerr</VAR>. If the argument <VAR>dydt_in</VAR> is not 
    null it should point an array containing the derivatives for the system at   
  time <VAR>t</VAR> on input. This is optional as the derivatives will be   
  computed internally if they are not provided, but allows the reuse of existing 
    derivative information. On output the new derivatives of the system at time  
   <VAR>t</VAR>+<VAR>h</VAR> will be stored in <VAR>dydt_out</VAR> if it is not  
   null. </P>
  <P>The stepping function returns <CODE>GSL_FAILURE</CODE> if it is unable to   
  compute the requested step. Also, if the user-supplied functions defined in   
  the system <VAR>sys</VAR> return a status other than <CODE>GSL_SUCCESS</CODE>  
   the step will be aborted. In that case, the elements of <VAR>y</VAR> will be  
   restored to their pre-step values and the error code from the user-supplied   
  function will be returned. Failure may be due to a singularity in the system   
  or too large step-size <VAR>h</VAR>. In that case the step should be attempted 
    again with a smaller step-size, e.g. <EM><VAR>h</VAR>/2</EM>. </P>
  <P>If the driver object is not appropriately set via   
  <CODE>gsl_odeiv2_step_set_driver</CODE> for those steppers that need it, the   
  stepping function returns <CODE>GSL_EFAULT</CODE>. If the user-supplied   
  functions defined in the system <VAR>sys</VAR> returns   
  <CODE>GSL_EBADFUNC</CODE>, the function returns immediately with the same   
  return code. In this case the user must call   
  <CODE>gsl_odeiv2_step_reset</CODE> before calling this function again.   
  </P></DD></DL>
<P>The following algorithms are available, </P>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frk2"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rk2</STRONG></DT>
  <DD><A name="index-RK2_002c-Runge_002dKutta-method"></A><A name="index-Runge_002dKutta-methods_002c-ordinary-differential-equations"></A>
  <P>Explicit embedded Runge-Kutta (2, 3) method. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frk4"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rk4</STRONG></DT>
  <DD><A name="index-RK4_002c-Runge_002dKutta-method"></A>
  <P>Explicit 4th order (classical) Runge-Kutta. Error estimation is carried out 
    by the step doubling method. For more efficient estimate of the error, use 
  the   embedded methods described below. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frkf45"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rkf45</STRONG></DT>
  <DD><A name="index-Fehlberg-method_002c-differential-equations"></A><A name="index-RKF45_002c-Runge_002dKutta_002dFehlberg-method"></A>
  <P>Explicit embedded Runge-Kutta-Fehlberg (4, 5) method. This method is a good 
    general-purpose integrator. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frkck"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rkck</STRONG></DT>
  <DD><A name="index-Runge_002dKutta-Cash_002dKarp-method"></A><A name="index-Cash_002dKarp_002c-Runge_002dKutta-method"></A>
  <P>Explicit embedded Runge-Kutta Cash-Karp (4, 5) method. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frk8pd"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rk8pd</STRONG></DT>
  <DD><A name="index-Runge_002dKutta-Prince_002dDormand-method"></A><A name="index-Prince_002dDormand_002c-Runge_002dKutta-method"></A>
  <P>Explicit embedded Runge-Kutta Prince-Dormand (8, 9) method. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frk1imp"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rk1imp</STRONG></DT>
  <DD><A name="index-Implicit-Euler-method"></A>
  <P>Implicit Gaussian first order Runge-Kutta. Also known as implicit Euler or  
   backward Euler method. Error estimation is carried out by the step doubling   
  method. This algorithm requires the Jacobian and access to the driver object   
  via <CODE>gsl_odeiv2_step_set_driver</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frk2imp"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rk2imp</STRONG></DT>
  <DD><A name="index-Implicit-Runge_002dKutta-method"></A>
  <P>Implicit Gaussian second order Runge-Kutta. Also known as implicit   
  mid-point rule. Error estimation is carried out by the step doubling method.   
  This stepper requires the Jacobian and access to the driver object via   
  <CODE>gsl_odeiv2_step_set_driver</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005frk4imp"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_rk4imp</STRONG></DT>
  <DD>
  <P>Implicit Gaussian 4th order Runge-Kutta. Error estimation is carried out by 
    the step doubling method. This algorithm requires the Jacobian and access to 
    the driver object via <CODE>gsl_odeiv2_step_set_driver</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005fbsimp"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_bsimp</STRONG></DT>
  <DD><A name="index-Bulirsch_002dStoer-method"></A><A name="index-Bader-and-Deuflhard_002c-Bulirsch_002dStoer-method_002e"></A><A 
  name="index-Deuflhard-and-Bader_002c-Bulirsch_002dStoer-method_002e"></A>
  <P>Implicit Bulirsch-Stoer method of Bader and Deuflhard. The method is   
  generally suitable for stiff problems. This stepper requires the Jacobian.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005fmsadams"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_msadams</STRONG></DT>
  <DD><A name="index-Adams-method"></A><A name="index-multistep-methods_002c-ODEs"></A><A 
  name="index-predictor_002dcorrector-method_002c-ODEs"></A><A name="index-Nordsieck-form"></A>
  <P>A variable-coefficient linear multistep Adams method in Nordsieck form.   
  This stepper uses explicit Adams-Bashforth (predictor) and implicit   
  Adams-Moulton (corrector) methods in <EM>P(EC)^m</EM> functional iteration   
  mode. Method order varies dynamically between 1 and 12. This stepper requires  
   the access to the driver object via <CODE>gsl_odeiv2_step_set_driver</CODE>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fstep_005fmsbdf"></A>Step Type:   
  <STRONG>gsl_odeiv2_step_msbdf</STRONG></DT>
  <DD><A name="index-BDF-method"></A>
  <P>A variable-coefficient linear multistep backward differentiation formula   
  (BDF) method in Nordsieck form. This stepper uses the explicit BDF formula as  
   predictor and implicit BDF formula as corrector. A modified Newton iteration  
   method is used to solve the system of non-linear equations. Method order   
  varies dynamically between 1 and 5. The method is generally suitable for stiff 
    problems. This stepper requires the Jacobian and the access to the driver   
  object via <CODE>gsl_odeiv2_step_set_driver</CODE>. </P></DD></DL>
<HR>
<A name="Adaptive-Step_002dsize-Control"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Evolution" 
rel="next">Evolution</A>, Previous: <A accessKey="p" href="#Stepping-Functions" 
rel="previous">Stepping Functions</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Adaptive-Step_002dsize-Control-1"></A>
<H3 class="section">27.3 Adaptive Step-size Control</H3><A name="index-Adaptive-step_002dsize-control_002c-differential-equations"></A>
<P>The control function examines the proposed change to the solution produced by 
 a stepping function and attempts to determine the optimal step-size for a 
 user-specified level of error. </P>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fcontrol_005fstandard_005fnew"></A>Function:   
  <EM>gsl_odeiv2_control *</EM> 
  <STRONG>gsl_odeiv2_control_standard_new</STRONG><EM>(double 
  <VAR>eps_abs</VAR>, double <VAR>eps_rel</VAR>, double   <VAR>a_y</VAR>, double 
  <VAR>a_dydt</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fodeiv2_005fcontrol"></A><A name="index-gsl_005fodeiv2_005fcontrol_005ftype"></A>
  <P>The standard control object is a four parameter heuristic based on absolute 
    and relative errors <VAR>eps_abs</VAR> and <VAR>eps_rel</VAR>, and scaling   
  factors <VAR>a_y</VAR> and <VAR>a_dydt</VAR> for the system state   
  <EM>y(t)</EM> and derivatives <EM>y'(t)</EM> respectively. </P>
  <P>The step-size adjustment procedure for this method begins by computing the  
   desired error level <EM>D_i</EM> for each component, </P>
  <DIV class="example"><PRE class="example">D_i = eps_abs + eps_rel * (a_y |y_i| + a_dydt h |y\prime_i|)
</PRE></DIV>
  <P>and comparing it with the observed error <EM>E_i = |yerr_i|</EM>. If the   
  observed error <VAR>E</VAR> exceeds the desired error level <VAR>D</VAR> by   
  more than 10% for any component then the method reduces the step-size by an   
  appropriate factor, </P>
  <DIV class="example"><PRE class="example">h_new = h_old * S * (E/D)^(-1/q)
</PRE></DIV>
  <P>where <EM>q</EM> is the consistency order of the method (e.g. <EM>q=4</EM>  
   for 4(5) embedded RK), and <EM>S</EM> is a safety factor of 0.9. The ratio   
  <EM>E/D</EM> is taken to be the maximum of the ratios <EM>E_i/D_i</EM>. </P>
  <P>If the observed error <EM>E</EM> is less than 50% of the desired error   
  level <VAR>D</VAR> for the maximum ratio <EM>E_i/D_i</EM> then the algorithm   
  takes the opportunity to increase the step-size to bring the error in line   
  with the desired level, </P>
  <DIV class="example"><PRE class="example">h_new = h_old * S * (E/D)^(-1/(q+1))
</PRE></DIV>
  <P>This encompasses all the standard error scaling methods. To avoid   
  uncontrolled changes in the stepsize, the overall scaling factor is limited to 
    the range <EM>1/5</EM> to 5. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005fy_005fnew"></A>Function:   
  <EM>gsl_odeiv2_control *</EM> 
  <STRONG>gsl_odeiv2_control_y_new</STRONG><EM>(double <VAR>eps_abs</VAR>, 
  double <VAR>eps_rel</VAR>)</EM></DT>
  <DD>
  <P>This function creates a new control object which will keep the local error  
   on each step within an absolute error of <VAR>eps_abs</VAR> and relative 
  error   of <VAR>eps_rel</VAR> with respect to the solution <EM>y_i(t)</EM>. 
  This is   equivalent to the standard control object with <VAR>a_y</VAR>=1 and  
   <VAR>a_dydt</VAR>=0. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005fyp_005fnew"></A>Function:   
  <EM>gsl_odeiv2_control *</EM> 
  <STRONG>gsl_odeiv2_control_yp_new</STRONG><EM>(double <VAR>eps_abs</VAR>, 
  double <VAR>eps_rel</VAR>)</EM></DT>
  <DD>
  <P>This function creates a new control object which will keep the local error  
   on each step within an absolute error of <VAR>eps_abs</VAR> and relative 
  error   of <VAR>eps_rel</VAR> with respect to the derivatives of the solution  
   <EM>y'_i(t)</EM>. This is equivalent to the standard control object with   
  <VAR>a_y</VAR>=0 and <VAR>a_dydt</VAR>=1. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fcontrol_005fscaled_005fnew"></A>Function:   
  <EM>gsl_odeiv2_control *</EM> 
  <STRONG>gsl_odeiv2_control_scaled_new</STRONG><EM>(double <VAR>eps_abs</VAR>, 
  double <VAR>eps_rel</VAR>, double   <VAR>a_y</VAR>, double <VAR>a_dydt</VAR>, 
  const double <VAR>scale_abs</VAR>[],   size_t <VAR>dim</VAR>)</EM></DT>
  <DD>
  <P>This function creates a new control object which uses the same algorithm as 
    <CODE>gsl_odeiv2_control_standard_new</CODE> but with an absolute error 
  which   is scaled for each component by the array <VAR>scale_abs</VAR>. The 
  formula   for <EM>D_i</EM> for this control object is, </P>
  <DIV class="example"><PRE class="example">D_i = eps_abs * s_i + eps_rel * (a_y |y_i| + a_dydt h |y\prime_i|)
</PRE></DIV>
  <P>where <EM>s_i</EM> is the <EM>i</EM>-th component of the array   
  <VAR>scale_abs</VAR>. The same error control heuristic is used by the Matlab   
  <SMALL>ODE</SMALL> suite. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005falloc"></A>Function:   
  <EM>gsl_odeiv2_control *</EM> 
  <STRONG>gsl_odeiv2_control_alloc</STRONG><EM>(const gsl_odeiv2_control_type * 
  <VAR>T</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to a newly allocated instance of a control  
   function of type <VAR>T</VAR>. This function is only needed for defining new  
   types of control functions. For most purposes the standard control functions  
   described above should be sufficient. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005finit"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_control_init</STRONG> <EM>(gsl_odeiv2_control  
   * <VAR>c</VAR>, double <VAR>eps_abs</VAR>, double <VAR>eps_rel</VAR>, double  
   <VAR>a_y</VAR>, double <VAR>a_dydt</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the control function <VAR>c</VAR> with the   
  parameters <VAR>eps_abs</VAR> (absolute error), <VAR>eps_rel</VAR> (relative   
  error), <VAR>a_y</VAR> (scaling factor for y) and <VAR>a_dydt</VAR> (scaling   
  factor for derivatives). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_odeiv2_control_free</STRONG> <EM>(gsl_odeiv2_control 
    * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the control function   
  <VAR>c</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005fhadjust"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_odeiv2_control_hadjust</STRONG><EM>(gsl_odeiv2_control * 
  <VAR>c</VAR>, gsl_odeiv2_step * <VAR>s</VAR>, const   double <VAR>y</VAR>[], 
  const double <VAR>yerr</VAR>[], const double   <VAR>dydt</VAR>[], double * 
  <VAR>h</VAR>)</EM></DT>
  <DD>
  <P>This function adjusts the step-size <VAR>h</VAR> using the control function 
    <VAR>c</VAR>, and the current values of <VAR>y</VAR>, <VAR>yerr</VAR> and   
  <VAR>dydt</VAR>. The stepping function <VAR>step</VAR> is also needed to   
  determine the order of the method. If the error in the y-values   
  <VAR>yerr</VAR> is found to be too large then the step-size <VAR>h</VAR> is   
  reduced and the function returns <CODE>GSL_ODEIV_HADJ_DEC</CODE>. If the error 
    is sufficiently small then <VAR>h</VAR> may be increased and   
  <CODE>GSL_ODEIV_HADJ_INC</CODE> is returned. The function returns   
  <CODE>GSL_ODEIV_HADJ_NIL</CODE> if the step-size is unchanged. The goal of the 
    function is to estimate the largest step-size which satisfies the   
  user-specified accuracy requirements for the current point. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005fname"></A>Function: 
  <EM>const   char *</EM> <STRONG>gsl_odeiv2_control_name</STRONG> <EM>(const   
  gsl_odeiv2_control * <VAR>c</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the control function. For   
  example, </P>
  <DIV class="example"><PRE class="example">printf ("control method is '%s'\n", 
        gsl_odeiv2_control_name (c));
</PRE></DIV>
  <P>would print something like <CODE>control method is 
  'standard'</CODE></P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fcontrol_005ferrlevel"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_odeiv2_control_errlevel</STRONG><EM>(gsl_odeiv2_control * 
  <VAR>c</VAR>, const double <VAR>y</VAR>, const   double <VAR>dydt</VAR>, const 
  double <VAR>h</VAR>, const size_t   <VAR>ind</VAR>, double * 
  <VAR>errlev</VAR>)</EM></DT>
  <DD>
  <P>This function calculates the desired error level of the <VAR>ind</VAR>-th   
  component to <VAR>errlev</VAR>. It requires the value (<VAR>y</VAR>) and value 
    of the derivative (<VAR>dydt</VAR>) of the component, and the current step   
  size <VAR>h</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fcontrol_005fset_005fdriver"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_odeiv2_control_set_driver</STRONG><EM>(gsl_odeiv2_control * 
  <VAR>c</VAR>, const gsl_odeiv2_driver *   <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>This function sets a pointer of the driver object <VAR>d</VAR> for control  
   object <VAR>c</VAR>. </P></DD></DL>
<HR>
<A name="Evolution"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Driver" 
rel="next">Driver</A>, Previous: <A accessKey="p" href="#Adaptive-Step_002dsize-Control" 
rel="previous">Adaptive Step-size Control</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Evolution-1"></A>
<H3 class="section">27.4 Evolution</H3>
<P>The evolution function combines the results of a stepping function and 
 control function to reliably advance the solution forward one step using an 
 acceptable step-size. </P>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fevolve_005falloc"></A>Function:   
  <EM>gsl_odeiv2_evolve *</EM> 
  <STRONG>gsl_odeiv2_evolve_alloc</STRONG><EM>(size_t <VAR>dim</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fodeiv2_005fevolve"></A>
  <P>This function returns a pointer to a newly allocated instance of an   
  evolution function for a system of <VAR>dim</VAR> dimensions. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fevolve_005fapply"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_evolve_apply</STRONG> <EM>(gsl_odeiv2_evolve * 
    <VAR>e</VAR>, gsl_odeiv2_control * <VAR>con</VAR>, gsl_odeiv2_step *   
  <VAR>step</VAR>, const gsl_odeiv2_system * <VAR>sys</VAR>, double *   
  <VAR>t</VAR>, double <VAR>t1</VAR>, double * <VAR>h</VAR>, double   
  <VAR>y</VAR>[])</EM></DT>
  <DD>
  <P>This function advances the system (<VAR>e</VAR>, <VAR>sys</VAR>) from time  
   <VAR>t</VAR> and position <VAR>y</VAR> using the stepping function   
  <VAR>step</VAR>. The new time and position are stored in <VAR>t</VAR> and   
  <VAR>y</VAR> on output. </P>
  <P>The initial step-size is taken as <VAR>h</VAR>. The control function   
  <VAR>con</VAR> is applied to check whether the local error estimated by the   
  stepping function <VAR>step</VAR> using step-size <VAR>h</VAR> exceeds the   
  required error tolerance. If the error is too high, the step is retried by   
  calling <VAR>step</VAR> with a decreased step-size. This process is continued  
   until an acceptable step-size is found. An estimate of the local error for 
  the   step can be obtained from the components of the array   
  <CODE><VAR>e</VAR>-&gt;yerr[]</CODE>. </P>
  <P>If the user-supplied functions defined in the system <VAR>sys</VAR> returns 
    <CODE>GSL_EBADFUNC</CODE>, the function returns immediately with the same   
  return code. In this case the user must call   
  <CODE>gsl_odeiv2_step_reset</CODE> and <CODE>gsl_odeiv2_evolve_reset</CODE>   
  before calling this function again. </P>
  <P>Otherwise, if the user-supplied functions defined in the system   
  <VAR>sys</VAR> or the stepping function <VAR>step</VAR> return a status other  
   than <CODE>GSL_SUCCESS</CODE>, the step is retried with a decreased 
  step-size.   If the step-size decreases below machine precision, a status of   
  <CODE>GSL_FAILURE</CODE> is returned if the user functions returned   
  <CODE>GSL_SUCCESS</CODE>. Otherwise the value returned by user function is   
  returned. If no acceptable step can be made, <VAR>t</VAR> and <VAR>y</VAR>   
  will be restored to their pre-step values and <VAR>h</VAR> contains the final  
   attempted step-size. </P>
  <P>If the step is successful the function returns a suggested step-size for   
  the next step in <VAR>h</VAR>. The maximum time <VAR>t1</VAR> is guaranteed   
  not to be exceeded by the time-step. On the final time-step the value of   
  <VAR>t</VAR> will be set to <VAR>t1</VAR> exactly. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fevolve_005fapply_005ffixed_005fstep"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_odeiv2_evolve_apply_fixed_step</STRONG><EM>(gsl_odeiv2_evolve * 
  <VAR>e</VAR>, gsl_odeiv2_control * <VAR>con</VAR>,   gsl_odeiv2_step * 
  <VAR>step</VAR>, const gsl_odeiv2_system * <VAR>sys</VAR>,   double * 
  <VAR>t</VAR>, const double <VAR>h</VAR>, double   <VAR>y</VAR>[])</EM></DT>
  <DD>
  <P>This function advances the ODE-system (<VAR>e</VAR>, <VAR>sys</VAR>,   
  <VAR>con</VAR>) from time <VAR>t</VAR> and position <VAR>y</VAR> using the   
  stepping function <VAR>step</VAR> by a specified step size <VAR>h</VAR>. If   
  the local error estimated by the stepping function exceeds the desired error   
  level, the step is not taken and the function returns   
  <CODE>GSL_FAILURE</CODE>. Otherwise the value returned by user function is   
  returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fevolve_005freset"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_evolve_reset</STRONG> <EM>(gsl_odeiv2_evolve * 
    <VAR>e</VAR>)</EM></DT>
  <DD>
  <P>This function resets the evolution function <VAR>e</VAR>. It should be used 
    whenever the next use of <VAR>e</VAR> will not be a continuation of a 
  previous   step. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fevolve_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_odeiv2_evolve_free</STRONG> <EM>(gsl_odeiv2_evolve * 
    <VAR>e</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the evolution function   
  <VAR>e</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fevolve_005fset_005fdriver"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_odeiv2_evolve_set_driver</STRONG><EM>(gsl_odeiv2_evolve * 
  <VAR>e</VAR>, const gsl_odeiv2_driver *   <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>This function sets a pointer of the driver object <VAR>d</VAR> for evolve   
  object <VAR>e</VAR>. </P></DD></DL><A name="index-discontinuities_002c-in-ODE-systems"></A>
<P>If a system has discontinuous changes in the derivatives at known points, it 
 is advisable to evolve the system between each discontinuity in sequence. For 
 example, if a step-change in an external driving force occurs at times <EM>t_a, 
 t_b</EM> and <EM>t_c</EM> then evolution should be carried out over the ranges 
<EM>(t_0,t_a)</EM>, <EM>(t_a,t_b)</EM>, <EM>(t_b,t_c)</EM>, and 
<EM>(t_c,t_1)</EM> separately and not directly over the range 
<EM>(t_0,t_1)</EM>. </P>
<HR>
<A name="Driver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#ODE-Example-programs" 
rel="next">ODE Example programs</A>, Previous: <A accessKey="p" href="#Evolution" 
rel="previous">Evolution</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Driver-1"></A>
<H3 class="section">27.5 Driver</H3>
<P>The driver object is a high level wrapper that combines the evolution, 
 control and stepper objects for easy use. </P>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fdriver_005falloc_005fy_005fnew"></A>Function:   
  <EM>gsl_odeiv2_driver *</EM> 
  <STRONG>gsl_odeiv2_driver_alloc_y_new</STRONG><EM>(const gsl_odeiv2_system * 
  <VAR>sys</VAR>, const gsl_odeiv2_step_type *   <VAR>T</VAR>, const double 
  <VAR>hstart</VAR>, const double <VAR>epsabs</VAR>,   const double 
  <VAR>epsrel</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fodeiv2_005fdriver_005falloc_005fyp_005fnew"></A>Function:  
   <EM>gsl_odeiv2_driver *</EM> 
  <STRONG>gsl_odeiv2_driver_alloc_yp_new</STRONG><EM>(const gsl_odeiv2_system * 
  <VAR>sys</VAR>, const gsl_odeiv2_step_type *   <VAR>T</VAR>, const double 
  <VAR>hstart</VAR>, const double <VAR>epsabs</VAR>,   const double 
  <VAR>epsrel</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fodeiv2_005fdriver_005falloc_005fstandard_005fnew"></A>Function: 
    <EM>gsl_odeiv2_driver 
  *</EM><STRONG>gsl_odeiv2_driver_alloc_standard_new</STRONG> <EM>(const   
  gsl_odeiv2_system * <VAR>sys</VAR>, const gsl_odeiv2_step_type * <VAR>T</VAR>, 
    const double <VAR>hstart</VAR>, const double <VAR>epsabs</VAR>, const double 
    <VAR>epsrel</VAR>, const double <VAR>a_y</VAR>, const double   
  <VAR>a_dydt</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fodeiv2_005fdriver_005falloc_005fscaled_005fnew"></A>Function: 
    <EM>gsl_odeiv2_driver 
  *</EM><STRONG>gsl_odeiv2_driver_alloc_scaled_new</STRONG> <EM>(const   
  gsl_odeiv2_system * <VAR>sys</VAR>, const gsl_odeiv2_step_type * <VAR>T</VAR>, 
    const double <VAR>hstart</VAR>, const double <VAR>epsabs</VAR>, const double 
    <VAR>epsrel</VAR>, const double <VAR>a_y</VAR>, const double   
  <VAR>a_dydt</VAR>, const double <VAR>scale_abs</VAR>[])</EM></DT>
  <DD>
  <P>These functions return a pointer to a newly allocated instance of a driver  
   object. The functions automatically allocate and initialise the evolve,   
  control and stepper objects for ODE system <VAR>sys</VAR> using stepper type   
  <VAR>T</VAR>. The initial step size is given in <VAR>hstart</VAR>. The rest of 
    the arguments follow the syntax and semantics of the control functions with  
   same name (<CODE>gsl_odeiv2_control_*_new</CODE>). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fdriver_005fset_005fhmin"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_driver_set_hmin</STRONG><EM>(gsl_odeiv2_driver 
  * <VAR>d</VAR>, const double <VAR>hmin</VAR>)</EM></DT>
  <DD>
  <P>The function sets a minimum for allowed step size <VAR>hmin</VAR> for   
  driver <VAR>d</VAR>. Default value is 0. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fdriver_005fset_005fhmax"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_driver_set_hmax</STRONG><EM>(gsl_odeiv2_driver 
  * <VAR>d</VAR>, const double <VAR>hmax</VAR>)</EM></DT>
  <DD>
  <P>The function sets a maximum for allowed step size <VAR>hmax</VAR> for   
  driver <VAR>d</VAR>. Default value is <CODE>GSL_DBL_MAX</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fdriver_005fset_005fnmax"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_driver_set_nmax</STRONG><EM>(gsl_odeiv2_driver 
  * <VAR>d</VAR>, const unsigned long int   <VAR>nmax</VAR>)</EM></DT>
  <DD>
  <P>The function sets a maximum for allowed number of steps <VAR>nmax</VAR> for 
    driver <VAR>d</VAR>. Default value of 0 sets no limit for steps. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fdriver_005fapply"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_driver_apply</STRONG> <EM>(gsl_odeiv2_driver * 
    <VAR>d</VAR>, double * <VAR>t</VAR>, const double <VAR>t1</VAR>, double   
  <VAR>y</VAR>[])</EM></DT>
  <DD>
  <P>This function evolves the driver system <VAR>d</VAR> from <VAR>t</VAR> to   
  <VAR>t1</VAR>. Initially vector <VAR>y</VAR> should contain the values of   
  dependent variables at point <VAR>t</VAR>. If the function is unable to   
  complete the calculation, an error code from   
  <CODE>gsl_odeiv2_evolve_apply</CODE> is returned, and <VAR>t</VAR> and   
  <VAR>y</VAR> contain the values from last successful step. </P>
  <P>If maximum number of steps is reached, a value of <CODE>GSL_EMAXITER</CODE> 
    is returned. If the step size drops below minimum value, the function 
  returns   with <CODE>GSL_ENOPROG</CODE>. If the user-supplied functions 
  defined in the   system <VAR>sys</VAR> returns <CODE>GSL_EBADFUNC</CODE>, the 
  function returns   immediately with the same return code. In this case the 
  user must call   <CODE>gsl_odeiv2_driver_reset</CODE> before calling this 
  function again.   </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fdriver_005fapply_005ffixed_005fstep"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_odeiv2_driver_apply_fixed_step</STRONG><EM>(gsl_odeiv2_driver * 
  <VAR>d</VAR>, double * <VAR>t</VAR>, const double   <VAR>h</VAR>, const 
  unsigned long int <VAR>n</VAR>, double   <VAR>y</VAR>[])</EM></DT>
  <DD>
  <P>This function evolves the driver system <VAR>d</VAR> from <VAR>t</VAR> with 
    <VAR>n</VAR> steps of size <VAR>h</VAR>. If the function is unable to 
  complete   the calculation, an error code from   
  <CODE>gsl_odeiv2_evolve_apply_fixed_step</CODE> is returned, and <VAR>t</VAR>  
   and <VAR>y</VAR> contain the values from last successful step. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fdriver_005freset"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_driver_reset</STRONG> <EM>(gsl_odeiv2_driver * 
    <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>This function resets the evolution and stepper objects. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fodeiv2_005fdriver_005freset_005fhstart"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_odeiv2_driver_reset_hstart</STRONG><EM>(gsl_odeiv2_driver * 
  <VAR>d</VAR>, const double   <VAR>hstart</VAR>)</EM></DT>
  <DD>
  <P>The routine resets the evolution and stepper objects and sets new initial   
  step size to <VAR>hstart</VAR>. This function can be used e.g. to change the   
  direction of integration. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fodeiv2_005fdriver_005ffree"></A>Function:   
  <EM>int</EM> <STRONG>gsl_odeiv2_driver_free</STRONG> <EM>(gsl_odeiv2_driver *  
   <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>This function frees the driver object, and the related evolution, stepper   
  and control objects. </P></DD></DL>
<HR>
<A name="ODE-Example-programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#ODE-References-and-Further-Reading" 
rel="next">ODE References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Driver" 
rel="previous">Driver</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-19"></A>
<H3 class="section">27.6 Examples</H3><A name="index-Van-der-Pol-oscillator_002c-example"></A>
<P>The following program solves the second-order nonlinear Van der Pol 
 oscillator equation, </P>
<DIV class="example"><PRE class="example">u''(t) + \mu u'(t) (u(t)^2 - 1) + u(t) = 0
</PRE></DIV>
<P>This can be converted into a first order system suitable for use with the 
 routines described in this chapter by introducing a separate variable for the 
 velocity, <EM>v = u'(t)</EM>, </P>
<DIV class="example"><PRE class="example">u' = v
v' = -u + \mu v (1-u^2)
</PRE></DIV>
<P>The program begins by defining functions for these derivatives and their 
 Jacobian. The main function uses driver level functions to solve the problem. 
 The program evolves the solution from <EM>(u, v) = (1, 0)</EM> at <EM>t=0</EM> 
 to <EM>t=100</EM>. The step-size <EM>h</EM> is automatically adjusted by the 
 controller to maintain an absolute accuracy of <EM>10^{-6}</EM> in the function 
 values <EM>(u, v)</EM>. The loop in the example prints the solution at the 
 points <EM>t_i = 1, 2, \dots, 100</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_matrix.h&gt;
#include &lt;gsl/gsl_odeiv2.h&gt;

int
func (double t, const double y[], double f[],
      void *params)
{
  double mu = *(double *)params;
  f[0] = y[1];
  f[1] = -y[0] - mu*y[1]*(y[0]*y[0] - 1);
  return GSL_SUCCESS;
}

int
jac (double t, const double y[], double *dfdy, 
     double dfdt[], void *params)
{
  double mu = *(double *)params;
  gsl_matrix_view dfdy_mat 
    = gsl_matrix_view_array (dfdy, 2, 2);
  gsl_matrix * m = &amp;dfdy_mat.matrix; 
  gsl_matrix_set (m, 0, 0, 0.0);
  gsl_matrix_set (m, 0, 1, 1.0);
  gsl_matrix_set (m, 1, 0, -2.0*mu*y[0]*y[1] - 1.0);
  gsl_matrix_set (m, 1, 1, -mu*(y[0]*y[0] - 1.0));
  dfdt[0] = 0.0;
  dfdt[1] = 0.0;
  return GSL_SUCCESS;
}

int
main (void)
{
  double mu = 10;
  gsl_odeiv2_system sys = {func, jac, 2, &amp;mu};

  gsl_odeiv2_driver * d = 
    gsl_odeiv2_driver_alloc_y_new (&amp;sys, gsl_odeiv2_step_rk8pd,
				  1e-6, 1e-6, 0.0);
  int i;
  double t = 0.0, t1 = 100.0;
  double y[2] = { 1.0, 0.0 };

  for (i = 1; i &lt;= 100; i++)
    {
      double ti = i * t1 / 100.0;
      int status = gsl_odeiv2_driver_apply (d, &amp;t, ti, y);

      if (status != GSL_SUCCESS)
	{
	  printf ("error, return value=%d\n", status);
	  break;
	}

      printf ("%.5e %.5e %.5e\n", t, y[0], y[1]);
    }

  gsl_odeiv2_driver_free (d);
  return 0;
}
</PRE></DIV>
<P>The user can work with the lower level functions directly, as in the 
 following example. In this case an intermediate result is printed after each 
 successful step instead of equidistant time points. </P>
<DIV class="example"><PRE class="verbatim">int
main (void)
{
  const gsl_odeiv2_step_type * T 
    = gsl_odeiv2_step_rk8pd;

  gsl_odeiv2_step * s 
    = gsl_odeiv2_step_alloc (T, 2);
  gsl_odeiv2_control * c 
    = gsl_odeiv2_control_y_new (1e-6, 0.0);
  gsl_odeiv2_evolve * e 
    = gsl_odeiv2_evolve_alloc (2);

  double mu = 10;
  gsl_odeiv2_system sys = {func, jac, 2, &amp;mu};

  double t = 0.0, t1 = 100.0;
  double h = 1e-6;
  double y[2] = { 1.0, 0.0 };

  while (t &lt; t1)
    {
      int status = gsl_odeiv2_evolve_apply (e, c, s,
                                           &amp;sys, 
                                           &amp;t, t1,
                                           &amp;h, y);

      if (status != GSL_SUCCESS)
          break;

      printf ("%.5e %.5e %.5e\n", t, y[0], y[1]);
    }

  gsl_odeiv2_evolve_free (e);
  gsl_odeiv2_control_free (c);
  gsl_odeiv2_step_free (s);
  return 0;
}
</PRE></DIV>
<P>For functions with multiple parameters, the appropriate information can be 
 passed in through the <VAR>params</VAR> argument in 
<CODE>gsl_odeiv2_system</CODE> definition (<VAR>mu</VAR> in this example) by 
 using a pointer to a struct. </P>
<P>It is also possible to work with a non-adaptive integrator, using only the 
 stepping function itself, <CODE>gsl_odeiv2_driver_apply_fixed_step</CODE> or 
<CODE>gsl_odeiv2_evolve_apply_fixed_step</CODE>. The following program uses the 
 driver level function, with fourth-order Runge-Kutta stepping function with a 
 fixed stepsize of 0.001. </P>
<DIV class="example"><PRE class="verbatim">int
main (void)
{
  double mu = 10;
  gsl_odeiv2_system sys = { func, jac, 2, &amp;mu };

  gsl_odeiv2_driver *d =
    gsl_odeiv2_driver_alloc_y_new (&amp;sys, gsl_odeiv2_step_rk4,
                                   1e-3, 1e-8, 1e-8);

  double t = 0.0;
  double y[2] = { 1.0, 0.0 };
  int i, s;

  for (i = 0; i &lt; 100; i++)
    {
      s = gsl_odeiv2_driver_apply_fixed_step (d, &amp;t, 1e-3, 1000, y);

      if (s != GSL_SUCCESS)
        {
          printf ("error: driver returned %d\n", s);
          break;
        }

      printf ("%.5e %.5e %.5e\n", t, y[0], y[1]);
    }

  gsl_odeiv2_driver_free (d);
  return s;
}
</PRE></DIV>
<HR>
<A name="ODE-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#ODE-Example-programs" 
rel="previous">ODE Example programs</A>, Up: <A accessKey="u" href="#Ordinary-Differential-Equations" 
rel="up">Ordinary Differential Equations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-19"></A>
<H3 class="section">27.7 References and Further Reading</H3>
<UL class="no-bullet">
  <LI><!-- /@w -->Ascher, U.M., Petzold, L.R., <CITE>Computer Methods for   
  Ordinary Differential and Differential-Algebraic Equations</CITE>, SIAM,   
  Philadelphia, 1998. </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w -->Hairer, E., Norsett, S. P., Wanner, G., <CITE>Solving Ordinary 
    Differential Equations I: Nonstiff Problems</CITE>, Springer, Berlin, 1993.  
   </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w -->Hairer, E., Wanner, G., <CITE>Solving Ordinary Differential   
  Equations II: Stiff and Differential-Algebraic Problems</CITE>, Springer,   
  Berlin, 1996. </LI></UL>
<P>Many of the basic Runge-Kutta formulas can be found in the Handbook of 
 Mathematical Functions, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Abramowitz &amp; Stegun (eds.), <CITE>Handbook of Mathematical 
    Functions</CITE>, Section 25.5. </LI></UL>
<P>The implicit Bulirsch-Stoer algorithm <CODE>bsimp</CODE> is described in the 
 following paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->G. Bader and P. Deuflhard, “A Semi-Implicit Mid-Point Rule for 
    Stiff Systems of Ordinary Differential Equations.”, Numer. Math. 41, 
  373–398,   1983. </LI></UL>
<P>The Adams and BDF multistep methods <CODE>msadams</CODE> and 
<CODE>msbdf</CODE> are based on the following articles, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->G. D. Byrne and A. C. Hindmarsh, “A Polyalgorithm for the   
  Numerical Solution of Ordinary Differential Equations.”, ACM Trans. Math.   
  Software, 1, 71–96, 1975. </LI>
  <LI><!-- /@w -->P. N. Brown, G. D. Byrne and A. C. Hindmarsh, “VODE: A   
  Variable-coefficient ODE Solver.”, SIAM J. Sci. Stat. Comput. 10, 1038–1051,   
  1989. </LI>
  <LI><!-- /@w -->A. C. Hindmarsh, P. N. Brown, K. E. Grant, S. L. Lee, R.   
  Serban, D. E. Shumaker and C. S. Woodward, “SUNDIALS: Suite of Nonlinear and   
  Differential/Algebraic Equation Solvers.”, ACM Trans. Math. Software 31,   
  363–396, 2005. </LI></UL>
<HR>
<A name="Interpolation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-Differentiation" 
rel="next">Numerical Differentiation</A>, Previous: <A accessKey="p" href="#Ordinary-Differential-Equations" 
rel="previous">Ordinary Differential Equations</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Interpolation-1"></A>
<H2 class="chapter">28 Interpolation</H2><A name="index-interpolation"></A><A 
name="index-spline"></A>
<P>This chapter describes functions for performing interpolation. The library 
 provides a variety of interpolation methods, including Cubic, Akima, and 
Steffen  splines. The interpolation types are interchangeable, allowing 
different methods  to be used without recompiling. Interpolations can be defined 
for both normal  and periodic boundary conditions. Additional functions are 
available for  computing derivatives and integrals of interpolating functions. 
Routines are  provided for interpolating both one and two dimensional datasets. 
</P>
<P>These interpolation methods produce curves that pass through each datapoint. 
 To interpolate noisy data with a smoothing curve see <A href="#Basis-Splines">Basis 
 Splines</A>. </P>
<P>The functions described in this section are declared in the header files 
<SAMP>gsl_interp.h</SAMP> and <SAMP>gsl_spline.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#g_t1D-Introduction-to-Interpolation">1D 
            Introduction to Interpolation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#g_t1D-Interpolation-Functions">1D 
            Interpolation Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#g_t1D-Interpolation-Example-programs">1D 
            Interpolation Example programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#g_t1D-Interpolation-References-and-Further-Reading">1D 
            Interpolation References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#g_t2D-Introduction-to-Interpolation">2D 
            Introduction to Interpolation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Interpolation-Functions">2D 
            Interpolation Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Interpolation-Grids">2D 
            Interpolation Grids</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#g_t2D-Interpolation-Example-programs">2D 
            Interpolation Example programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="g_t1D-Introduction-to-Interpolation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Interpolation-Functions" 
rel="next">1D Interpolation Functions</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Introduction-to-1D-Interpolation"></A>
<H3 class="section">28.1 Introduction to 1D Interpolation</H3>
<P>Given a set of data points <EM>(x_1, y_1) \dots (x_n, y_n)</EM> the routines 
 described in this section compute a continuous interpolating function 
<EM>y(x)</EM> such that <EM>y(x_i) = y_i</EM>. The interpolation is piecewise 
 smooth, and its behavior at the end-points is determined by the type of 
 interpolation used. </P>
<HR>
<A name="g_t1D-Interpolation-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Interpolation-Types" 
rel="next">1D Interpolation Types</A>, Previous: <A accessKey="p" href="#g_t1D-Introduction-to-Interpolation" 
rel="previous">1D Introduction to Interpolation</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t1D-Interpolation-Functions-1"></A>
<H3 class="section">28.2 1D Interpolation Functions</H3>
<P>The interpolation function for a given dataset is stored in a 
<CODE>gsl_interp</CODE> object. These are created by the following functions. 
</P>
<DL>
  <DT><A name="index-gsl_005finterp_005falloc"></A>Function: <EM>gsl_interp 
  *</EM><STRONG>gsl_interp_alloc</STRONG> <EM>(const gsl_interp_type * 
  <VAR>T</VAR>,   size_t <VAR>size</VAR>)</EM></DT>
  <DD><A name="index-gsl_005finterp"></A>
  <P>This function returns a pointer to a newly allocated interpolation object   
  of type <VAR>T</VAR> for <VAR>size</VAR> data-points. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_interp_init</STRONG> <EM>(gsl_interp * 
  <VAR>interp</VAR>, const   double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[], size_t   <VAR>size</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the interpolation object <VAR>interp</VAR> for   
  the data (<VAR>xa</VAR>,<VAR>ya</VAR>) where <VAR>xa</VAR> and <VAR>ya</VAR>   
  are arrays of size <VAR>size</VAR>. The interpolation object   
  (<CODE>gsl_interp</CODE>) does not save the data arrays <VAR>xa</VAR> and   
  <VAR>ya</VAR> and only stores the static state computed from the data. The   
  <VAR>xa</VAR> data array is always assumed to be strictly ordered, with   
  increasing <EM>x</EM> values; the behavior for other arrangements is not   
  defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_interp_free</STRONG> <EM>(gsl_interp * 
  <VAR>interp</VAR>)</EM></DT>
  <DD>
  <P>This function frees the interpolation object <VAR>interp</VAR>. 
</P></DD></DL>
<HR>
<A name="g_t1D-Interpolation-Types"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Index-Look_002dup-and-Acceleration" 
rel="next">1D Index Look-up and Acceleration</A>, Previous: <A accessKey="p" 
href="#g_t1D-Interpolation-Functions" 
rel="previous">1D Interpolation Functions</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t1D-Interpolation-Types-1"></A>
<H3 class="section">28.3 1D Interpolation Types</H3><A name="index-gsl_005finterp_005ftype"></A>
<P>The interpolation library provides the following interpolation types: </P>
<DL>
  <DT><A name="index-gsl_005finterp_005flinear"></A>Interpolation Type:   
  <STRONG>gsl_interp_linear</STRONG></DT>
  <DD><A name="index-linear-interpolation"></A>
  <P>Linear interpolation. This interpolation method does not require any   
  additional memory. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fpolynomial"></A>Interpolation Type:   
  <STRONG>gsl_interp_polynomial</STRONG></DT>
  <DD><A name="index-polynomial-interpolation"></A>
  <P>Polynomial interpolation. This method should only be used for interpolating 
    small numbers of points because polynomial interpolation introduces large   
  oscillations, even for well-behaved datasets. The number of terms in the   
  interpolating polynomial is equal to the number of points. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fcspline"></A>Interpolation Type:   
  <STRONG>gsl_interp_cspline</STRONG></DT>
  <DD><A name="index-cubic-splines"></A>
  <P>Cubic spline with natural boundary conditions. The resulting curve is   
  piecewise cubic on each interval, with matching first and second derivatives   
  at the supplied data-points. The second derivative is chosen to be zero at the 
    first point and last point. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fcspline_005fperiodic"></A>Interpolation  
   Type: <STRONG>gsl_interp_cspline_periodic</STRONG></DT>
  <DD>
  <P>Cubic spline with periodic boundary conditions. The resulting curve is   
  piecewise cubic on each interval, with matching first and second derivatives   
  at the supplied data-points. The derivatives at the first and last points are  
   also matched. Note that the last point in the data must have the same y-value 
    as the first point, otherwise the resulting periodic interpolation will have 
  a   discontinuity at the boundary. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fakima"></A>Interpolation Type:   
  <STRONG>gsl_interp_akima</STRONG></DT>
  <DD><A name="index-Akima-splines"></A>
  <P>Non-rounded Akima spline with natural boundary conditions. This method uses 
    the non-rounded corner algorithm of Wodicka. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fakima_005fperiodic"></A>Interpolation   
  Type: <STRONG>gsl_interp_akima_periodic</STRONG></DT>
  <DD>
  <P>Non-rounded Akima spline with periodic boundary conditions. This method   
  uses the non-rounded corner algorithm of Wodicka. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fsteffen"></A>Interpolation Type:   
  <STRONG>gsl_interp_steffen</STRONG></DT>
  <DD>
  <P>Steffen’s method guarantees the monotonicity of the interpolating function  
   between the given data points. Therefore, minima and maxima can only occur   
  exactly at the data points, and there can never be spurious oscillations   
  between data points. The interpolated function is piecewise cubic in each   
  interval. The resulting curve and its first derivative are guaranteed to be   
  continuous, but the second derivative may be discontinuous. </P></DD></DL>
<P>The following related functions are available: </P>
<DL>
  <DT><A name="index-gsl_005finterp_005fname"></A>Function: <EM>const char 
  *</EM><STRONG>gsl_interp_name</STRONG> <EM>(const gsl_interp *   
  <VAR>interp</VAR>)</EM></DT>
  <DD>
  <P>This function returns the name of the interpolation type used by   
  <VAR>interp</VAR>. For example, </P>
  <DIV class="example"><PRE class="example">printf ("interp uses '%s' interpolation.\n", 
        gsl_interp_name (interp));
</PRE></DIV>
  <P>would print something like, </P>
  <DIV class="example"><PRE class="example">interp uses 'cspline' interpolation.
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005fmin_005fsize"></A>Function: <EM>unsigned 
    int</EM> <STRONG>gsl_interp_min_size</STRONG> <EM>(const gsl_interp *   
  <VAR>interp</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp_005ftype_005fmin_005fsize"></A>Function:   
  <EM>unsigned int</EM> <STRONG>gsl_interp_type_min_size</STRONG> <EM>(const   
  gsl_interp_type * <VAR>T</VAR>)</EM></DT>
  <DD>
  <P>These functions return the minimum number of points required by the   
  interpolation object <VAR>interp</VAR> or interpolation type <VAR>T</VAR>. For 
    example, Akima spline interpolation requires a minimum of 5 points. 
</P></DD></DL>
<HR>
<A name="g_t1D-Index-Look_002dup-and-Acceleration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Evaluation-of-Interpolating-Functions" 
rel="next">1D Evaluation of Interpolating Functions</A>, Previous: <A accessKey="p" 
href="#g_t1D-Interpolation-Types" 
rel="previous">1D Interpolation Types</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t1D-Index-Look_002dup-and-Acceleration-1"></A>
<H3 class="section">28.4 1D Index Look-up and Acceleration</H3>
<P>The state of searches can be stored in a <CODE>gsl_interp_accel</CODE> 
 object, which is a kind of iterator for interpolation lookups. It caches the 
 previous value of an index lookup. When the subsequent interpolation point 
falls  in the same interval its index value can be returned immediately. </P>
<DL>
  <DT><A name="index-gsl_005finterp_005fbsearch"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_interp_bsearch</STRONG> <EM>(const double 
  <VAR>x_array</VAR>[],   double <VAR>x</VAR>, size_t <VAR>index_lo</VAR>, 
  size_t   <VAR>index_hi</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index <EM>i</EM> of the array <VAR>x_array</VAR>  
   such that <CODE>x_array[i] &lt;= x &lt; x_array[i+1]</CODE>. The index is   
  searched for in the range [<VAR>index_lo</VAR>,<VAR>index_hi</VAR>]. An inline 
    version of this function is used when <CODE>HAVE_INLINE</CODE> is defined.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005faccel_005falloc"></A>Function:   
  <EM>gsl_interp_accel *</EM> 
  <STRONG>gsl_interp_accel_alloc</STRONG><EM>(void)</EM></DT>
  <DD><A name="index-gsl_005finterp_005faccel"></A>
  <P>This function returns a pointer to an accelerator object, which is a kind   
  of iterator for interpolation lookups. It tracks the state of lookups, thus   
  allowing for application of various acceleration strategies. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005faccel_005ffind"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_interp_accel_find</STRONG> <EM>(gsl_interp_accel * 
    <VAR>a</VAR>, const double <VAR>x_array</VAR>[], size_t <VAR>size</VAR>,   
  double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function performs a lookup action on the data array <VAR>x_array</VAR> 
    of size <VAR>size</VAR>, using the given accelerator <VAR>a</VAR>. This is 
  how   lookups are performed during evaluation of an interpolation. The 
  function   returns an index <EM>i</EM> such that <CODE>x_array[i] &lt;= x &lt; 
    x_array[i+1]</CODE>. An inline version of this function is used when   
  <CODE>HAVE_INLINE</CODE> is defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005faccel_005freset"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp_accel_reset</STRONG> <EM>(gsl_interp_accel *   
  <VAR>acc</VAR>);</EM></DT>
  <DD>
  <P>This function reinitializes the accelerator object <VAR>acc</VAR>. It   
  should be used when the cached information is no longer applicable—for   
  example, when switching to a new dataset. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005faccel_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_interp_accel_free</STRONG> <EM>(gsl_interp_accel*   
  <VAR>acc</VAR>)</EM></DT>
  <DD>
  <P>This function frees the accelerator object <VAR>acc</VAR>. </P></DD></DL>
<HR>
<A name="g_t1D-Evaluation-of-Interpolating-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Higher_002dlevel-Interface" 
rel="next">1D Higher-level Interface</A>, Previous: <A accessKey="p" href="#g_t1D-Index-Look_002dup-and-Acceleration" 
rel="previous">1D Index Look-up and Acceleration</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t1D-Evaluation-of-Interpolating-Functions-1"></A>
<H3 class="section">28.5 1D Evaluation of Interpolating Functions</H3>
<DL>
  <DT><A name="index-gsl_005finterp_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_interp_eval</STRONG> <EM>(const gsl_interp * 
  <VAR>interp</VAR>,   const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[], double   <VAR>x</VAR>, gsl_interp_accel * 
  <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp_005feval_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_interp_eval_e</STRONG> <EM>(const gsl_interp * 
  <VAR>interp</VAR>,   const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[], double   <VAR>x</VAR>, gsl_interp_accel * <VAR>acc</VAR>, 
  double *   <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value of <VAR>y</VAR> for a given   
  point <VAR>x</VAR>, using the interpolation object <VAR>interp</VAR>, data   
  arrays <VAR>xa</VAR> and <VAR>ya</VAR> and the accelerator <VAR>acc</VAR>.   
  When <VAR>x</VAR> is outside the range of <VAR>xa</VAR>, the error code   
  <CODE>GSL_EDOM</CODE> is returned with a value of <CODE>GSL_NAN</CODE> for   
  <VAR>y</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005feval_005fderiv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp_eval_deriv</STRONG> <EM>(const gsl_interp * 
    <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[],   double <VAR>x</VAR>, gsl_interp_accel * 
  <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp_005feval_005fderiv_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp_eval_deriv_e</STRONG> <EM>(const gsl_interp *  
   <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[],   double <VAR>x</VAR>, gsl_interp_accel * <VAR>acc</VAR>, 
  double *   <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>These functions return the derivative <VAR>d</VAR> of an interpolated   
  function for a given point <VAR>x</VAR>, using the interpolation object   
  <VAR>interp</VAR>, data arrays <VAR>xa</VAR> and <VAR>ya</VAR> and the   
  accelerator <VAR>acc</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005feval_005fderiv2"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp_eval_deriv2</STRONG> <EM>(const gsl_interp  
   * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], double <VAR>x</VAR>, gsl_interp_accel *   
  <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp_005feval_005fderiv2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp_eval_deriv2_e</STRONG> <EM>(const gsl_interp * 
    <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[],   double <VAR>x</VAR>, gsl_interp_accel * <VAR>acc</VAR>, 
  double *   <VAR>d2</VAR>)</EM></DT>
  <DD>
  <P>These functions return the second derivative <VAR>d2</VAR> of an   
  interpolated function for a given point <VAR>x</VAR>, using the interpolation  
   object <VAR>interp</VAR>, data arrays <VAR>xa</VAR> and <VAR>ya</VAR> and the 
    accelerator <VAR>acc</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp_005feval_005finteg"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp_eval_integ</STRONG> <EM>(const gsl_interp * 
    <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[],   double <VAR>a</VAR>, double <VAR>b</VAR>, gsl_interp_accel 
  *   <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp_005feval_005finteg_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp_eval_integ_e</STRONG> <EM>(const gsl_interp *  
   <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[],   double <VAR>a</VAR>, double <VAR>b</VAR>, gsl_interp_accel 
  * <VAR>acc</VAR>,   double * <VAR>result</VAR>)</EM></DT>
  <DD>
  <P>These functions return the numerical integral <VAR>result</VAR> of an   
  interpolated function over the range [<VAR>a</VAR>, <VAR>b</VAR>], using the   
  interpolation object <VAR>interp</VAR>, data arrays <VAR>xa</VAR> and   
  <VAR>ya</VAR> and the accelerator <VAR>acc</VAR>. </P></DD></DL>
<HR>
<A name="g_t1D-Higher_002dlevel-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Interpolation-Example-programs" 
rel="next">1D Interpolation Example programs</A>, Previous: <A accessKey="p" 
href="#g_t1D-Evaluation-of-Interpolating-Functions" 
rel="previous">1D Evaluation of Interpolating Functions</A>, Up: <A accessKey="u" 
href="#Interpolation" rel="up">Interpolation</A> 
&nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="g_t1D-Higher_002dlevel-Interface-1"></A>
<H3 class="section">28.6 1D Higher-level Interface</H3>
<P>The functions described in the previous sections required the user to supply 
 pointers to the <EM>x</EM> and <EM>y</EM> arrays on each call. The following 
 functions are equivalent to the corresponding <CODE>gsl_interp</CODE> functions 
 but maintain a copy of this data in the <CODE>gsl_spline</CODE> object. This 
 removes the need to pass both <VAR>xa</VAR> and <VAR>ya</VAR> as arguments on 
 each evaluation. These functions are defined in the header file 
<SAMP>gsl_spline.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fspline_005falloc"></A>Function: <EM>gsl_spline 
  *</EM><STRONG>gsl_spline_alloc</STRONG> <EM>(const gsl_interp_type * 
  <VAR>T</VAR>,   size_t <VAR>size</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fspline"></A></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_spline_init</STRONG> <EM>(gsl_spline * 
  <VAR>spline</VAR>, const   double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[], size_t   <VAR>size</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_spline_free</STRONG> <EM>(gsl_spline * 
  <VAR>spline</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005fname"></A>Function: <EM>const char 
  *</EM><STRONG>gsl_spline_name</STRONG> <EM>(const gsl_spline *   
  <VAR>spline</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005fmin_005fsize"></A>Function: <EM>unsigned 
    int</EM> <STRONG>gsl_spline_min_size</STRONG> <EM>(const gsl_spline *   
  <VAR>spline</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_spline_eval</STRONG> <EM>(const gsl_spline * 
  <VAR>spline</VAR>,   double <VAR>x</VAR>, gsl_interp_accel * 
  <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fspline_005feval_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_spline_eval_e</STRONG> <EM>(const gsl_spline * 
  <VAR>spline</VAR>,   double <VAR>x</VAR>, gsl_interp_accel * <VAR>acc</VAR>, 
  double *   <VAR>y</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005feval_005fderiv"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline_eval_deriv</STRONG> <EM>(const gsl_spline * 
    <VAR>spline</VAR>, double <VAR>x</VAR>, gsl_interp_accel *   
  <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fspline_005feval_005fderiv_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline_eval_deriv_e</STRONG> <EM>(const gsl_spline *  
   <VAR>spline</VAR>, double <VAR>x</VAR>, gsl_interp_accel * <VAR>acc</VAR>,   
  double * <VAR>d</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005feval_005fderiv2"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline_eval_deriv2</STRONG> <EM>(const gsl_spline  
   * <VAR>spline</VAR>, double <VAR>x</VAR>, gsl_interp_accel *   
  <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fspline_005feval_005fderiv2_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline_eval_deriv2_e</STRONG> <EM>(const gsl_spline * 
    <VAR>spline</VAR>, double <VAR>x</VAR>, gsl_interp_accel * <VAR>acc</VAR>,   
  double * <VAR>d2</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline_005feval_005finteg"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline_eval_integ</STRONG> <EM>(const gsl_spline * 
    <VAR>spline</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>, 
  gsl_interp_accel   * <VAR>acc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fspline_005feval_005finteg_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline_eval_integ_e</STRONG> <EM>(const gsl_spline *  
   <VAR>spline</VAR>, double <VAR>a</VAR>, double <VAR>b</VAR>, gsl_interp_accel 
    * <VAR>acc</VAR>, double * <VAR>result</VAR>)</EM></DT></DL>
<HR>
<A name="g_t1D-Interpolation-Example-programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t1D-Interpolation-References-and-Further-Reading" 
rel="next">1D Interpolation References and Further Reading</A>, Previous: <A 
accessKey="p" href="#g_t1D-Higher_002dlevel-Interface" 
rel="previous">1D Higher-level Interface</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-of-1D-Interpolation"></A>
<H3 class="section">28.7 Examples of 1D Interpolation</H3>
<P>The following program demonstrates the use of the interpolation and spline 
 functions. It computes a cubic spline interpolation of the 10-point dataset 
<EM>(x_i, y_i)</EM> where <EM>x_i = i + \sin(i)/2</EM> and <EM>y_i = i + 
 \cos(i^2)</EM> for <EM>i = 0 \dots 9</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_spline.h&gt;

int
main (void)
{
  int i;
  double xi, yi, x[10], y[10];

  printf ("#m=0,S=2\n");

  for (i = 0; i &lt; 10; i++)
    {
      x[i] = i + 0.5 * sin (i);
      y[i] = i + cos (i * i);
      printf ("%g %g\n", x[i], y[i]);
    }

  printf ("#m=1,S=0\n");

  {
    gsl_interp_accel *acc 
      = gsl_interp_accel_alloc ();
    gsl_spline *spline 
      = gsl_spline_alloc (gsl_interp_cspline, 10);

    gsl_spline_init (spline, x, y, 10);

    for (xi = x[0]; xi &lt; x[9]; xi += 0.01)
      {
        yi = gsl_spline_eval (spline, xi, acc);
        printf ("%g %g\n", xi, yi);
      }
    gsl_spline_free (spline);
    gsl_interp_accel_free (acc);
  }
  return 0;
}
</PRE></DIV>
<P>The output is designed to be used with the <SMALL>GNU</SMALL> plotutils 
<CODE>graph</CODE> program, </P>
<DIV class="example"><PRE class="example">$ ./a.out &gt; interp.dat
$ graph -T ps &lt; interp.dat &gt; interp.ps
</PRE></DIV>
<P>The result shows a smooth interpolation of the original points. The 
 interpolation method can be changed simply by varying the first argument of 
<CODE>gsl_spline_alloc</CODE>. </P>
<P>The next program demonstrates a periodic cubic spline with 4 data points. 
 Note that the first and last points must be supplied with the same y-value for 
a  periodic spline. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_spline.h&gt;

int
main (void)
{
  int N = 4;
  double x[4] = {0.00, 0.10,  0.27,  0.30};
  double y[4] = {0.15, 0.70, -0.10,  0.15}; 
             /* Note: y[0] == y[3] for periodic data */

  gsl_interp_accel *acc = gsl_interp_accel_alloc ();
  const gsl_interp_type *t = gsl_interp_cspline_periodic; 
  gsl_spline *spline = gsl_spline_alloc (t, N);

  int i; double xi, yi;

  printf ("#m=0,S=5\n");
  for (i = 0; i &lt; N; i++)
    {
      printf ("%g %g\n", x[i], y[i]);
    }

  printf ("#m=1,S=0\n");
  gsl_spline_init (spline, x, y, N);

  for (i = 0; i &lt;= 100; i++)
    {
      xi = (1 - i / 100.0) * x[0] + (i / 100.0) * x[N-1];
      yi = gsl_spline_eval (spline, xi, acc);
      printf ("%g %g\n", xi, yi);
    }
  
  gsl_spline_free (spline);
  gsl_interp_accel_free (acc);
  return 0;
}
</PRE></DIV>
<P>The output can be plotted with <SMALL>GNU</SMALL> <CODE>graph</CODE>. </P>
<DIV class="example"><PRE class="example">$ ./a.out &gt; interp.dat
$ graph -T ps &lt; interp.dat &gt; interp.ps
</PRE></DIV>
<P>The result shows a periodic interpolation of the original points. The slope 
 of the fitted curve is the same at the beginning and end of the data, and the 
 second derivative is also. </P>
<P>The next program illustrates the difference between the cubic spline, Akima, 
 and Steffen interpolation types on a difficult dataset. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_spline.h&gt;

int
main(void)
{
  size_t i;
  const size_t N = 9;

  /* this dataset is taken from
   * J. M. Hyman, Accurate Monotonicity preserving cubic interpolation,
   * SIAM J. Sci. Stat. Comput. 4, 4, 1983. */
  const double x[] = { 7.99, 8.09, 8.19, 8.7, 9.2,
                       10.0, 12.0, 15.0, 20.0 };
  const double y[] = { 0.0, 2.76429e-5, 4.37498e-2,
                       0.169183, 0.469428, 0.943740,
                       0.998636, 0.999919, 0.999994 };

  gsl_interp_accel *acc = gsl_interp_accel_alloc();
  gsl_spline *spline_cubic = gsl_spline_alloc(gsl_interp_cspline, N);
  gsl_spline *spline_akima = gsl_spline_alloc(gsl_interp_akima, N);
  gsl_spline *spline_steffen = gsl_spline_alloc(gsl_interp_steffen, N);

  gsl_spline_init(spline_cubic, x, y, N);
  gsl_spline_init(spline_akima, x, y, N);
  gsl_spline_init(spline_steffen, x, y, N);

  for (i = 0; i &lt; N; ++i)
    printf("%g %g\n", x[i], y[i]);

  printf("\n\n");

  for (i = 0; i &lt;= 100; ++i)
    {
      double xi = (1 - i / 100.0) * x[0] + (i / 100.0) * x[N-1];
      double yi_cubic = gsl_spline_eval(spline_cubic, xi, acc);
      double yi_akima = gsl_spline_eval(spline_akima, xi, acc);
      double yi_steffen = gsl_spline_eval(spline_steffen, xi, acc);

      printf("%g %g %g %g\n", xi, yi_cubic, yi_akima, yi_steffen);
    }

  gsl_spline_free(spline_cubic);
  gsl_spline_free(spline_akima);
  gsl_spline_free(spline_steffen);
  gsl_interp_accel_free(acc);

  return 0;
}
</PRE></DIV>
<P>The cubic method exhibits a local maxima between the 6th and 7th data points 
 and continues oscillating for the rest of the data. Akima also shows a local 
 maxima but recovers and follows the data well after the 7th grid point. Steffen 
 preserves monotonicity in all intervals and does not exhibit oscillations, at 
 the expense of having a discontinuous second derivative. </P>
<HR>
<A name="g_t1D-Interpolation-References-and-Further-Reading"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Introduction-to-Interpolation" 
rel="next">2D Introduction to Interpolation</A>, Previous: <A accessKey="p" 
href="#g_t1D-Interpolation-Example-programs" 
rel="previous">1D Interpolation Example programs</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-20"></A>
<H3 class="section">28.8 References and Further Reading</H3>
<P>Descriptions of the interpolation algorithms and further references can be 
 found in the following publications: </P>
<UL class="no-bullet">
  <LI><!-- /@w -->C.W. Ueberhuber, <CITE>Numerical Computation (Volume 1),   
  Chapter 9 “Interpolation”</CITE>, Springer (1997), ISBN 3-540-62058-3. </LI>
  <LI><!-- /@w -->D.M. Young, R.T. Gregory, <CITE>A Survey of Numerical   
  Mathematics (Volume 1), Chapter 6.8</CITE>, Dover (1988), ISBN 0-486-65691-8.  
   </LI>
  <LI><!-- /@w -->M. Steffen, <CITE>A simple method for monotonic interpolation  
   in one dimension</CITE>, Astron. Astrophys. 239, 443-450, 1990. </LI></UL>
<HR>
<A name="g_t2D-Introduction-to-Interpolation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Interpolation-Functions" 
rel="next">2D Interpolation Functions</A>, Previous: <A accessKey="p" href="#g_t1D-Interpolation-References-and-Further-Reading" 
rel="previous">1D Interpolation References and Further Reading</A>, Up: <A 
accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Introduction-to-2D-Interpolation"></A>
<H3 class="section">28.9 Introduction to 2D Interpolation</H3>
<P>Given two sets of equally spaced grid points: <EM>x_1,...,x_m</EM> with 
 spacing <EM>\delta x</EM>, and <EM>y_1,...,y_n</EM> with spacing <EM>\delta 
 y</EM>, plus a set of function values <EM>z_{ij}</EM> for each grid point 
<EM>(x_i,y_j)</EM>, the routines described in this section compute a continuous 
 interpolation function <EM>z(x,y)</EM> such that <EM>z(x_i,y_j) = z_{ij}</EM>. 
</P>
<HR>
<A name="g_t2D-Interpolation-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Interpolation-Grids" 
rel="next">2D Interpolation Grids</A>, Previous: <A accessKey="p" href="#g_t2D-Introduction-to-Interpolation" 
rel="previous">2D Introduction to Interpolation</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Interpolation-Functions-1"></A>
<H3 class="section">28.10 2D Interpolation Functions</H3>
<P>The interpolation function for a given dataset is stored in a 
<CODE>gsl_interp2d</CODE> object. These are created by the following functions. 
</P>
<DL>
  <DT><A name="index-gsl_005finterp2d_005falloc"></A>Function: <EM>gsl_interp2d  
   *</EM> <STRONG>gsl_interp2d_alloc</STRONG> <EM>(const gsl_interp2d_type *   
  <VAR>T</VAR>, const size_t <VAR>xsize</VAR>, const size_t   
  <VAR>ysize</VAR>)</EM></DT>
  <DD><A name="index-gsl_005finterp-1"></A>
  <P>This function returns a pointer to a newly allocated interpolation object   
  of type <VAR>T</VAR> for <VAR>xsize</VAR> grid points in the <EM>x</EM>   
  direction and <VAR>ysize</VAR> grid points in the <EM>y</EM> direction.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_interp2d_init</STRONG> <EM>(gsl_interp2d * 
  <VAR>interp</VAR>,   const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[], const double   <VAR>za</VAR>[], const size_t 
  <VAR>xsize</VAR>, const size_t   <VAR>ysize</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the interpolation object <VAR>interp</VAR> for   
  the data (<VAR>xa</VAR>,<VAR>ya</VAR>,<VAR>za</VAR>) where <VAR>xa</VAR> and   
  <VAR>ya</VAR> are arrays of the <EM>x</EM> and <EM>y</EM> grid points of size  
   <VAR>xsize</VAR> and <VAR>ysize</VAR> respectively, and <VAR>za</VAR> is an   
  array of function values of size <VAR>xsize</VAR>*<VAR>ysize</VAR>. The   
  interpolation object (<CODE>gsl_interp2d</CODE>) does not save the data arrays 
    <VAR>xa</VAR>, <VAR>ya</VAR>, and <VAR>za</VAR> and only stores the static   
  state computed from the data. The <VAR>xa</VAR> and <VAR>ya</VAR> data arrays  
   are always assumed to be strictly ordered, with increasing <EM>x,y</EM>   
  values; the behavior for other arrangements is not defined. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_interp2d_free</STRONG> <EM>(gsl_interp2d *   
  <VAR>interp</VAR>)</EM></DT>
  <DD>
  <P>This function frees the interpolation object <VAR>interp</VAR>. 
</P></DD></DL>
<HR>
<A name="g_t2D-Interpolation-Grids"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Interpolation-Types" 
rel="next">2D Interpolation Types</A>, Previous: <A accessKey="p" href="#g_t2D-Interpolation-Functions" 
rel="previous">2D Interpolation Functions</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Interpolation-Grids-1"></A>
<H3 class="section">28.11 2D Interpolation Grids</H3>
<P>The 2D interpolation routines access the function values <EM>z_{ij}</EM> with 
 the following ordering: </P>
<DIV class="example"><PRE class="example">z_ij = za[j*xsize + i]
</PRE></DIV>
<P>with <EM>i = 0,...,xsize-1</EM> and <EM>j = 0,...,ysize-1</EM>. However, for 
 ease of use, the following functions are provided to add and retrieve elements 
 from the function grid without requiring knowledge of the internal ordering. 
</P>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fset"></A>Function: 
  <EM>int</EM><STRONG>gsl_interp2d_set</STRONG> <EM>(const gsl_interp2d * 
  <VAR>interp</VAR>,   double <VAR>za</VAR>[], const size_t <VAR>i</VAR>, const 
  size_t <VAR>j</VAR>,   const double <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>This function sets the value <EM>z_{ij}</EM> for grid point   
  (<VAR>i</VAR>,<VAR>j</VAR>) of the array <VAR>za</VAR> to <VAR>z</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_interp2d_get</STRONG> <EM>(const gsl_interp2d * 
  <VAR>interp</VAR>,   const double <VAR>za</VAR>[], const size_t <VAR>i</VAR>, 
  const size_t   <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value <EM>z_{ij}</EM> for grid point   
  (<VAR>i</VAR>,<VAR>j</VAR>) stored in the array <VAR>za</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fidx"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_interp2d_idx</STRONG> <EM>(const gsl_interp2d * 
  <VAR>interp</VAR>,   const size_t <VAR>i</VAR>, const size_t 
  <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function returns the index corresponding to the grid point   
  (<VAR>i</VAR>,<VAR>j</VAR>). The index is given by <EM>j*xsize + i</EM>.   
  </P></DD></DL>
<HR>
<A name="g_t2D-Interpolation-Types"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Evaluation-of-Interpolating-Functions" 
rel="next">2D Evaluation of Interpolating Functions</A>, Previous: <A accessKey="p" 
href="#g_t2D-Interpolation-Grids" 
rel="previous">2D Interpolation Grids</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Interpolation-Types-1"></A>
<H3 class="section">28.12 2D Interpolation Types</H3><A name="index-gsl_005finterp2d_005ftype"></A>
<P>The interpolation library provides the following 2D interpolation types: </P>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fbilinear"></A>Interpolation Type:   
  <STRONG>gsl_interp2d_bilinear</STRONG></DT>
  <DD><A name="index-bilinear-interpolation"></A>
  <P>Bilinear interpolation. This interpolation method does not require any   
  additional memory. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fbicubic"></A>Interpolation Type:   
  <STRONG>gsl_interp2d_bicubic</STRONG></DT>
  <DD><A name="index-bicubic-interpolation"></A>
  <P>Bicubic interpolation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fname"></A>Function: <EM>const char   
  *</EM> <STRONG>gsl_interp2d_name</STRONG> <EM>(const gsl_interp2d *   
  <VAR>interp</VAR>)</EM></DT>
  <DD>
  <P>This function returns the name of the interpolation type used by   
  <VAR>interp</VAR>. For example, </P>
  <DIV class="example"><PRE class="example">printf ("interp uses '%s' interpolation.\n", 
        gsl_interp2d_name (interp));
</PRE></DIV>
  <P>would print something like, </P>
  <DIV class="example"><PRE class="example">interp uses 'bilinear' interpolation.
</PRE></DIV></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005fmin_005fsize"></A>Function: 
  <EM>unsigned   int</EM> <STRONG>gsl_interp2d_min_size</STRONG> <EM>(const 
  gsl_interp2d *   <VAR>interp</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp2d_005ftype_005fmin_005fsize"></A>Function:   
  <EM>unsigned int</EM> <STRONG>gsl_interp2d_type_min_size</STRONG> <EM>(const   
  gsl_interp2d_type * <VAR>T</VAR>)</EM></DT>
  <DD>
  <P>These functions return the minimum number of points required by the   
  interpolation object <VAR>interp</VAR> or interpolation type <VAR>T</VAR>. For 
    example, bicubic interpolation requires a minimum of 4 points. </P></DD></DL>
<HR>
<A name="g_t2D-Evaluation-of-Interpolating-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Higher_002dlevel-Interface" 
rel="next">2D Higher-level Interface</A>, Previous: <A accessKey="p" href="#g_t2D-Interpolation-Types" 
rel="previous">2D Interpolation Types</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="g_t2D-Evaluation-of-Interpolating-Functions-1"></A>
<H3 class="section">28.13 2D Evaluation of Interpolating Functions</H3>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_interp2d_eval</STRONG> <EM>(const gsl_interp2d *   
  <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double <VAR>ya</VAR>[], 
    const double <VAR>za</VAR>[], const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp2d_005feval_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_interp2d_eval_e</STRONG> <EM>(const gsl_interp2d *   
  <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double <VAR>ya</VAR>[], 
    const double <VAR>za</VAR>[], const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>, double * <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value of <VAR>z</VAR> for a given   
  point (<VAR>x</VAR>,<VAR>y</VAR>), using the interpolation object   
  <VAR>interp</VAR>, data arrays <VAR>xa</VAR>, <VAR>ya</VAR>, and <VAR>za</VAR> 
    and the accelerators <VAR>xacc</VAR> and <VAR>yacc</VAR>. When <VAR>x</VAR> 
  is   outside the range of <VAR>xa</VAR> or <VAR>y</VAR> is outside the range 
  of   <VAR>ya</VAR>, the error code <CODE>GSL_EDOM</CODE> is returned. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval_005fextrap"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp2d_eval_extrap</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005finterp2d_005feval_005fextrap_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp2d_eval_extrap_e</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>, double * <VAR>z</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value of <VAR>z</VAR> for a given   
  point (<VAR>x</VAR>,<VAR>y</VAR>), using the interpolation object   
  <VAR>interp</VAR>, data arrays <VAR>xa</VAR>, <VAR>ya</VAR>, and <VAR>za</VAR> 
    and the accelerators <VAR>xacc</VAR> and <VAR>yacc</VAR>. The functions   
  perform no bounds checking, so when <VAR>x</VAR> is outside the range of   
  <VAR>xa</VAR> or <VAR>y</VAR> is outside the range of <VAR>ya</VAR>,   
  extrapolation is performed. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval_005fderiv_005fx"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp2d_eval_deriv_x</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005finterp2d_005feval_005fderiv_005fx_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp2d_eval_deriv_x_e</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value <VAR>d</VAR> <EM>= \partial z 
    / \partial x</EM> for a given point (<VAR>x</VAR>,<VAR>y</VAR>), using the   
  interpolation object <VAR>interp</VAR>, data arrays <VAR>xa</VAR>,   
  <VAR>ya</VAR>, and <VAR>za</VAR> and the accelerators <VAR>xacc</VAR> and   
  <VAR>yacc</VAR>. When <VAR>x</VAR> is outside the range of <VAR>xa</VAR> or   
  <VAR>y</VAR> is outside the range of <VAR>ya</VAR>, the error code   
  <CODE>GSL_EDOM</CODE> is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval_005fderiv_005fy"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp2d_eval_deriv_y</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005finterp2d_005feval_005fderiv_005fy_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp2d_eval_deriv_y_e</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value <VAR>d</VAR> <EM>= \partial z 
    / \partial y</EM> for a given point (<VAR>x</VAR>,<VAR>y</VAR>), using the   
  interpolation object <VAR>interp</VAR>, data arrays <VAR>xa</VAR>,   
  <VAR>ya</VAR>, and <VAR>za</VAR> and the accelerators <VAR>xacc</VAR> and   
  <VAR>yacc</VAR>. When <VAR>x</VAR> is outside the range of <VAR>xa</VAR> or   
  <VAR>y</VAR> is outside the range of <VAR>ya</VAR>, the error code   
  <CODE>GSL_EDOM</CODE> is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval_005fderiv_005fxx"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp2d_eval_deriv_xx</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005finterp2d_005feval_005fderiv_005fxx_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp2d_eval_deriv_xx_e</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value <VAR>d</VAR> <EM>= \partial^2 
    z / \partial x^2</EM> for a given point (<VAR>x</VAR>,<VAR>y</VAR>), using 
  the   interpolation object <VAR>interp</VAR>, data arrays <VAR>xa</VAR>,   
  <VAR>ya</VAR>, and <VAR>za</VAR> and the accelerators <VAR>xacc</VAR> and   
  <VAR>yacc</VAR>. When <VAR>x</VAR> is outside the range of <VAR>xa</VAR> or   
  <VAR>y</VAR> is outside the range of <VAR>ya</VAR>, the error code   
  <CODE>GSL_EDOM</CODE> is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval_005fderiv_005fyy"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp2d_eval_deriv_yy</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005finterp2d_005feval_005fderiv_005fyy_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp2d_eval_deriv_yy_e</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value <VAR>d</VAR> <EM>= \partial^2 
    z / \partial y^2</EM> for a given point (<VAR>x</VAR>,<VAR>y</VAR>), using 
  the   interpolation object <VAR>interp</VAR>, data arrays <VAR>xa</VAR>,   
  <VAR>ya</VAR>, and <VAR>za</VAR> and the accelerators <VAR>xacc</VAR> and   
  <VAR>yacc</VAR>. When <VAR>x</VAR> is outside the range of <VAR>xa</VAR> or   
  <VAR>y</VAR> is outside the range of <VAR>ya</VAR>, the error code   
  <CODE>GSL_EDOM</CODE> is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005finterp2d_005feval_005fderiv_005fxy"></A>Function:   
  <EM>double</EM> <STRONG>gsl_interp2d_eval_deriv_xy</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005finterp2d_005feval_005fderiv_005fxy_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_interp2d_eval_deriv_xy_e</STRONG> <EM>(const   
  gsl_interp2d * <VAR>interp</VAR>, const double <VAR>xa</VAR>[], const double   
  <VAR>ya</VAR>[], const double <VAR>za</VAR>[], const double <VAR>x</VAR>,   
  const double <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>,   
  gsl_interp_accel * <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT>
  <DD>
  <P>These functions return the interpolated value <VAR>d</VAR> <EM>= \partial^2 
    z / \partial x \partial y</EM> for a given point 
  (<VAR>x</VAR>,<VAR>y</VAR>),   using the interpolation object 
  <VAR>interp</VAR>, data arrays <VAR>xa</VAR>,   <VAR>ya</VAR>, and 
  <VAR>za</VAR> and the accelerators <VAR>xacc</VAR> and   <VAR>yacc</VAR>. When 
  <VAR>x</VAR> is outside the range of <VAR>xa</VAR> or   <VAR>y</VAR> is 
  outside the range of <VAR>ya</VAR>, the error code   <CODE>GSL_EDOM</CODE> is 
  returned. </P></DD></DL>
<HR>
<A name="g_t2D-Higher_002dlevel-Interface"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#g_t2D-Interpolation-Example-programs" 
rel="next">2D Interpolation Example programs</A>, Previous: <A accessKey="p" 
href="#g_t2D-Evaluation-of-Interpolating-Functions" 
rel="previous">2D Evaluation of Interpolating Functions</A>, Up: <A accessKey="u" 
href="#Interpolation" rel="up">Interpolation</A> 
&nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="g_t2D-Higher_002dlevel-Interface-1"></A>
<H3 class="section">28.14 2D Higher-level Interface</H3>
<P>The functions described in the previous sections required the user to supply 
 pointers to the <EM>x</EM>, <EM>y</EM>, and <EM>z</EM> arrays on each call. The 
 following functions are equivalent to the corresponding 
<CODE>gsl_interp2d</CODE> functions but maintain a copy of this data in the 
<CODE>gsl_spline2d</CODE> object. This removes the need to pass <VAR>xa</VAR>, 
<VAR>ya</VAR>, and <VAR>za</VAR> as arguments on each evaluation. These 
 functions are defined in the header file <SAMP>gsl_spline2d.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fspline2d_005falloc"></A>Function: <EM>gsl_spline2d  
   *</EM> <STRONG>gsl_spline2d_alloc</STRONG> <EM>(const gsl_interp2d_type *   
  <VAR>T</VAR>, size_t <VAR>xsize</VAR>, size_t <VAR>ysize</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fspline2d"></A></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_spline2d_init</STRONG> <EM>(gsl_spline2d * 
  <VAR>spline</VAR>,   const double <VAR>xa</VAR>[], const double 
  <VAR>ya</VAR>[], const double   <VAR>za</VAR>[], size_t <VAR>xsize</VAR>, 
  size_t <VAR>ysize</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_spline2d_free</STRONG> <EM>(gsl_spline2d *   
  <VAR>spline</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005fname"></A>Function: <EM>const char   
  *</EM> <STRONG>gsl_spline2d_name</STRONG> <EM>(const gsl_spline2d *   
  <VAR>spline</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005fmin_005fsize"></A>Function: 
  <EM>unsigned   int</EM> <STRONG>gsl_spline2d_min_size</STRONG> <EM>(const 
  gsl_spline2d *   <VAR>spline</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_spline2d_eval</STRONG> <EM>(const gsl_spline2d *   
  <VAR>spline</VAR>, const double <VAR>x</VAR>, const double <VAR>y</VAR>,   
  gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fspline2d_005feval_005fe"></A>Function: 
  <EM>int</EM><STRONG>gsl_spline2d_eval_e</STRONG> <EM>(const gsl_spline2d *   
  <VAR>spline</VAR>, const double <VAR>x</VAR>, const double <VAR>y</VAR>,   
  gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel * <VAR>yacc</VAR>, double 
    * <VAR>z</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005feval_005fderiv_005fx"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline2d_eval_deriv_x</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fspline2d_005feval_005fderiv_005fx_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline2d_eval_deriv_x_e</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005feval_005fderiv_005fy"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline2d_eval_deriv_y</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fspline2d_005feval_005fderiv_005fy_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline2d_eval_deriv_y_e</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005feval_005fderiv_005fxx"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline2d_eval_deriv_xx</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fspline2d_005feval_005fderiv_005fxx_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline2d_eval_deriv_xx_e</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005feval_005fderiv_005fyy"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline2d_eval_deriv_yy</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fspline2d_005feval_005fderiv_005fyy_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline2d_eval_deriv_yy_e</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005feval_005fderiv_005fxy"></A>Function:   
  <EM>double</EM> <STRONG>gsl_spline2d_eval_deriv_xy</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fspline2d_005feval_005fderiv_005fxy_005fe"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spline2d_eval_deriv_xy_e</STRONG> <EM>(const   
  gsl_spline2d * <VAR>spline</VAR>, const double <VAR>x</VAR>, const double   
  <VAR>y</VAR>, gsl_interp_accel * <VAR>xacc</VAR>, gsl_interp_accel *   
  <VAR>yacc</VAR>, double * <VAR>d</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005fset"></A>Function: 
  <EM>int</EM><STRONG>gsl_spline2d_set</STRONG> <EM>(const gsl_spline2d * 
  <VAR>spline</VAR>,   double <VAR>za</VAR>[], const size_t <VAR>i</VAR>, const 
  size_t <VAR>j</VAR>,   const double <VAR>z</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-gsl_005fspline2d_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_spline2d_get</STRONG> <EM>(const gsl_spline2d * 
  <VAR>spline</VAR>,   const double <VAR>za</VAR>[], const size_t <VAR>i</VAR>, 
  const size_t   <VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value <EM>z_{ij}</EM> for grid point   
  (<VAR>i</VAR>,<VAR>j</VAR>) stored in the array <VAR>za</VAR>. </P></DD></DL>
<HR>
<A name="g_t2D-Interpolation-Example-programs"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#g_t2D-Higher_002dlevel-Interface" 
rel="previous">2D Higher-level Interface</A>, Up: <A accessKey="u" href="#Interpolation" 
rel="up">Interpolation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="g_t2D-Interpolation-Example-programs-1"></A>
<H3 class="section">28.15 2D Interpolation Example programs</H3>
<P>The following example performs bilinear interpolation on the unit square, 
 using <EM>z</EM> values of <EM>(0,1,0.5,1)</EM> going clockwise around the 
 square. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_interp2d.h&gt;
#include &lt;gsl/gsl_spline2d.h&gt;

int
main()
{
  const gsl_interp2d_type *T = gsl_interp2d_bilinear;
  const size_t N = 100;             /* number of points to interpolate */
  const double xa[] = { 0.0, 1.0 }; /* define unit square */
  const double ya[] = { 0.0, 1.0 };
  const size_t nx = sizeof(xa) / sizeof(double); /* x grid points */
  const size_t ny = sizeof(ya) / sizeof(double); /* y grid points */
  double *za = malloc(nx * ny * sizeof(double));
  gsl_spline2d *spline = gsl_spline2d_alloc(T, nx, ny);
  gsl_interp_accel *xacc = gsl_interp_accel_alloc();
  gsl_interp_accel *yacc = gsl_interp_accel_alloc();
  size_t i, j;

  /* set z grid values */
  gsl_spline2d_set(spline, za, 0, 0, 0.0);
  gsl_spline2d_set(spline, za, 0, 1, 1.0);
  gsl_spline2d_set(spline, za, 1, 1, 0.5);
  gsl_spline2d_set(spline, za, 1, 0, 1.0);

  /* initialize interpolation */
  gsl_spline2d_init(spline, xa, ya, za, nx, ny);

  /* interpolate N values in x and y and print out grid for plotting */
  for (i = 0; i &lt; N; ++i)
    {
      double xi = i / (N - 1.0);

      for (j = 0; j &lt; N; ++j)
        {
          double yj = j / (N - 1.0);
          double zij = gsl_spline2d_eval(spline, xi, yj, xacc, yacc);

          printf("%f %f %f\n", xi, yj, zij);
        }
      printf("\n");
    }

  gsl_spline2d_free(spline);
  gsl_interp_accel_free(xacc);
  gsl_interp_accel_free(yacc);
  free(za);

  return 0;
}
</PRE></DIV>
<P>The results of the interpolation are shown in the following plot, where the 
 corners are labeled with their fixed <EM>z</EM> values. </P>
<HR>
<A name="Numerical-Differentiation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Chebyshev-Approximations" 
rel="next">Chebyshev Approximations</A>, Previous: <A accessKey="p" href="#Interpolation" 
rel="previous">Interpolation</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Numerical-Differentiation-1"></A>
<H2 class="chapter">29 Numerical Differentiation</H2><A name="index-differentiation-of-functions_002c-numeric"></A><A 
name="index-functions_002c-numerical-differentiation"></A><A name="index-derivatives_002c-calculating-numerically"></A><A 
name="index-numerical-derivatives"></A><A name="index-slope_002c-see-numerical-derivative"></A>
<P>The functions described in this chapter compute numerical derivatives by 
 finite differencing. An adaptive algorithm is used to find the best choice of 
 finite difference and to estimate the error in the derivative. These functions 
 are declared in the header file <SAMP>gsl_deriv.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Numerical-Differentiation-functions">Numerical 
            Differentiation functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Numerical-Differentiation-Examples">Numerical 
            Differentiation Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Numerical-Differentiation-References">Numerical 
            Differentiation References</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Numerical-Differentiation-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-Differentiation-Examples" 
rel="next">Numerical Differentiation Examples</A>, Up: <A accessKey="u" href="#Numerical-Differentiation" 
rel="up">Numerical Differentiation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Functions"></A>
<H3 class="section">29.1 Functions</H3>
<DL>
  <DT><A name="index-gsl_005fderiv_005fcentral"></A>Function: 
  <EM>int</EM><STRONG>gsl_deriv_central</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>x</VAR>, double <VAR>h</VAR>, double * 
  <VAR>result</VAR>, double *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the numerical derivative of the function   
  <VAR>f</VAR> at the point <VAR>x</VAR> using an adaptive central difference   
  algorithm with a step-size of <VAR>h</VAR>. The derivative is returned in   
  <VAR>result</VAR> and an estimate of its absolute error is returned in   
  <VAR>abserr</VAR>. </P>
  <P>The initial value of <VAR>h</VAR> is used to estimate an optimal step-size, 
    based on the scaling of the truncation error and round-off error in the   
  derivative calculation. The derivative is computed using a 5-point rule for   
  equally spaced abscissae at <EM>x-h</EM>, <EM>x-h/2</EM>, <EM>x</EM>,   
  <EM>x+h/2</EM>, <EM>x+h</EM>, with an error estimate taken from the difference 
    between the 5-point rule and the corresponding 3-point rule <EM>x-h</EM>,   
  <EM>x</EM>, <EM>x+h</EM>. Note that the value of the function at <EM>x</EM>   
  does not contribute to the derivative calculation, so only 4-points are   
  actually used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fderiv_005fforward"></A>Function: 
  <EM>int</EM><STRONG>gsl_deriv_forward</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>x</VAR>, double <VAR>h</VAR>, double * 
  <VAR>result</VAR>, double *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the numerical derivative of the function   
  <VAR>f</VAR> at the point <VAR>x</VAR> using an adaptive forward difference   
  algorithm with a step-size of <VAR>h</VAR>. The function is evaluated only at  
   points greater than <VAR>x</VAR>, and never at <VAR>x</VAR> itself. The   
  derivative is returned in <VAR>result</VAR> and an estimate of its absolute   
  error is returned in <VAR>abserr</VAR>. This function should be used if   
  <EM>f(x)</EM> has a discontinuity at <VAR>x</VAR>, or is undefined for values  
   less than <VAR>x</VAR>. </P>
  <P>The initial value of <VAR>h</VAR> is used to estimate an optimal step-size, 
    based on the scaling of the truncation error and round-off error in the   
  derivative calculation. The derivative at <EM>x</EM> is computed using an   
  “open” 4-point rule for equally spaced abscissae at <EM>x+h/4</EM>,   
  <EM>x+h/2</EM>, <EM>x+3h/4</EM>, <EM>x+h</EM>, with an error estimate taken   
  from the difference between the 4-point rule and the corresponding 2-point   
  rule <EM>x+h/2</EM>, <EM>x+h</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fderiv_005fbackward"></A>Function: 
  <EM>int</EM><STRONG>gsl_deriv_backward</STRONG> <EM>(const gsl_function * 
  <VAR>f</VAR>,   double <VAR>x</VAR>, double <VAR>h</VAR>, double * 
  <VAR>result</VAR>, double *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the numerical derivative of the function   
  <VAR>f</VAR> at the point <VAR>x</VAR> using an adaptive backward difference   
  algorithm with a step-size of <VAR>h</VAR>. The function is evaluated only at  
   points less than <VAR>x</VAR>, and never at <VAR>x</VAR> itself. The   
  derivative is returned in <VAR>result</VAR> and an estimate of its absolute   
  error is returned in <VAR>abserr</VAR>. This function should be used if   
  <EM>f(x)</EM> has a discontinuity at <VAR>x</VAR>, or is undefined for values  
   greater than <VAR>x</VAR>. </P>
  <P>This function is equivalent to calling <CODE>gsl_deriv_forward</CODE> with  
   a negative step-size. </P></DD></DL>
<HR>
<A name="Numerical-Differentiation-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Numerical-Differentiation-References" 
rel="next">Numerical Differentiation References</A>, Previous: <A accessKey="p" 
href="#Numerical-Differentiation-functions" 
rel="previous">Numerical Differentiation functions</A>, Up: <A accessKey="u" 
href="#Numerical-Differentiation" 
rel="up">Numerical Differentiation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-20"></A>
<H3 class="section">29.2 Examples</H3>
<P>The following code estimates the derivative of the function <EM>f(x) = 
 x^{3/2}</EM> at <EM>x=2</EM> and at <EM>x=0</EM>. The function <EM>f(x)</EM> is 
 undefined for <EM>x&lt;0</EM> so the derivative at <EM>x=0</EM> is computed 
 using <CODE>gsl_deriv_forward</CODE>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_deriv.h&gt;

double f (double x, void * params)
{
  return pow (x, 1.5);
}

int
main (void)
{
  gsl_function F;
  double result, abserr;

  F.function = &amp;f;
  F.params = 0;

  printf ("f(x) = x^(3/2)\n");

  gsl_deriv_central (&amp;F, 2.0, 1e-8, &amp;result, &amp;abserr);
  printf ("x = 2.0\n");
  printf ("f'(x) = %.10f +/- %.10f\n", result, abserr);
  printf ("exact = %.10f\n\n", 1.5 * sqrt(2.0));

  gsl_deriv_forward (&amp;F, 0.0, 1e-8, &amp;result, &amp;abserr);
  printf ("x = 0.0\n");
  printf ("f'(x) = %.10f +/- %.10f\n", result, abserr);
  printf ("exact = %.10f\n", 0.0);

  return 0;
}
</PRE></DIV>
<P>Here is the output of the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out
</PRE><PRE class="verbatim">f(x) = x^(3/2)
x = 2.0
f'(x) = 2.1213203120 +/- 0.0000004064
exact = 2.1213203436

x = 0.0
f'(x) = 0.0000000160 +/- 0.0000000339
exact = 0.0000000000
</PRE></DIV>
<HR>
<A name="Numerical-Differentiation-References"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Numerical-Differentiation-Examples" 
rel="previous">Numerical Differentiation Examples</A>, Up: <A accessKey="u" 
href="#Numerical-Differentiation" 
rel="up">Numerical Differentiation</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-21"></A>
<H3 class="section">29.3 References and Further Reading</H3>
<P>The algorithms used by these functions are described in the following 
 sources: </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Abramowitz and Stegun, <CITE>Handbook of Mathematical   
  Functions</CITE>, Section 25.3.4, and Table 25.5 (Coefficients for   
  Differentiation). </LI>
  <LI><!-- /@w -->S.D. Conte and Carl de Boor, <CITE>Elementary Numerical   
  Analysis: An Algorithmic Approach</CITE>, McGraw-Hill, 1972. </LI></UL>
<HR>
<A name="Chebyshev-Approximations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Series-Acceleration" 
rel="next">Series Acceleration</A>, Previous: <A accessKey="p" href="#Numerical-Differentiation" 
rel="previous">Numerical Differentiation</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Chebyshev-Approximations-1"></A>
<H2 class="chapter">30 Chebyshev Approximations</H2><A name="index-Chebyshev-series"></A><A 
name="index-fitting_002c-using-Chebyshev-polynomials"></A><A name="index-interpolation_002c-using-Chebyshev-polynomials"></A>
<P>This chapter describes routines for computing Chebyshev approximations to 
 univariate functions. A Chebyshev approximation is a truncation of the series 
<EM>f(x) = \sum c_n T_n(x)</EM>, where the Chebyshev polynomials <EM>T_n(x) = 
 \cos(n \arccos x)</EM> provide an orthogonal basis of polynomials on the 
 interval <EM>[-1,1]</EM> with the weight function <EM>1 / \sqrt{1-x^2}</EM>. 
The  first few Chebyshev polynomials are, <EM>T_0(x) = 1</EM>, <EM>T_1(x) = 
x</EM>, <EM>T_2(x) = 2 x^2 - 1</EM>. For further information see Abramowitz 
&amp;  Stegun, Chapter 22. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_chebyshev.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Chebyshev-Definitions">Chebyshev 
            Definitions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Creation-and-Calculation-of-Chebyshev-Series">Creation 
            and Calculation of Chebyshev Series</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Auxiliary-Functions-for-Chebyshev-Series">Auxiliary 
            Functions for Chebyshev Series</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Chebyshev-Series-Evaluation">Chebyshev 
            Series Evaluation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Derivatives-and-Integrals">Derivatives 
            and Integrals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Chebyshev-Approximation-Examples">Chebyshev 
            Approximation Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Chebyshev-Approximation-References-and-Further-Reading">Chebyshev 
            Approximation References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Chebyshev-Definitions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Creation-and-Calculation-of-Chebyshev-Series" 
rel="next">Creation and Calculation of Chebyshev Series</A>, Up: <A accessKey="u" 
href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Definitions"></A>
<H3 class="section">30.1 Definitions</H3><A 
name="index-gsl_005fcheb_005fseries"></A>
<P>A Chebyshev series is stored using the following structure, </P>
<DIV class="example"><PRE class="example">typedef struct
{
  double * c;   /* coefficients  c[0] .. c[order] */
  int order;    /* order of expansion             */
  double a;     /* lower interval point           */
  double b;     /* upper interval point           */
  ...
} gsl_cheb_series
</PRE></DIV>
<P>The approximation is made over the range <EM>[a,b]</EM> using 
<VAR>order</VAR>+1 terms, including the coefficient <EM>c[0]</EM>. The series is 
 computed using the following convention, </P>
<DIV class="example"><PRE class="example">f(x) = (c_0 / 2) + \sum_{n=1} c_n T_n(x)
</PRE></DIV>
<P>which is needed when accessing the coefficients directly. </P>
<HR>
<A name="Creation-and-Calculation-of-Chebyshev-Series"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Auxiliary-Functions-for-Chebyshev-Series" 
rel="next">Auxiliary Functions for Chebyshev Series</A>, Previous: <A accessKey="p" 
href="#Chebyshev-Definitions" 
rel="previous">Chebyshev Definitions</A>, Up: <A accessKey="u" href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Creation-and-Calculation-of-Chebyshev-Series-1"></A>
<H3 class="section">30.2 Creation and Calculation of Chebyshev Series</H3>
<DL>
  <DT><A name="index-gsl_005fcheb_005falloc"></A>Function: <EM>gsl_cheb_series   
  *</EM> <STRONG>gsl_cheb_alloc</STRONG> <EM>(const size_t   
  <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function allocates space for a Chebyshev series of order <VAR>n</VAR>  
   and returns a pointer to a new <CODE>gsl_cheb_series</CODE> struct. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_cheb_free</STRONG> <EM>(gsl_cheb_series * 
  <VAR>cs</VAR>)</EM></DT>
  <DD>
  <P>This function frees a previously allocated Chebyshev series <VAR>cs</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_cheb_init</STRONG> <EM>(gsl_cheb_series * 
  <VAR>cs</VAR>, const   gsl_function * <VAR>f</VAR>, const double <VAR>a</VAR>, 
  const double   <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Chebyshev approximation <VAR>cs</VAR> for the   
  function <VAR>f</VAR> over the range <EM>(a,b)</EM> to the previously   
  specified order. The computation of the Chebyshev approximation is an   
  <EM>O(n^2)</EM> process, and requires <EM>n</EM> function evaluations.   
  </P></DD></DL>
<HR>
<A name="Auxiliary-Functions-for-Chebyshev-Series"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Chebyshev-Series-Evaluation" 
rel="next">Chebyshev Series Evaluation</A>, Previous: <A accessKey="p" href="#Creation-and-Calculation-of-Chebyshev-Series" 
rel="previous">Creation and Calculation of Chebyshev Series</A>, Up: <A 
accessKey="u" href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Auxiliary-Functions"></A>
<H3 class="section">30.3 Auxiliary Functions</H3>
<P>The following functions provide information about an existing Chebyshev 
 series. </P>
<DL>
  <DT><A name="index-gsl_005fcheb_005forder"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_cheb_order</STRONG> <EM>(const gsl_cheb_series *   
  <VAR>cs</VAR>)</EM></DT>
  <DD>
  <P>This function returns the order of Chebyshev series <VAR>cs</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005fsize"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_cheb_size</STRONG> <EM>(const gsl_cheb_series *   
  <VAR>cs</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fcheb_005fcoeffs"></A>Function: <EM>double 
  *</EM><STRONG>gsl_cheb_coeffs</STRONG> <EM>(const gsl_cheb_series *   
  <VAR>cs</VAR>)</EM></DT>
  <DD>
  <P>These functions return the size of the Chebyshev coefficient array   
  <CODE>c[]</CODE> and a pointer to its location in memory for the Chebyshev   
  series <VAR>cs</VAR>. </P></DD></DL>
<HR>
<A name="Chebyshev-Series-Evaluation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Derivatives-and-Integrals" 
rel="next">Derivatives and Integrals</A>, Previous: <A accessKey="p" href="#Auxiliary-Functions-for-Chebyshev-Series" 
rel="previous">Auxiliary Functions for Chebyshev Series</A>, Up: <A accessKey="u" 
href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Chebyshev-Series-Evaluation-1"></A>
<H3 class="section">30.4 Chebyshev Series Evaluation</H3>
<DL>
  <DT><A name="index-gsl_005fcheb_005feval"></A>Function: 
  <EM>double</EM><STRONG>gsl_cheb_eval</STRONG> <EM>(const gsl_cheb_series * 
  <VAR>cs</VAR>,   double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates the Chebyshev series <VAR>cs</VAR> at a given point 
    <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005feval_005ferr"></A>Function: 
  <EM>int</EM><STRONG>gsl_cheb_eval_err</STRONG> <EM>(const gsl_cheb_series * 
  <VAR>cs</VAR>,   const double <VAR>x</VAR>, double * <VAR>result</VAR>, double 
  *   <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function computes the Chebyshev series <VAR>cs</VAR> at a given point  
   <VAR>x</VAR>, estimating both the series <VAR>result</VAR> and its absolute   
  error <VAR>abserr</VAR>. The error estimate is made from the first neglected   
  term in the series. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005feval_005fn"></A>Function: 
  <EM>double</EM><STRONG>gsl_cheb_eval_n</STRONG> <EM>(const gsl_cheb_series * 
  <VAR>cs</VAR>,   size_t <VAR>order</VAR>, double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates the Chebyshev series <VAR>cs</VAR> at a given point 
    <VAR>x</VAR>, to (at most) the given order <VAR>order</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005feval_005fn_005ferr"></A>Function:   
  <EM>int</EM> <STRONG>gsl_cheb_eval_n_err</STRONG> <EM>(const gsl_cheb_series * 
    <VAR>cs</VAR>, const size_t <VAR>order</VAR>, const double <VAR>x</VAR>,   
  double * <VAR>result</VAR>, double * <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates a Chebyshev series <VAR>cs</VAR> at a given point   
  <VAR>x</VAR>, estimating both the series <VAR>result</VAR> and its absolute   
  error <VAR>abserr</VAR>, to (at most) the given order <VAR>order</VAR>. The   
  error estimate is made from the first neglected term in the series. 
</P></DD></DL>
<HR>
<A name="Derivatives-and-Integrals"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Chebyshev-Approximation-Examples" 
rel="next">Chebyshev Approximation Examples</A>, Previous: <A accessKey="p" 
href="#Chebyshev-Series-Evaluation" 
rel="previous">Chebyshev Series Evaluation</A>, Up: <A accessKey="u" href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Derivatives-and-Integrals-1"></A>
<H3 class="section">30.5 Derivatives and Integrals</H3>
<P>The following functions allow a Chebyshev series to be differentiated or 
 integrated, producing a new Chebyshev series. Note that the error estimate 
 produced by evaluating the derivative series will be underestimated due to the 
 contribution of higher order terms being neglected. </P>
<DL>
  <DT><A name="index-gsl_005fcheb_005fcalc_005fderiv"></A>Function: 
  <EM>int</EM><STRONG>gsl_cheb_calc_deriv</STRONG> <EM>(gsl_cheb_series * 
  <VAR>deriv</VAR>,   const gsl_cheb_series * <VAR>cs</VAR>)</EM></DT>
  <DD>
  <P>This function computes the derivative of the series <VAR>cs</VAR>, storing  
   the derivative coefficients in the previously allocated <VAR>deriv</VAR>. The 
    two series <VAR>cs</VAR> and <VAR>deriv</VAR> must have been allocated with  
   the same order. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fcheb_005fcalc_005finteg"></A>Function: 
  <EM>int</EM><STRONG>gsl_cheb_calc_integ</STRONG> <EM>(gsl_cheb_series * 
  <VAR>integ</VAR>,   const gsl_cheb_series * <VAR>cs</VAR>)</EM></DT>
  <DD>
  <P>This function computes the integral of the series <VAR>cs</VAR>, storing   
  the integral coefficients in the previously allocated <VAR>integ</VAR>. The   
  two series <VAR>cs</VAR> and <VAR>integ</VAR> must have been allocated with   
  the same order. The lower limit of the integration is taken to be the left   
  hand end of the range <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="Chebyshev-Approximation-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Chebyshev-Approximation-References-and-Further-Reading" 
rel="next">Chebyshev Approximation References and Further Reading</A>, Previous: 
<A accessKey="p" href="#Derivatives-and-Integrals" 
rel="previous">Derivatives and Integrals</A>, Up: <A accessKey="u" href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-21"></A>
<H3 class="section">30.6 Examples</H3>
<P>The following example program computes Chebyshev approximations to a step 
 function. This is an extremely difficult approximation to make, due to the 
 discontinuity, and was chosen as an example where approximation error is 
 visible. For smooth functions the Chebyshev approximation converges extremely 
 rapidly and errors would not be visible. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_chebyshev.h&gt;

double
f (double x, void *p)
{
  if (x &lt; 0.5)
    return 0.25;
  else
    return 0.75;
}

int
main (void)
{
  int i, n = 10000; 

  gsl_cheb_series *cs = gsl_cheb_alloc (40);

  gsl_function F;

  F.function = f;
  F.params = 0;

  gsl_cheb_init (cs, &amp;F, 0.0, 1.0);

  for (i = 0; i &lt; n; i++)
    {
      double x = i / (double)n;
      double r10 = gsl_cheb_eval_n (cs, 10, x);
      double r40 = gsl_cheb_eval (cs, x);
      printf ("%g %g %g %g\n", 
              x, GSL_FN_EVAL (&amp;F, x), r10, r40);
    }

  gsl_cheb_free (cs);

  return 0;
}
</PRE></DIV>
<P>The output from the program gives the original function, 10-th order 
 approximation and 40-th order approximation, all sampled at intervals of 0.001 
 in <EM>x</EM>. </P>
<HR>
<A name="Chebyshev-Approximation-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Chebyshev-Approximation-Examples" 
rel="previous">Chebyshev Approximation Examples</A>, Up: <A accessKey="u" href="#Chebyshev-Approximations" 
rel="up">Chebyshev Approximations</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-22"></A>
<H3 class="section">30.7 References and Further Reading</H3>
<P>The following paper describes the use of Chebyshev series, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->R. Broucke, “Ten Subroutines for the Manipulation of Chebyshev 
    Series [C1] (Algorithm 446)”. <CITE>Communications of the ACM</CITE> 16(4),  
   254–256 (1973) </LI></UL>
<HR>
<A name="Series-Acceleration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Wavelet-Transforms" 
rel="next">Wavelet Transforms</A>, Previous: <A accessKey="p" href="#Chebyshev-Approximations" 
rel="previous">Chebyshev Approximations</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Series-Acceleration-1"></A>
<H2 class="chapter">31 Series Acceleration</H2><A name="index-acceleration-of-series"></A><A 
name="index-summation_002c-acceleration"></A><A name="index-series_002c-acceleration"></A><A 
name="index-u_002dtransform-for-series"></A><A name="index-Levin-u_002dtransform"></A><A 
name="index-convergence_002c-accelerating-a-series"></A>
<P>The functions described in this chapter accelerate the convergence of a 
 series using the Levin <EM>u</EM>-transform. This method takes a small number 
of  terms from the start of a series and uses a systematic approximation to 
compute  an extrapolated value and an estimate of its error. The 
<EM>u</EM>-transform  works for both convergent and divergent series, including 
asymptotic series. </P>
<P>These functions are declared in the header file <SAMP>gsl_sum.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Acceleration-functions">Acceleration 
            functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Acceleration-functions-without-error-estimation">Acceleration 
            functions without error estimation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Example-of-accelerating-a-series">Example 
            of accelerating a series</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Series-Acceleration-References">Series 
            Acceleration References</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Acceleration-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Acceleration-functions-without-error-estimation" 
rel="next">Acceleration functions without error estimation</A>, Up: <A 
accessKey="u" href="#Series-Acceleration" 
rel="up">Series Acceleration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Acceleration-functions-1"></A>
<H3 class="section">31.1 Acceleration functions</H3>
<P>The following functions compute the full Levin <EM>u</EM>-transform of a 
 series with its error estimate. The error estimate is computed by propagating 
 rounding errors from each term through to the final extrapolation. </P>
<P>These functions are intended for summing analytic series where each term is 
 known to high accuracy, and the rounding errors are assumed to originate from 
 finite precision. They are taken to be relative errors of order 
<CODE>GSL_DBL_EPSILON</CODE> for each term. </P>
<P>The calculation of the error in the extrapolated value is an <EM>O(N^2)</EM> 
 process, which is expensive in time and memory. A faster but less reliable 
 method which estimates the error from the convergence of the extrapolated value 
 is described in the next section. For the method described here a full table of 
 intermediate values and derivatives through to <EM>O(N)</EM> must be computed 
 and stored, but this does give a reliable error estimate. </P>
<DL>
  <DT><A name="index-gsl_005fsum_005flevin_005fu_005falloc"></A>Function:   
  <EM>gsl_sum_levin_u_workspace *</EM> 
  <STRONG>gsl_sum_levin_u_alloc</STRONG><EM>(size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fsum_005flevin_005fu_005fworkspace"></A>
  <P>This function allocates a workspace for a Levin <EM>u</EM>-transform of   
  <VAR>n</VAR> terms. The size of the workspace is <EM>O(2n^2 + 3n)</EM>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsum_005flevin_005fu_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_sum_levin_u_free</STRONG><EM>(gsl_sum_levin_u_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsum_005flevin_005fu_005faccel"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sum_levin_u_accel</STRONG> <EM>(const double *   
  <VAR>array</VAR>, size_t <VAR>array_size</VAR>, gsl_sum_levin_u_workspace *   
  <VAR>w</VAR>, double * <VAR>sum_accel</VAR>, double *   
  <VAR>abserr</VAR>)</EM></DT>
  <DD>
  <P>This function takes the terms of a series in <VAR>array</VAR> of size   
  <VAR>array_size</VAR> and computes the extrapolated limit of the series using  
   a Levin <EM>u</EM>-transform. Additional working space must be provided in   
  <VAR>w</VAR>. The extrapolated sum is stored in <VAR>sum_accel</VAR>, with an  
   estimate of the absolute error stored in <VAR>abserr</VAR>. The actual   
  term-by-term sum is returned in <CODE>w-&gt;sum_plain</CODE>. The algorithm   
  calculates the truncation error (the difference between two successive   
  extrapolations) and round-off error (propagated from the individual terms) to  
   choose an optimal number of terms for the extrapolation. All the terms of the 
    series passed in through <VAR>array</VAR> should be non-zero. </P></DD></DL>
<HR>
<A name="Acceleration-functions-without-error-estimation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-of-accelerating-a-series" 
rel="next">Example of accelerating a series</A>, Previous: <A accessKey="p" 
href="#Acceleration-functions" 
rel="previous">Acceleration functions</A>, Up: <A accessKey="u" href="#Series-Acceleration" 
rel="up">Series Acceleration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Acceleration-functions-without-error-estimation-1"></A>
<H3 class="section">31.2 Acceleration functions without error estimation</H3>
<P>The functions described in this section compute the Levin 
<EM>u</EM>-transform of series and attempt to estimate the error from the 
“truncation error” in the extrapolation, the difference between the final two 
 approximations. Using this method avoids the need to compute an intermediate 
 table of derivatives because the error is estimated from the behavior of the 
 extrapolated value itself. Consequently this algorithm is an <EM>O(N)</EM> 
 process and only requires <EM>O(N)</EM> terms of storage. If the series 
 converges sufficiently fast then this procedure can be acceptable. It is 
 appropriate to use this method when there is a need to compute many 
 extrapolations of series with similar convergence properties at high-speed. For 
 example, when numerically integrating a function defined by a parameterized 
 series where the parameter varies only slightly. A reliable error estimate 
 should be computed first using the full algorithm described above in order to 
 verify the consistency of the results. </P>
<DL>
  <DT><A name="index-gsl_005fsum_005flevin_005futrunc_005falloc"></A>Function:   
  <EM>gsl_sum_levin_utrunc_workspace 
  *</EM><STRONG>gsl_sum_levin_utrunc_alloc</STRONG> <EM>(size_t 
  <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fsum_005flevin_005futrunc_005fworkspace"></A>
  <P>This function allocates a workspace for a Levin <EM>u</EM>-transform of   
  <VAR>n</VAR> terms, without error estimation. The size of the workspace is   
  <EM>O(3n)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsum_005flevin_005futrunc_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_sum_levin_utrunc_free</STRONG><EM>(gsl_sum_levin_utrunc_workspace 
  * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsum_005flevin_005futrunc_005faccel"></A>Function:   
  <EM>int</EM> <STRONG>gsl_sum_levin_utrunc_accel</STRONG> <EM>(const double *   
  <VAR>array</VAR>, size_t <VAR>array_size</VAR>, gsl_sum_levin_utrunc_workspace 
    * <VAR>w</VAR>, double * <VAR>sum_accel</VAR>, double *   
  <VAR>abserr_trunc</VAR>)</EM></DT>
  <DD>
  <P>This function takes the terms of a series in <VAR>array</VAR> of size   
  <VAR>array_size</VAR> and computes the extrapolated limit of the series using  
   a Levin <EM>u</EM>-transform. Additional working space must be provided in   
  <VAR>w</VAR>. The extrapolated sum is stored in <VAR>sum_accel</VAR>. The   
  actual term-by-term sum is returned in <CODE>w-&gt;sum_plain</CODE>. The   
  algorithm terminates when the difference between two successive extrapolations 
    reaches a minimum or is sufficiently small. The difference between these two 
    values is used as estimate of the error and is stored in   
  <VAR>abserr_trunc</VAR>. To improve the reliability of the algorithm the   
  extrapolated values are replaced by moving averages when calculating the   
  truncation error, smoothing out any fluctuations. </P></DD></DL>
<HR>
<A name="Example-of-accelerating-a-series"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Series-Acceleration-References" 
rel="next">Series Acceleration References</A>, Previous: <A accessKey="p" href="#Acceleration-functions-without-error-estimation" 
rel="previous">Acceleration functions without error estimation</A>, Up: <A 
accessKey="u" href="#Series-Acceleration" 
rel="up">Series Acceleration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-22"></A>
<H3 class="section">31.3 Examples</H3>
<P>The following code calculates an estimate of <EM>\zeta(2) = \pi^2 / 6</EM> 
 using the series, </P>
<DIV class="example"><PRE class="example">\zeta(2) = 1 + 1/2^2 + 1/3^2 + 1/4^2 + ...
</PRE></DIV>
<P>After <VAR>N</VAR> terms the error in the sum is <EM>O(1/N)</EM>, making 
 direct summation of the series converge slowly. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_sum.h&gt;

#define N 20

int
main (void)
{
  double t[N];
  double sum_accel, err;
  double sum = 0;
  int n;
  
  gsl_sum_levin_u_workspace * w 
    = gsl_sum_levin_u_alloc (N);

  const double zeta_2 = M_PI * M_PI / 6.0;
  
  /* terms for zeta(2) = \sum_{n=1}^{\infty} 1/n^2 */

  for (n = 0; n &lt; N; n++)
    {
      double np1 = n + 1.0;
      t[n] = 1.0 / (np1 * np1);
      sum += t[n];
    }
  
  gsl_sum_levin_u_accel (t, N, w, &amp;sum_accel, &amp;err);

  printf ("term-by-term sum = % .16f using %d terms\n", 
          sum, N);

  printf ("term-by-term sum = % .16f using %d terms\n", 
          w-&gt;sum_plain, w-&gt;terms_used);

  printf ("exact value      = % .16f\n", zeta_2);
  printf ("accelerated sum  = % .16f using %d terms\n", 
          sum_accel, w-&gt;terms_used);

  printf ("estimated error  = % .16f\n", err);
  printf ("actual error     = % .16f\n", 
          sum_accel - zeta_2);

  gsl_sum_levin_u_free (w);
  return 0;
}
</PRE></DIV>
<P>The output below shows that the Levin <EM>u</EM>-transform is able to obtain 
 an estimate of the sum to 1 part in <EM>10^10</EM> using the first eleven terms 
 of the series. The error estimate returned by the function is also accurate, 
 giving the correct number of significant digits. </P>
<DIV class="example"><PRE class="example">$ ./a.out 
</PRE><PRE class="verbatim">term-by-term sum =  1.5961632439130233 using 20 terms
term-by-term sum =  1.5759958390005426 using 13 terms
exact value      =  1.6449340668482264
accelerated sum  =  1.6449340668166479 using 13 terms
estimated error  =  0.0000000000508580
actual error     = -0.0000000000315785
</PRE></DIV>
<P>Note that a direct summation of this series would require <EM>10^10</EM> 
 terms to achieve the same precision as the accelerated sum does in 13 terms. 
</P>
<HR>
<A name="Series-Acceleration-References"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Example-of-accelerating-a-series" 
rel="previous">Example of accelerating a series</A>, Up: <A accessKey="u" href="#Series-Acceleration" 
rel="up">Series Acceleration</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-23"></A>
<H3 class="section">31.4 References and Further Reading</H3>
<P>The algorithms used by these functions are described in the following papers, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->T. Fessler, W.F. Ford, D.A. Smith, <SMALL>HURRY</SMALL>: An   
  acceleration algorithm for scalar sequences and series <CITE>ACM Transactions  
   on Mathematical Software</CITE>, 9(3):346–354, 1983. and Algorithm 602   
  9(3):355–357, 1983. </LI></UL>
<P>The theory of the <EM>u</EM>-transform was presented by Levin, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->D. Levin, Development of Non-Linear Transformations for   
  Improving Convergence of Sequences, <CITE>Intern. J. Computer Math.</CITE>   
  B3:371–388, 1973. </LI></UL>
<P>A review paper on the Levin Transform is available online, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Herbert H. H. Homeier, Scalar Levin-Type Sequence   
  Transformations, <A 
  href="http://arxiv.org/abs/math/0005209">http://arxiv.org/abs/math/0005209</A>. 
    </LI></UL>
<HR>
<A name="Wavelet-Transforms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Discrete-Hankel-Transforms" 
rel="next">Discrete Hankel Transforms</A>, Previous: <A accessKey="p" href="#Series-Acceleration" 
rel="previous">Series Acceleration</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Wavelet-Transforms-1"></A>
<H2 class="chapter">32 Wavelet Transforms</H2><A name="index-DWT_002c-see-wavelet-transforms"></A><A 
name="index-wavelet-transforms"></A><A name="index-transforms_002c-wavelet"></A>
<P>This chapter describes functions for performing Discrete Wavelet Transforms 
 (DWTs). The library includes wavelets for real data in both one and two 
 dimensions. The wavelet functions are declared in the header files 
<SAMP>gsl_wavelet.h</SAMP> and <SAMP>gsl_wavelet2d.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#DWT-Definitions">DWT 
            Definitions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#DWT-Initialization">DWT 
            Initialization</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#DWT-Transform-Functions">DWT 
            Transform Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#DWT-Examples">DWT 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#DWT-References">DWT 
            References</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="DWT-Definitions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#DWT-Initialization" 
rel="next">DWT Initialization</A>, Up: <A accessKey="u" href="#Wavelet-Transforms" 
rel="up">Wavelet Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Definitions-1"></A>
<H3 class="section">32.1 Definitions</H3><A name="index-DWT_002c-mathematical-definition"></A>
<P>The continuous wavelet transform and its inverse are defined by the 
 relations, </P>
<DIV class="example"><PRE class="example">w(s,\tau) = \int f(t) * \psi^*_{s,\tau}(t) dt
</PRE></DIV>
<P>and, </P>
<DIV class="example"><PRE class="example">f(t) = \int \int_{-\infty}^\infty w(s, \tau) * \psi_{s,\tau}(t) d\tau ds
</PRE></DIV>
<P>where the basis functions <EM>\psi_{s,\tau}</EM> are obtained by scaling and 
 translation from a single function, referred to as the <EM>mother wavelet</EM>. 
</P>
<P>The discrete version of the wavelet transform acts on equally-spaced samples, 
 with fixed scaling and translation steps (<EM>s</EM>, <EM>\tau</EM>). The 
 frequency and time axes are sampled <EM>dyadically</EM> on scales of 
<EM>2^j</EM> through a level parameter <EM>j</EM>. The resulting family of 
 functions <EM>{\psi_{j,n}}</EM> constitutes an orthonormal basis for 
 square-integrable signals. </P>
<P>The discrete wavelet transform is an <EM>O(N)</EM> algorithm, and is also 
 referred to as the <EM>fast wavelet transform</EM>. </P>
<HR>
<A name="DWT-Initialization"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#DWT-Transform-Functions" 
rel="next">DWT Transform Functions</A>, Previous: <A accessKey="p" href="#DWT-Definitions" 
rel="previous">DWT Definitions</A>, Up: <A accessKey="u" href="#Wavelet-Transforms" 
rel="up">Wavelet Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initialization"></A>
<H3 class="section">32.2 Initialization</H3><A 
name="index-DWT-initialization"></A><A 
name="index-gsl_005fwavelet_005ftype"></A>
<P>The <CODE>gsl_wavelet</CODE> structure contains the filter coefficients 
 defining the wavelet and any associated offset parameters. </P>
<DL>
  <DT><A name="index-gsl_005fwavelet_005falloc"></A>Function: <EM>gsl_wavelet   
  *</EM> <STRONG>gsl_wavelet_alloc</STRONG> <EM>(const gsl_wavelet_type *   
  <VAR>T</VAR>, size_t <VAR>k</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fwavelet"></A>
  <P>This function allocates and initializes a wavelet object of type   
  <VAR>T</VAR>. The parameter <VAR>k</VAR> selects the specific member of the   
  wavelet family. A null pointer is returned if insufficient memory is available 
    or if a unsupported member is selected. </P></DD></DL>
<P>The following wavelet types are implemented: </P>
<DL>
  <DT><A name="index-gsl_005fwavelet_005fdaubechies"></A>Wavelet:   
  <STRONG>gsl_wavelet_daubechies</STRONG></DT>
  <DT><A name="index-gsl_005fwavelet_005fdaubechies_005fcentered"></A>Wavelet:   
  <STRONG>gsl_wavelet_daubechies_centered</STRONG></DT>
  <DD><A name="index-Daubechies-wavelets"></A><A name="index-maximal-phase_002c-Daubechies-wavelets"></A>
  <P>This is the Daubechies wavelet family of maximum phase with <EM>k/2</EM>   
  vanishing moments. The implemented wavelets are <EM>k=4, 6, …, 20</EM>, with   
  <VAR>k</VAR> even. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet_005fhaar"></A>Wavelet:   
  <STRONG>gsl_wavelet_haar</STRONG></DT>
  <DT><A name="index-gsl_005fwavelet_005fhaar_005fcentered"></A>Wavelet:   
  <STRONG>gsl_wavelet_haar_centered</STRONG></DT>
  <DD><A name="index-Haar-wavelets"></A>
  <P>This is the Haar wavelet. The only valid choice of <EM>k</EM> for the Haar  
   wavelet is <EM>k=2</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet_005fbspline"></A>Wavelet:   
  <STRONG>gsl_wavelet_bspline</STRONG></DT>
  <DT><A name="index-gsl_005fwavelet_005fbspline_005fcentered"></A>Wavelet:   
  <STRONG>gsl_wavelet_bspline_centered</STRONG></DT>
  <DD><A name="index-biorthogonal-wavelets"></A><A name="index-B_002dspline-wavelets"></A>
  <P>This is the biorthogonal B-spline wavelet family of order <EM>(i,j)</EM>.   
  The implemented values of <EM>k = 100*i + j</EM> are 103, 105, 202, 204, 206,  
   208, 301, 303, 305 307, 309. </P></DD></DL>
<P>The centered forms of the wavelets align the coefficients of the various 
 sub-bands on edges. Thus the resulting visualization of the coefficients of the 
 wavelet transform in the phase plane is easier to understand. </P>
<DL>
  <DT><A name="index-gsl_005fwavelet_005fname"></A>Function: <EM>const char 
  *</EM><STRONG>gsl_wavelet_name</STRONG> <EM>(const gsl_wavelet *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the wavelet family for   
  <VAR>w</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_wavelet_free</STRONG> <EM>(gsl_wavelet * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the wavelet object <VAR>w</VAR>. </P></DD></DL>
<P>The <CODE>gsl_wavelet_workspace</CODE> structure contains scratch space of 
 the same size as the input data and is used to hold intermediate results during 
 the transform. </P>
<DL>
  <DT><A name="index-gsl_005fwavelet_005fworkspace_005falloc"></A>Function:   
  <EM>gsl_wavelet_workspace *</EM> 
  <STRONG>gsl_wavelet_workspace_alloc</STRONG><EM>(size_t 
<VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fwavelet_005fworkspace"></A>
  <P>This function allocates a workspace for the discrete wavelet transform. To  
   perform a one-dimensional transform on <VAR>n</VAR> elements, a workspace of  
   size <VAR>n</VAR> must be provided. For two-dimensional transforms of   
  <VAR>n</VAR>-by-<VAR>n</VAR> matrices it is sufficient to allocate a workspace 
    of size <VAR>n</VAR>, since the transform operates on individual rows and   
  columns. A null pointer is returned if insufficient memory is available.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet_005fworkspace_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_wavelet_workspace_free</STRONG><EM>(gsl_wavelet_workspace * 
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function frees the allocated workspace <VAR>work</VAR>. </P></DD></DL>
<HR>
<A name="DWT-Transform-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#DWT-Examples" 
rel="next">DWT Examples</A>, Previous: <A accessKey="p" href="#DWT-Initialization" 
rel="previous">DWT Initialization</A>, Up: <A accessKey="u" href="#Wavelet-Transforms" 
rel="up">Wavelet Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Transform-Functions"></A>
<H3 class="section">32.3 Transform Functions</H3>
<P>This sections describes the actual functions performing the discrete wavelet 
 transform. Note that the transforms use periodic boundary conditions. If the 
 signal is not periodic in the sample length then spurious coefficients will 
 appear at the beginning and end of each level of the transform. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#DWT-in-one-dimension">DWT 
            in one dimension</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#DWT-in-two-dimension">DWT 
            in two dimension</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="DWT-in-one-dimension"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#DWT-in-two-dimension" 
rel="next">DWT in two dimension</A>, Up: <A accessKey="u" href="#DWT-Transform-Functions" 
rel="up">DWT Transform Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Wavelet-transforms-in-one-dimension"></A>
<H4 class="subsection">32.3.1 Wavelet transforms in one dimension</H4><A name="index-DWT_002c-one-dimensional"></A>
<DL>
  <DT><A name="index-gsl_005fwavelet_005ftransform"></A>Function: 
  <EM>int</EM><STRONG>gsl_wavelet_transform</STRONG> <EM>(const gsl_wavelet * 
  <VAR>w</VAR>,   double * <VAR>data</VAR>, size_t <VAR>stride</VAR>, size_t 
  <VAR>n</VAR>,   gsl_wavelet_direction <VAR>dir</VAR>, gsl_wavelet_workspace *  
   <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fwavelet_005ftransform_005fforward"></A>Function:   
  <EM>int</EM> <STRONG>gsl_wavelet_transform_forward</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, double * <VAR>data</VAR>, size_t   
  <VAR>stride</VAR>, size_t <VAR>n</VAR>, gsl_wavelet_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fwavelet_005ftransform_005finverse"></A>Function:   
  <EM>int</EM> <STRONG>gsl_wavelet_transform_inverse</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, double * <VAR>data</VAR>, size_t   
  <VAR>stride</VAR>, size_t <VAR>n</VAR>, gsl_wavelet_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute in-place forward and inverse discrete wavelet   
  transforms of length <VAR>n</VAR> with stride <VAR>stride</VAR> on the array   
  <VAR>data</VAR>. The length of the transform <VAR>n</VAR> is restricted to   
  powers of two. For the <CODE>transform</CODE> version of the function the   
  argument <VAR>dir</VAR> can be either <CODE>forward</CODE> (<EM>+1</EM>) or   
  <CODE>backward</CODE> (<EM>-1</EM>). A workspace <VAR>work</VAR> of length   
  <VAR>n</VAR> must be provided. </P>
  <P>For the forward transform, the elements of the original array are replaced  
   by the discrete wavelet transform <EM>f_i -&gt; w_{j,k}</EM> in a packed   
  triangular storage layout, where <VAR>j</VAR> is the index of the level <EM>j  
   = 0 ... J-1</EM> and <VAR>k</VAR> is the index of the coefficient within each 
    level, <EM>k = 0 ... (2^j)-1</EM>. The total number of levels is <EM>J =   
  \log_2(n)</EM>. The output data has the following form, </P>
  <DIV class="example"><PRE class="example">(s_{-1,0}, d_{0,0}, d_{1,0}, d_{1,1}, d_{2,0}, ..., 
  d_{j,k}, ..., d_{J-1,2^{J-1}-1}) 
</PRE></DIV>
  <P>where the first element is the smoothing coefficient <EM>s_{-1,0}</EM>,   
  followed by the detail coefficients <EM>d_{j,k}</EM> for each level   
  <EM>j</EM>. The backward transform inverts these coefficients to obtain the   
  original data. </P>
  <P>These functions return a status of <CODE>GSL_SUCCESS</CODE> upon successful 
    completion. <CODE>GSL_EINVAL</CODE> is returned if <VAR>n</VAR> is not an   
  integer power of 2 or if insufficient workspace is provided. </P></DD></DL>
<HR>
<A name="DWT-in-two-dimension"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#DWT-in-one-dimension" 
rel="previous">DWT in one dimension</A>, Up: <A accessKey="u" href="#DWT-Transform-Functions" 
rel="up">DWT Transform Functions</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Wavelet-transforms-in-two-dimension"></A>
<H4 class="subsection">32.3.2 Wavelet transforms in two dimension</H4><A name="index-DWT_002c-two-dimensional"></A>
<P>The library provides functions to perform two-dimensional discrete wavelet 
 transforms on square matrices. The matrix dimensions must be an integer power 
of  two. There are two possible orderings of the rows and columns in the 
 two-dimensional wavelet transform, referred to as the “standard” and 
“non-standard” forms. </P>
<P>The “standard” transform performs a complete discrete wavelet transform on 
 the rows of the matrix, followed by a separate complete discrete wavelet 
 transform on the columns of the resulting row-transformed matrix. This 
procedure  uses the same ordering as a two-dimensional Fourier transform. </P>
<P>The “non-standard” transform is performed in interleaved passes on the rows 
 and columns of the matrix for each level of the transform. The first level of 
 the transform is applied to the matrix rows, and then to the matrix columns. 
 This procedure is then repeated across the rows and columns of the data for the 
 subsequent levels of the transform, until the full discrete wavelet transform 
is  complete. The non-standard form of the discrete wavelet transform is 
typically  used in image analysis. </P>
<P>The functions described in this section are declared in the header file 
<SAMP>gsl_wavelet2d.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005fwavelet2d_005ftransform"></A>Function: 
  <EM>int</EM><STRONG>gsl_wavelet2d_transform</STRONG> <EM>(const gsl_wavelet *  
   <VAR>w</VAR>, double * <VAR>data</VAR>, size_t <VAR>tda</VAR>, size_t   
  <VAR>size1</VAR>, size_t <VAR>size2</VAR>, gsl_wavelet_direction   
  <VAR>dir</VAR>, gsl_wavelet_workspace * <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fwavelet2d_005ftransform_005fforward"></A>Function:  
   <EM>int</EM> <STRONG>gsl_wavelet2d_transform_forward</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, double * <VAR>data</VAR>, size_t <VAR>tda</VAR>,   
  size_t <VAR>size1</VAR>, size_t <VAR>size2</VAR>, gsl_wavelet_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fwavelet2d_005ftransform_005finverse"></A>Function:  
   <EM>int</EM> <STRONG>gsl_wavelet2d_transform_inverse</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, double * <VAR>data</VAR>, size_t <VAR>tda</VAR>,   
  size_t <VAR>size1</VAR>, size_t <VAR>size2</VAR>, gsl_wavelet_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute two-dimensional in-place forward and inverse   
  discrete wavelet transforms in standard form on the array <VAR>data</VAR>   
  stored in row-major form with dimensions <VAR>size1</VAR> and <VAR>size2</VAR> 
    and physical row length <VAR>tda</VAR>. The dimensions must be equal (square 
    matrix) and are restricted to powers of two. For the <CODE>transform</CODE>  
   version of the function the argument <VAR>dir</VAR> can be either   
  <CODE>forward</CODE> (<EM>+1</EM>) or <CODE>backward</CODE> (<EM>-1</EM>). A   
  workspace <VAR>work</VAR> of the appropriate size must be provided. On exit,   
  the appropriate elements of the array <VAR>data</VAR> are replaced by their   
  two-dimensional wavelet transform. </P>
  <P>The functions return a status of <CODE>GSL_SUCCESS</CODE> upon successful   
  completion. <CODE>GSL_EINVAL</CODE> is returned if <VAR>size1</VAR> and   
  <VAR>size2</VAR> are not equal and integer powers of 2, or if insufficient   
  workspace is provided. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet2d_005ftransform_005fmatrix"></A>Function:   
  <EM>int</EM> <STRONG>gsl_wavelet2d_transform_matrix</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, gsl_matrix * <VAR>m</VAR>, gsl_wavelet_direction   
  <VAR>dir</VAR>, gsl_wavelet_workspace * <VAR>work</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fwavelet2d_005ftransform_005fmatrix_005fforward"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_wavelet2d_transform_matrix_forward</STRONG><EM>(const gsl_wavelet 
  * <VAR>w</VAR>, gsl_matrix * <VAR>m</VAR>,   gsl_wavelet_workspace * 
  <VAR>work</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fwavelet2d_005ftransform_005fmatrix_005finverse"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_wavelet2d_transform_matrix_inverse</STRONG><EM>(const gsl_wavelet 
  * <VAR>w</VAR>, gsl_matrix * <VAR>m</VAR>,   gsl_wavelet_workspace * 
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the two-dimensional in-place wavelet transform on a 
    matrix <VAR>a</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet2d_005fnstransform"></A>Function: 
  <EM>int</EM><STRONG>gsl_wavelet2d_nstransform</STRONG> <EM>(const gsl_wavelet 
  *   <VAR>w</VAR>, double * <VAR>data</VAR>, size_t <VAR>tda</VAR>, size_t   
  <VAR>size1</VAR>, size_t <VAR>size2</VAR>, gsl_wavelet_direction   
  <VAR>dir</VAR>, gsl_wavelet_workspace * <VAR>work</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fwavelet2d_005fnstransform_005fforward"></A>Function:   
  <EM>int</EM> <STRONG>gsl_wavelet2d_nstransform_forward</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, double * <VAR>data</VAR>, size_t <VAR>tda</VAR>,   
  size_t <VAR>size1</VAR>, size_t <VAR>size2</VAR>, gsl_wavelet_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fwavelet2d_005fnstransform_005finverse"></A>Function:   
  <EM>int</EM> <STRONG>gsl_wavelet2d_nstransform_inverse</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, double * <VAR>data</VAR>, size_t <VAR>tda</VAR>,   
  size_t <VAR>size1</VAR>, size_t <VAR>size2</VAR>, gsl_wavelet_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the two-dimensional wavelet transform in   
  non-standard form. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fwavelet2d_005fnstransform_005fmatrix"></A>Function: 
    <EM>int</EM> <STRONG>gsl_wavelet2d_nstransform_matrix</STRONG> <EM>(const   
  gsl_wavelet * <VAR>w</VAR>, gsl_matrix * <VAR>m</VAR>, gsl_wavelet_direction   
  <VAR>dir</VAR>, gsl_wavelet_workspace * <VAR>work</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fwavelet2d_005fnstransform_005fmatrix_005fforward"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_wavelet2d_nstransform_matrix_forward</STRONG><EM>(const 
  gsl_wavelet * <VAR>w</VAR>, gsl_matrix * <VAR>m</VAR>,   gsl_wavelet_workspace 
  * <VAR>work</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fwavelet2d_005fnstransform_005fmatrix_005finverse"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_wavelet2d_nstransform_matrix_inverse</STRONG><EM>(const 
  gsl_wavelet * <VAR>w</VAR>, gsl_matrix * <VAR>m</VAR>,   gsl_wavelet_workspace 
  * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>These functions compute the non-standard form of the two-dimensional   
  in-place wavelet transform on a matrix <VAR>a</VAR>. </P></DD></DL>
<HR>
<A name="DWT-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#DWT-References" 
rel="next">DWT References</A>, Previous: <A accessKey="p" href="#DWT-Transform-Functions" 
rel="previous">DWT Transform Functions</A>, Up: <A accessKey="u" href="#Wavelet-Transforms" 
rel="up">Wavelet Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-23"></A>
<H3 class="section">32.4 Examples</H3>
<P>The following program demonstrates the use of the one-dimensional wavelet 
 transform functions. It computes an approximation to an input signal (of length 
 256) using the 20 largest components of the wavelet transform, while setting 
the  others to zero. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_sort.h&gt;
#include &lt;gsl/gsl_wavelet.h&gt;

int
main (int argc, char **argv)
{
  int i, n = 256, nc = 20;
  double *data = malloc (n * sizeof (double));
  double *abscoeff = malloc (n * sizeof (double));
  size_t *p = malloc (n * sizeof (size_t));

  FILE * f;
  gsl_wavelet *w;
  gsl_wavelet_workspace *work;

  w = gsl_wavelet_alloc (gsl_wavelet_daubechies, 4);
  work = gsl_wavelet_workspace_alloc (n);

  f = fopen (argv[1], "r");
  for (i = 0; i &lt; n; i++)
    {
      fscanf (f, "%lg", &amp;data[i]);
    }
  fclose (f);

  gsl_wavelet_transform_forward (w, data, 1, n, work);

  for (i = 0; i &lt; n; i++)
    {
      abscoeff[i] = fabs (data[i]);
    }
  
  gsl_sort_index (p, abscoeff, 1, n);
  
  for (i = 0; (i + nc) &lt; n; i++)
    data[p[i]] = 0;
  
  gsl_wavelet_transform_inverse (w, data, 1, n, work);
  
  for (i = 0; i &lt; n; i++)
    {
      printf ("%g\n", data[i]);
    }
  
  gsl_wavelet_free (w);
  gsl_wavelet_workspace_free (work);

  free (data);
  free (abscoeff);
  free (p);
  return 0;
}
</PRE></DIV>
<P>The output can be used with the <SMALL>GNU</SMALL> plotutils 
<CODE>graph</CODE> program, </P>
<DIV class="example"><PRE class="example">$ ./a.out ecg.dat &gt; dwt.dat
$ graph -T ps -x 0 256 32 -h 0.3 -a dwt.dat &gt; dwt.ps
</PRE></DIV>
<HR>
<A name="DWT-References"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#DWT-Examples" 
rel="previous">DWT Examples</A>, Up: <A accessKey="u" href="#Wavelet-Transforms" 
rel="up">Wavelet Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-24"></A>
<H3 class="section">32.5 References and Further Reading</H3>
<P>The mathematical background to wavelet transforms is covered in the original 
 lectures by Daubechies, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Ingrid Daubechies. Ten Lectures on Wavelets. <CITE>CBMS-NSF   
  Regional Conference Series in Applied Mathematics</CITE> (1992), SIAM, ISBN   
  0898712742. </LI></UL>
<P>An easy to read introduction to the subject with an emphasis on the 
 application of the wavelet transform in various branches of science is, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Paul S. Addison. <CITE>The Illustrated Wavelet Transform   
  Handbook</CITE>. Institute of Physics Publishing (2002), ISBN 0750306920. 
</LI></UL>
<P>For extensive coverage of signal analysis by wavelets, wavelet packets and 
 local cosine bases see, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->S. G. Mallat. <CITE>A wavelet tour of signal processing</CITE> 
    (Second edition). Academic Press (1999), ISBN 012466606X. </LI></UL>
<P>The concept of multiresolution analysis underlying the wavelet transform is 
 described in, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->S. G. Mallat. Multiresolution Approximations and Wavelet   
  Orthonormal Bases of L<EM>^2</EM>(R). <CITE>Transactions of the American   
  Mathematical Society</CITE>, 315(1), 1989, 69–87. </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w -->S. G. Mallat. A Theory for Multiresolution Signal   
  Decomposition—The Wavelet Representation. <CITE>IEEE Transactions on Pattern   
  Analysis and Machine Intelligence</CITE>, 11, 1989, 674–693. </LI></UL>
<P>The coefficients for the individual wavelet families implemented by the 
 library can be found in the following papers, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->I. Daubechies. Orthonormal Bases of Compactly Supported   
  Wavelets. <CITE>Communications on Pure and Applied Mathematics</CITE>, 41   
  (1988) 909–996. </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w -->A. Cohen, I. Daubechies, and J.-C. Feauveau. Biorthogonal   
  Bases of Compactly Supported Wavelets. <CITE>Communications on Pure and   
  Applied Mathematics</CITE>, 45 (1992) 485–560. </LI></UL>
<P>The PhysioNet archive of physiological datasets can be found online at <A 
href="http://www.physionet.org/">http://www.physionet.org/</A> and is described 
 in the following paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Goldberger et al. PhysioBank, PhysioToolkit, and PhysioNet:   
  Components of a New Research Resource for Complex Physiologic Signals.   
  <CITE>Circulation</CITE> 101(23):e215-e220 2000. </LI></UL>
<HR>
<A name="Discrete-Hankel-Transforms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#One-dimensional-Root_002dFinding" 
rel="next">One dimensional Root-Finding</A>, Previous: <A accessKey="p" href="#Wavelet-Transforms" 
rel="previous">Wavelet Transforms</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Discrete-Hankel-Transforms-1"></A>
<H2 class="chapter">33 Discrete Hankel Transforms</H2><A name="index-discrete-Hankel-transforms"></A><A 
name="index-Hankel-transforms_002c-discrete"></A><A name="index-transforms_002c-Hankel"></A>
<P>This chapter describes functions for performing Discrete Hankel Transforms 
 (DHTs). The functions are declared in the header file <SAMP>gsl_dht.h</SAMP>. 
</P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Discrete-Hankel-Transform-Definition">Discrete 
            Hankel Transform Definition</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Discrete-Hankel-Transform-References">Discrete 
            Hankel Transform References</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Discrete-Hankel-Transform-Definition"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Discrete-Hankel-Transform-Functions" 
rel="next">Discrete Hankel Transform Functions</A>, Up: <A accessKey="u" href="#Discrete-Hankel-Transforms" 
rel="up">Discrete Hankel Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Definitions-2"></A>
<H3 class="section">33.1 Definitions</H3>
<P>The discrete Hankel transform acts on a vector of sampled data, where the 
 samples are assumed to have been taken at points related to the zeros of a 
 Bessel function of fixed order; compare this to the case of the discrete 
Fourier  transform, where samples are taken at points related to the zeroes of 
the sine  or cosine function. </P>
<P>Starting with its definition, the Hankel transform (or Bessel transform) of 
 order <EM>\nu</EM> of a function <EM>f</EM> with <EM>\nu &gt; -1/2</EM> is 
 defined as (see Johnson, 1987 and Lemoine, 1994) </P>
<DIV class="example"><PRE class="example">F_\nu(u) = \int_0^\infty f(t) J_\nu(u t) t dt
</PRE></DIV>
<P>If the integral exists, <EM>F_\nu</EM> is called the Hankel transformation of 
<EM>f</EM>. The reverse transform is given by </P>
<DIV class="example"><PRE class="example">f(t) = \int_0^\infty F_\nu(u) J_\nu(u t) u du ,
</PRE></DIV>
<P>where <EM>\int_0^\infty f(t) t^{1/2} dt</EM> must exist and be absolutely 
 convergent, and where <EM>f(t)</EM> satisfies Dirichlet’s conditions (of 
limited  total fluctuations) in the interval <EM>[0,\infty]</EM>. </P>
<P>Now the discrete Hankel transform works on a discrete function <EM>f</EM>, 
 which is sampled on points <EM>n=1...M</EM> located at positions 
<EM>t_n=(j_{\nu,n}/j_{\nu,M}) X</EM> in real space and at 
<EM>u_n=j_{\nu,n}/X</EM> in reciprocal space. Here, <EM>j_{\nu,m}</EM> are the 
 m-th zeros of the Bessel function <EM>J_\nu(x)</EM> arranged in ascending 
order.  Moreover, the discrete functions are assumed to be band limited, so 
<EM>f(t_n)=0</EM> and <EM>F(u_n)=0</EM> for <EM>n&gt;M</EM>. Accordingly, the 
 function <EM>f</EM> is defined on the interval <EM>[0,X]</EM>. </P>
<P>Following the work of Johnson, 1987 and Lemoine, 1994, the discrete Hankel 
 transform is given by </P>
<DIV class="example"><PRE class="example">F_\nu(u_m) = (2 X^2 / j_(\nu,M)^2)
      \sum_{k=1}^{M-1} f(j_(\nu,k) X/j_(\nu,M))
          (J_\nu(j_(\nu,m) j_(\nu,k) / j_(\nu,M)) / J_(\nu+1)(j_(\nu,k))^2).
</PRE></DIV>
<P>It is this discrete expression which defines the discrete Hankel transform 
 calculated by GSL. In GSL, forward and backward transforms are defined equally 
 and calculate <EM>F_\nu(u_m)</EM>. Following Johnson, the backward transform 
 reads </P>
<DIV class="example"><PRE class="example">f(t_k) = (2 / X^2)
      \sum_{m=1}^{M-1} F(j_(\nu,m)/X)
          (J_\nu(j_(\nu,m) j_(\nu,k) / j_(\nu,M)) / J_(\nu+1)(j_(\nu,m))^2).
</PRE></DIV>
<P>Obviously, using the forward transform instead of the backward transform 
 gives an additional factor <EM>X^4/j_{\nu,M}^2=t_m^2/u_m^2</EM>. </P>
<P>The kernel in the summation above defines the matrix of the 
<EM>\nu</EM>-Hankel transform of size <EM>M-1</EM>. The coefficients of this 
 matrix, being dependent on <EM>\nu</EM> and <EM>M</EM>, must be precomputed and 
 stored; the <CODE>gsl_dht</CODE> object encapsulates this data. The allocation 
 function <CODE>gsl_dht_alloc</CODE> returns a <CODE>gsl_dht</CODE> object which 
 must be properly initialized with <CODE>gsl_dht_init</CODE> before it can be 
 used to perform transforms on data sample vectors, for fixed <EM>\nu</EM> and 
<EM>M</EM>, using the <CODE>gsl_dht_apply</CODE> function. The implementation 
 allows to define the length <EM>X</EM> of the fundamental interval, for 
 convenience, while discrete Hankel transforms are often defined on the unit 
 interval instead of <EM>[0,X]</EM>. </P>
<P>Notice that by assumption <EM>f(t)</EM> vanishes at the endpoints of the 
 interval, consistent with the inversion formula and the sampling formula given 
 above. Therefore, this transform corresponds to an orthogonal expansion in 
 eigenfunctions of the Dirichlet problem for the Bessel differential equation. 
</P>
<HR>
<A name="Discrete-Hankel-Transform-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Discrete-Hankel-Transform-References" 
rel="next">Discrete Hankel Transform References</A>, Previous: <A accessKey="p" 
href="#Discrete-Hankel-Transform-Definition" 
rel="previous">Discrete Hankel Transform Definition</A>, Up: <A accessKey="u" 
href="#Discrete-Hankel-Transforms" 
rel="up">Discrete Hankel Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Functions-1"></A>
<H3 class="section">33.2 Functions</H3>
<DL>
  <DT><A name="index-gsl_005fdht_005falloc"></A>Function: <EM>gsl_dht 
  *</EM><STRONG>gsl_dht_alloc</STRONG> <EM>(size_t <VAR>size</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fdht"></A>
  <P>This function allocates a Discrete Hankel transform object of size   
  <VAR>size</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fdht_005finit"></A>Function: 
  <EM>int</EM><STRONG>gsl_dht_init</STRONG> <EM>(gsl_dht * <VAR>t</VAR>, double  
   <VAR>nu</VAR>, double <VAR>xmax</VAR>)</EM></DT>
  <DD>
  <P>This function initializes the transform <VAR>t</VAR> for the given values   
  of <VAR>nu</VAR> and <VAR>xmax</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fdht_005fnew"></A>Function: <EM>gsl_dht 
  *</EM><STRONG>gsl_dht_new</STRONG> <EM>(size_t <VAR>size</VAR>, double   
  <VAR>nu</VAR>, double <VAR>xmax</VAR>)</EM></DT>
  <DD>
  <P>This function allocates a Discrete Hankel transform object of size   
  <VAR>size</VAR> and initializes it for the given values of <VAR>nu</VAR> and   
  <VAR>xmax</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fdht_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_dht_free</STRONG> <EM>(gsl_dht * 
  <VAR>t</VAR>)</EM></DT>
  <DD>
  <P>This function frees the transform <VAR>t</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fdht_005fapply"></A>Function: 
  <EM>int</EM><STRONG>gsl_dht_apply</STRONG> <EM>(const gsl_dht * <VAR>t</VAR>, 
  double *   <VAR>f_in</VAR>, double * <VAR>f_out</VAR>)</EM></DT>
  <DD>
  <P>This function applies the transform <VAR>t</VAR> to the array   
  <VAR>f_in</VAR> whose size is equal to the size of the transform. The result   
  is stored in the array <VAR>f_out</VAR> which must be of the same length. </P>
  <P>Applying this function to its output gives the original data multiplied by  
   <EM>(1/j_(\nu,M))^2</EM>, up to numerical errors. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fdht_005fx_005fsample"></A>Function: 
  <EM>double</EM><STRONG>gsl_dht_x_sample</STRONG> <EM>(const gsl_dht * 
  <VAR>t</VAR>, int   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value of the <VAR>n</VAR>-th sample point in the  
   unit interval, <EM>(j_{\nu,n+1}/j_{\nu,M}) X</EM>. These are the points where 
    the function <EM>f(t)</EM> is assumed to be sampled. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fdht_005fk_005fsample"></A>Function: 
  <EM>double</EM><STRONG>gsl_dht_k_sample</STRONG> <EM>(const gsl_dht * 
  <VAR>t</VAR>, int   <VAR>n</VAR>)</EM></DT>
  <DD>
  <P>This function returns the value of the <VAR>n</VAR>-th sample point in   
  “k-space”, <EM>j_{\nu,n+1}/X</EM>. </P></DD></DL>
<HR>
<A name="Discrete-Hankel-Transform-References"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Discrete-Hankel-Transform-Functions" 
rel="previous">Discrete Hankel Transform Functions</A>, Up: <A accessKey="u" 
href="#Discrete-Hankel-Transforms" 
rel="up">Discrete Hankel Transforms</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-25"></A>
<H3 class="section">33.3 References and Further Reading</H3>
<P>The algorithms used by these functions are described in the following papers, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->H. Fisk Johnson, Comp. Phys. Comm. 43, 181 (1987). </LI></UL>
<UL class="no-bullet">
  <LI><!-- /@w -->D. Lemoine, J. Chem. Phys. 101, 3936 (1994). </LI></UL>
<HR>
<A name="One-dimensional-Root_002dFinding"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#One-dimensional-Minimization" 
rel="next">One dimensional Minimization</A>, Previous: <A accessKey="p" href="#Discrete-Hankel-Transforms" 
rel="previous">Discrete Hankel Transforms</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="One-dimensional-Root_002dFinding-1"></A>
<H2 class="chapter">34 One dimensional Root-Finding</H2><A name="index-root-finding"></A><A 
name="index-zero-finding"></A><A name="index-finding-roots"></A><A name="index-finding-zeros"></A><A 
name="index-roots"></A><A name="index-solving-a-nonlinear-equation"></A><A name="index-nonlinear-equation_002c-solutions-of"></A>
<P>This chapter describes routines for finding roots of arbitrary 
 one-dimensional functions. The library provides low level components for a 
 variety of iterative solvers and convergence tests. These can be combined by 
the  user to achieve the desired solution, with full access to the intermediate 
steps  of the iteration. Each class of methods uses the same framework, so that 
you can  switch between solvers at runtime without needing to recompile your 
program.  Each instance of a solver keeps track of its own state, allowing the 
solvers to  be used in multi-threaded programs. </P>
<P>The header file <SAMP>gsl_roots.h</SAMP> contains prototypes for the root 
 finding functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Root-Finding-Overview">Root 
            Finding Overview</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Root-Finding-Caveats">Root 
            Finding Caveats</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Initializing-the-Solver">Initializing 
            the Solver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Providing-the-function-to-solve">Providing 
            the function to solve</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Search-Bounds-and-Guesses">Search 
            Bounds and Guesses</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Root-Finding-Iteration">Root 
            Finding Iteration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Search-Stopping-Parameters">Search 
            Stopping Parameters</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Root-Finding-Examples">Root 
            Finding Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Root-Finding-References-and-Further-Reading">Root 
            Finding References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Root-Finding-Overview"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Root-Finding-Caveats" 
rel="next">Root Finding Caveats</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview"></A>
<H3 class="section">34.1 Overview</H3><A 
name="index-root-finding_002c-overview"></A>
<P>One-dimensional root finding algorithms can be divided into two classes, 
<EM>root bracketing</EM> and <EM>root polishing</EM>. Algorithms which proceed 
 by bracketing a root are guaranteed to converge. Bracketing algorithms begin 
 with a bounded region known to contain a root. The size of this bounded region 
 is reduced, iteratively, until it encloses the root to a desired tolerance. 
This  provides a rigorous error estimate for the location of the root. </P>
<P>The technique of <EM>root polishing</EM> attempts to improve an initial guess 
 to the root. These algorithms converge only if started “close enough” to a 
root,  and sacrifice a rigorous error bound for speed. By approximating the 
behavior of  a function in the vicinity of a root they attempt to find a higher 
order  improvement of an initial guess. When the behavior of the function is 
compatible  with the algorithm and a good initial guess is available a polishing 
algorithm  can provide rapid convergence. </P>
<P>In GSL both types of algorithm are available in similar frameworks. The user 
 provides a high-level driver for the algorithms, and the library provides the 
 individual functions necessary for each of the steps. There are three main 
 phases of the iteration. The steps are, </P>
<UL>
  <LI>initialize solver state, <VAR>s</VAR>, for algorithm <VAR>T</VAR> </LI>
  <LI>update <VAR>s</VAR> using the iteration <VAR>T</VAR> </LI>
  <LI>test <VAR>s</VAR> for convergence, and repeat iteration if necessary 
</LI></UL>
<P>The state for bracketing solvers is held in a <CODE>gsl_root_fsolver</CODE> 
 struct. The updating procedure uses only function evaluations (not 
derivatives).  The state for root polishing solvers is held in a 
<CODE>gsl_root_fdfsolver</CODE> struct. The updates require both the function 
 and its derivative (hence the name <CODE>fdf</CODE>) to be supplied by the 
user. </P>
<HR>
<A name="Root-Finding-Caveats"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-the-Solver" 
rel="next">Initializing the Solver</A>, Previous: <A accessKey="p" href="#Root-Finding-Overview" 
rel="previous">Root Finding Overview</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Caveats"></A>
<H3 class="section">34.2 Caveats</H3><A 
name="index-root-finding_002c-caveats"></A>
<P>Note that root finding functions can only search for one root at a time. When 
 there are several roots in the search area, the first root to be found will be 
 returned; however it is difficult to predict which of the roots this will be. 
<EM>In most cases, no error will be reported if you try to find a root in an 
 area where there is more than one.</EM> </P>
<P>Care must be taken when a function may have a multiple root (such as <EM>f(x) 
 = (x-x_0)^2</EM> or <EM>f(x) = (x-x_0)^3</EM>). It is not possible to use 
 root-bracketing algorithms on even-multiplicity roots. For these algorithms the 
 initial interval must contain a zero-crossing, where the function is negative 
at  one end of the interval and positive at the other end. Roots with 
 even-multiplicity do not cross zero, but only touch it instantaneously. 
 Algorithms based on root bracketing will still work for odd-multiplicity roots 
 (e.g. cubic, quintic, …). Root polishing algorithms generally work with higher 
 multiplicity roots, but at a reduced rate of convergence. In these cases the 
<EM>Steffenson algorithm</EM> can be used to accelerate the convergence of 
 multiple roots. </P>
<P>While it is not absolutely required that <EM>f</EM> have a root within the 
 search region, numerical root finding functions should not be used haphazardly 
 to check for the <EM>existence</EM> of roots. There are better ways to do this. 
 Because it is easy to create situations where numerical root finders can fail, 
 it is a bad idea to throw a root finder at a function you do not know much 
 about. In general it is best to examine the function visually by plotting 
before  searching for a root. </P>
<HR>
<A name="Initializing-the-Solver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Providing-the-function-to-solve" 
rel="next">Providing the function to solve</A>, Previous: <A accessKey="p" href="#Root-Finding-Caveats" 
rel="previous">Root Finding Caveats</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-Solver-1"></A>
<H3 class="section">34.3 Initializing the Solver</H3>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005falloc"></A>Function:   
  <EM>gsl_root_fsolver *</EM> <STRONG>gsl_root_fsolver_alloc</STRONG> <EM>(const 
    gsl_root_fsolver_type * <VAR>T</VAR>)</EM></DT>
  <DD><A name="index-gsl_005froot_005ffsolver"></A><A name="index-gsl_005froot_005ffsolver_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a solver   
  of type <VAR>T</VAR>. For example, the following code creates an instance of a 
    bisection solver, </P>
  <DIV class="example"><PRE class="example">const gsl_root_fsolver_type * T 
  = gsl_root_fsolver_bisection;
gsl_root_fsolver * s 
  = gsl_root_fsolver_alloc (T);
</PRE></DIV>
  <P>If there is insufficient memory to create the solver then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005falloc"></A>Function:   
  <EM>gsl_root_fdfsolver *</EM> 
  <STRONG>gsl_root_fdfsolver_alloc</STRONG><EM>(const gsl_root_fdfsolver_type * 
  <VAR>T</VAR>)</EM></DT>
  <DD><A name="index-gsl_005froot_005ffdfsolver"></A><A name="index-gsl_005froot_005ffdfsolver_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a   
  derivative-based solver of type <VAR>T</VAR>. For example, the following code  
   creates an instance of a Newton-Raphson solver, </P>
  <DIV class="example"><PRE class="example">const gsl_root_fdfsolver_type * T 
  = gsl_root_fdfsolver_newton;
gsl_root_fdfsolver * s 
  = gsl_root_fdfsolver_alloc (T);
</PRE></DIV>
  <P>If there is insufficient memory to create the solver then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005fset"></A>Function: 
  <EM>int</EM><STRONG>gsl_root_fsolver_set</STRONG> <EM>(gsl_root_fsolver * 
  <VAR>s</VAR>,   gsl_function * <VAR>f</VAR>, double <VAR>x_lower</VAR>, double 
    <VAR>x_upper</VAR>)</EM></DT>
  <DD>
  <P>This function initializes, or reinitializes, an existing solver   
  <VAR>s</VAR> to use the function <VAR>f</VAR> and the initial search interval  
   [<VAR>x_lower</VAR>, <VAR>x_upper</VAR>]. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005fset"></A>Function:   
  <EM>int</EM> <STRONG>gsl_root_fdfsolver_set</STRONG> <EM>(gsl_root_fdfsolver * 
    <VAR>s</VAR>, gsl_function_fdf * <VAR>fdf</VAR>, double   
  <VAR>root</VAR>)</EM></DT>
  <DD>
  <P>This function initializes, or reinitializes, an existing solver   
  <VAR>s</VAR> to use the function and derivative <VAR>fdf</VAR> and the initial 
    guess <VAR>root</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_root_fsolver_free</STRONG> <EM>(gsl_root_fsolver *   
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_root_fdfsolver_free</STRONG> <EM>(gsl_root_fdfsolver 
    * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions free all the memory associated with the solver   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005fname"></A>Function: <EM>const  
   char *</EM> <STRONG>gsl_root_fsolver_name</STRONG> <EM>(const 
  gsl_root_fsolver   * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005fname"></A>Function: 
  <EM>const   char *</EM> <STRONG>gsl_root_fdfsolver_name</STRONG> <EM>(const   
  gsl_root_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the name of the solver. For example,   
  </P>
  <DIV class="example"><PRE class="example">printf ("s is a '%s' solver\n",
        gsl_root_fsolver_name (s));
</PRE></DIV>
  <P>would print something like <CODE>s is a 'bisection' solver</CODE>. 
</P></DD></DL>
<HR>
<A name="Providing-the-function-to-solve"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Search-Bounds-and-Guesses" 
rel="next">Search Bounds and Guesses</A>, Previous: <A accessKey="p" href="#Initializing-the-Solver" 
rel="previous">Initializing the Solver</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Providing-the-function-to-solve-1"></A>
<H3 class="section">34.4 Providing the function to solve</H3><A name="index-root-finding_002c-providing-a-function-to-solve"></A>
<P>You must provide a continuous function of one variable for the root finders 
 to operate on, and, sometimes, its first derivative. In order to allow for 
 general parameters the functions are defined by the following data types: </P>
<DL>
  <DT><A name="index-gsl_005ffunction"></A>Data Type:   
  <STRONG>gsl_function</STRONG></DT>
  <DD>
  <P>This data type defines a general function with parameters. </P>
  <DL compact="">
    <DT><CODE>double (* function) (double <VAR>x</VAR>, void *     
    <VAR>params</VAR>)</CODE></DT>
    <DD>
    <P>this function should return the value <EM>f(x,params)</EM> for argument   
      <VAR>x</VAR> and parameters <VAR>params</VAR> </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function </P></DD></DL></DD></DL>
<P>Here is an example for the general quadratic function, </P>
<DIV class="example"><PRE class="example">f(x) = a x^2 + b x + c
</PRE></DIV>
<P>with <EM>a = 3</EM>, <EM>b = 2</EM>, <EM>c = 1</EM>. The following code 
 defines a <CODE>gsl_function</CODE> <CODE>F</CODE> which you could pass to a 
 root finder as a function pointer: </P>
<DIV class="example"><PRE class="example">struct my_f_params { double a; double b; double c; };

double
my_f (double x, void * p) {
   struct my_f_params * params 
     = (struct my_f_params *)p;
   double a = (params-&gt;a);
   double b = (params-&gt;b);
   double c = (params-&gt;c);

   return  (a * x + b) * x + c;
}

gsl_function F;
struct my_f_params params = { 3.0, 2.0, 1.0 };

F.function = &amp;my_f;
F.params = &amp;params;
</PRE></DIV>
<P>The function <EM>f(x)</EM> can be evaluated using the macro 
<CODE>GSL_FN_EVAL(&amp;F,x)</CODE> defined in <SAMP>gsl_math.h</SAMP>. </P>
<DL>
  <DT><A name="index-gsl_005ffunction_005ffdf"></A>Data Type:   
  <STRONG>gsl_function_fdf</STRONG></DT>
  <DD>
  <P>This data type defines a general function with parameters and its first   
  derivative. </P>
  <DL compact="">
    <DT><CODE>double (* f) (double <VAR>x</VAR>, void *     
    <VAR>params</VAR>)</CODE></DT>
    <DD>
    <P>this function should return the value of <EM>f(x,params)</EM> for     
    argument <VAR>x</VAR> and parameters <VAR>params</VAR> </P></DD>
    <DT><CODE>double (* df) (double <VAR>x</VAR>, void *     
    <VAR>params</VAR>)</CODE></DT>
    <DD>
    <P>this function should return the value of the derivative of <VAR>f</VAR>   
      with respect to <VAR>x</VAR>, <EM>f'(x,params)</EM>, for argument     
    <VAR>x</VAR> and parameters <VAR>params</VAR> </P></DD>
    <DT><CODE>void (* fdf) (double <VAR>x</VAR>, void * <VAR>params</VAR>,     
    double * <VAR>f</VAR>, double * <VAR>df</VAR>)</CODE></DT>
    <DD>
    <P>this function should set the values of the function <VAR>f</VAR> to     
    <EM>f(x,params)</EM> and its derivative <VAR>df</VAR> to     
    <EM>f'(x,params)</EM> for argument <VAR>x</VAR> and parameters     
    <VAR>params</VAR>. This function provides an optimization of the separate    
     functions for <EM>f(x)</EM> and <EM>f'(x)</EM>—it is always faster to     
    compute the function and its derivative at the same time. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function </P></DD></DL></DD></DL>
<P>Here is an example where <EM>f(x) = 2\exp(2x)</EM>: </P>
<DIV class="example"><PRE class="example">double
my_f (double x, void * params)
{
   return exp (2 * x);
}

double
my_df (double x, void * params)
{
   return 2 * exp (2 * x);
}

void
my_fdf (double x, void * params, 
        double * f, double * df)
{
   double t = exp (2 * x);

   *f = t;
   *df = 2 * t;   /* uses existing value */
}

gsl_function_fdf FDF;

FDF.f = &amp;my_f;
FDF.df = &amp;my_df;
FDF.fdf = &amp;my_fdf;
FDF.params = 0;
</PRE></DIV>
<P>The function <EM>f(x)</EM> can be evaluated using the macro 
<CODE>GSL_FN_FDF_EVAL_F(&amp;FDF,x)</CODE> and the derivative <EM>f'(x)</EM> can 
 be evaluated using the macro <CODE>GSL_FN_FDF_EVAL_DF(&amp;FDF,x)</CODE>. Both 
 the function <EM>y = f(x)</EM> and its derivative <EM>dy = f'(x)</EM> can be 
 evaluated at the same time using the macro 
<CODE>GSL_FN_FDF_EVAL_F_DF(&amp;FDF,x,y,dy)</CODE>. The macro stores 
<EM>f(x)</EM> in its <VAR>y</VAR> argument and <EM>f'(x)</EM> in its 
<VAR>dy</VAR> argument—both of these should be pointers to <CODE>double</CODE>. 
</P>
<HR>
<A name="Search-Bounds-and-Guesses"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Root-Finding-Iteration" 
rel="next">Root Finding Iteration</A>, Previous: <A accessKey="p" href="#Providing-the-function-to-solve" 
rel="previous">Providing the function to solve</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Search-Bounds-and-Guesses-1"></A>
<H3 class="section">34.5 Search Bounds and Guesses</H3><A name="index-root-finding_002c-search-bounds"></A><A 
name="index-root-finding_002c-initial-guess"></A>
<P>You provide either search bounds or an initial guess; this section explains 
 how search bounds and guesses work and how function arguments control them. 
</P>
<P>A guess is simply an <EM>x</EM> value which is iterated until it is within 
 the desired precision of a root. It takes the form of a <CODE>double</CODE>. 
</P>
<P>Search bounds are the endpoints of an interval which is iterated until the 
 length of the interval is smaller than the requested precision. The interval is 
 defined by two values, the lower limit and the upper limit. Whether the 
 endpoints are intended to be included in the interval or not depends on the 
 context in which the interval is used. </P>
<HR>
<A name="Root-Finding-Iteration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Search-Stopping-Parameters" 
rel="next">Search Stopping Parameters</A>, Previous: <A accessKey="p" href="#Search-Bounds-and-Guesses" 
rel="previous">Search Bounds and Guesses</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Iteration"></A>
<H3 class="section">34.6 Iteration</H3>
<P>The following functions drive the iteration of each algorithm. Each function 
 performs one iteration to update the state of any solver of the corresponding 
 type. The same functions work for all solvers so that different methods can be 
 substituted at runtime without modifications to the code. </P>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005fiterate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_root_fsolver_iterate</STRONG> <EM>(gsl_root_fsolver * 
    <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_root_fdfsolver_iterate</STRONG><EM>(gsl_root_fdfsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions perform a single iteration of the solver <VAR>s</VAR>. If   
  the iteration encounters an unexpected problem then an error code will be   
  returned, </P>
  <DL compact="">
    <DT><CODE>GSL_EBADFUNC</CODE></DT>
    <DD>
    <P>the iteration encountered a singular point where the function or its     
    derivative evaluated to <CODE>Inf</CODE> or <CODE>NaN</CODE>. </P></DD>
    <DT><CODE>GSL_EZERODIV</CODE></DT>
    <DD>
    <P>the derivative of the function vanished at the iteration point,     
    preventing the algorithm from continuing without a division by zero.     
    </P></DD></DL></DD></DL>
<P>The solver maintains a current best estimate of the root at all times. The 
 bracketing solvers also keep track of the current best interval bounding the 
 root. This information can be accessed with the following auxiliary functions, 
</P>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005froot"></A>Function:   
  <EM>double</EM> <STRONG>gsl_root_fsolver_root</STRONG> <EM>(const   
  gsl_root_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005froot"></A>Function:   
  <EM>double</EM> <STRONG>gsl_root_fdfsolver_root</STRONG> <EM>(const   
  gsl_root_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current estimate of the root for the solver   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005fx_005flower"></A>Function:   
  <EM>double</EM> <STRONG>gsl_root_fsolver_x_lower</STRONG> <EM>(const   
  gsl_root_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005froot_005ffsolver_005fx_005fupper"></A>Function:   
  <EM>double</EM> <STRONG>gsl_root_fsolver_x_upper</STRONG> <EM>(const   
  gsl_root_fsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current bracketing interval for the solver   
  <VAR>s</VAR>. </P></DD></DL>
<HR>
<A name="Search-Stopping-Parameters"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Root-Bracketing-Algorithms" 
rel="next">Root Bracketing Algorithms</A>, Previous: <A accessKey="p" href="#Root-Finding-Iteration" 
rel="previous">Root Finding Iteration</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Search-Stopping-Parameters-1"></A>
<H3 class="section">34.7 Search Stopping Parameters</H3><A name="index-root-finding_002c-stopping-parameters"></A>
<P>A root finding procedure should stop when one of the following conditions is 
 true: </P>
<UL>
  <LI>A root has been found to within the user-specified precision. </LI>
  <LI>A user-specified maximum number of iterations has been reached. </LI>
  <LI>An error has occurred. </LI></UL>
<P>The handling of these conditions is under user control. The functions below 
 allow the user to test the precision of the current result in several standard 
 ways. </P>
<DL>
  <DT><A name="index-gsl_005froot_005ftest_005finterval"></A>Function:   
  <EM>int</EM> <STRONG>gsl_root_test_interval</STRONG> <EM>(double   
  <VAR>x_lower</VAR>, double <VAR>x_upper</VAR>, double <VAR>epsabs</VAR>,   
  double <VAR>epsrel</VAR>)</EM></DT>
  <DD>
  <P>This function tests for the convergence of the interval   
  [<VAR>x_lower</VAR>, <VAR>x_upper</VAR>] with absolute error <VAR>epsabs</VAR> 
    and relative error <VAR>epsrel</VAR>. The test returns   
  <CODE>GSL_SUCCESS</CODE> if the following condition is achieved, </P>
  <DIV class="example"><PRE class="example">|a - b| &lt; epsabs + epsrel min(|a|,|b|) 
</PRE></DIV>
  <P>when the interval <EM>x = [a,b]</EM> does not include the origin. If the   
  interval includes the origin then <EM>\min(|a|,|b|)</EM> is replaced by zero   
  (which is the minimum value of <EM>|x|</EM> over the interval). This ensures   
  that the relative error is accurately estimated for roots close to the origin. 
    </P>
  <P>This condition on the interval also implies that any estimate of the root   
  <EM>r</EM> in the interval satisfies the same condition with respect to the   
  true root <EM>r^*</EM>, </P>
  <DIV class="example"><PRE class="example">|r - r^*| &lt; epsabs + epsrel r^*
</PRE></DIV>
  <P>assuming that the true root <EM>r^*</EM> is contained within the interval.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ftest_005fdelta"></A>Function: 
  <EM>int</EM><STRONG>gsl_root_test_delta</STRONG> <EM>(double <VAR>x1</VAR>, 
  double   <VAR>x0</VAR>, double <VAR>epsabs</VAR>, double 
  <VAR>epsrel</VAR>)</EM></DT>
  <DD>
  <P>This function tests for the convergence of the sequence …, <VAR>x0</VAR>,   
  <VAR>x1</VAR> with absolute error <VAR>epsabs</VAR> and relative error   
  <VAR>epsrel</VAR>. The test returns <CODE>GSL_SUCCESS</CODE> if the following  
   condition is achieved, </P>
  <DIV class="example"><PRE class="example">|x_1 - x_0| &lt; epsabs + epsrel |x_1|
</PRE></DIV>
  <P>and returns <CODE>GSL_CONTINUE</CODE> otherwise. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ftest_005fresidual"></A>Function:   
  <EM>int</EM> <STRONG>gsl_root_test_residual</STRONG> <EM>(double <VAR>f</VAR>, 
    double <VAR>epsabs</VAR>)</EM></DT>
  <DD>
  <P>This function tests the residual value <VAR>f</VAR> against the absolute   
  error bound <VAR>epsabs</VAR>. The test returns <CODE>GSL_SUCCESS</CODE> if   
  the following condition is achieved, </P>
  <DIV class="example"><PRE class="example">|f| &lt; epsabs
</PRE></DIV>
  <P>and returns <CODE>GSL_CONTINUE</CODE> otherwise. This criterion is suitable 
    for situations where the precise location of the root, <EM>x</EM>, is   
  unimportant provided a value can be found where the residual, <EM>|f(x)|</EM>, 
    is small enough. </P></DD></DL>
<HR>
<A name="Root-Bracketing-Algorithms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Root-Finding-Algorithms-using-Derivatives" 
rel="next">Root Finding Algorithms using Derivatives</A>, Previous: <A 
accessKey="p" href="#Search-Stopping-Parameters" 
rel="previous">Search Stopping Parameters</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Root-Bracketing-Algorithms-1"></A>
<H3 class="section">34.8 Root Bracketing Algorithms</H3>
<P>The root bracketing algorithms described in this section require an initial 
 interval which is guaranteed to contain a root—if <EM>a</EM> and <EM>b</EM> are 
 the endpoints of the interval then <EM>f(a)</EM> must differ in sign from 
<EM>f(b)</EM>. This ensures that the function crosses zero at least once in the 
 interval. If a valid initial interval is used then these algorithm cannot fail, 
 provided the function is well-behaved. </P>
<P>Note that a bracketing algorithm cannot find roots of even degree, since 
 these do not cross the <EM>x</EM>-axis. </P>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005fbisection"></A>Solver:   
  <STRONG>gsl_root_fsolver_bisection</STRONG></DT>
  <DD><A name="index-bisection-algorithm-for-finding-roots"></A><A name="index-root-finding_002c-bisection-algorithm"></A>
  <P>The <EM>bisection algorithm</EM> is the simplest method of bracketing the   
  roots of a function. It is the slowest algorithm provided by the library, with 
    linear convergence. </P>
  <P>On each iteration, the interval is bisected and the value of the function   
  at the midpoint is calculated. The sign of this value is used to determine   
  which half of the interval does not contain a root. That half is discarded to  
   give a new, smaller interval containing the root. This procedure can be   
  continued indefinitely until the interval is sufficiently small. </P>
  <P>At any time the current estimate of the root is taken as the midpoint of   
  the interval. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005ffalsepos"></A>Solver:   
  <STRONG>gsl_root_fsolver_falsepos</STRONG></DT>
  <DD><A name="index-false-position-algorithm-for-finding-roots"></A><A name="index-root-finding_002c-false-position-algorithm"></A>
  <P>The <EM>false position algorithm</EM> is a method of finding roots based on 
    linear interpolation. Its convergence is linear, but it is usually faster 
  than   bisection. </P>
  <P>On each iteration a line is drawn between the endpoints <EM>(a,f(a))</EM>   
  and <EM>(b,f(b))</EM> and the point where this line crosses the   
  <EM>x</EM>-axis taken as a “midpoint”. The value of the function at this point 
    is calculated and its sign is used to determine which side of the interval   
  does not contain a root. That side is discarded to give a new, smaller   
  interval containing the root. This procedure can be continued indefinitely   
  until the interval is sufficiently small. </P>
  <P>The best estimate of the root is taken from the linear interpolation of the 
    interval on the current iteration. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffsolver_005fbrent"></A>Solver:   
  <STRONG>gsl_root_fsolver_brent</STRONG></DT>
  <DD><A name="index-Brent_0027s-method-for-finding-roots"></A><A name="index-root-finding_002c-Brent_0027s-method"></A>
  <P>The <EM>Brent-Dekker method</EM> (referred to here as <EM>Brent’s   
  method</EM>) combines an interpolation strategy with the bisection algorithm.  
   This produces a fast algorithm which is still robust. </P>
  <P>On each iteration Brent’s method approximates the function using an   
  interpolating curve. On the first iteration this is a linear interpolation of  
   the two endpoints. For subsequent iterations the algorithm uses an inverse   
  quadratic fit to the last three points, for higher accuracy. The intercept of  
   the interpolating curve with the <EM>x</EM>-axis is taken as a guess for the  
   root. If it lies within the bounds of the current interval then the   
  interpolating point is accepted, and used to generate a smaller interval. If   
  the interpolating point is not accepted then the algorithm falls back to an   
  ordinary bisection step. </P>
  <P>The best estimate of the root is taken from the most recent interpolation   
  or bisection. </P></DD></DL>
<HR>
<A name="Root-Finding-Algorithms-using-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Root-Finding-Examples" 
rel="next">Root Finding Examples</A>, Previous: <A accessKey="p" href="#Root-Bracketing-Algorithms" 
rel="previous">Root Bracketing Algorithms</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Root-Finding-Algorithms-using-Derivatives-1"></A>
<H3 class="section">34.9 Root Finding Algorithms using Derivatives</H3>
<P>The root polishing algorithms described in this section require an initial 
 guess for the location of the root. There is no absolute guarantee of 
 convergence—the function must be suitable for this technique and the initial 
 guess must be sufficiently close to the root for it to work. When these 
 conditions are satisfied then convergence is quadratic. </P>
<P>These algorithms make use of both the function and its derivative. </P>
<DL>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005fnewton"></A>Derivative 
  Solver:   <STRONG>gsl_root_fdfsolver_newton</STRONG></DT>
  <DD><A name="index-Newton_0027s-method-for-finding-roots"></A><A name="index-root-finding_002c-Newton_0027s-method"></A>
  <P>Newton’s Method is the standard root-polishing algorithm. The algorithm   
  begins with an initial guess for the location of the root. On each iteration,  
   a line tangent to the function <EM>f</EM> is drawn at that position. The 
  point   where this line crosses the <EM>x</EM>-axis becomes the new guess. The 
    iteration is defined by the following sequence, </P>
  <DIV class="example"><PRE class="example">x_{i+1} = x_i - f(x_i)/f'(x_i)
</PRE></DIV>
  <P>Newton’s method converges quadratically for single roots, and linearly for  
   multiple roots. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005fsecant"></A>Derivative 
  Solver:   <STRONG>gsl_root_fdfsolver_secant</STRONG></DT>
  <DD><A name="index-secant-method-for-finding-roots"></A><A name="index-root-finding_002c-secant-method"></A>
  <P>The <EM>secant method</EM> is a simplified version of Newton’s method which 
    does not require the computation of the derivative on every step. </P>
  <P>On its first iteration the algorithm begins with Newton’s method, using the 
    derivative to compute a first step, </P>
  <DIV class="example"><PRE class="example">x_1 = x_0 - f(x_0)/f'(x_0)
</PRE></DIV>
  <P>Subsequent iterations avoid the evaluation of the derivative by replacing   
  it with a numerical estimate, the slope of the line through the previous two   
  points, </P>
  <DIV class="example"><PRE class="example">x_{i+1} = x_i f(x_i) / f'_{est} where
 f'_{est} = (f(x_i) - f(x_{i-1})/(x_i - x_{i-1})
</PRE></DIV>
  <P>When the derivative does not change significantly in the vicinity of the   
  root the secant method gives a useful saving. Asymptotically the secant method 
    is faster than Newton’s method whenever the cost of evaluating the 
  derivative   is more than 0.44 times the cost of evaluating the function 
  itself. As with   all methods of computing a numerical derivative the estimate 
  can suffer from   cancellation errors if the separation of the points becomes 
  too small. </P>
  <P>On single roots, the method has a convergence of order <EM>(1 + \sqrt   
  5)/2</EM> (approximately <EM>1.62</EM>). It converges linearly for multiple   
  roots. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005froot_005ffdfsolver_005fsteffenson"></A>Derivative   
  Solver: <STRONG>gsl_root_fdfsolver_steffenson</STRONG></DT>
  <DD><A name="index-Steffenson_0027s-method-for-finding-roots"></A><A name="index-root-finding_002c-Steffenson_0027s-method"></A>
  <P>The <EM>Steffenson Method</EM><A href="#FOOT14" 
  name="DOCF14"><SUP>14</SUP></A> provides the fastest convergence of all the   
  routines. It combines the basic Newton algorithm with an Aitken   
  “delta-squared” acceleration. If the Newton iterates are <EM>x_i</EM> then the 
    acceleration procedure generates a new sequence <EM>R_i</EM>, </P>
  <DIV class="example"><PRE class="example">R_i = x_i - (x_{i+1} - x_i)^2 / (x_{i+2} - 2 x_{i+1} + x_{i})
</PRE></DIV>
  <P>which converges faster than the original sequence under reasonable   
  conditions. The new sequence requires three terms before it can produce its   
  first value so the method returns accelerated values on the second and   
  subsequent iterations. On the first iteration it returns the ordinary Newton   
  estimate. The Newton iterate is also returned if the denominator of the   
  acceleration term ever becomes zero. </P>
  <P>As with all acceleration procedures this method can become unstable if the  
   function is not well-behaved. </P></DD></DL>
<HR>
<A name="Root-Finding-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Root-Finding-References-and-Further-Reading" 
rel="next">Root Finding References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Root-Finding-Algorithms-using-Derivatives" 
rel="previous">Root Finding Algorithms using Derivatives</A>, Up: <A accessKey="u" 
href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-24"></A>
<H3 class="section">34.10 Examples</H3>
<P>For any root finding algorithm we need to prepare the function to be solved. 
 For this example we will use the general quadratic equation described earlier. 
 We first need a header file (<SAMP>demo_fn.h</SAMP>) to define the function 
 parameters, </P>
<DIV class="example"><PRE class="verbatim">struct quadratic_params
  {
    double a, b, c;
  };

double quadratic (double x, void *params);
double quadratic_deriv (double x, void *params);
void quadratic_fdf (double x, void *params, 
                    double *y, double *dy);
</PRE></DIV>
<P>We place the function definitions in a separate file 
 (<SAMP>demo_fn.c</SAMP>), </P>
<DIV class="example"><PRE class="verbatim">double
quadratic (double x, void *params)
{
  struct quadratic_params *p 
    = (struct quadratic_params *) params;

  double a = p-&gt;a;
  double b = p-&gt;b;
  double c = p-&gt;c;

  return (a * x + b) * x + c;
}

double
quadratic_deriv (double x, void *params)
{
  struct quadratic_params *p 
    = (struct quadratic_params *) params;

  double a = p-&gt;a;
  double b = p-&gt;b;
  double c = p-&gt;c;

  return 2.0 * a * x + b;
}

void
quadratic_fdf (double x, void *params, 
               double *y, double *dy)
{
  struct quadratic_params *p 
    = (struct quadratic_params *) params;

  double a = p-&gt;a;
  double b = p-&gt;b;
  double c = p-&gt;c;

  *y = (a * x + b) * x + c;
  *dy = 2.0 * a * x + b;
}
</PRE></DIV>
<P>The first program uses the function solver 
<CODE>gsl_root_fsolver_brent</CODE> for Brent’s method and the general quadratic 
 defined above to solve the following equation, </P>
<DIV class="example"><PRE class="example">x^2 - 5 = 0
</PRE></DIV>
<P>with solution <EM>x = \sqrt 5 = 2.236068...</EM> </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_roots.h&gt;

#include "demo_fn.h"
#include "demo_fn.c"

int
main (void)
{
  int status;
  int iter = 0, max_iter = 100;
  const gsl_root_fsolver_type *T;
  gsl_root_fsolver *s;
  double r = 0, r_expected = sqrt (5.0);
  double x_lo = 0.0, x_hi = 5.0;
  gsl_function F;
  struct quadratic_params params = {1.0, 0.0, -5.0};

  F.function = &amp;quadratic;
  F.params = &amp;params;

  T = gsl_root_fsolver_brent;
  s = gsl_root_fsolver_alloc (T);
  gsl_root_fsolver_set (s, &amp;F, x_lo, x_hi);

  printf ("using %s method\n", 
          gsl_root_fsolver_name (s));

  printf ("%5s [%9s, %9s] %9s %10s %9s\n",
          "iter", "lower", "upper", "root", 
          "err", "err(est)");

  do
    {
      iter++;
      status = gsl_root_fsolver_iterate (s);
      r = gsl_root_fsolver_root (s);
      x_lo = gsl_root_fsolver_x_lower (s);
      x_hi = gsl_root_fsolver_x_upper (s);
      status = gsl_root_test_interval (x_lo, x_hi,
                                       0, 0.001);

      if (status == GSL_SUCCESS)
        printf ("Converged:\n");

      printf ("%5d [%.7f, %.7f] %.7f %+.7f %.7f\n",
              iter, x_lo, x_hi,
              r, r - r_expected, 
              x_hi - x_lo);
    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; max_iter);

  gsl_root_fsolver_free (s);

  return status;
}
</PRE></DIV>
<P>Here are the results of the iterations, </P>
<DIV class="smallexample"><PRE class="smallexample">$ ./a.out 
using brent method
 iter [    lower,     upper]      root        err  err(est)
    1 [1.0000000, 5.0000000] 1.0000000 -1.2360680 4.0000000
    2 [1.0000000, 3.0000000] 3.0000000 +0.7639320 2.0000000
    3 [2.0000000, 3.0000000] 2.0000000 -0.2360680 1.0000000
    4 [2.2000000, 3.0000000] 2.2000000 -0.0360680 0.8000000
    5 [2.2000000, 2.2366300] 2.2366300 +0.0005621 0.0366300
Converged:                            
    6 [2.2360634, 2.2366300] 2.2360634 -0.0000046 0.0005666
</PRE></DIV>
<P>If the program is modified to use the bisection solver instead of Brent’s 
 method, by changing <CODE>gsl_root_fsolver_brent</CODE> to 
<CODE>gsl_root_fsolver_bisection</CODE> the slower convergence of the Bisection 
 method can be observed, </P>
<DIV class="smallexample"><PRE class="smallexample">$ ./a.out 
using bisection method
 iter [    lower,     upper]      root        err  err(est)
    1 [0.0000000, 2.5000000] 1.2500000 -0.9860680 2.5000000
    2 [1.2500000, 2.5000000] 1.8750000 -0.3610680 1.2500000
    3 [1.8750000, 2.5000000] 2.1875000 -0.0485680 0.6250000
    4 [2.1875000, 2.5000000] 2.3437500 +0.1076820 0.3125000
    5 [2.1875000, 2.3437500] 2.2656250 +0.0295570 0.1562500
    6 [2.1875000, 2.2656250] 2.2265625 -0.0095055 0.0781250
    7 [2.2265625, 2.2656250] 2.2460938 +0.0100258 0.0390625
    8 [2.2265625, 2.2460938] 2.2363281 +0.0002601 0.0195312
    9 [2.2265625, 2.2363281] 2.2314453 -0.0046227 0.0097656
   10 [2.2314453, 2.2363281] 2.2338867 -0.0021813 0.0048828
   11 [2.2338867, 2.2363281] 2.2351074 -0.0009606 0.0024414
Converged:                            
   12 [2.2351074, 2.2363281] 2.2357178 -0.0003502 0.0012207
</PRE></DIV>
<P>The next program solves the same function using a derivative solver instead. 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_roots.h&gt;

#include "demo_fn.h"
#include "demo_fn.c"

int
main (void)
{
  int status;
  int iter = 0, max_iter = 100;
  const gsl_root_fdfsolver_type *T;
  gsl_root_fdfsolver *s;
  double x0, x = 5.0, r_expected = sqrt (5.0);
  gsl_function_fdf FDF;
  struct quadratic_params params = {1.0, 0.0, -5.0};

  FDF.f = &amp;quadratic;
  FDF.df = &amp;quadratic_deriv;
  FDF.fdf = &amp;quadratic_fdf;
  FDF.params = &amp;params;

  T = gsl_root_fdfsolver_newton;
  s = gsl_root_fdfsolver_alloc (T);
  gsl_root_fdfsolver_set (s, &amp;FDF, x);

  printf ("using %s method\n", 
          gsl_root_fdfsolver_name (s));

  printf ("%-5s %10s %10s %10s\n",
          "iter", "root", "err", "err(est)");
  do
    {
      iter++;
      status = gsl_root_fdfsolver_iterate (s);
      x0 = x;
      x = gsl_root_fdfsolver_root (s);
      status = gsl_root_test_delta (x, x0, 0, 1e-3);

      if (status == GSL_SUCCESS)
        printf ("Converged:\n");

      printf ("%5d %10.7f %+10.7f %10.7f\n",
              iter, x, x - r_expected, x - x0);
    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; max_iter);

  gsl_root_fdfsolver_free (s);
  return status;
}
</PRE></DIV>
<P>Here are the results for Newton’s method, </P>
<DIV class="example"><PRE class="example">$ ./a.out 
using newton method
iter        root        err   err(est)
    1  3.0000000 +0.7639320 -2.0000000
    2  2.3333333 +0.0972654 -0.6666667
    3  2.2380952 +0.0020273 -0.0952381
Converged:      
    4  2.2360689 +0.0000009 -0.0020263
</PRE></DIV>
<P>Note that the error can be estimated more accurately by taking the difference 
 between the current iterate and next iterate rather than the previous iterate. 
 The other derivative solvers can be investigated by changing 
<CODE>gsl_root_fdfsolver_newton</CODE> to <CODE>gsl_root_fdfsolver_secant</CODE> 
 or <CODE>gsl_root_fdfsolver_steffenson</CODE>. </P>
<HR>
<A name="Root-Finding-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Root-Finding-Examples" 
rel="previous">Root Finding Examples</A>, Up: <A accessKey="u" href="#One-dimensional-Root_002dFinding" 
rel="up">One dimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-26"></A>
<H3 class="section">34.11 References and Further Reading</H3>
<P>For information on the Brent-Dekker algorithm see the following two papers, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->R. P. Brent, “An algorithm with guaranteed convergence for   
  finding a zero of a function”, <CITE>Computer Journal</CITE>, 14 (1971)   
  422–425 </LI>
  <LI><!-- /@w -->J. C. P. Bus and T. J. Dekker, “Two Efficient Algorithms with  
   Guaranteed Convergence for Finding a Zero of a Function”, <CITE>ACM   
  Transactions of Mathematical Software</CITE>, Vol. 1 No. 4 (1975) 330–345 
</LI></UL>
<HR>
<A name="One-dimensional-Minimization"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multidimensional-Root_002dFinding" 
rel="next">Multidimensional Root-Finding</A>, Previous: <A accessKey="p" href="#One-dimensional-Root_002dFinding" 
rel="previous">One dimensional Root-Finding</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="One-dimensional-Minimization-1"></A>
<H2 class="chapter">35 One dimensional Minimization</H2><A name="index-optimization_002c-see-minimization"></A><A 
name="index-maximization_002c-see-minimization"></A><A name="index-minimization_002c-one_002ddimensional"></A><A 
name="index-finding-minima"></A><A name="index-nonlinear-functions_002c-minimization"></A>
<P>This chapter describes routines for finding minima of arbitrary 
 one-dimensional functions. The library provides low level components for a 
 variety of iterative minimizers and convergence tests. These can be combined by 
 the user to achieve the desired solution, with full access to the intermediate 
 steps of the algorithms. Each class of methods uses the same framework, so that 
 you can switch between minimizers at runtime without needing to recompile your 
 program. Each instance of a minimizer keeps track of its own state, allowing 
the  minimizers to be used in multi-threaded programs. </P>
<P>The header file <SAMP>gsl_min.h</SAMP> contains prototypes for the 
 minimization functions and related declarations. To use the minimization 
 algorithms to find the maximum of a function simply invert its sign. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Minimization-Overview">Minimization 
            Overview</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Minimization-Caveats">Minimization 
            Caveats</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Providing-the-function-to-minimize">Providing 
            the function to minimize</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Minimization-Iteration">Minimization 
            Iteration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Minimization-Stopping-Parameters">Minimization 
            Stopping Parameters</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Minimization-Algorithms">Minimization 
            Algorithms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Minimization-Examples">Minimization 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Minimization-References-and-Further-Reading">Minimization 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Minimization-Overview"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Caveats" 
rel="next">Minimization Caveats</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-1"></A>
<H3 class="section">35.1 Overview</H3><A 
name="index-minimization_002c-overview"></A>
<P>The minimization algorithms begin with a bounded region known to contain a 
 minimum. The region is described by a lower bound <EM>a</EM> and an upper bound 
<EM>b</EM>, with an estimate of the location of the minimum <EM>x</EM>. </P>
<P>The value of the function at <EM>x</EM> must be less than the value of the 
 function at the ends of the interval, </P>
<DIV class="example"><PRE class="example">f(a) &gt; f(x) &lt; f(b)
</PRE></DIV>
<P>This condition guarantees that a minimum is contained somewhere within the 
 interval. On each iteration a new point <EM>x'</EM> is selected using one of 
the  available algorithms. If the new point is a better estimate of the minimum, 
i.e.  where <EM>f(x') &lt; f(x)</EM>, then the current estimate of the minimum 
<EM>x</EM> is updated. The new point also allows the size of the bounded 
 interval to be reduced, by choosing the most compact set of points which 
 satisfies the constraint <EM>f(a) &gt; f(x) &lt; f(b)</EM>. The interval is 
 reduced until it encloses the true minimum to a desired tolerance. This 
provides  a best estimate of the location of the minimum and a rigorous error 
estimate. </P>
<P>Several bracketing algorithms are available within a single framework. The 
 user provides a high-level driver for the algorithm, and the library provides 
 the individual functions necessary for each of the steps. There are three main 
 phases of the iteration. The steps are, </P>
<UL>
  <LI>initialize minimizer state, <VAR>s</VAR>, for algorithm <VAR>T</VAR> </LI>
  <LI>update <VAR>s</VAR> using the iteration <VAR>T</VAR> </LI>
  <LI>test <VAR>s</VAR> for convergence, and repeat iteration if necessary 
</LI></UL>
<P>The state for the minimizers is held in a <CODE>gsl_min_fminimizer</CODE> 
 struct. The updating procedure uses only function evaluations (not 
derivatives). </P>
<HR>
<A name="Minimization-Caveats"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-the-Minimizer" 
rel="next">Initializing the Minimizer</A>, Previous: <A accessKey="p" href="#Minimization-Overview" 
rel="previous">Minimization Overview</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Caveats-1"></A>
<H3 class="section">35.2 Caveats</H3><A 
name="index-minimization_002c-caveats"></A>
<P>Note that minimization functions can only search for one minimum at a time. 
 When there are several minima in the search area, the first minimum to be found 
 will be returned; however it is difficult to predict which of the minima this 
 will be. <EM>In most cases, no error will be reported if you try to find a 
 minimum in an area where there is more than one.</EM> </P>
<P>With all minimization algorithms it can be difficult to determine the 
 location of the minimum to full numerical precision. The behavior of the 
 function in the region of the minimum <EM>x^*</EM> can be approximated by a 
 Taylor expansion, </P>
<DIV class="example"><PRE class="example">y = f(x^*) + (1/2) f''(x^*) (x - x^*)^2
</PRE></DIV>
<P>and the second term of this expansion can be lost when added to the first 
 term at finite precision. This magnifies the error in locating <EM>x^*</EM>, 
 making it proportional to <EM>\sqrt \epsilon</EM> (where <EM>\epsilon</EM> is 
 the relative accuracy of the floating point numbers). For functions with higher 
 order minima, such as <EM>x^4</EM>, the magnification of the error is 
 correspondingly worse. The best that can be achieved is to converge to the 
limit  of numerical accuracy in the function values, rather than the location of 
the  minimum itself. </P>
<HR>
<A name="Initializing-the-Minimizer"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Providing-the-function-to-minimize" 
rel="next">Providing the function to minimize</A>, Previous: <A accessKey="p" 
href="#Minimization-Caveats" 
rel="previous">Minimization Caveats</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-Minimizer-1"></A>
<H3 class="section">35.3 Initializing the Minimizer</H3>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005falloc"></A>Function:   
  <EM>gsl_min_fminimizer *</EM> 
  <STRONG>gsl_min_fminimizer_alloc</STRONG><EM>(const gsl_min_fminimizer_type * 
  <VAR>T</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmin_005ffminimizer"></A><A name="index-gsl_005fmin_005ffminimizer_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a   
  minimizer of type <VAR>T</VAR>. For example, the following code creates an   
  instance of a golden section minimizer, </P>
  <DIV class="example"><PRE class="example">const gsl_min_fminimizer_type * T 
  = gsl_min_fminimizer_goldensection;
gsl_min_fminimizer * s 
  = gsl_min_fminimizer_alloc (T);
</PRE></DIV>
  <P>If there is insufficient memory to create the minimizer then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fset"></A>Function:   
  <EM>int</EM> <STRONG>gsl_min_fminimizer_set</STRONG> <EM>(gsl_min_fminimizer * 
    <VAR>s</VAR>, gsl_function * <VAR>f</VAR>, double <VAR>x_minimum</VAR>, 
  double   <VAR>x_lower</VAR>, double <VAR>x_upper</VAR>)</EM></DT>
  <DD>
  <P>This function sets, or resets, an existing minimizer <VAR>s</VAR> to use   
  the function <VAR>f</VAR> and the initial search interval [<VAR>x_lower</VAR>, 
    <VAR>x_upper</VAR>], with a guess for the location of the minimum   
  <VAR>x_minimum</VAR>. </P>
  <P>If the interval given does not contain a minimum, then the function returns 
    an error code of <CODE>GSL_EINVAL</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmin_005ffminimizer_005fset_005fwith_005fvalues"></A>Function: 
    <EM>int</EM> 
  <STRONG>gsl_min_fminimizer_set_with_values</STRONG><EM>(gsl_min_fminimizer * 
  <VAR>s</VAR>, gsl_function * <VAR>f</VAR>, double   <VAR>x_minimum</VAR>, 
  double <VAR>f_minimum</VAR>, double <VAR>x_lower</VAR>,   double 
  <VAR>f_lower</VAR>, double <VAR>x_upper</VAR>, double   
  <VAR>f_upper</VAR>)</EM></DT>
  <DD>
  <P>This function is equivalent to <CODE>gsl_min_fminimizer_set</CODE> but uses 
    the values <VAR>f_minimum</VAR>, <VAR>f_lower</VAR> and <VAR>f_upper</VAR>   
  instead of computing <CODE>f(x_minimum)</CODE>, <CODE>f(x_lower)</CODE> and   
  <CODE>f(x_upper)</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005ffree"></A>Function:   
  <EM>void</EM> <STRONG>gsl_min_fminimizer_free</STRONG> <EM>(gsl_min_fminimizer 
    * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the minimizer   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fname"></A>Function: 
  <EM>const   char *</EM> <STRONG>gsl_min_fminimizer_name</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the minimizer. For example,  
   </P>
  <DIV class="example"><PRE class="example">printf ("s is a '%s' minimizer\n",
        gsl_min_fminimizer_name (s));
</PRE></DIV>
  <P>would print something like <CODE>s is a 'brent' minimizer</CODE>. 
</P></DD></DL>
<HR>
<A name="Providing-the-function-to-minimize"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Iteration" 
rel="next">Minimization Iteration</A>, Previous: <A accessKey="p" href="#Initializing-the-Minimizer" 
rel="previous">Initializing the Minimizer</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Providing-the-function-to-minimize-1"></A>
<H3 class="section">35.4 Providing the function to minimize</H3><A name="index-minimization_002c-providing-a-function-to-minimize"></A>
<P>You must provide a continuous function of one variable for the minimizers to 
 operate on. In order to allow for general parameters the functions are defined 
 by a <CODE>gsl_function</CODE> data type (see <A href="#Providing-the-function-to-solve">Providing 
 the function to solve</A>). </P>
<HR>
<A name="Minimization-Iteration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Stopping-Parameters" 
rel="next">Minimization Stopping Parameters</A>, Previous: <A accessKey="p" 
href="#Providing-the-function-to-minimize" 
rel="previous">Providing the function to minimize</A>, Up: <A accessKey="u" 
href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Iteration-1"></A>
<H3 class="section">35.5 Iteration</H3>
<P>The following functions drive the iteration of each algorithm. Each function 
 performs one iteration to update the state of any minimizer of the 
corresponding  type. The same functions work for all minimizers so that 
different methods can  be substituted at runtime without modifications to the 
code. </P>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_min_fminimizer_iterate</STRONG><EM>(gsl_min_fminimizer * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function performs a single iteration of the minimizer <VAR>s</VAR>. If 
    the iteration encounters an unexpected problem then an error code will be   
  returned, </P>
  <DL compact="">
    <DT><CODE>GSL_EBADFUNC</CODE></DT>
    <DD>
    <P>the iteration encountered a singular point where the function evaluated   
      to <CODE>Inf</CODE> or <CODE>NaN</CODE>. </P></DD>
    <DT><CODE>GSL_FAILURE</CODE></DT>
    <DD>
    <P>the algorithm could not improve the current best approximation or     
    bounding interval. </P></DD></DL></DD></DL>
<P>The minimizer maintains a current best estimate of the position of the 
 minimum at all times, and the current interval bounding the minimum. This 
 information can be accessed with the following auxiliary functions, </P>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fx_005fminimum"></A>Function: 
    <EM>double</EM> <STRONG>gsl_min_fminimizer_x_minimum</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function returns the current estimate of the position of the minimum   
  for the minimizer <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fx_005fupper"></A>Function:   
  <EM>double</EM> <STRONG>gsl_min_fminimizer_x_upper</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fx_005flower"></A>Function:   
  <EM>double</EM> <STRONG>gsl_min_fminimizer_x_lower</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current upper and lower bound of the interval   
  for the minimizer <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005ff_005fminimum"></A>Function: 
    <EM>double</EM> <STRONG>gsl_min_fminimizer_f_minimum</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005ff_005fupper"></A>Function:   
  <EM>double</EM> <STRONG>gsl_min_fminimizer_f_upper</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005ff_005flower"></A>Function:   
  <EM>double</EM> <STRONG>gsl_min_fminimizer_f_lower</STRONG> <EM>(const   
  gsl_min_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the value of the function at the current estimate of 
    the minimum and at the upper and lower bounds of the interval for the   
  minimizer <VAR>s</VAR>. </P></DD></DL>
<HR>
<A name="Minimization-Stopping-Parameters"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Algorithms" 
rel="next">Minimization Algorithms</A>, Previous: <A accessKey="p" href="#Minimization-Iteration" 
rel="previous">Minimization Iteration</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Stopping-Parameters"></A>
<H3 class="section">35.6 Stopping Parameters</H3><A name="index-minimization_002c-stopping-parameters"></A>
<P>A minimization procedure should stop when one of the following conditions is 
 true: </P>
<UL>
  <LI>A minimum has been found to within the user-specified precision. </LI>
  <LI>A user-specified maximum number of iterations has been reached. </LI>
  <LI>An error has occurred. </LI></UL>
<P>The handling of these conditions is under user control. The function below 
 allows the user to test the precision of the current result. </P>
<DL>
  <DT><A name="index-gsl_005fmin_005ftest_005finterval"></A>Function: 
  <EM>int</EM><STRONG>gsl_min_test_interval</STRONG> <EM>(double 
  <VAR>x_lower</VAR>, double   <VAR>x_upper</VAR>, double <VAR>epsabs</VAR>, 
  double   <VAR>epsrel</VAR>)</EM></DT>
  <DD>
  <P>This function tests for the convergence of the interval   
  [<VAR>x_lower</VAR>, <VAR>x_upper</VAR>] with absolute error <VAR>epsabs</VAR> 
    and relative error <VAR>epsrel</VAR>. The test returns   
  <CODE>GSL_SUCCESS</CODE> if the following condition is achieved, </P>
  <DIV class="example"><PRE class="example">|a - b| &lt; epsabs + epsrel min(|a|,|b|) 
</PRE></DIV>
  <P>when the interval <EM>x = [a,b]</EM> does not include the origin. If the   
  interval includes the origin then <EM>\min(|a|,|b|)</EM> is replaced by zero   
  (which is the minimum value of <EM>|x|</EM> over the interval). This ensures   
  that the relative error is accurately estimated for minima close to the   
  origin. </P>
  <P>This condition on the interval also implies that any estimate of the   
  minimum <EM>x_m</EM> in the interval satisfies the same condition with respect 
    to the true minimum <EM>x_m^*</EM>, </P>
  <DIV class="example"><PRE class="example">|x_m - x_m^*| &lt; epsabs + epsrel x_m^*
</PRE></DIV>
  <P>assuming that the true minimum <EM>x_m^*</EM> is contained within the   
  interval. </P></DD></DL>
<HR>
<A name="Minimization-Algorithms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Examples" 
rel="next">Minimization Examples</A>, Previous: <A accessKey="p" href="#Minimization-Stopping-Parameters" 
rel="previous">Minimization Stopping Parameters</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Minimization-Algorithms-1"></A>
<H3 class="section">35.7 Minimization Algorithms</H3>
<P>The minimization algorithms described in this section require an initial 
 interval which is guaranteed to contain a minimum—if <EM>a</EM> and <EM>b</EM> 
 are the endpoints of the interval and <EM>x</EM> is an estimate of the minimum 
 then <EM>f(a) &gt; f(x) &lt; f(b)</EM>. This ensures that the function has at 
 least one minimum somewhere in the interval. If a valid initial interval is 
used  then these algorithm cannot fail, provided the function is well-behaved. 
</P>
<DL>
  <DT><A 
  name="index-gsl_005fmin_005ffminimizer_005fgoldensection"></A>Minimizer:   
  <STRONG>gsl_min_fminimizer_goldensection</STRONG></DT>
  <DD><A name="index-golden-section-algorithm-for-finding-minima"></A><A name="index-minimum-finding_002c-golden-section-algorithm"></A>
  <P>The <EM>golden section algorithm</EM> is the simplest method of bracketing  
   the minimum of a function. It is the slowest algorithm provided by the   
  library, with linear convergence. </P>
  <P>On each iteration, the algorithm first compares the subintervals from the   
  endpoints to the current minimum. The larger subinterval is divided in a   
  golden section (using the famous ratio <EM>(3-\sqrt 5)/2 = 0.3189660</EM>…)   
  and the value of the function at this new point is calculated. The new value   
  is used with the constraint <EM>f(a') &gt; f(x') &lt; f(b')</EM> to a select   
  new interval containing the minimum, by discarding the least useful point.   
  This procedure can be continued indefinitely until the interval is   
  sufficiently small. Choosing the golden section as the bisection ratio can be  
   shown to provide the fastest convergence for this type of algorithm. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmin_005ffminimizer_005fbrent"></A>Minimizer:   
  <STRONG>gsl_min_fminimizer_brent</STRONG></DT>
  <DD><A name="index-Brent_0027s-method-for-finding-minima"></A><A name="index-minimum-finding_002c-Brent_0027s-method"></A>
  <P>The <EM>Brent minimization algorithm</EM> combines a parabolic   
  interpolation with the golden section algorithm. This produces a fast   
  algorithm which is still robust. </P>
  <P>The outline of the algorithm can be summarized as follows: on each   
  iteration Brent’s method approximates the function using an interpolating   
  parabola through three existing points. The minimum of the parabola is taken   
  as a guess for the minimum. If it lies within the bounds of the current   
  interval then the interpolating point is accepted, and used to generate a   
  smaller interval. If the interpolating point is not accepted then the   
  algorithm falls back to an ordinary golden section step. The full details of   
  Brent’s method include some additional checks to improve convergence. 
</P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmin_005ffminimizer_005fquad_005fgolden"></A>Minimizer:   
  <STRONG>gsl_min_fminimizer_quad_golden</STRONG></DT>
  <DD><A name="index-safeguarded-step_002dlength-algorithm"></A>
  <P>This is a variant of Brent’s algorithm which uses the safeguarded   
  step-length algorithm of Gill and Murray. </P></DD></DL>
<HR>
<A name="Minimization-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-References-and-Further-Reading" 
rel="next">Minimization References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Minimization-Algorithms" 
rel="previous">Minimization Algorithms</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-25"></A>
<H3 class="section">35.8 Examples</H3>
<P>The following program uses the Brent algorithm to find the minimum of the 
 function <EM>f(x) = \cos(x) + 1</EM>, which occurs at <EM>x = \pi</EM>. The 
 starting interval is <EM>(0,6)</EM>, with an initial guess for the minimum of 
<EM>2</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_errno.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_min.h&gt;

double fn1 (double x, void * params)
{
  return cos(x) + 1.0;
}

int
main (void)
{
  int status;
  int iter = 0, max_iter = 100;
  const gsl_min_fminimizer_type *T;
  gsl_min_fminimizer *s;
  double m = 2.0, m_expected = M_PI;
  double a = 0.0, b = 6.0;
  gsl_function F;

  F.function = &amp;fn1;
  F.params = 0;

  T = gsl_min_fminimizer_brent;
  s = gsl_min_fminimizer_alloc (T);
  gsl_min_fminimizer_set (s, &amp;F, m, a, b);

  printf ("using %s method\n",
          gsl_min_fminimizer_name (s));

  printf ("%5s [%9s, %9s] %9s %10s %9s\n",
          "iter", "lower", "upper", "min",
          "err", "err(est)");

  printf ("%5d [%.7f, %.7f] %.7f %+.7f %.7f\n",
          iter, a, b,
          m, m - m_expected, b - a);

  do
    {
      iter++;
      status = gsl_min_fminimizer_iterate (s);

      m = gsl_min_fminimizer_x_minimum (s);
      a = gsl_min_fminimizer_x_lower (s);
      b = gsl_min_fminimizer_x_upper (s);

      status 
        = gsl_min_test_interval (a, b, 0.001, 0.0);

      if (status == GSL_SUCCESS)
        printf ("Converged:\n");

      printf ("%5d [%.7f, %.7f] "
              "%.7f %+.7f %.7f\n",
              iter, a, b,
              m, m - m_expected, b - a);
    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; max_iter);

  gsl_min_fminimizer_free (s);

  return status;
}
</PRE></DIV>
<P>Here are the results of the minimization procedure. </P>
<DIV class="smallexample"><PRE class="smallexample">$ ./a.out 
</PRE><PRE class="verbatim">    0 [0.0000000, 6.0000000] 2.0000000 -1.1415927 6.0000000
    1 [2.0000000, 6.0000000] 3.2758640 +0.1342713 4.0000000
    2 [2.0000000, 3.2831929] 3.2758640 +0.1342713 1.2831929
    3 [2.8689068, 3.2831929] 3.2758640 +0.1342713 0.4142862
    4 [2.8689068, 3.2831929] 3.2758640 +0.1342713 0.4142862
    5 [2.8689068, 3.2758640] 3.1460585 +0.0044658 0.4069572
    6 [3.1346075, 3.2758640] 3.1460585 +0.0044658 0.1412565
    7 [3.1346075, 3.1874620] 3.1460585 +0.0044658 0.0528545
    8 [3.1346075, 3.1460585] 3.1460585 +0.0044658 0.0114510
    9 [3.1346075, 3.1460585] 3.1424060 +0.0008133 0.0114510
   10 [3.1346075, 3.1424060] 3.1415885 -0.0000041 0.0077985
Converged:                            
   11 [3.1415885, 3.1424060] 3.1415927 -0.0000000 0.0008175
</PRE></DIV>
<HR>
<A name="Minimization-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Minimization-Examples" 
rel="previous">Minimization Examples</A>, Up: <A accessKey="u" href="#One-dimensional-Minimization" 
rel="up">One dimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-27"></A>
<H3 class="section">35.9 References and Further Reading</H3>
<P>Further information on Brent’s algorithm is available in the following book, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->Richard Brent, <CITE>Algorithms for minimization without   
  derivatives</CITE>, Prentice-Hall (1973), republished by Dover in paperback   
  (2002), ISBN 0-486-41998-3. </LI></UL>
<HR>
<A name="Multidimensional-Root_002dFinding"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multidimensional-Minimization" 
rel="next">Multidimensional Minimization</A>, Previous: <A accessKey="p" href="#One-dimensional-Minimization" 
rel="previous">One dimensional Minimization</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Multidimensional-Root_002dFinding-1"></A>
<H2 class="chapter">36 Multidimensional Root-Finding</H2><A name="index-solving-nonlinear-systems-of-equations"></A><A 
name="index-nonlinear-systems-of-equations_002c-solution-of"></A><A name="index-systems-of-equations_002c-nonlinear"></A>
<P>This chapter describes functions for multidimensional root-finding (solving 
 nonlinear systems with <EM>n</EM> equations in <EM>n</EM> unknowns). The 
library  provides low level components for a variety of iterative solvers and 
convergence  tests. These can be combined by the user to achieve the desired 
solution, with  full access to the intermediate steps of the iteration. Each 
class of methods  uses the same framework, so that you can switch between 
solvers at runtime  without needing to recompile your program. Each instance of 
a solver keeps track  of its own state, allowing the solvers to be used in 
multi-threaded programs.  The solvers are based on the original Fortran library 
<SMALL>MINPACK</SMALL>. </P>
<P>The header file <SAMP>gsl_multiroots.h</SAMP> contains prototypes for the 
 multidimensional root finding functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Overview-of-Multidimensional-Root-Finding">Overview 
            of Multidimensional Root Finding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Providing-the-multidimensional-system-of-equations-to-solve">Providing 
            the multidimensional system of equations to solve</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Search-Stopping-Parameters-for-the-multidimensional-solver">Search 
            Stopping Parameters for the multidimensional solver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Example-programs-for-Multidimensional-Root-finding">Example 
            programs for Multidimensional Root finding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#References-and-Further-Reading-for-Multidimensional-Root-Finding">References 
            and Further Reading for Multidimensional Root Finding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Overview-of-Multidimensional-Root-Finding"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-the-Multidimensional-Solver" 
rel="next">Initializing the Multidimensional Solver</A>, Up: <A accessKey="u" 
href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-2"></A>
<H3 class="section">36.1 Overview</H3><A name="index-multidimensional-root-finding_002c-overview"></A>
<P>The problem of multidimensional root finding requires the simultaneous 
 solution of <EM>n</EM> equations, <EM>f_i</EM>, in <EM>n</EM> variables, 
<EM>x_i</EM>, </P>
<DIV class="example"><PRE class="example">f_i (x_1, ..., x_n) = 0    for i = 1 ... n.
</PRE></DIV>
<P>In general there are no bracketing methods available for <EM>n</EM> 
 dimensional systems, and no way of knowing whether any solutions exist. All 
 algorithms proceed from an initial guess using a variant of the Newton 
 iteration, </P>
<DIV class="example"><PRE class="example">x -&gt; x' = x - J^{-1} f(x)
</PRE></DIV>
<P>where <EM>x</EM>, <EM>f</EM> are vector quantities and <EM>J</EM> is the 
 Jacobian matrix <EM>J_{ij} = d f_i / d x_j</EM>. Additional strategies can be 
 used to enlarge the region of convergence. These include requiring a decrease 
in  the norm <EM>|f|</EM> on each step proposed by Newton’s method, or taking 
 steepest-descent steps in the direction of the negative gradient of 
<EM>|f|</EM>. </P>
<P>Several root-finding algorithms are available within a single framework. The 
 user provides a high-level driver for the algorithms, and the library provides 
 the individual functions necessary for each of the steps. There are three main 
 phases of the iteration. The steps are, </P>
<UL>
  <LI>initialize solver state, <VAR>s</VAR>, for algorithm <VAR>T</VAR> </LI>
  <LI>update <VAR>s</VAR> using the iteration <VAR>T</VAR> </LI>
  <LI>test <VAR>s</VAR> for convergence, and repeat iteration if necessary 
</LI></UL>
<P>The evaluation of the Jacobian matrix can be problematic, either because 
 programming the derivatives is intractable or because computation of the 
<EM>n^2</EM> terms of the matrix becomes too expensive. For these reasons the 
 algorithms provided by the library are divided into two classes according to 
 whether the derivatives are available or not. </P><A name="index-Jacobian-matrix_002c-root-finding"></A>
<P>The state for solvers with an analytic Jacobian matrix is held in a 
<CODE>gsl_multiroot_fdfsolver</CODE> struct. The updating procedure requires 
 both the function and its derivatives to be supplied by the user. </P>
<P>The state for solvers which do not use an analytic Jacobian matrix is held in 
 a <CODE>gsl_multiroot_fsolver</CODE> struct. The updating procedure uses only 
 function evaluations (not derivatives). The algorithms estimate the matrix 
<EM>J</EM> or <EM>J^{-1}</EM> by approximate methods. </P>
<HR>
<A name="Initializing-the-Multidimensional-Solver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Providing-the-multidimensional-system-of-equations-to-solve" 
rel="next">Providing the multidimensional system of equations to solve</A>, 
 Previous: <A accessKey="p" href="#Overview-of-Multidimensional-Root-Finding" 
rel="previous">Overview of Multidimensional Root Finding</A>, Up: <A accessKey="u" 
href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-Solver-2"></A>
<H3 class="section">36.2 Initializing the Solver</H3>
<P>The following functions initialize a multidimensional solver, either with or 
 without derivatives. The solver itself depends only on the dimension of the 
 problem and the algorithm and can be reused for different problems. </P>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005falloc"></A>Function:   
  <EM>gsl_multiroot_fsolver *</EM> 
  <STRONG>gsl_multiroot_fsolver_alloc</STRONG><EM>(const 
  gsl_multiroot_fsolver_type * <VAR>T</VAR>, size_t   <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultiroot_005ffsolver"></A><A name="index-gsl_005fmultiroot_005ffsolver_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a solver   
  of type <VAR>T</VAR> for a system of <VAR>n</VAR> dimensions. For example, the 
    following code creates an instance of a hybrid solver, to solve a   
  3-dimensional system of equations. </P>
  <DIV class="example"><PRE class="example">const gsl_multiroot_fsolver_type * T 
    = gsl_multiroot_fsolver_hybrid;
gsl_multiroot_fsolver * s 
    = gsl_multiroot_fsolver_alloc (T, 3);
</PRE></DIV>
  <P>If there is insufficient memory to create the solver then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005falloc"></A>Function:   
  <EM>gsl_multiroot_fdfsolver 
  *</EM><STRONG>gsl_multiroot_fdfsolver_alloc</STRONG> <EM>(const   
  gsl_multiroot_fdfsolver_type * <VAR>T</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultiroot_005ffdfsolver"></A><A name="index-gsl_005fmultiroot_005ffdfsolver_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a   
  derivative solver of type <VAR>T</VAR> for a system of <VAR>n</VAR>   
  dimensions. For example, the following code creates an instance of a   
  Newton-Raphson solver, for a 2-dimensional system of equations. </P>
  <DIV class="example"><PRE class="example">const gsl_multiroot_fdfsolver_type * T 
    = gsl_multiroot_fdfsolver_newton;
gsl_multiroot_fdfsolver * s = 
    gsl_multiroot_fdfsolver_alloc (T, 2);
</PRE></DIV>
  <P>If there is insufficient memory to create the solver then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multiroot_fsolver_set</STRONG><EM>(gsl_multiroot_fsolver * 
  <VAR>s</VAR>, gsl_multiroot_function *   <VAR>f</VAR>, const gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multiroot_fdfsolver_set</STRONG><EM>(gsl_multiroot_fdfsolver * 
  <VAR>s</VAR>, gsl_multiroot_function_fdf *   <VAR>fdf</VAR>, const gsl_vector 
  * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions set, or reset, an existing solver <VAR>s</VAR> to use the   
  function <VAR>f</VAR> or function and derivative <VAR>fdf</VAR>, and the   
  initial guess <VAR>x</VAR>. Note that the initial position is copied from   
  <VAR>x</VAR>, this argument is not modified by subsequent iterations. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multiroot_fsolver_free</STRONG><EM>(gsl_multiroot_fsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multiroot_fdfsolver_free</STRONG><EM>(gsl_multiroot_fdfsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions free all the memory associated with the solver   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_multiroot_fsolver_name</STRONG> <EM>(const   
  gsl_multiroot_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_multiroot_fdfsolver_name</STRONG> <EM>(const 
    gsl_multiroot_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the name of the solver. For example,   
  </P>
  <DIV class="example"><PRE class="example">printf ("s is a '%s' solver\n", 
        gsl_multiroot_fdfsolver_name (s));
</PRE></DIV>
  <P>would print something like <CODE>s is a 'newton' solver</CODE>. 
</P></DD></DL>
<HR>
<A name="Providing-the-multidimensional-system-of-equations-to-solve"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Iteration-of-the-multidimensional-solver" 
rel="next">Iteration of the multidimensional solver</A>, Previous: <A accessKey="p" 
href="#Initializing-the-Multidimensional-Solver" 
rel="previous">Initializing the Multidimensional Solver</A>, Up: <A accessKey="u" 
href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Providing-the-function-to-solve-2"></A>
<H3 class="section">36.3 Providing the function to solve</H3><A name="index-multidimensional-root-finding_002c-providing-a-function-to-solve"></A>
<P>You must provide <EM>n</EM> functions of <EM>n</EM> variables for the root 
 finders to operate on. In order to allow for general parameters the functions 
 are defined by the following data types: </P>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffunction"></A>Data Type:   
  <STRONG>gsl_multiroot_function</STRONG></DT>
  <DD>
  <P>This data type defines a general system of functions with parameters. </P>
  <DL compact="">
    <DT><CODE>int (* f) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_vector * <VAR>f</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the vector result <EM>f(x,params)</EM> in     
    <VAR>f</VAR> for argument <VAR>x</VAR> and parameters <VAR>params</VAR>,     
    returning an appropriate error code if the function cannot be computed.     
    </P></DD>
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>the dimension of the system, i.e. the number of components of the vectors 
        <VAR>x</VAR> and <VAR>f</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function. </P></DD></DL></DD></DL>
<P>Here is an example using Powell’s test function, </P>
<DIV class="example"><PRE class="example">f_1(x) = A x_0 x_1 - 1,
f_2(x) = exp(-x_0) + exp(-x_1) - (1 + 1/A)
</PRE></DIV>
<P>with <EM>A = 10^4</EM>. The following code defines a 
<CODE>gsl_multiroot_function</CODE> system <CODE>F</CODE> which you could pass 
 to a solver: </P>
<DIV class="example"><PRE class="example">struct powell_params { double A; };

int
powell (gsl_vector * x, void * p, gsl_vector * f) {
   struct powell_params * params 
     = (struct powell_params *)p;
   const double A = (params-&gt;A);
   const double x0 = gsl_vector_get(x,0);
   const double x1 = gsl_vector_get(x,1);

   gsl_vector_set (f, 0, A * x0 * x1 - 1);
   gsl_vector_set (f, 1, (exp(-x0) + exp(-x1) 
                          - (1.0 + 1.0/A)));
   return GSL_SUCCESS
}

gsl_multiroot_function F;
struct powell_params params = { 10000.0 };

F.f = &amp;powell;
F.n = 2;
F.params = &amp;params;
</PRE></DIV>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffunction_005ffdf"></A>Data Type:   
  <STRONG>gsl_multiroot_function_fdf</STRONG></DT>
  <DD>
  <P>This data type defines a general system of functions with parameters and   
  the corresponding Jacobian matrix of derivatives, </P>
  <DL compact="">
    <DT><CODE>int (* f) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_vector * <VAR>f</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the vector result <EM>f(x,params)</EM> in     
    <VAR>f</VAR> for argument <VAR>x</VAR> and parameters <VAR>params</VAR>,     
    returning an appropriate error code if the function cannot be computed.     
    </P></DD>
    <DT><CODE>int (* df) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_matrix * <VAR>J</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the <VAR>n</VAR>-by-<VAR>n</VAR> matrix result 
        <EM>J_ij = d f_i(x,params) / d x_j</EM> in <VAR>J</VAR> for argument     
    <VAR>x</VAR> and parameters <VAR>params</VAR>, returning an appropriate     
    error code if the function cannot be computed. </P></DD>
    <DT><CODE>int (* fdf) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_vector * <VAR>f</VAR>, gsl_matrix *     
    <VAR>J</VAR>)</CODE></DT>
    <DD>
    <P>This function should set the values of the <VAR>f</VAR> and <VAR>J</VAR>  
       as above, for arguments <VAR>x</VAR> and parameters <VAR>params</VAR>. 
    This     function provides an optimization of the separate functions for     
    <EM>f(x)</EM> and <EM>J(x)</EM>—it is always faster to compute the function  
       and its derivative at the same time. </P></DD>
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>the dimension of the system, i.e. the number of components of the vectors 
        <VAR>x</VAR> and <VAR>f</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function. </P></DD></DL></DD></DL>
<P>The example of Powell’s test function defined above can be extended to 
 include analytic derivatives using the following code, </P>
<DIV class="example"><PRE class="example">int
powell_df (gsl_vector * x, void * p, gsl_matrix * J) 
{
   struct powell_params * params 
     = (struct powell_params *)p;
   const double A = (params-&gt;A);
   const double x0 = gsl_vector_get(x,0);
   const double x1 = gsl_vector_get(x,1);
   gsl_matrix_set (J, 0, 0, A * x1);
   gsl_matrix_set (J, 0, 1, A * x0);
   gsl_matrix_set (J, 1, 0, -exp(-x0));
   gsl_matrix_set (J, 1, 1, -exp(-x1));
   return GSL_SUCCESS
}

int
powell_fdf (gsl_vector * x, void * p, 
            gsl_matrix * f, gsl_matrix * J) {
   struct powell_params * params 
     = (struct powell_params *)p;
   const double A = (params-&gt;A);
   const double x0 = gsl_vector_get(x,0);
   const double x1 = gsl_vector_get(x,1);

   const double u0 = exp(-x0);
   const double u1 = exp(-x1);

   gsl_vector_set (f, 0, A * x0 * x1 - 1);
   gsl_vector_set (f, 1, u0 + u1 - (1 + 1/A));

   gsl_matrix_set (J, 0, 0, A * x1);
   gsl_matrix_set (J, 0, 1, A * x0);
   gsl_matrix_set (J, 1, 0, -u0);
   gsl_matrix_set (J, 1, 1, -u1);
   return GSL_SUCCESS
}

gsl_multiroot_function_fdf FDF;

FDF.f = &amp;powell_f;
FDF.df = &amp;powell_df;
FDF.fdf = &amp;powell_fdf;
FDF.n = 2;
FDF.params = 0;
</PRE></DIV>
<P>Note that the function <CODE>powell_fdf</CODE> is able to reuse existing 
 terms from the function when calculating the Jacobian, thus saving time. </P>
<HR>
<A name="Iteration-of-the-multidimensional-solver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Search-Stopping-Parameters-for-the-multidimensional-solver" 
rel="next">Search Stopping Parameters for the multidimensional solver</A>, 
 Previous: <A accessKey="p" href="#Providing-the-multidimensional-system-of-equations-to-solve" 
rel="previous">Providing the multidimensional system of equations to solve</A>, 
 Up: <A accessKey="u" href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Iteration-2"></A>
<H3 class="section">36.4 Iteration</H3>
<P>The following functions drive the iteration of each algorithm. Each function 
 performs one iteration to update the state of any solver of the corresponding 
 type. The same functions work for all solvers so that different methods can be 
 substituted at runtime without modifications to the code. </P>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multiroot_fsolver_iterate</STRONG><EM>(gsl_multiroot_fsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fiterate"></A>Function:  
   <EM>int</EM> 
  <STRONG>gsl_multiroot_fdfsolver_iterate</STRONG><EM>(gsl_multiroot_fdfsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions perform a single iteration of the solver <VAR>s</VAR>. If   
  the iteration encounters an unexpected problem then an error code will be   
  returned, </P>
  <DL compact="">
    <DT><CODE>GSL_EBADFUNC</CODE></DT>
    <DD>
    <P>the iteration encountered a singular point where the function or its     
    derivative evaluated to <CODE>Inf</CODE> or <CODE>NaN</CODE>. </P></DD>
    <DT><CODE>GSL_ENOPROG</CODE></DT>
    <DD>
    <P>the iteration is not making any progress, preventing the algorithm from   
      continuing. </P></DD></DL></DD></DL>
<P>The solver maintains a current best estimate of the root <CODE>s-&gt;x</CODE> 
 and its function value <CODE>s-&gt;f</CODE> at all times. This information can 
 be accessed with the following auxiliary functions, </P>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005froot"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multiroot_fsolver_root</STRONG> <EM>(const   
  gsl_multiroot_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005froot"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multiroot_fdfsolver_root</STRONG> <EM>(const 
    gsl_multiroot_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current estimate of the root for the solver   
  <VAR>s</VAR>, given by <CODE>s-&gt;x</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005ff"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multiroot_fsolver_f</STRONG> <EM>(const   
  gsl_multiroot_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005ff"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multiroot_fdfsolver_f</STRONG> <EM>(const   
  gsl_multiroot_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the function value <EM>f(x)</EM> at the current   
  estimate of the root for the solver <VAR>s</VAR>, given by   
  <CODE>s-&gt;f</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fdx"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multiroot_fsolver_dx</STRONG> <EM>(const   
  gsl_multiroot_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fdx"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multiroot_fdfsolver_dx</STRONG> <EM>(const   
  gsl_multiroot_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the last step <EM>dx</EM> taken by the solver   
  <VAR>s</VAR>, given by <CODE>s-&gt;dx</CODE>. </P></DD></DL>
<HR>
<A name="Search-Stopping-Parameters-for-the-multidimensional-solver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Algorithms-using-Derivatives" 
rel="next">Algorithms using Derivatives</A>, Previous: <A accessKey="p" href="#Iteration-of-the-multidimensional-solver" 
rel="previous">Iteration of the multidimensional solver</A>, Up: <A accessKey="u" 
href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Search-Stopping-Parameters-2"></A>
<H3 class="section">36.5 Search Stopping Parameters</H3><A name="index-root-finding_002c-stopping-parameters-1"></A>
<P>A root finding procedure should stop when one of the following conditions is 
 true: </P>
<UL>
  <LI>A multidimensional root has been found to within the user-specified   
  precision. </LI>
  <LI>A user-specified maximum number of iterations has been reached. </LI>
  <LI>An error has occurred. </LI></UL>
<P>The handling of these conditions is under user control. The functions below 
 allow the user to test the precision of the current result in several standard 
 ways. </P>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ftest_005fdelta"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multiroot_test_delta</STRONG> <EM>(const gsl_vector * 
    <VAR>dx</VAR>, const gsl_vector * <VAR>x</VAR>, double <VAR>epsabs</VAR>,   
  double <VAR>epsrel</VAR>)</EM></DT>
  <DD>
  <P>This function tests for the convergence of the sequence by comparing the   
  last step <VAR>dx</VAR> with the absolute error <VAR>epsabs</VAR> and relative 
    error <VAR>epsrel</VAR> to the current position <VAR>x</VAR>. The test 
  returns   <CODE>GSL_SUCCESS</CODE> if the following condition is achieved, 
</P>
  <DIV class="example"><PRE class="example">|dx_i| &lt; epsabs + epsrel |x_i|
</PRE></DIV>
  <P>for each component of <VAR>x</VAR> and returns <CODE>GSL_CONTINUE</CODE>   
  otherwise. </P></DD></DL><A name="index-residual_002c-in-nonlinear-systems-of-equations"></A>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ftest_005fresidual"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multiroot_test_residual</STRONG> <EM>(const   
  gsl_vector * <VAR>f</VAR>, double <VAR>epsabs</VAR>)</EM></DT>
  <DD>
  <P>This function tests the residual value <VAR>f</VAR> against the absolute   
  error bound <VAR>epsabs</VAR>. The test returns <CODE>GSL_SUCCESS</CODE> if   
  the following condition is achieved, </P>
  <DIV class="example"><PRE class="example">\sum_i |f_i| &lt; epsabs
</PRE></DIV>
  <P>and returns <CODE>GSL_CONTINUE</CODE> otherwise. This criterion is suitable 
    for situations where the precise location of the root, <EM>x</EM>, is   
  unimportant provided a value can be found where the residual is small enough.  
   </P></DD></DL>
<HR>
<A name="Algorithms-using-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Algorithms-without-Derivatives" 
rel="next">Algorithms without Derivatives</A>, Previous: <A accessKey="p" href="#Search-Stopping-Parameters-for-the-multidimensional-solver" 
rel="previous">Search Stopping Parameters for the multidimensional solver</A>, 
Up: <A accessKey="u" href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Algorithms-using-Derivatives-1"></A>
<H3 class="section">36.6 Algorithms using Derivatives</H3>
<P>The root finding algorithms described in this section make use of both the 
 function and its derivative. They require an initial guess for the location of 
 the root, but there is no absolute guarantee of convergence—the function must 
be  suitable for this technique and the initial guess must be sufficiently close 
to  the root for it to work. When the conditions are satisfied then convergence 
is  quadratic. </P><A name="index-HYBRID-algorithms-for-nonlinear-systems"></A>
<DL>
  <DT><A 
  name="index-gsl_005fmultiroot_005ffdfsolver_005fhybridsj"></A>Derivative   
  Solver: <STRONG>gsl_multiroot_fdfsolver_hybridsj</STRONG></DT>
  <DD><A name="index-HYBRIDSJ-algorithm"></A><A name="index-MINPACK_002c-minimization-algorithms"></A>
  <P>This is a modified version of Powell’s Hybrid method as implemented in the  
   <SMALL>HYBRJ</SMALL> algorithm in <SMALL>MINPACK</SMALL>. Minpack was written 
    by Jorge J. Moré, Burton S. Garbow and Kenneth E. Hillstrom. The Hybrid   
  algorithm retains the fast convergence of Newton’s method but will also reduce 
    the residual when Newton’s method is unreliable. </P>
  <P>The algorithm uses a generalized trust region to keep each step under   
  control. In order to be accepted a proposed new position <EM>x'</EM> must   
  satisfy the condition <EM>|D (x' - x)| &lt; \delta</EM>, where <EM>D</EM> is a 
    diagonal scaling matrix and <EM>\delta</EM> is the size of the trust region. 
    The components of <EM>D</EM> are computed internally, using the column norms 
    of the Jacobian to estimate the sensitivity of the residual to each 
  component   of <EM>x</EM>. This improves the behavior of the algorithm for 
  badly scaled   functions. </P>
  <P>On each iteration the algorithm first determines the standard Newton step   
  by solving the system <EM>J dx = - f</EM>. If this step falls inside the trust 
    region it is used as a trial step in the next stage. If not, the algorithm   
  uses the linear combination of the Newton and gradient directions which is   
  predicted to minimize the norm of the function while staying inside the trust  
   region, </P>
  <DIV class="example"><PRE class="example">dx = - \alpha J^{-1} f(x) - \beta \nabla |f(x)|^2.
</PRE></DIV>
  <P>This combination of Newton and gradient directions is referred to as a   
  <EM>dogleg step</EM>. </P>
  <P>The proposed step is now tested by evaluating the function at the resulting 
    point, <EM>x'</EM>. If the step reduces the norm of the function 
  sufficiently   then it is accepted and size of the trust region is increased. 
  If the proposed   step fails to improve the solution then the size of the 
  trust region is   decreased and another trial step is computed. </P>
  <P>The speed of the algorithm is increased by computing the changes to the   
  Jacobian approximately, using a rank-1 update. If two successive attempts fail 
    to reduce the residual then the full Jacobian is recomputed. The algorithm   
  also monitors the progress of the solution and returns an error if several   
  steps fail to make any improvement, </P>
  <DL compact="">
    <DT><CODE>GSL_ENOPROG</CODE></DT>
    <DD>
    <P>the iteration is not making any progress, preventing the algorithm from   
      continuing. </P></DD>
    <DT><CODE>GSL_ENOPROGJ</CODE></DT>
    <DD>
    <P>re-evaluations of the Jacobian indicate that the iteration is not making  
       any progress, preventing the algorithm from continuing. 
</P></DD></DL></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fhybridj"></A>Derivative 
    Solver: <STRONG>gsl_multiroot_fdfsolver_hybridj</STRONG></DT>
  <DD><A name="index-HYBRIDJ-algorithm"></A>
  <P>This algorithm is an unscaled version of <CODE>hybridsj</CODE>. The steps   
  are controlled by a spherical trust region <EM>|x' - x| &lt; \delta</EM>,   
  instead of a generalized region. This can be useful if the generalized region  
   estimated by <CODE>hybridsj</CODE> is inappropriate. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fnewton"></A>Derivative  
   Solver: <STRONG>gsl_multiroot_fdfsolver_newton</STRONG></DT>
  <DD><A 
name="index-Newton_0027s-method-for-systems-of-nonlinear-equations"></A>
  <P>Newton’s Method is the standard root-polishing algorithm. The algorithm   
  begins with an initial guess for the location of the solution. On each   
  iteration a linear approximation to the function <EM>F</EM> is used to   
  estimate the step which will zero all the components of the residual. The   
  iteration is defined by the following sequence, </P>
  <DIV class="example"><PRE class="example">x -&gt; x' = x - J^{-1} f(x)
</PRE></DIV>
  <P>where the Jacobian matrix <EM>J</EM> is computed from the derivative   
  functions provided by <VAR>f</VAR>. The step <EM>dx</EM> is obtained by   
  solving the linear system, </P>
  <DIV class="example"><PRE class="example">J dx = - f(x)
</PRE></DIV>
  <P>using LU decomposition. If the Jacobian matrix is singular, an error code   
  of <CODE>GSL_EDOM</CODE> is returned. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffdfsolver_005fgnewton"></A>Derivative 
    Solver: <STRONG>gsl_multiroot_fdfsolver_gnewton</STRONG></DT>
  <DD><A name="index-Modified-Newton_0027s-method-for-nonlinear-systems"></A><A 
  name="index-Newton-algorithm_002c-globally-convergent"></A>
  <P>This is a modified version of Newton’s method which attempts to improve   
  global convergence by requiring every step to reduce the Euclidean norm of the 
    residual, <EM>|f(x)|</EM>. If the Newton step leads to an increase in the 
  norm   then a reduced step of relative size, </P>
  <DIV class="example"><PRE class="example">t = (\sqrt(1 + 6 r) - 1) / (3 r)
</PRE></DIV>
  <P>is proposed, with <EM>r</EM> being the ratio of norms   
  <EM>|f(x')|^2/|f(x)|^2</EM>. This procedure is repeated until a suitable step  
   size is found. </P></DD></DL>
<HR>
<A name="Algorithms-without-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-Multidimensional-Root-finding" 
rel="next">Example programs for Multidimensional Root finding</A>, Previous: <A 
accessKey="p" href="#Algorithms-using-Derivatives" 
rel="previous">Algorithms using Derivatives</A>, Up: <A accessKey="u" href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Algorithms-without-Derivatives-1"></A>
<H3 class="section">36.7 Algorithms without Derivatives</H3>
<P>The algorithms described in this section do not require any derivative 
 information to be supplied by the user. Any derivatives needed are approximated 
 by finite differences. Note that if the finite-differencing step size chosen by 
 these routines is inappropriate, an explicit user-supplied numerical derivative 
 can always be used with the algorithms described in the previous section. </P>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fhybrids"></A>Solver:   
  <STRONG>gsl_multiroot_fsolver_hybrids</STRONG></DT>
  <DD><A name="index-HYBRIDS-algorithm_002c-scaled-without-derivatives"></A>
  <P>This is a version of the Hybrid algorithm which replaces calls to the   
  Jacobian function by its finite difference approximation. The finite   
  difference approximation is computed using <CODE>gsl_multiroots_fdjac</CODE>   
  with a relative step size of <CODE>GSL_SQRT_DBL_EPSILON</CODE>. Note that this 
    step size will not be suitable for all problems. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fhybrid"></A>Solver:   
  <STRONG>gsl_multiroot_fsolver_hybrid</STRONG></DT>
  <DD><A name="index-HYBRID-algorithm_002c-unscaled-without-derivatives"></A>
  <P>This is a finite difference version of the Hybrid algorithm without   
  internal scaling. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fdnewton"></A>Solver:   
  <STRONG>gsl_multiroot_fsolver_dnewton</STRONG></DT>
  <DD><A 
  name="index-Discrete-Newton-algorithm-for-multidimensional-roots"></A><A name="index-Newton-algorithm_002c-discrete"></A>
  <P>The <EM>discrete Newton algorithm</EM> is the simplest method of solving a  
   multidimensional system. It uses the Newton iteration </P>
  <DIV class="example"><PRE class="example">x -&gt; x - J^{-1} f(x)
</PRE></DIV>
  <P>where the Jacobian matrix <EM>J</EM> is approximated by taking finite   
  differences of the function <VAR>f</VAR>. The approximation scheme used by   
  this implementation is, </P>
  <DIV class="example"><PRE class="example">J_{ij} = (f_i(x + \delta_j) - f_i(x)) /  \delta_j
</PRE></DIV>
  <P>where <EM>\delta_j</EM> is a step of size <EM>\sqrt\epsilon |x_j|</EM> with 
    <EM>\epsilon</EM> being the machine precision (<EM>\epsilon \approx 2.22   
  \times 10^-16</EM>). The order of convergence of Newton’s algorithm is   
  quadratic, but the finite differences require <EM>n^2</EM> function   
  evaluations on each iteration. The algorithm may become unstable if the finite 
    differences are not a good approximation to the true derivatives. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultiroot_005ffsolver_005fbroyden"></A>Solver:   
  <STRONG>gsl_multiroot_fsolver_broyden</STRONG></DT>
  <DD><A name="index-Broyden-algorithm-for-multidimensional-roots"></A><A name="index-multidimensional-root-finding_002c-Broyden-algorithm"></A>
  <P>The <EM>Broyden algorithm</EM> is a version of the discrete Newton   
  algorithm which attempts to avoids the expensive update of the Jacobian matrix 
    on each iteration. The changes to the Jacobian are also approximated, using 
  a   rank-1 update, </P>
  <DIV class="example"><PRE class="example">J^{-1} \to J^{-1} - (J^{-1} df - dx) dx^T J^{-1} / dx^T J^{-1} df
</PRE></DIV>
  <P>where the vectors <EM>dx</EM> and <EM>df</EM> are the changes in <EM>x</EM> 
    and <EM>f</EM>. On the first iteration the inverse Jacobian is estimated 
  using   finite differences, as in the discrete Newton algorithm. </P>
  <P>This approximation gives a fast update but is unreliable if the changes are 
    not small, and the estimate of the inverse Jacobian becomes worse as time   
  passes. The algorithm has a tendency to become unstable unless it starts close 
    to the root. The Jacobian is refreshed if this instability is detected   
  (consult the source for details). </P>
  <P>This algorithm is included only for demonstration purposes, and is not   
  recommended for serious use. </P></DD></DL>
<HR>
<A name="Example-programs-for-Multidimensional-Root-finding"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#References-and-Further-Reading-for-Multidimensional-Root-Finding" 
rel="next">References and Further Reading for Multidimensional Root Finding</A>, 
 Previous: <A accessKey="p" href="#Algorithms-without-Derivatives" 
rel="previous">Algorithms without Derivatives</A>, Up: <A accessKey="u" href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-26"></A>
<H3 class="section">36.8 Examples</H3>
<P>The multidimensional solvers are used in a similar way to the one-dimensional 
 root finding algorithms. This first example demonstrates the 
<CODE>hybrids</CODE> scaled-hybrid algorithm, which does not require 
 derivatives. The program solves the Rosenbrock system of equations, </P>
<DIV class="example"><PRE class="example">f_1 (x, y) = a (1 - x)
f_2 (x, y) = b (y - x^2)
</PRE></DIV>
<P>with <EM>a = 1, b = 10</EM>. The solution of this system lies at <EM>(x,y) = 
 (1,1)</EM> in a narrow valley. </P>
<P>The first stage of the program is to define the system of equations, </P>
<DIV class="example"><PRE class="example">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_vector.h&gt;
#include &lt;gsl/gsl_multiroots.h&gt;

struct rparams
  {
    double a;
    double b;
  };

int
rosenbrock_f (const gsl_vector * x, void *params, 
              gsl_vector * f)
{
  double a = ((struct rparams *) params)-&gt;a;
  double b = ((struct rparams *) params)-&gt;b;

  const double x0 = gsl_vector_get (x, 0);
  const double x1 = gsl_vector_get (x, 1);

  const double y0 = a * (1 - x0);
  const double y1 = b * (x1 - x0 * x0);

  gsl_vector_set (f, 0, y0);
  gsl_vector_set (f, 1, y1);

  return GSL_SUCCESS;
}
</PRE></DIV>
<P>The main program begins by creating the function object <CODE>f</CODE>, with 
 the arguments <CODE>(x,y)</CODE> and parameters <CODE>(a,b)</CODE>. The solver 
<CODE>s</CODE> is initialized to use this function, with the 
<CODE>hybrids</CODE> method. </P>
<DIV class="example"><PRE class="example">int
main (void)
{
  const gsl_multiroot_fsolver_type *T;
  gsl_multiroot_fsolver *s;

  int status;
  size_t i, iter = 0;

  const size_t n = 2;
  struct rparams p = {1.0, 10.0};
  gsl_multiroot_function f = {&amp;rosenbrock_f, n, &amp;p};

  double x_init[2] = {-10.0, -5.0};
  gsl_vector *x = gsl_vector_alloc (n);

  gsl_vector_set (x, 0, x_init[0]);
  gsl_vector_set (x, 1, x_init[1]);

  T = gsl_multiroot_fsolver_hybrids;
  s = gsl_multiroot_fsolver_alloc (T, 2);
  gsl_multiroot_fsolver_set (s, &amp;f, x);

  print_state (iter, s);

  do
    {
      iter++;
      status = gsl_multiroot_fsolver_iterate (s);

      print_state (iter, s);

      if (status)   /* check if solver is stuck */
        break;

      status = 
        gsl_multiroot_test_residual (s-&gt;f, 1e-7);
    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; 1000);

  printf ("status = %s\n", gsl_strerror (status));

  gsl_multiroot_fsolver_free (s);
  gsl_vector_free (x);
  return 0;
}
</PRE></DIV>
<P>Note that it is important to check the return status of each solver step, in 
 case the algorithm becomes stuck. If an error condition is detected, indicating 
 that the algorithm cannot proceed, then the error can be reported to the user, 
a  new starting point chosen or a different algorithm used. </P>
<P>The intermediate state of the solution is displayed by the following 
 function. The solver state contains the vector <CODE>s-&gt;x</CODE> which is 
the  current position, and the vector <CODE>s-&gt;f</CODE> with corresponding 
 function values. </P>
<DIV class="example"><PRE class="example">int
print_state (size_t iter, gsl_multiroot_fsolver * s)
{
  printf ("iter = %3u x = % .3f % .3f "
          "f(x) = % .3e % .3e\n",
          iter,
          gsl_vector_get (s-&gt;x, 0), 
          gsl_vector_get (s-&gt;x, 1),
          gsl_vector_get (s-&gt;f, 0), 
          gsl_vector_get (s-&gt;f, 1));
}
</PRE></DIV>
<P>Here are the results of running the program. The algorithm is started at 
<EM>(-10,-5)</EM> far from the solution. Since the solution is hidden in a 
 narrow valley the earliest steps follow the gradient of the function downhill, 
 in an attempt to reduce the large value of the residual. Once the root has been 
 approximately located, on iteration 8, the Newton behavior takes over and 
 convergence is very rapid. </P>
<DIV class="smallexample"><PRE class="smallexample">iter =  0 x = -10.000  -5.000  f(x) = 1.100e+01 -1.050e+03
iter =  1 x = -10.000  -5.000  f(x) = 1.100e+01 -1.050e+03
iter =  2 x =  -3.976  24.827  f(x) = 4.976e+00  9.020e+01
iter =  3 x =  -3.976  24.827  f(x) = 4.976e+00  9.020e+01
iter =  4 x =  -3.976  24.827  f(x) = 4.976e+00  9.020e+01
iter =  5 x =  -1.274  -5.680  f(x) = 2.274e+00 -7.302e+01
iter =  6 x =  -1.274  -5.680  f(x) = 2.274e+00 -7.302e+01
iter =  7 x =   0.249   0.298  f(x) = 7.511e-01  2.359e+00
iter =  8 x =   0.249   0.298  f(x) = 7.511e-01  2.359e+00
iter =  9 x =   1.000   0.878  f(x) = 1.268e-10 -1.218e+00
iter = 10 x =   1.000   0.989  f(x) = 1.124e-11 -1.080e-01
iter = 11 x =   1.000   1.000  f(x) = 0.000e+00  0.000e+00
status = success
</PRE></DIV>
<P>Note that the algorithm does not update the location on every iteration. Some 
 iterations are used to adjust the trust-region parameter, after trying a step 
 which was found to be divergent, or to recompute the Jacobian, when poor 
 convergence behavior is detected. </P>
<P>The next example program adds derivative information, in order to accelerate 
 the solution. There are two derivative functions <CODE>rosenbrock_df</CODE> and 
<CODE>rosenbrock_fdf</CODE>. The latter computes both the function and its 
 derivative simultaneously. This allows the optimization of any common terms. 
For  simplicity we substitute calls to the separate <CODE>f</CODE> and 
<CODE>df</CODE> functions at this point in the code below. </P>
<DIV class="example"><PRE class="example">int
rosenbrock_df (const gsl_vector * x, void *params, 
               gsl_matrix * J)
{
  const double a = ((struct rparams *) params)-&gt;a;
  const double b = ((struct rparams *) params)-&gt;b;

  const double x0 = gsl_vector_get (x, 0);

  const double df00 = -a;
  const double df01 = 0;
  const double df10 = -2 * b  * x0;
  const double df11 = b;

  gsl_matrix_set (J, 0, 0, df00);
  gsl_matrix_set (J, 0, 1, df01);
  gsl_matrix_set (J, 1, 0, df10);
  gsl_matrix_set (J, 1, 1, df11);

  return GSL_SUCCESS;
}

int
rosenbrock_fdf (const gsl_vector * x, void *params,
                gsl_vector * f, gsl_matrix * J)
{
  rosenbrock_f (x, params, f);
  rosenbrock_df (x, params, J);

  return GSL_SUCCESS;
}
</PRE></DIV>
<P>The main program now makes calls to the corresponding <CODE>fdfsolver</CODE> 
 versions of the functions, </P>
<DIV class="example"><PRE class="example">int
main (void)
{
  const gsl_multiroot_fdfsolver_type *T;
  gsl_multiroot_fdfsolver *s;

  int status;
  size_t i, iter = 0;

  const size_t n = 2;
  struct rparams p = {1.0, 10.0};
  gsl_multiroot_function_fdf f = {&amp;rosenbrock_f, 
                                  &amp;rosenbrock_df, 
                                  &amp;rosenbrock_fdf, 
                                  n, &amp;p};

  double x_init[2] = {-10.0, -5.0};
  gsl_vector *x = gsl_vector_alloc (n);

  gsl_vector_set (x, 0, x_init[0]);
  gsl_vector_set (x, 1, x_init[1]);

  T = gsl_multiroot_fdfsolver_gnewton;
  s = gsl_multiroot_fdfsolver_alloc (T, n);
  gsl_multiroot_fdfsolver_set (s, &amp;f, x);

  print_state (iter, s);

  do
    {
      iter++;

      status = gsl_multiroot_fdfsolver_iterate (s);

      print_state (iter, s);

      if (status)
        break;

      status = gsl_multiroot_test_residual (s-&gt;f, 1e-7);
    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; 1000);

  printf ("status = %s\n", gsl_strerror (status));

  gsl_multiroot_fdfsolver_free (s);
  gsl_vector_free (x);
  return 0;
}
</PRE></DIV>
<P>The addition of derivative information to the <CODE>hybrids</CODE> solver 
 does not make any significant difference to its behavior, since it able to 
 approximate the Jacobian numerically with sufficient accuracy. To illustrate 
the  behavior of a different derivative solver we switch to 
<CODE>gnewton</CODE>.  This is a traditional Newton solver with the constraint 
that it scales back its  step if the full step would lead “uphill”. Here is the 
output for the <CODE>gnewton</CODE> algorithm, </P>
<DIV class="smallexample"><PRE class="smallexample">iter = 0 x = -10.000  -5.000 f(x) =  1.100e+01 -1.050e+03
iter = 1 x =  -4.231 -65.317 f(x) =  5.231e+00 -8.321e+02
iter = 2 x =   1.000 -26.358 f(x) = -8.882e-16 -2.736e+02
iter = 3 x =   1.000   1.000 f(x) = -2.220e-16 -4.441e-15
status = success
</PRE></DIV>
<P>The convergence is much more rapid, but takes a wide excursion out to the 
 point <EM>(-4.23,-65.3)</EM>. This could cause the algorithm to go astray in a 
 realistic application. The hybrid algorithm follows the downhill path to the 
 solution more reliably. </P>
<HR>
<A name="References-and-Further-Reading-for-Multidimensional-Root-Finding"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Example-programs-for-Multidimensional-Root-finding" 
rel="previous">Example programs for Multidimensional Root finding</A>, Up: <A 
accessKey="u" href="#Multidimensional-Root_002dFinding" 
rel="up">Multidimensional Root-Finding</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-28"></A>
<H3 class="section">36.9 References and Further Reading</H3>
<P>The original version of the Hybrid method is described in the following 
 articles by Powell, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->M.J.D. Powell, “A Hybrid Method for Nonlinear Equations” (Chap 
    6, p 87–114) and “A Fortran Subroutine for Solving systems of Nonlinear   
  Algebraic Equations” (Chap 7, p 115–161), in <CITE>Numerical Methods for   
  Nonlinear Algebraic Equations</CITE>, P. Rabinowitz, editor. Gordon and   
  Breach, 1970. </LI></UL>
<P>The following papers are also relevant to the algorithms described in this 
 section, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->J.J. Moré, M.Y. Cosnard, “Numerical Solution of Nonlinear   
  Equations”, <CITE>ACM Transactions on Mathematical Software</CITE>, Vol 5, No  
   1, (1979), p 64–85 </LI>
  <LI><!-- /@w -->C.G. Broyden, “A Class of Methods for Solving Nonlinear   
  Simultaneous Equations”, <CITE>Mathematics of Computation</CITE>, Vol 19   
  (1965), p 577–593 </LI>
  <LI><!-- /@w -->J.J. Moré, B.S. Garbow, K.E. Hillstrom, “Testing Unconstrained 
    Optimization Software”, ACM Transactions on Mathematical Software, Vol 7, No 
  1   (1981), p 17–41 </LI></UL>
<HR>
<A name="Multidimensional-Minimization"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Least_002dSquares-Fitting" 
rel="next">Least-Squares Fitting</A>, Previous: <A accessKey="p" href="#Multidimensional-Root_002dFinding" 
rel="previous">Multidimensional Root-Finding</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Multidimensional-Minimization-1"></A>
<H2 class="chapter">37 Multidimensional Minimization</H2><A name="index-minimization_002c-multidimensional"></A>
<P>This chapter describes routines for finding minima of arbitrary 
 multidimensional functions. The library provides low level components for a 
 variety of iterative minimizers and convergence tests. These can be combined by 
 the user to achieve the desired solution, while providing full access to the 
 intermediate steps of the algorithms. Each class of methods uses the same 
 framework, so that you can switch between minimizers at runtime without needing 
 to recompile your program. Each instance of a minimizer keeps track of its own 
 state, allowing the minimizers to be used in multi-threaded programs. The 
 minimization algorithms can be used to maximize a function by inverting its 
 sign. </P>
<P>The header file <SAMP>gsl_multimin.h</SAMP> contains prototypes for the 
 minimization functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Multimin-Overview">Multimin 
            Overview</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Multimin-Caveats">Multimin 
            Caveats</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Providing-a-function-to-minimize">Providing 
            a function to minimize</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Multimin-Iteration">Multimin 
            Iteration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Multimin-Stopping-Criteria">Multimin 
            Stopping Criteria</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Multimin-Examples">Multimin 
            Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Multimin-References-and-Further-Reading">Multimin 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Multimin-Overview"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-Caveats" 
rel="next">Multimin Caveats</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-3"></A>
<H3 class="section">37.1 Overview</H3>
<P>The problem of multidimensional minimization requires finding a point 
<EM>x</EM> such that the scalar function, </P>
<DIV class="example"><PRE class="example">f(x_1, …, x_n)
</PRE></DIV>
<P>takes a value which is lower than at any neighboring point. For smooth 
 functions the gradient <EM>g = \nabla f</EM> vanishes at the minimum. In 
general  there are no bracketing methods available for the minimization of 
<EM>n</EM>-dimensional functions. The algorithms proceed from an initial guess 
 using a search algorithm which attempts to move in a downhill direction. </P>
<P>Algorithms making use of the gradient of the function perform a 
 one-dimensional line minimisation along this direction until the lowest point 
is  found to a suitable tolerance. The search direction is then updated with 
local  information from the function and its derivatives, and the whole process 
 repeated until the true <EM>n</EM>-dimensional minimum is found. </P>
<P>Algorithms which do not require the gradient of the function use different 
 strategies. For example, the Nelder-Mead Simplex algorithm maintains 
<EM>n+1</EM> trial parameter vectors as the vertices of a <EM>n</EM>-dimensional 
 simplex. On each iteration it tries to improve the worst vertex of the simplex 
 by geometrical transformations. The iterations are continued until the overall 
 size of the simplex has decreased sufficiently. </P>
<P>Both types of algorithms use a standard framework. The user provides a 
 high-level driver for the algorithms, and the library provides the individual 
 functions necessary for each of the steps. There are three main phases of the 
 iteration. The steps are, </P>
<UL>
  <LI>initialize minimizer state, <VAR>s</VAR>, for algorithm <VAR>T</VAR> </LI>
  <LI>update <VAR>s</VAR> using the iteration <VAR>T</VAR> </LI>
  <LI>test <VAR>s</VAR> for convergence, and repeat iteration if necessary 
</LI></UL>
<P>Each iteration step consists either of an improvement to the 
 line-minimisation in the current direction or an update to the search direction 
 itself. The state for the minimizers is held in a 
<CODE>gsl_multimin_fdfminimizer</CODE> struct or a 
<CODE>gsl_multimin_fminimizer</CODE> struct. </P>
<HR>
<A name="Multimin-Caveats"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-the-Multidimensional-Minimizer" 
rel="next">Initializing the Multidimensional Minimizer</A>, Previous: <A 
accessKey="p" href="#Multimin-Overview" 
rel="previous">Multimin Overview</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Caveats-2"></A>
<H3 class="section">37.2 Caveats</H3><A name="index-Multimin_002c-caveats"></A>
<P>Note that the minimization algorithms can only search for one local minimum 
 at a time. When there are several local minima in the search area, the first 
 minimum to be found will be returned; however it is difficult to predict which 
 of the minima this will be. In most cases, no error will be reported if you try 
 to find a local minimum in an area where there is more than one. </P>
<P>It is also important to note that the minimization algorithms find local 
 minima; there is no way to determine whether a minimum is a global minimum of 
 the function in question. </P>
<HR>
<A name="Initializing-the-Multidimensional-Minimizer"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Providing-a-function-to-minimize" 
rel="next">Providing a function to minimize</A>, Previous: <A accessKey="p" 
href="#Multimin-Caveats" rel="previous">Multimin 
Caveats</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-Multidimensional-Minimizer-1"></A>
<H3 class="section">37.3 Initializing the Multidimensional Minimizer</H3>
<P>The following function initializes a multidimensional minimizer. The 
 minimizer itself depends only on the dimension of the problem and the algorithm 
 and can be reused for different problems. </P>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffdfminimizer_005falloc"></A>Function:  
   <EM>gsl_multimin_fdfminimizer 
  *</EM><STRONG>gsl_multimin_fdfminimizer_alloc</STRONG> <EM>(const   
  gsl_multimin_fdfminimizer_type * <VAR>T</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005falloc"></A>Function:   
  <EM>gsl_multimin_fminimizer 
  *</EM><STRONG>gsl_multimin_fminimizer_alloc</STRONG> <EM>(const   
  gsl_multimin_fminimizer_type * <VAR>T</VAR>, size_t <VAR>n</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultimin_005ffdfminimizer"></A><A name="index-gsl_005fmultimin_005ffminimizer"></A><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005ftype"></A><A name="index-gsl_005fmultimin_005ffminimizer_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a   
  minimizer of type <VAR>T</VAR> for an <VAR>n</VAR>-dimension function. If   
  there is insufficient memory to create the minimizer then the function returns 
    a null pointer and the error handler is invoked with an error code of   
  <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffdfminimizer_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multimin_fdfminimizer_set</STRONG><EM>(gsl_multimin_fdfminimizer * 
  <VAR>s</VAR>, gsl_multimin_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, double <VAR>step_size</VAR>,   double <VAR>tol</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multimin_fminimizer_set</STRONG><EM>(gsl_multimin_fminimizer * 
  <VAR>s</VAR>, gsl_multimin_function *   <VAR>f</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const gsl_vector *   <VAR>step_size</VAR>)</EM></DT>
  <DD>
  <P>The function <CODE>gsl_multimin_fdfminimizer_set</CODE> initializes the   
  minimizer <VAR>s</VAR> to minimize the function <VAR>fdf</VAR> starting from   
  the initial point <VAR>x</VAR>. The size of the first trial step is given by   
  <VAR>step_size</VAR>. The accuracy of the line minimization is specified by   
  <VAR>tol</VAR>. The precise meaning of this parameter depends on the method   
  used. Typically the line minimization is considered successful if the gradient 
    of the function <EM>g</EM> is orthogonal to the current search direction   
  <EM>p</EM> to a relative accuracy of <VAR>tol</VAR>, where <EM>dot(p,g) &lt;   
  tol |p| |g|</EM>. A <VAR>tol</VAR> value of 0.1 is suitable for most purposes, 
    since line minimization only needs to be carried out approximately. Note 
  that   setting <VAR>tol</VAR> to zero will force the use of “exact” 
  line-searches,   which are extremely expensive. </P>
  <P>The function <CODE>gsl_multimin_fminimizer_set</CODE> initializes the   
  minimizer <VAR>s</VAR> to minimize the function <VAR>f</VAR>, starting from   
  the initial point <VAR>x</VAR>. The size of the initial trial steps is given   
  in vector <VAR>step_size</VAR>. The precise meaning of this parameter depends  
   on the method used. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffdfminimizer_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multimin_fdfminimizer_free</STRONG><EM>(gsl_multimin_fdfminimizer 
  * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multimin_fminimizer_free</STRONG><EM>(gsl_multimin_fminimizer * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function frees all the memory associated with the minimizer   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffdfminimizer_005fname"></A>Function:   
  <EM>const char *</EM> 
  <STRONG>gsl_multimin_fdfminimizer_name</STRONG><EM>(const 
  gsl_multimin_fdfminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_multimin_fminimizer_name</STRONG> <EM>(const 
    gsl_multimin_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function returns a pointer to the name of the minimizer. For example,  
   </P>
  <DIV class="example"><PRE class="example">printf ("s is a '%s' minimizer\n", 
        gsl_multimin_fdfminimizer_name (s));
</PRE></DIV>
  <P>would print something like <CODE>s is a 'conjugate_pr' minimizer</CODE>.   
  </P></DD></DL>
<HR>
<A name="Providing-a-function-to-minimize"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-Iteration" 
rel="next">Multimin Iteration</A>, Previous: <A accessKey="p" href="#Initializing-the-Multidimensional-Minimizer" 
rel="previous">Initializing the Multidimensional Minimizer</A>, Up: <A 
accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Providing-a-function-to-minimize-1"></A>
<H3 class="section">37.4 Providing a function to minimize</H3>
<P>You must provide a parametric function of <EM>n</EM> variables for the 
 minimizers to operate on. You may also need to provide a routine which 
 calculates the gradient of the function and a third routine which calculates 
 both the function value and the gradient together. In order to allow for 
general  parameters the functions are defined by the following data types: </P>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffunction_005ffdf"></A>Data Type:   
  <STRONG>gsl_multimin_function_fdf</STRONG></DT>
  <DD>
  <P>This data type defines a general function of <EM>n</EM> variables with   
  parameters and the corresponding gradient vector of derivatives, </P>
  <DL compact="">
    <DT><CODE>double (* f) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>)</CODE></DT>
    <DD>
    <P>this function should return the result <EM>f(x,params)</EM> for argument  
       <VAR>x</VAR> and parameters <VAR>params</VAR>. If the function cannot be  
       computed, an error value of <CODE>GSL_NAN</CODE> should be returned.     
    </P></DD>
    <DT><CODE>void (* df) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_vector * <VAR>g</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the <VAR>n</VAR>-dimensional gradient <EM>g_i  
       = d f(x,params) / d x_i</EM> in the vector <VAR>g</VAR> for argument     
    <VAR>x</VAR> and parameters <VAR>params</VAR>, returning an appropriate     
    error code if the function cannot be computed. </P></DD>
    <DT><CODE>void (* fdf) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, double * f, gsl_vector * <VAR>g</VAR>)</CODE></DT>
    <DD>
    <P>This function should set the values of the <VAR>f</VAR> and <VAR>g</VAR>  
       as above, for arguments <VAR>x</VAR> and parameters <VAR>params</VAR>. 
    This     function provides an optimization of the separate functions for     
    <EM>f(x)</EM> and <EM>g(x)</EM>—it is always faster to compute the function  
       and its derivative at the same time. </P></DD>
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>the dimension of the system, i.e. the number of components of the vectors 
        <VAR>x</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function. </P></DD></DL></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffunction"></A>Data Type:   
  <STRONG>gsl_multimin_function</STRONG></DT>
  <DD>
  <P>This data type defines a general function of <EM>n</EM> variables with   
  parameters, </P>
  <DL compact="">
    <DT><CODE>double (* f) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>)</CODE></DT>
    <DD>
    <P>this function should return the result <EM>f(x,params)</EM> for argument  
       <VAR>x</VAR> and parameters <VAR>params</VAR>. If the function cannot be  
       computed, an error value of <CODE>GSL_NAN</CODE> should be returned.     
    </P></DD>
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>the dimension of the system, i.e. the number of components of the vectors 
        <VAR>x</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the parameters of the function. </P></DD></DL></DD></DL>
<P>The following example function defines a simple two-dimensional paraboloid 
 with five parameters, </P>
<DIV class="example"><PRE class="verbatim">/* Paraboloid centered on (p[0],p[1]), with  
   scale factors (p[2],p[3]) and minimum p[4] */

double
my_f (const gsl_vector *v, void *params)
{
  double x, y;
  double *p = (double *)params;
  
  x = gsl_vector_get(v, 0);
  y = gsl_vector_get(v, 1);
 
  return p[2] * (x - p[0]) * (x - p[0]) +
           p[3] * (y - p[1]) * (y - p[1]) + p[4]; 
}

/* The gradient of f, df = (df/dx, df/dy). */
void 
my_df (const gsl_vector *v, void *params, 
       gsl_vector *df)
{
  double x, y;
  double *p = (double *)params;
  
  x = gsl_vector_get(v, 0);
  y = gsl_vector_get(v, 1);
 
  gsl_vector_set(df, 0, 2.0 * p[2] * (x - p[0]));
  gsl_vector_set(df, 1, 2.0 * p[3] * (y - p[1]));
}

/* Compute both f and df together. */
void 
my_fdf (const gsl_vector *x, void *params, 
        double *f, gsl_vector *df) 
{
  *f = my_f(x, params); 
  my_df(x, params, df);
}
</PRE></DIV>
<P>The function can be initialized using the following code, </P>
<DIV class="example"><PRE class="example">gsl_multimin_function_fdf my_func;

/* Paraboloid center at (1,2), scale factors (10, 20), 
   minimum value 30 */
double p[5] = { 1.0, 2.0, 10.0, 20.0, 30.0 }; 

my_func.n = 2;  /* number of function components */
my_func.f = &amp;my_f;
my_func.df = &amp;my_df;
my_func.fdf = &amp;my_fdf;
my_func.params = (void *)p;
</PRE></DIV>
<HR>
<A name="Multimin-Iteration"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-Stopping-Criteria" 
rel="next">Multimin Stopping Criteria</A>, Previous: <A accessKey="p" href="#Providing-a-function-to-minimize" 
rel="previous">Providing a function to minimize</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Iteration-3"></A>
<H3 class="section">37.5 Iteration</H3>
<P>The following function drives the iteration of each algorithm. The function 
 performs one iteration to update the state of the minimizer. The same function 
 works for all minimizers so that different methods can be substituted at 
runtime  without modifications to the code. </P>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multimin_fdfminimizer_iterate</STRONG><EM>(gsl_multimin_fdfminimizer 
  * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005fiterate"></A>Function:  
   <EM>int</EM> 
  <STRONG>gsl_multimin_fminimizer_iterate</STRONG><EM>(gsl_multimin_fminimizer * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions perform a single iteration of the minimizer <VAR>s</VAR>.   
  If the iteration encounters an unexpected problem then an error code will be   
  returned. The error code <CODE>GSL_ENOPROG</CODE> signifies that the minimizer 
    is unable to improve on its current estimate, either due to numerical   
  difficulty or because a genuine local minimum has been reached. </P></DD></DL>
<P>The minimizer maintains a current best estimate of the minimum at all times. 
 This information can be accessed with the following auxiliary functions, </P>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ffdfminimizer_005fx"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multimin_fdfminimizer_x</STRONG> <EM>(const  
   gsl_multimin_fdfminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005fx"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multimin_fminimizer_x</STRONG> <EM>(const   
  gsl_multimin_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fminimum"></A>Function:   
  <EM>double</EM> <STRONG>gsl_multimin_fdfminimizer_minimum</STRONG> <EM>(const  
   gsl_multimin_fdfminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005fminimum"></A>Function:  
   <EM>double</EM> <STRONG>gsl_multimin_fminimizer_minimum</STRONG> <EM>(const   
  gsl_multimin_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fgradient"></A>Function:   
  <EM>gsl_vector *</EM> 
  <STRONG>gsl_multimin_fdfminimizer_gradient</STRONG><EM>(const 
  gsl_multimin_fdfminimizer * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultimin_005ffminimizer_005fsize"></A>Function:   
  <EM>double</EM> <STRONG>gsl_multimin_fminimizer_size</STRONG> <EM>(const   
  gsl_multimin_fminimizer * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current best estimate of the location of the   
  minimum, the value of the function at that point, its gradient, and minimizer  
   specific characteristic size for the minimizer <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005frestart"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multimin_fdfminimizer_restart</STRONG><EM>(gsl_multimin_fdfminimizer 
  * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>This function resets the minimizer <VAR>s</VAR> to use the current point as 
    a new starting point. </P></DD></DL>
<HR>
<A name="Multimin-Stopping-Criteria"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-Algorithms-with-Derivatives" 
rel="next">Multimin Algorithms with Derivatives</A>, Previous: <A accessKey="p" 
href="#Multimin-Iteration" 
rel="previous">Multimin Iteration</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Stopping-Criteria"></A>
<H3 class="section">37.6 Stopping Criteria</H3>
<P>A minimization procedure should stop when one of the following conditions is 
 true: </P>
<UL>
  <LI>A minimum has been found to within the user-specified precision. </LI>
  <LI>A user-specified maximum number of iterations has been reached. </LI>
  <LI>An error has occurred. </LI></UL>
<P>The handling of these conditions is under user control. The functions below 
 allow the user to test the precision of the current result. </P>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ftest_005fgradient"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multimin_test_gradient</STRONG> <EM>(const gsl_vector 
    * <VAR>g</VAR>, double <VAR>epsabs</VAR>)</EM></DT>
  <DD>
  <P>This function tests the norm of the gradient <VAR>g</VAR> against the   
  absolute tolerance <VAR>epsabs</VAR>. The gradient of a multidimensional   
  function goes to zero at a minimum. The test returns <CODE>GSL_SUCCESS</CODE>  
   if the following condition is achieved, </P>
  <DIV class="example"><PRE class="example">|g| &lt; epsabs
</PRE></DIV>
  <P>and returns <CODE>GSL_CONTINUE</CODE> otherwise. A suitable choice of   
  <VAR>epsabs</VAR> can be made from the desired accuracy in the function for   
  small variations in <EM>x</EM>. The relationship between these quantities is   
  given by <EM>\delta f = g \delta x</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultimin_005ftest_005fsize"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multimin_test_size</STRONG> <EM>(const double   
  <VAR>size</VAR>, double <VAR>epsabs</VAR>)</EM></DT>
  <DD>
  <P>This function tests the minimizer specific characteristic size (if   
  applicable to the used minimizer) against absolute tolerance   
  <VAR>epsabs</VAR>. The test returns <CODE>GSL_SUCCESS</CODE> if the size is   
  smaller than tolerance, otherwise <CODE>GSL_CONTINUE</CODE> is returned.   
  </P></DD></DL>
<HR>
<A name="Multimin-Algorithms-with-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-Algorithms-without-Derivatives" 
rel="next">Multimin Algorithms without Derivatives</A>, Previous: <A accessKey="p" 
href="#Multimin-Stopping-Criteria" 
rel="previous">Multimin Stopping Criteria</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Algorithms-with-Derivatives"></A>
<H3 class="section">37.7 Algorithms with Derivatives</H3>
<P>There are several minimization methods available. The best choice of 
 algorithm depends on the problem. The algorithms described in this section use 
 the value of the function and its gradient at each evaluation point. </P>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fconjugate_005ffr"></A>Minimizer: 
    <STRONG>gsl_multimin_fdfminimizer_conjugate_fr</STRONG></DT>
  <DD><A name="index-Fletcher_002dReeves-conjugate-gradient-algorithm_002c-minimization"></A><A 
  name="index-Conjugate-gradient-algorithm_002c-minimization"></A><A name="index-minimization_002c-conjugate-gradient-algorithm"></A>
  <P>This is the Fletcher-Reeves conjugate gradient algorithm. The conjugate   
  gradient algorithm proceeds as a succession of line minimizations. The   
  sequence of search directions is used to build up an approximation to the   
  curvature of the function in the neighborhood of the minimum. </P>
  <P>An initial search direction <VAR>p</VAR> is chosen using the gradient, and  
   line minimization is carried out in that direction. The accuracy of the line  
   minimization is specified by the parameter <VAR>tol</VAR>. The minimum along  
   this line occurs when the function gradient <VAR>g</VAR> and the search   
  direction <VAR>p</VAR> are orthogonal. The line minimization terminates when   
  <EM>dot(p,g) &lt; tol |p| |g|</EM>. The search direction is updated using the  
   Fletcher-Reeves formula <EM>p' = g' - \beta g</EM> where   
  <EM>\beta=-|g'|^2/|g|^2</EM>, and the line minimization is then repeated for   
  the new search direction. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fconjugate_005fpr"></A>Minimizer: 
    <STRONG>gsl_multimin_fdfminimizer_conjugate_pr</STRONG></DT>
  <DD><A name="index-Polak_002dRibiere-algorithm_002c-minimization"></A><A name="index-minimization_002c-Polak_002dRibiere-algorithm"></A>
  <P>This is the Polak-Ribiere conjugate gradient algorithm. It is similar to   
  the Fletcher-Reeves method, differing only in the choice of the coefficient   
  <EM>\beta</EM>. Both methods work well when the evaluation point is close   
  enough to the minimum of the objective function that it is well approximated   
  by a quadratic hypersurface. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fvector_005fbfgs2"></A>Minimizer: 
    <STRONG>gsl_multimin_fdfminimizer_vector_bfgs2</STRONG></DT>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fvector_005fbfgs"></A>Minimizer: 
    <STRONG>gsl_multimin_fdfminimizer_vector_bfgs</STRONG></DT>
  <DD><A name="index-BFGS-algorithm_002c-minimization"></A><A name="index-minimization_002c-BFGS-algorithm"></A>
  <P>These methods use the vector Broyden-Fletcher-Goldfarb-Shanno (BFGS)   
  algorithm. This is a quasi-Newton method which builds up an approximation to   
  the second derivatives of the function <EM>f</EM> using the difference between 
    successive gradient vectors. By combining the first and second derivatives 
  the   algorithm is able to take Newton-type steps towards the function 
  minimum,   assuming quadratic behavior in that region. </P>
  <P>The <CODE>bfgs2</CODE> version of this minimizer is the most efficient   
  version available, and is a faithful implementation of the line minimization   
  scheme described in Fletcher’s <CITE>Practical Methods of Optimization</CITE>, 
    Algorithms 2.6.2 and 2.6.4. It supersedes the original <CODE>bfgs</CODE>   
  routine and requires substantially fewer function and gradient evaluations.   
  The user-supplied tolerance <VAR>tol</VAR> corresponds to the parameter   
  <EM>\sigma</EM> used by Fletcher. A value of 0.1 is recommended for typical   
  use (larger values correspond to less accurate line searches). </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffdfminimizer_005fsteepest_005fdescent"></A>Minimizer: 
    <STRONG>gsl_multimin_fdfminimizer_steepest_descent</STRONG></DT>
  <DD><A name="index-steepest-descent-algorithm_002c-minimization"></A><A name="index-minimization_002c-steepest-descent-algorithm"></A>
  <P>The steepest descent algorithm follows the downhill gradient of the   
  function at each step. When a downhill step is successful the step-size is   
  increased by a factor of two. If the downhill step leads to a higher function  
   value then the algorithm backtracks and the step size is decreased using the  
   parameter <VAR>tol</VAR>. A suitable value of <VAR>tol</VAR> for most   
  applications is 0.1. The steepest descent method is inefficient and is   
  included only for demonstration purposes. </P></DD></DL>
<HR>
<A name="Multimin-Algorithms-without-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-Examples" 
rel="next">Multimin Examples</A>, Previous: <A accessKey="p" href="#Multimin-Algorithms-with-Derivatives" 
rel="previous">Multimin Algorithms with Derivatives</A>, Up: <A accessKey="u" 
href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Algorithms-without-Derivatives-2"></A>
<H3 class="section">37.8 Algorithms without Derivatives</H3>
<P>The algorithms described in this section use only the value of the function 
 at each evaluation point. </P>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffminimizer_005fnmsimplex2"></A>Minimizer:   
  <STRONG>gsl_multimin_fminimizer_nmsimplex2</STRONG></DT>
  <DT><A 
  name="index-gsl_005fmultimin_005ffminimizer_005fnmsimplex"></A>Minimizer:   
  <STRONG>gsl_multimin_fminimizer_nmsimplex</STRONG></DT>
  <DD><A name="index-Nelder_002dMead-simplex-algorithm-for-minimization"></A><A 
  name="index-simplex-algorithm_002c-minimization"></A><A name="index-minimization_002c-simplex-algorithm"></A>
  <P>These methods use the Simplex algorithm of Nelder and Mead. Starting from   
  the initial vector <EM><VAR>x</VAR> = p_0</EM>, the algorithm constructs an   
  additional <EM>n</EM> vectors <EM>p_i</EM> using the step size vector <EM>s =  
   <VAR>step_size</VAR></EM> as follows: </P>
  <DIV class="example"><PRE class="example">p_0 = (x_0, x_1, ... , x_n) 
p_1 = (x_0 + s_0, x_1, ... , x_n) 
p_2 = (x_0, x_1 + s_1, ... , x_n) 
... = ...
p_n = (x_0, x_1, ... , x_n + s_n)
</PRE></DIV>
  <P>These vectors form the <EM>n+1</EM> vertices of a simplex in <EM>n</EM>   
  dimensions. On each iteration the algorithm uses simple geometrical   
  transformations to update the vector corresponding to the highest function   
  value. The geometric transformations are reflection, reflection followed by   
  expansion, contraction and multiple contraction. Using these transformations   
  the simplex moves through the space towards the minimum, where it contracts   
  itself. </P>
  <P>After each iteration, the best vertex is returned. Note, that due to the   
  nature of the algorithm not every step improves the current best parameter   
  vector. Usually several iterations are required. </P>
  <P>The minimizer-specific characteristic size is calculated as the average   
  distance from the geometrical center of the simplex to all its vertices. This  
   size can be used as a stopping criteria, as the simplex contracts itself near 
    the minimum. The size is returned by the function   
  <CODE>gsl_multimin_fminimizer_size</CODE>. </P>
  <P>The <CODE>nmsimplex2</CODE> version of this minimiser is a new   
  <EM>O(N)</EM> operations implementation of the earlier <EM>O(N^2)</EM>   
  operations <CODE>nmsimplex</CODE> minimiser. It uses the same underlying   
  algorithm, but the simplex updates are computed more efficiently for   
  high-dimensional problems. In addition, the size of simplex is calculated as   
  the <SMALL>RMS</SMALL> distance of each vertex from the center rather than the 
    mean distance, allowing a linear update of this quantity on each step. The   
  memory usage is <EM>O(N^2)</EM> for both algorithms. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmultimin_005ffminimizer_005fnmsimplex2rand"></A>Minimizer: 
    <STRONG>gsl_multimin_fminimizer_nmsimplex2rand</STRONG></DT>
  <DD>
  <P>This method is a variant of <CODE>nmsimplex2</CODE> which initialises the   
  simplex around the starting point <VAR>x</VAR> using a randomly-oriented set   
  of basis vectors instead of the fixed coordinate axes. The final dimensions of 
    the simplex are scaled along the coordinate axes by the vector   
  <VAR>step_size</VAR>. The randomisation uses a simple deterministic generator  
   so that repeated calls to <CODE>gsl_multimin_fminimizer_set</CODE> for a 
  given   solver object will vary the orientation in a well-defined way. 
  </P></DD></DL>
<HR>
<A name="Multimin-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multimin-References-and-Further-Reading" 
rel="next">Multimin References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Multimin-Algorithms-without-Derivatives" 
rel="previous">Multimin Algorithms without Derivatives</A>, Up: <A accessKey="u" 
href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-27"></A>
<H3 class="section">37.9 Examples</H3>
<P>This example program finds the minimum of the paraboloid function defined 
 earlier. The location of the minimum is offset from the origin in <EM>x</EM> 
and <EM>y</EM>, and the function value at the minimum is non-zero. The main 
program  is given below, it requires the example function given earlier in this 
chapter. </P>
<DIV class="smallexample"><PRE class="verbatim">int
main (void)
{
  size_t iter = 0;
  int status;

  const gsl_multimin_fdfminimizer_type *T;
  gsl_multimin_fdfminimizer *s;

  /* Position of the minimum (1,2), scale factors 
     10,20, height 30. */
  double par[5] = { 1.0, 2.0, 10.0, 20.0, 30.0 };

  gsl_vector *x;
  gsl_multimin_function_fdf my_func;

  my_func.n = 2;
  my_func.f = my_f;
  my_func.df = my_df;
  my_func.fdf = my_fdf;
  my_func.params = par;

  /* Starting point, x = (5,7) */
  x = gsl_vector_alloc (2);
  gsl_vector_set (x, 0, 5.0);
  gsl_vector_set (x, 1, 7.0);

  T = gsl_multimin_fdfminimizer_conjugate_fr;
  s = gsl_multimin_fdfminimizer_alloc (T, 2);

  gsl_multimin_fdfminimizer_set (s, &amp;my_func, x, 0.01, 1e-4);

  do
    {
      iter++;
      status = gsl_multimin_fdfminimizer_iterate (s);

      if (status)
        break;

      status = gsl_multimin_test_gradient (s-&gt;gradient, 1e-3);

      if (status == GSL_SUCCESS)
        printf ("Minimum found at:\n");

      printf ("%5d %.5f %.5f %10.5f\n", iter,
              gsl_vector_get (s-&gt;x, 0), 
              gsl_vector_get (s-&gt;x, 1), 
              s-&gt;f);

    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; 100);

  gsl_multimin_fdfminimizer_free (s);
  gsl_vector_free (x);

  return 0;
}
</PRE></DIV>
<P>The initial step-size is chosen as 0.01, a conservative estimate in this 
 case, and the line minimization parameter is set at 0.0001. The program 
 terminates when the norm of the gradient has been reduced below 0.001. The 
 output of the program is shown below, </P>
<DIV class="example"><PRE class="verbatim">         x       y         f
    1 4.99629 6.99072  687.84780
    2 4.98886 6.97215  683.55456
    3 4.97400 6.93501  675.01278
    4 4.94429 6.86073  658.10798
    5 4.88487 6.71217  625.01340
    6 4.76602 6.41506  561.68440
    7 4.52833 5.82083  446.46694
    8 4.05295 4.63238  261.79422
    9 3.10219 2.25548   75.49762
   10 2.85185 1.62963   67.03704
   11 2.19088 1.76182   45.31640
   12 0.86892 2.02622   30.18555
Minimum found at:
   13 1.00000 2.00000   30.00000
</PRE></DIV>
<P>Note that the algorithm gradually increases the step size as it successfully 
 moves downhill, as can be seen by plotting the successive points. </P>
<P>The conjugate gradient algorithm finds the minimum on its second direction 
 because the function is purely quadratic. Additional iterations would be needed 
 for a more complicated function. </P>
<P>Here is another example using the Nelder-Mead Simplex algorithm to minimize 
 the same example object function, as above. </P>
<DIV class="smallexample"><PRE class="verbatim">int 
main(void)
{
  double par[5] = {1.0, 2.0, 10.0, 20.0, 30.0};

  const gsl_multimin_fminimizer_type *T = 
    gsl_multimin_fminimizer_nmsimplex2;
  gsl_multimin_fminimizer *s = NULL;
  gsl_vector *ss, *x;
  gsl_multimin_function minex_func;

  size_t iter = 0;
  int status;
  double size;

  /* Starting point */
  x = gsl_vector_alloc (2);
  gsl_vector_set (x, 0, 5.0);
  gsl_vector_set (x, 1, 7.0);

  /* Set initial step sizes to 1 */
  ss = gsl_vector_alloc (2);
  gsl_vector_set_all (ss, 1.0);

  /* Initialize method and iterate */
  minex_func.n = 2;
  minex_func.f = my_f;
  minex_func.params = par;

  s = gsl_multimin_fminimizer_alloc (T, 2);
  gsl_multimin_fminimizer_set (s, &amp;minex_func, x, ss);

  do
    {
      iter++;
      status = gsl_multimin_fminimizer_iterate(s);
      
      if (status) 
        break;

      size = gsl_multimin_fminimizer_size (s);
      status = gsl_multimin_test_size (size, 1e-2);

      if (status == GSL_SUCCESS)
        {
          printf ("converged to minimum at\n");
        }

      printf ("%5d %10.3e %10.3e f() = %7.3f size = %.3f\n", 
              iter,
              gsl_vector_get (s-&gt;x, 0), 
              gsl_vector_get (s-&gt;x, 1), 
              s-&gt;fval, size);
    }
  while (status == GSL_CONTINUE &amp;&amp; iter &lt; 100);
  
  gsl_vector_free(x);
  gsl_vector_free(ss);
  gsl_multimin_fminimizer_free (s);

  return status;
}
</PRE></DIV>
<P>The minimum search stops when the Simplex size drops to 0.01. The output is 
 shown below. </P>
<DIV class="example"><PRE class="verbatim">    1  6.500e+00  5.000e+00 f() = 512.500 size = 1.130
    2  5.250e+00  4.000e+00 f() = 290.625 size = 1.409
    3  5.250e+00  4.000e+00 f() = 290.625 size = 1.409
    4  5.500e+00  1.000e+00 f() = 252.500 size = 1.409
    5  2.625e+00  3.500e+00 f() = 101.406 size = 1.847
    6  2.625e+00  3.500e+00 f() = 101.406 size = 1.847
    7  0.000e+00  3.000e+00 f() =  60.000 size = 1.847
    8  2.094e+00  1.875e+00 f() =  42.275 size = 1.321
    9  2.578e-01  1.906e+00 f() =  35.684 size = 1.069
   10  5.879e-01  2.445e+00 f() =  35.664 size = 0.841
   11  1.258e+00  2.025e+00 f() =  30.680 size = 0.476
   12  1.258e+00  2.025e+00 f() =  30.680 size = 0.367
   13  1.093e+00  1.849e+00 f() =  30.539 size = 0.300
   14  8.830e-01  2.004e+00 f() =  30.137 size = 0.172
   15  8.830e-01  2.004e+00 f() =  30.137 size = 0.126
   16  9.582e-01  2.060e+00 f() =  30.090 size = 0.106
   17  1.022e+00  2.004e+00 f() =  30.005 size = 0.063
   18  1.022e+00  2.004e+00 f() =  30.005 size = 0.043
   19  1.022e+00  2.004e+00 f() =  30.005 size = 0.043
   20  1.022e+00  2.004e+00 f() =  30.005 size = 0.027
   21  1.022e+00  2.004e+00 f() =  30.005 size = 0.022
   22  9.920e-01  1.997e+00 f() =  30.001 size = 0.016
   23  9.920e-01  1.997e+00 f() =  30.001 size = 0.013
converged to minimum at
   24  9.920e-01  1.997e+00 f() =  30.001 size = 0.008
</PRE></DIV>
<P>The simplex size first increases, while the simplex moves towards the 
 minimum. After a while the size begins to decrease as the simplex contracts 
 around the minimum. </P>
<HR>
<A name="Multimin-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Multimin-Examples" 
rel="previous">Multimin Examples</A>, Up: <A accessKey="u" href="#Multidimensional-Minimization" 
rel="up">Multidimensional Minimization</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-29"></A>
<H3 class="section">37.10 References and Further Reading</H3>
<P>The conjugate gradient and BFGS methods are described in detail in the 
 following book, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->R. Fletcher, <CITE>Practical Methods of Optimization (Second   
  Edition)</CITE> Wiley (1987), ISBN 0471915475. </LI></UL>
<P>A brief description of multidimensional minimization algorithms and more 
 recent references can be found in, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->C.W. Ueberhuber, <CITE>Numerical Computation (Volume   
  2)</CITE>, Chapter 14, Section 4.4 “Minimization Methods”, p. 325–335,   
  Springer (1997), ISBN 3-540-62057-5. </LI></UL>
<P>The simplex algorithm is described in the following paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->J.A. Nelder and R. Mead, <CITE>A simplex method for function   
  minimization</CITE>, Computer Journal vol. 7 (1965), 308–313. </LI></UL>
<HR>
<A name="Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="next">Nonlinear Least-Squares Fitting</A>, Previous: <A accessKey="p" href="#Multidimensional-Minimization" 
rel="previous">Multidimensional Minimization</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Least_002dSquares-Fitting-1"></A>
<H2 class="chapter">38 Least-Squares Fitting</H2><A name="index-fitting"></A><A 
name="index-least-squares-fit"></A><A 
name="index-regression_002c-least-squares"></A><A name="index-weighted-linear-fits"></A><A 
name="index-unweighted-linear-fits"></A>
<P>This chapter describes routines for performing least squares fits to 
 experimental data using linear combinations of functions. The data may be 
 weighted or unweighted, i.e. with known or unknown errors. For weighted data 
the  functions compute the best fit parameters and their associated covariance 
 matrix. For unweighted data the covariance matrix is estimated from the scatter 
 of the points, giving a variance-covariance matrix. </P>
<P>The functions are divided into separate versions for simple one- or 
 two-parameter regression and multiple-parameter fits. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Fitting-Overview">Fitting 
            Overview</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Linear-regression">Linear 
            regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Regularized-regression">Regularized 
            regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Robust-linear-regression">Robust 
            linear regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Troubleshooting">Troubleshooting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Fitting-Examples-for-linear-regression">Fitting 
            Examples for linear regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Fitting-Examples-for-multi_002dparameter-linear-regression">Fitting 
            Examples for multi-parameter linear regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Fitting-Examples-for-regularized-linear-regression">Fitting 
            Examples for regularized linear regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Fitting-Examples-for-robust-linear-regression">Fitting 
            Examples for robust linear regression</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Fitting-References-and-Further-Reading">Fitting 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Fitting-Overview"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Linear-regression" 
rel="next">Linear regression</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-4"></A>
<H3 class="section">38.1 Overview</H3>
<P>Least-squares fits are found by minimizing <EM>\chi^2</EM> (chi-squared), the 
 weighted sum of squared residuals over <EM>n</EM> experimental datapoints 
<EM>(x_i, y_i)</EM> for the model <EM>Y(c,x)</EM>, </P>
<DIV class="example"><PRE class="example">\chi^2 = \sum_i w_i (y_i - Y(c, x_i))^2
</PRE></DIV>
<P>The <EM>p</EM> parameters of the model are <EM>c = {c_0, c_1, …}</EM>. The 
 weight factors <EM>w_i</EM> are given by <EM>w_i = 1/\sigma_i^2</EM>, where 
<EM>\sigma_i</EM> is the experimental error on the data-point <EM>y_i</EM>. The 
 errors are assumed to be Gaussian and uncorrelated. For unweighted data the 
 chi-squared sum is computed without any weight factors. </P>
<P>The fitting routines return the best-fit parameters <EM>c</EM> and their 
<EM>p \times p</EM> covariance matrix. The covariance matrix measures the 
 statistical errors on the best-fit parameters resulting from the errors on the 
 data, <EM>\sigma_i</EM>, and is defined <A name="index-covariance-matrix_002c-linear-fits"></A>as 
<EM>C_{ab} = &lt;\delta c_a  \delta c_b&gt;</EM> where <EM>&lt; &gt;</EM> 
denotes an average over the  Gaussian error distributions of the underlying 
datapoints. </P>
<P>The covariance matrix is calculated by error propagation from the data errors 
<EM>\sigma_i</EM>. The change in a fitted parameter <EM>\delta c_a</EM> caused 
 by a small change in the data <EM>\delta y_i</EM> is given by </P>
<DIV class="example"><PRE class="example">\delta c_a = \sum_i (dc_a/dy_i) \delta y_i
</PRE></DIV>
<P>allowing the covariance matrix to be written in terms of the errors on the 
 data, </P>
<DIV class="example"><PRE class="example">C_{ab} = \sum_{i,j} (dc_a/dy_i) (dc_b/dy_j) &lt;\delta y_i \delta y_j&gt;
</PRE></DIV>
<P>For uncorrelated data the fluctuations of the underlying datapoints satisfy 
<EM>&lt;\delta y_i \delta y_j&gt; = \sigma_i^2 \delta_{ij}</EM>, giving a 
 corresponding parameter covariance matrix of </P>
<DIV class="example"><PRE class="example">C_{ab} = \sum_i (1/w_i) (dc_a/dy_i) (dc_b/dy_i) 
</PRE></DIV>
<P>When computing the covariance matrix for unweighted data, i.e. data with 
 unknown errors, the weight factors <EM>w_i</EM> in this sum are replaced by the 
 single estimate <EM>w = 1/\sigma^2</EM>, where <EM>\sigma^2</EM> is the 
computed  variance of the residuals about the best-fit model, <EM>\sigma^2 = 
\sum (y_i - Y(c,x_i))^2 / (n-p)</EM>. This is referred to as the 
<EM>variance-covariance  matrix</EM>. <A name="index-variance_002dcovariance-matrix_002c-linear-fits"></A></P>
<P>The standard deviations of the best-fit parameters are given by the square 
 root of the corresponding diagonal elements of the covariance matrix, 
<EM>\sigma_{c_a} = \sqrt{C_{aa}}</EM>. The correlation coefficient of the fit 
 parameters <EM>c_a</EM> and <EM>c_b</EM> is given by <EM>\rho_{ab} = C_{ab} / 
 \sqrt{C_{aa} C_{bb}}</EM>. </P>
<HR>
<A name="Linear-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Multi_002dparameter-regression" 
rel="next">Multi-parameter regression</A>, Previous: <A accessKey="p" href="#Fitting-Overview" 
rel="previous">Fitting Overview</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Linear-regression-1"></A>
<H3 class="section">38.2 Linear regression</H3><A 
name="index-linear-regression"></A>
<P>The functions in this section are used to fit simple one or two parameter 
 linear regression models. The functions are declared in the header file 
<SAMP>gsl_fit.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Linear-regression-with-a-constant-term">Linear 
            regression with a constant term</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Linear-regression-without-a-constant-term">Linear 
            regression without a constant term</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Linear-regression-with-a-constant-term"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Linear-regression-without-a-constant-term" 
rel="next">Linear regression without a constant term</A>, Up: <A accessKey="u" 
href="#Linear-regression" 
rel="up">Linear regression</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Linear-regression-with-a-constant-term-1"></A>
<H4 class="subsection">38.2.1 Linear regression with a constant term</H4>
<P>The functions described in this section can be used to perform least-squares 
 fits to a straight line model, <EM>Y(c,x) = c_0 + c_1 x</EM>. </P><A name="index-covariance-matrix_002c-from-linear-regression"></A>
<DL>
  <DT><A name="index-gsl_005ffit_005flinear"></A>Function: 
  <EM>int</EM><STRONG>gsl_fit_linear</STRONG> <EM>(const double * <VAR>x</VAR>, 
  const size_t   <VAR>xstride</VAR>, const double * <VAR>y</VAR>, const size_t   
  <VAR>ystride</VAR>, size_t <VAR>n</VAR>, double * <VAR>c0</VAR>, double *   
  <VAR>c1</VAR>, double * <VAR>cov00</VAR>, double * <VAR>cov01</VAR>, double *  
   <VAR>cov11</VAR>, double * <VAR>sumsq</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit linear regression coefficients   
  (<VAR>c0</VAR>,<VAR>c1</VAR>) of the model <EM>Y = c_0 + c_1 X</EM> for the   
  dataset (<VAR>x</VAR>, <VAR>y</VAR>), two vectors of length <VAR>n</VAR> with  
   strides <VAR>xstride</VAR> and <VAR>ystride</VAR>. The errors on <VAR>y</VAR> 
    are assumed unknown so the variance-covariance matrix for the parameters   
  (<VAR>c0</VAR>, <VAR>c1</VAR>) is estimated from the scatter of the points   
  around the best-fit line and returned via the parameters (<VAR>cov00</VAR>,   
  <VAR>cov01</VAR>, <VAR>cov11</VAR>). The sum of squares of the residuals from  
   the best-fit line is returned in <VAR>sumsq</VAR>. Note: the correlation   
  coefficient of the data can be computed using   
  <CODE>gsl_stats_correlation</CODE> (see <A href="#Correlation">Correlation</A>), 
    it does not depend on the fit. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffit_005fwlinear"></A>Function: 
  <EM>int</EM><STRONG>gsl_fit_wlinear</STRONG> <EM>(const double * <VAR>x</VAR>, 
  const   size_t <VAR>xstride</VAR>, const double * <VAR>w</VAR>, const size_t   
  <VAR>wstride</VAR>, const double * <VAR>y</VAR>, const size_t   
  <VAR>ystride</VAR>, size_t <VAR>n</VAR>, double * <VAR>c0</VAR>, double *   
  <VAR>c1</VAR>, double * <VAR>cov00</VAR>, double * <VAR>cov01</VAR>, double *  
   <VAR>cov11</VAR>, double * <VAR>chisq</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit linear regression coefficients   
  (<VAR>c0</VAR>,<VAR>c1</VAR>) of the model <EM>Y = c_0 + c_1 X</EM> for the   
  weighted dataset (<VAR>x</VAR>, <VAR>y</VAR>), two vectors of length   
  <VAR>n</VAR> with strides <VAR>xstride</VAR> and <VAR>ystride</VAR>. The   
  vector <VAR>w</VAR>, of length <VAR>n</VAR> and stride <VAR>wstride</VAR>,   
  specifies the weight of each datapoint. The weight is the reciprocal of the   
  variance for each datapoint in <VAR>y</VAR>. </P>
  <P>The covariance matrix for the parameters (<VAR>c0</VAR>, <VAR>c1</VAR>) is  
   computed using the weights and returned via the parameters (<VAR>cov00</VAR>, 
    <VAR>cov01</VAR>, <VAR>cov11</VAR>). The weighted sum of squares of the   
  residuals from the best-fit line, <EM>\chi^2</EM>, is returned in   
  <VAR>chisq</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffit_005flinear_005fest"></A>Function: 
  <EM>int</EM><STRONG>gsl_fit_linear_est</STRONG> <EM>(double <VAR>x</VAR>, 
  double   <VAR>c0</VAR>, double <VAR>c1</VAR>, double <VAR>cov00</VAR>, double  
   <VAR>cov01</VAR>, double <VAR>cov11</VAR>, double * <VAR>y</VAR>, double *   
  <VAR>y_err</VAR>)</EM></DT>
  <DD>
  <P>This function uses the best-fit linear regression coefficients   
  <VAR>c0</VAR>, <VAR>c1</VAR> and their covariance <VAR>cov00</VAR>,   
  <VAR>cov01</VAR>, <VAR>cov11</VAR> to compute the fitted function <VAR>y</VAR> 
    and its standard deviation <VAR>y_err</VAR> for the model <EM>Y = c_0 + c_1  
   X</EM> at the point <VAR>x</VAR>. </P></DD></DL>
<HR>
<A name="Linear-regression-without-a-constant-term"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Linear-regression-with-a-constant-term" 
rel="previous">Linear regression with a constant term</A>, Up: <A accessKey="u" 
href="#Linear-regression" 
rel="up">Linear regression</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Linear-regression-without-a-constant-term-1"></A>
<H4 class="subsection">38.2.2 Linear regression without a constant term</H4>
<P>The functions described in this section can be used to perform least-squares 
 fits to a straight line model without a constant term, <EM>Y = c_1 X</EM>. </P>
<DL>
  <DT><A name="index-gsl_005ffit_005fmul"></A>Function: 
  <EM>int</EM><STRONG>gsl_fit_mul</STRONG> <EM>(const double * <VAR>x</VAR>, 
  const size_t   <VAR>xstride</VAR>, const double * <VAR>y</VAR>, const size_t   
  <VAR>ystride</VAR>, size_t <VAR>n</VAR>, double * <VAR>c1</VAR>, double *   
  <VAR>cov11</VAR>, double * <VAR>sumsq</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit linear regression coefficient   
  <VAR>c1</VAR> of the model <EM>Y = c_1 X</EM> for the datasets (<VAR>x</VAR>,  
   <VAR>y</VAR>), two vectors of length <VAR>n</VAR> with strides   
  <VAR>xstride</VAR> and <VAR>ystride</VAR>. The errors on <VAR>y</VAR> are   
  assumed unknown so the variance of the parameter <VAR>c1</VAR> is estimated   
  from the scatter of the points around the best-fit line and returned via the   
  parameter <VAR>cov11</VAR>. The sum of squares of the residuals from the   
  best-fit line is returned in <VAR>sumsq</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffit_005fwmul"></A>Function: 
  <EM>int</EM><STRONG>gsl_fit_wmul</STRONG> <EM>(const double * <VAR>x</VAR>, 
  const size_t   <VAR>xstride</VAR>, const double * <VAR>w</VAR>, const size_t   
  <VAR>wstride</VAR>, const double * <VAR>y</VAR>, const size_t   
  <VAR>ystride</VAR>, size_t <VAR>n</VAR>, double * <VAR>c1</VAR>, double *   
  <VAR>cov11</VAR>, double * <VAR>sumsq</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit linear regression coefficient   
  <VAR>c1</VAR> of the model <EM>Y = c_1 X</EM> for the weighted datasets   
  (<VAR>x</VAR>, <VAR>y</VAR>), two vectors of length <VAR>n</VAR> with strides  
   <VAR>xstride</VAR> and <VAR>ystride</VAR>. The vector <VAR>w</VAR>, of length 
    <VAR>n</VAR> and stride <VAR>wstride</VAR>, specifies the weight of each   
  datapoint. The weight is the reciprocal of the variance for each datapoint in  
   <VAR>y</VAR>. </P>
  <P>The variance of the parameter <VAR>c1</VAR> is computed using the weights   
  and returned via the parameter <VAR>cov11</VAR>. The weighted sum of squares   
  of the residuals from the best-fit line, <EM>\chi^2</EM>, is returned in   
  <VAR>chisq</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005ffit_005fmul_005fest"></A>Function: 
  <EM>int</EM><STRONG>gsl_fit_mul_est</STRONG> <EM>(double <VAR>x</VAR>, double  
   <VAR>c1</VAR>, double <VAR>cov11</VAR>, double * <VAR>y</VAR>, double *   
  <VAR>y_err</VAR>)</EM></DT>
  <DD>
  <P>This function uses the best-fit linear regression coefficient <VAR>c1</VAR> 
    and its covariance <VAR>cov11</VAR> to compute the fitted function   
  <VAR>y</VAR> and its standard deviation <VAR>y_err</VAR> for the model <EM>Y = 
    c_1 X</EM> at the point <VAR>x</VAR>. </P></DD></DL>
<HR>
<A name="Multi_002dparameter-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Regularized-regression" 
rel="next">Regularized regression</A>, Previous: <A accessKey="p" href="#Linear-regression" 
rel="previous">Linear regression</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Multi_002dparameter-regression-1"></A>
<H3 class="section">38.3 Multi-parameter regression</H3><A name="index-multi_002dparameter-regression"></A><A 
name="index-fits_002c-multi_002dparameter-linear"></A>
<P>This section describes routines which perform least squares fits to a linear 
 model by minimizing the cost function </P>
<DIV class="example"><PRE class="example">\chi^2 = \sum_i w_i (y_i - \sum_j X_ij c_j)^2 = || y - Xc ||_W^2
</PRE></DIV>
<P>where <EM>y</EM> is a vector of <EM>n</EM> observations, <EM>X</EM> is an 
<EM>n</EM>-by-<EM>p</EM> matrix of predictor variables, <EM>c</EM> is a vector 
 of the <EM>p</EM> unknown best-fit parameters to be estimated, and 
<EM>||r||_W^2  = r^T W r</EM>. The matrix <EM>W = 
</EM>diag<EM>(w_1,w_2,...,w_n)</EM> defines  the weights or uncertainties of the 
observation vector. </P>
<P>This formulation can be used for fits to any number of functions and/or 
 variables by preparing the <EM>n</EM>-by-<EM>p</EM> matrix <EM>X</EM> 
 appropriately. For example, to fit to a <EM>p</EM>-th order polynomial in 
<VAR>x</VAR>, use the following matrix, </P>
<DIV class="example"><PRE class="example">X_{ij} = x_i^j
</PRE></DIV>
<P>where the index <EM>i</EM> runs over the observations and the index 
<EM>j</EM> runs from 0 to <EM>p-1</EM>. </P>
<P>To fit to a set of <EM>p</EM> sinusoidal functions with fixed frequencies 
<EM>\omega_1</EM>, <EM>\omega_2</EM>, …, <EM>\omega_p</EM>, use, </P>
<DIV class="example"><PRE class="example">X_{ij} = sin(\omega_j x_i)
</PRE></DIV>
<P>To fit to <EM>p</EM> independent variables <EM>x_1</EM>, <EM>x_2</EM>, …, 
<EM>x_p</EM>, use, </P>
<DIV class="example"><PRE class="example">X_{ij} = x_j(i)
</PRE></DIV>
<P>where <EM>x_j(i)</EM> is the <EM>i</EM>-th value of the predictor variable 
<EM>x_j</EM>. </P>
<P>The solution of the general linear least-squares system requires an 
 additional working space for intermediate results, such as the singular value 
 decomposition of the matrix <EM>X</EM>. </P>
<P>These functions are declared in the header file <SAMP>gsl_multifit.h</SAMP>. 
</P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005falloc"></A>Function:   
  <EM>gsl_multifit_linear_workspace 
  *</EM><STRONG>gsl_multifit_linear_alloc</STRONG> <EM>(size_t <VAR>n</VAR>, 
  size_t   <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultifit_005flinear_005fworkspace"></A>
  <P>This function allocates a workspace for fitting a model to <VAR>n</VAR>   
  observations using <VAR>p</VAR> parameters. The size of the workspace is   
  <EM>O(np + p^2)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multifit_linear_free</STRONG><EM>(gsl_multifit_linear_workspace * 
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fsvd"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_svd</STRONG> <EM>(const gsl_matrix *  
   <VAR>X</VAR>, gsl_multifit_linear_workspace * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function performs a singular value decomposition of the matrix   
  <VAR>X</VAR> and stores the SVD factors internally in <VAR>work</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fbsvd"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_bsvd</STRONG> <EM>(const gsl_matrix * 
    <VAR>X</VAR>, gsl_multifit_linear_workspace * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function performs a singular value decomposition of the matrix   
  <VAR>X</VAR> and stores the SVD factors internally in <VAR>work</VAR>. The   
  matrix <VAR>X</VAR> is first balanced by applying column scaling factors to   
  improve the accuracy of the singular values. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear"></A>Function: 
  <EM>int</EM><STRONG>gsl_multifit_linear</STRONG> <EM>(const gsl_matrix * 
  <VAR>X</VAR>,   const gsl_vector * <VAR>y</VAR>, gsl_vector * <VAR>c</VAR>, 
  gsl_matrix *   <VAR>cov</VAR>, double * <VAR>chisq</VAR>, 
  gsl_multifit_linear_workspace *   <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit parameters <VAR>c</VAR> of the model   
  <EM>y = X c</EM> for the observations <VAR>y</VAR> and the matrix of predictor 
    variables <VAR>X</VAR>, using the preallocated workspace provided in   
  <VAR>work</VAR>. The <EM>p</EM>-by-<EM>p</EM> variance-covariance matrix of   
  the model parameters <VAR>cov</VAR> is set to <EM>\sigma^2 (X^T X)^{-1}</EM>,  
   where <EM>\sigma</EM> is the standard deviation of the fit residuals. The sum 
    of squares of the residuals from the best-fit, <EM>\chi^2</EM>, is returned 
  in   <VAR>chisq</VAR>. If the coefficient of determination is desired, it can 
  be   computed from the expression <EM>R^2 = 1 - \chi^2 / TSS</EM>, where the 
  total   sum of squares (TSS) of the observations <VAR>y</VAR> may be computed 
  from   <CODE>gsl_stats_tss</CODE>. </P>
  <P>The best-fit is found by singular value decomposition of the matrix   
  <VAR>X</VAR> using the modified Golub-Reinsch SVD algorithm, with column   
  scaling to improve the accuracy of the singular values. Any components which   
  have zero singular value (to machine precision) are discarded from the fit.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005fwlinear"></A>Function: 
  <EM>int</EM><STRONG>gsl_multifit_wlinear</STRONG> <EM>(const gsl_matrix * 
  <VAR>X</VAR>,   const gsl_vector * <VAR>w</VAR>, const gsl_vector * 
  <VAR>y</VAR>, gsl_vector *   <VAR>c</VAR>, gsl_matrix * <VAR>cov</VAR>, double 
  * <VAR>chisq</VAR>,   gsl_multifit_linear_workspace * 
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit parameters <VAR>c</VAR> of the weighted 
    model <EM>y = X c</EM> for the observations <VAR>y</VAR> with weights   
  <VAR>w</VAR> and the matrix of predictor variables <VAR>X</VAR>, using the   
  preallocated workspace provided in <VAR>work</VAR>. The   
  <EM>p</EM>-by-<EM>p</EM> covariance matrix of the model parameters   
  <VAR>cov</VAR> is computed as <EM>(X^T W X)^{-1}</EM>. The weighted sum of   
  squares of the residuals from the best-fit, <EM>\chi^2</EM>, is returned in   
  <VAR>chisq</VAR>. If the coefficient of determination is desired, it can be   
  computed from the expression <EM>R^2 = 1 - \chi^2 / WTSS</EM>, where the   
  weighted total sum of squares (WTSS) of the observations <VAR>y</VAR> may be   
  computed from <CODE>gsl_stats_wtss</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fest"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_est</STRONG> <EM>(const gsl_vector *  
   <VAR>x</VAR>, const gsl_vector * <VAR>c</VAR>, const gsl_matrix *   
  <VAR>cov</VAR>, double * <VAR>y</VAR>, double * <VAR>y_err</VAR>)</EM></DT>
  <DD>
  <P>This function uses the best-fit multilinear regression coefficients   
  <VAR>c</VAR> and their covariance matrix <VAR>cov</VAR> to compute the fitted  
   function value <VAR>y</VAR> and its standard deviation <VAR>y_err</VAR> for   
  the model <EM>y = x.c</EM> at the point <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fresiduals"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_residuals</STRONG> <EM>(const   
  gsl_matrix * <VAR>X</VAR>, const gsl_vector * <VAR>y</VAR>, const gsl_vector * 
    <VAR>c</VAR>, gsl_vector * <VAR>r</VAR>)</EM></DT>
  <DD>
  <P>This function computes the vector of residuals <EM>r = y - X c</EM> for the 
    observations <VAR>y</VAR>, coefficients <VAR>c</VAR> and matrix of predictor 
    variables <VAR>X</VAR>. </P></DD></DL>
<HR>
<A name="Regularized-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Robust-linear-regression" 
rel="next">Robust linear regression</A>, Previous: <A accessKey="p" href="#Multi_002dparameter-regression" 
rel="previous">Multi-parameter regression</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Regularized-regression-1"></A>
<H3 class="section">38.4 Regularized regression</H3><A name="index-ridge-regression"></A><A 
name="index-Tikhonov-regression"></A><A 
name="index-regression_002c-ridge"></A><A 
name="index-regression_002c-Tikhonov"></A><A name="index-least-squares_002c-regularized"></A>
<P>Ordinary weighted least squares models seek a solution vector <EM>c</EM> 
 which minimizes the residual </P>
<DIV class="example"><PRE class="example">\chi^2 = || y - Xc ||_W^2
</PRE></DIV>
<P>where <EM>y</EM> is the <EM>n</EM>-by-<EM>1</EM> observation vector, 
<EM>X</EM> is the <EM>n</EM>-by-<EM>p</EM> design matrix, <EM>c</EM> is the 
<EM>p</EM>-by-<EM>1</EM> solution vector, <EM>W =</EM> 
 diag<EM>(w_1,...,w_n)</EM> is the data weighting matrix, and <EM>||r||_W^2 = 
r^T  W r</EM>. In cases where the least squares matrix <EM>X</EM> is 
ill-conditioned,  small perturbations of the matrix or observation vector could 
lead to widely  different solution vectors <EM>c</EM>. In these cases it is 
often advantageous  to include a regularization term in the least squares 
minimization </P>
<DIV class="example"><PRE class="example">\chi^2 = || y - Xc ||_W^2 + \lambda^2 || L c ||^2
</PRE></DIV>
<P>for a suitably chosen regularization parameter <EM>\lambda</EM> and matrix 
<EM>L</EM>. This type of regularization is known as Tikhonov, or ridge, 
 regression. In many cases, <EM>L</EM> is chosen as the identity matrix, giving 
 preference to solution vectors <EM>c</EM> with smaller norms. Including this 
 regularization term leads to the explicit “normal equations” solution </P>
<DIV class="example"><PRE class="example">c = ( X^T W X + \lambda^2 L^T L )^-1 X^T W y
</PRE></DIV>
<P>which reduces to the ordinary least squares solution when <EM>L = 0</EM>. In 
 practice, it is often advantageous to transform a regularized least squares 
 system into the form </P>
<DIV class="example"><PRE class="example">\chi^2 = || y~ - X~ c~ ||^2 + \lambda^2 || c~ ||^2
</PRE></DIV>
<P>This is known as the Tikhonov “standard form” and has the solution 
<EM>\tilde{c} = \left( \tilde{X}^T \tilde{X} + \lambda^2 I \right)^{-1} 
 \tilde{X}^T \tilde{y}</EM>. For a matrix <EM>L</EM> which is square and 
 invertible, this can be accomplished with the transformation </P>
<DIV class="example"><PRE class="example">X~ = sqrt(W) X L^-1
y~ = sqrt(W) y
c~ = L c
</PRE></DIV>
<P>For a general rectangular matrix <EM>L</EM>, a more sophisticated approach is 
 needed (see Hansen 1998, chapter 2.3). In practice, the normal equations 
 solution above is not desirable due to numerical instabilities, and so the 
 system is solved using the singular value decomposition of the matrix 
<EM>\tilde{X}</EM>. The matrix <EM>L</EM> is often chosen as the identity 
 matrix, or as a first or second finite difference operator, to ensure a 
smoothly  varying coefficient vector <EM>c</EM>, or as a diagonal matrix to 
selectively  damp each model parameter differently. If <EM>L \ne I</EM>, the 
user must first  convert the least squares problem to standard form using 
<CODE>gsl_multifit_linear_stdform1</CODE> or 
<CODE>gsl_multifit_linear_stdform2</CODE>, solve the system, and then 
 backtransform the solution vector to recover the solution of the original 
 problem (see <CODE>gsl_multifit_linear_genform1</CODE> and 
<CODE>gsl_multifit_linear_genform2</CODE>. </P>
<P>In many regularization problems, care must be taken when choosing the 
 regularization parameter <EM>\lambda</EM>. Since both the residual norm <EM>||y 
- X c||</EM> and solution norm <EM>||L c||</EM> are being minimized, the 
 parameter <EM>\lambda</EM> represents a tradeoff between minimizing either the 
 residuals or the solution vector. A common tool for visualizing the comprimise 
 between the minimization of these two quantities is known as the L-curve. The 
 L-curve is a log-log plot of the residual norm <EM>||y - X c||</EM> on the 
 horizontal axis and the solution norm <EM>||L c||</EM> on the vertical axis. 
 This curve nearly always as an <EM>L</EM> shaped appearance, with a distinct 
 corner separating the horizontal and vertical sections of the curve. The 
 regularization parameter corresponding to this corner is often chosen as the 
 optimal value. GSL provides routines to calculate the L-curve for all relevant 
 regularization parameters as well as locating the corner. </P>
<P>For most applications, the steps required to solve a regularized least 
 squares problem are as follows: </P>
<OL>
  <LI>Construct the least squares system (<EM>X</EM>, <EM>y</EM>, <EM>W</EM>,   
  <EM>L</EM>) </LI>
  <LI>Transform the system to standard form   
  (<EM>\tilde{X}</EM>,<EM>\tilde{y}</EM>). This step can be skipped if <EM>L =   
  I_p</EM> and <EM>W = I_n</EM>. </LI>
  <LI>Calculate the SVD of <EM>\tilde{X}</EM>. </LI>
  <LI>Determine an appropriate regularization parameter <EM>\lambda</EM> (using  
   for example L-curve analysis). </LI>
  <LI>Solve the standard form system using the chosen <EM>\lambda</EM> and the   
  SVD of <EM>\tilde{X}</EM>. </LI>
  <LI>Backtransform the standard form solution <EM>\tilde{c}</EM> to recover the 
    original solution vector <EM>c</EM>. </LI></OL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fstdform1"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_stdform1</STRONG> <EM>(const   
  gsl_vector * <VAR>L</VAR>, const gsl_matrix * <VAR>X</VAR>, gsl_matrix *   
  <VAR>Xs</VAR>, gsl_multifit_linear_workspace * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function defines a regularization matrix <EM>L =</EM>   
  diag<EM>(l_0,l_1,...,l_{p-1})</EM>. The diagonal matrix element <EM>l_i</EM>   
  is provided by the <EM>i</EM>th element of the input vector <VAR>L</VAR>. The  
   <EM>n</EM>-by-<EM>p</EM> least squares matrix <VAR>X</VAR> is then converted  
   to standard form as described above and the <EM>n</EM>-by-<EM>p</EM> matrix   
  <EM>\tilde{X}</EM> is stored in <VAR>Xs</VAR> on output. In order to apply   
  this transformation, <EM>L^{-1}</EM> must exist and so none of the   
  <EM>l_i</EM> may be zero. After the standard form system has been solved, use  
   <CODE>gsl_multifit_linear_genform1</CODE> to recover the original solution   
  vector. It is allowed for <VAR>X</VAR> = <VAR>Xs</VAR> for an in-place   
  transform. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fstdform2"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_stdform2</STRONG> <EM>(const   
  gsl_matrix * <VAR>L</VAR>, const gsl_matrix * <VAR>X</VAR>, const gsl_vector * 
    <VAR>y</VAR>, gsl_matrix * <VAR>Xs</VAR>, gsl_vector * <VAR>ys</VAR>,   
  gsl_matrix * <VAR>M</VAR>, gsl_multifit_linear_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function converts the least squares system (<VAR>X</VAR>,<VAR>y</VAR>) 
    to standard form (<EM>\tilde{X}</EM>,<EM>\tilde{y}</EM>) as discussed above  
   for the given regularization matrix <VAR>L</VAR>. The matrix <VAR>L</VAR> is 
  a   rectangular (or square) <EM>m</EM>-by-<EM>p</EM> matrix with <EM>m \le 
  p</EM>.   On output, (<EM>\tilde{X}</EM>,<EM>\tilde{y}</EM>) is stored in 
  <VAR>Xs</VAR>   and <VAR>ys</VAR> respectively. The dimensions of 
  <VAR>Xs</VAR> are <EM>(n - p   + m)</EM>-by-<EM>m</EM> and <VAR>ys</VAR> is 
  <EM>(n - p + m)</EM>-by-1. Note   that these dimensions differ from 
  <VAR>X</VAR> and <VAR>y</VAR> for a   non-square matrix <VAR>L</VAR>. 
  <VAR>M</VAR> is an additional   <EM>p</EM>-by-<EM>n</EM> matrix which is 
  required to recover the original   solution vector after the system has been 
  solved (see   <CODE>gsl_multifit_linear_genform2</CODE>). </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fsolve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_solve</STRONG> <EM>(const double   
  <VAR>lambda</VAR>, const gsl_matrix * <VAR>X</VAR>, const gsl_vector *   
  <VAR>y</VAR>, gsl_vector * <VAR>c</VAR>, double * <VAR>rnorm</VAR>, double *   
  <VAR>snorm</VAR>, gsl_multifit_linear_workspace * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function computes the regularized best-fit parameters <VAR>c</VAR>   
  which minimize the cost function <EM>\chi^2 = || y - X c ||^2 + \lambda^2 || c 
    ||^2</EM> which is in standard form. The least squares system must therefore 
    be converted to standard form prior to calling this function. The 
  observation   vector is provided in <VAR>y</VAR> and the matrix of predictor 
  variables in   <VAR>X</VAR>. The SVD of <VAR>X</VAR> must be computed prior to 
  calling this   function, using <CODE>gsl_multifit_linear_svd</CODE>. The 
  regularization   parameter <EM>\lambda</EM> is provided in <VAR>lambda</VAR>. 
  The residual norm   <EM>|| y - X c ||</EM> is returned in <VAR>rnorm</VAR>. 
  The solution norm   <EM>|| c ||</EM> is returned in <VAR>snorm</VAR>. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fgenform1"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_genform1</STRONG> <EM>(const   
  gsl_vector * <VAR>L</VAR>, gsl_vector * <VAR>c</VAR>,   
  gsl_multifit_linear_workspace * <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>After a regularized system has been solved with <EM>L =</EM>   
  diag<EM>(\l_0,\l_1,...,\l_{p-1})</EM>, this function backtransforms the   
  solution vector <VAR>c</VAR> to recover the solution vector of the original   
  problem. The diagonal matrix elements <EM>l_i</EM> are provided in the vector  
   <VAR>L</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fgenform2"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_genform2</STRONG> <EM>(const   
  gsl_matrix * <VAR>L</VAR>, const gsl_matrix * <VAR>X</VAR>, const gsl_vector * 
    <VAR>y</VAR>, const gsl_vector * <VAR>cs</VAR>, const gsl_matrix *   
  <VAR>M</VAR>, gsl_vector * <VAR>c</VAR>, gsl_multifit_linear_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>After a regularized system has been solved with a general rectangular   
  matrix <EM>L</EM>, this function backtransforms the standard form solution   
  <VAR>cs</VAR> to recover the solution vector of the original problem, which is 
    stored in <VAR>c</VAR>. The original least squares matrix and observation   
  vector are provided in <VAR>X</VAR> and <VAR>y</VAR> respectively.   
  <VAR>M</VAR> is the matrix computed by   
  <CODE>gsl_multifit_linear_stdform2</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005flcurve"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_lcurve</STRONG> <EM>(const gsl_vector 
    * <VAR>y</VAR>, gsl_vector * <VAR>reg_param</VAR>, gsl_vector *   
  <VAR>rho</VAR>, gsl_vector * <VAR>eta</VAR>, gsl_multifit_linear_workspace *   
  <VAR>work</VAR>)</EM></DT>
  <DD>
  <P>This function computes the L-curve for a least squares system using the   
  right hand side vector <VAR>y</VAR> and the SVD decomposition of the least   
  squares matrix <VAR>X</VAR>, which must be provided to   
  <CODE>gsl_multifit_linear_svd</CODE> prior to calling this function. The   
  output vectors <VAR>reg_param</VAR>, <VAR>rho</VAR>, and <VAR>eta</VAR> must   
  all be the same size, and will contain the regularization parameters   
  <EM>\lambda_i</EM>, residual norms <EM>||y - X c_i||</EM>, and solution norms  
   <EM>|| L c_i ||</EM> which compose the L-curve, where <EM>c_i</EM> is the   
  regularized solution vector corresponding to <EM>\lambda_i</EM>. The user may  
   determine the number of points on the L-curve by adjusting the size of these  
   input arrays. The regularization parameters <EM>\lambda_i</EM> are estimated  
   from the singular values of <VAR>X</VAR>, and chosen to represent the most   
  relevant portion of the L-curve. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005flcorner"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_lcorner</STRONG> <EM>(const   
  gsl_vector * <VAR>rho</VAR>, const gsl_vector * <VAR>eta</VAR>, size_t *   
  <VAR>idx</VAR>)</EM></DT>
  <DD>
  <P>This function attempts to locate the corner of the L-curve <EM>(||y - X   
  c||, ||L c||)</EM> defined by the <VAR>rho</VAR> and <VAR>eta</VAR> input   
  arrays respectively. The corner is defined as the point of maximum curvature   
  of the L-curve in log-log scale. The <VAR>rho</VAR> and <VAR>eta</VAR> arrays  
   can be outputs of <CODE>gsl_multifit_linear_lcurve</CODE>. The algorithm used 
    simply fits a circle to 3 consecutive points on the L-curve and uses the   
  circle’s radius to determine the curvature at the middle point. Therefore, the 
    input array sizes must be <EM>\ge 3</EM>. With more points provided for the  
   L-curve, a better estimate of the curvature can be obtained. The array index  
   corresponding to maximum curvature (ie: the corner) is returned in   
  <VAR>idx</VAR>. If the input arrays contain colinear points, this function   
  could fail and return <CODE>GSL_EINVAL</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005flcorner2"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_linear_lcorner2</STRONG> <EM>(const   
  gsl_vector * <VAR>reg_param</VAR>, const gsl_vector * <VAR>eta</VAR>, size_t * 
    <VAR>idx</VAR>)</EM></DT>
  <DD>
  <P>This function attempts to locate the corner of an alternate L-curve   
  <EM>(\lambda^2, ||L c||^2)</EM> studied by Rezghi and Hosseini, 2009. This   
  alternate L-curve can provide better estimates of the regularization parameter 
    for smooth solution vectors. The regularization parameters <EM>\lambda</EM>  
   and solution norms <EM>||L c||</EM> are provided in the <VAR>reg_param</VAR>  
   and <VAR>eta</VAR> input arrays respectively. The corner is defined as the   
  point of maximum curvature of this alternate L-curve in linear scale. The   
  <VAR>reg_param</VAR> and <VAR>eta</VAR> arrays can be outputs of   
  <CODE>gsl_multifit_linear_lcurve</CODE>. The algorithm used simply fits a   
  circle to 3 consecutive points on the L-curve and uses the circle’s radius to  
   determine the curvature at the middle point. Therefore, the input array sizes 
    must be <EM>\ge 3</EM>. With more points provided for the L-curve, a better  
   estimate of the curvature can be obtained. The array index corresponding to   
  maximum curvature (ie: the corner) is returned in <VAR>idx</VAR>. If the input 
    arrays contain colinear points, this function could fail and return   
  <CODE>GSL_EINVAL</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005flinear_005fLk"></A>Function:   
  <EM>gsl_matrix *</EM> <STRONG>gsl_multifit_linear_Lk</STRONG> <EM>(const   
  size_t <VAR>p</VAR>, const size_t <VAR>k</VAR>)</EM></DT>
  <DD>
  <P>This function computes the discrete approximation to the derivative   
  operator of order <VAR>k</VAR> on a regular grid of <VAR>p</VAR> points. The   
  dimensions of <EM>L_k</EM> are <EM>(p-k)</EM>-by-<EM>p</EM>. </P></DD></DL>
<HR>
<A name="Robust-linear-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Troubleshooting" 
rel="next">Troubleshooting</A>, Previous: <A accessKey="p" href="#Regularized-regression" 
rel="previous">Regularized regression</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Robust-linear-regression-1"></A>
<H3 class="section">38.5 Robust linear regression</H3><A name="index-robust-regression"></A><A 
name="index-regression_002c-robust"></A><A name="index-least-squares_002c-robust"></A>
<P>Ordinary least squares (OLS) models are often heavily influenced by the 
 presence of outliers. Outliers are data points which do not follow the general 
 trend of the other observations, although there is strictly no precise 
 definition of an outlier. Robust linear regression refers to regression 
 algorithms which are robust to outliers. The most common type of robust 
 regression is M-estimation. The general M-estimator minimizes the objective 
 function </P>
<DIV class="example"><PRE class="example">\sum_i \rho(e_i) = \sum_i \rho (y_i - Y(c, x_i))
</PRE></DIV>
<P>where <EM>e_i = y_i - Y(c, x_i)</EM> is the residual of the ith data point, 
 and <EM>\rho(e_i)</EM> is a function which should have the following 
properties: </P>
<UL class="no-bullet">
  <LI><!-- /@w --><EM>\rho(e) \ge 0</EM> </LI>
  <LI><!-- /@w --><EM>\rho(0) = 0</EM> </LI>
  <LI><!-- /@w --><EM>\rho(-e) = \rho(e)</EM> </LI>
  <LI><!-- /@w --><EM>\rho(e_1) &gt; \rho(e_2)</EM> for <EM>|e_1| &gt;   
  |e_2|</EM> </LI></UL>
<P>The special case of ordinary least squares is given by <EM>\rho(e_i) = 
 e_i^2</EM>. Letting <EM>\psi = \rho'</EM> be the derivative of <EM>\rho</EM>, 
 differentiating the objective function with respect to the coefficients 
<EM>c</EM> and setting the partial derivatives to zero produces the system of 
 equations </P>
<DIV class="example"><PRE class="example">\sum_i \psi(e_i) X_i = 0
</PRE></DIV>
<P>where <EM>X_i</EM> is a vector containing row <EM>i</EM> of the design matrix 
<EM>X</EM>. Next, we define a weight function <EM>w(e) = \psi(e)/e</EM>, and let 
<EM>w_i = w(e_i)</EM>: </P>
<DIV class="example"><PRE class="example">\sum_i w_i e_i X_i = 0
</PRE></DIV>
<P>This system of equations is equivalent to solving a weighted ordinary least 
 squares problem, minimizing <EM>\chi^2 = \sum_i w_i e_i^2</EM>. The weights 
 however, depend on the residuals <EM>e_i</EM>, which depend on the coefficients 
<EM>c</EM>, which depend on the weights. Therefore, an iterative solution is 
 used, called Iteratively Reweighted Least Squares (IRLS). </P>
<OL>
  <LI>Compute initial estimates of the coefficients <EM>c^{(0)}</EM> using   
  ordinary least squares </LI>
  <LI>For iteration <EM>k</EM>, form the residuals <EM>e_i^{(k)} = (y_i - X_i   
  c^{(k-1)})/(t \sigma^{(k)} \sqrt{1 - h_i})</EM>, where <EM>t</EM> is a tuning  
   constant depending on the choice of <EM>\psi</EM>, and <EM>h_i</EM> are the   
  statistical leverages (diagonal elements of the matrix <EM>X (X^T X)^{-1}   
  X^T</EM>). Including <EM>t</EM> and <EM>h_i</EM> in the residual calculation   
  has been shown to improve the convergence of the method. The residual standard 
    deviation is approximated as <EM>\sigma^{(k)} = MAD / 0.6745</EM>, where MAD 
    is the Median-Absolute-Deviation of the <EM>n-p</EM> largest residuals from  
   the previous iteration. </LI>
  <LI>Compute new weights <EM>w_i^{(k)} = \psi(e_i^{(k)})/e_i^{(k)}</EM>. </LI>
  <LI>Compute new coefficients <EM>c^{(k)}</EM> by solving the weighted least   
  squares problem with weights <EM>w_i^{(k)}</EM>. </LI>
  <LI>Steps 2 through 4 are iterated until the coefficients converge or until   
  some maximum iteration limit is reached. Coefficients are tested for   
  convergence using the critera:   
  <DIV class="example"><PRE class="example">|c_i^(k) - c_i^(k-1)| \le \epsilon \times max(|c_i^(k)|, |c_i^(k-1)|)
</PRE></DIV>
  <P>for all <EM>0 \le i &lt; p</EM> where <EM>\epsilon</EM> is a small   
  tolerance factor. </P></LI></OL>
<P>The key to this method lies in selecting the function <EM>\psi(e_i)</EM> to 
 assign smaller weights to large residuals, and larger weights to smaller 
 residuals. As the iteration proceeds, outliers are assigned smaller and smaller 
 weights, eventually having very little or no effect on the fitted model. </P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005falloc"></A>Function:   
  <EM>gsl_multifit_robust_workspace 
  *</EM><STRONG>gsl_multifit_robust_alloc</STRONG> <EM>(const 
  gsl_multifit_robust_type   * <VAR>T</VAR>, const size_t <VAR>n</VAR>, const 
  size_t <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultifit_005frobust_005fworkspace"></A>
  <P>This function allocates a workspace for fitting a model to <VAR>n</VAR>   
  observations using <VAR>p</VAR> parameters. The size of the workspace is   
  <EM>O(np + p^2)</EM>. The type <VAR>T</VAR> specifies the function   
  <EM>\psi</EM> and can be selected from the following choices. </P>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005fdefault"></A>Robust type: 
        <STRONG>gsl_multifit_robust_default</STRONG></DT>
    <DD>
    <P>This specifies the <CODE>gsl_multifit_robust_bisquare</CODE> type (see    
     below) and is a good general purpose choice for robust regression.   
    </P></DD></DL>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005fbisquare"></A>Robust 
    type:     <STRONG>gsl_multifit_robust_bisquare</STRONG></DT>
    <DD>
    <P>This is Tukey’s biweight (bisquare) function and is a good general     
    purpose choice for robust regression. The weight function is given by </P>
    <DIV class="example"><PRE class="example">w(e) = (1 - e^2)^2
</PRE></DIV>
    <P>and the default tuning constant is <EM>t = 4.685</EM>. </P></DD></DL>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005fcauchy"></A>Robust type:  
       <STRONG>gsl_multifit_robust_cauchy</STRONG></DT>
    <DD>
    <P>This is Cauchy’s function, also known as the Lorentzian function. This    
     function does not guarantee a unique solution, meaning different choices of 
        the coefficient vector <VAR>c</VAR> could minimize the objective 
    function.     Therefore this option should be used with care. The weight 
    function is given     by </P>
    <DIV class="example"><PRE class="example">w(e) = 1 / (1 + e^2)
</PRE></DIV>
    <P>and the default tuning constant is <EM>t = 2.385</EM>. </P></DD></DL>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005ffair"></A>Robust type:    
     <STRONG>gsl_multifit_robust_fair</STRONG></DT>
    <DD>
    <P>This is the fair <EM>\rho</EM> function, which guarantees a unique     
    solution and has continuous derivatives to three orders. The weight function 
        is given by </P>
    <DIV class="example"><PRE class="example">w(e) = 1 / (1 + |e|)
</PRE></DIV>
    <P>and the default tuning constant is <EM>t = 1.400</EM>. </P></DD></DL>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005fhuber"></A>Robust type:   
      <STRONG>gsl_multifit_robust_huber</STRONG></DT>
    <DD>
    <P>This specifies Huber’s <EM>\rho</EM> function, which is a parabola in the 
        vicinity of zero and increases linearly for a given threshold <EM>|e| 
    &gt;     t</EM>. This function is also considered an excellent general 
    purpose robust     estimator, however, occasional difficulties can be 
    encountered due to the     discontinuous first derivative of the 
    <EM>\psi</EM> function. The weight     function is given by </P>
    <DIV class="example"><PRE class="example">w(e) = 1/max(1,|e|)
</PRE></DIV>
    <P>and the default tuning constant is <EM>t = 1.345</EM>. </P></DD></DL>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005fols"></A>Robust type:     
    <STRONG>gsl_multifit_robust_ols</STRONG></DT>
    <DD>
    <P>This specifies the ordinary least squares solution, which can be useful   
      for quickly checking the difference between the various robust and OLS     
    solutions. The weight function is given by </P>
    <DIV class="example"><PRE class="example">w(e) = 1
</PRE></DIV>
    <P>and the default tuning constant is <EM>t = 1</EM>. </P></DD></DL>
  <DL>
    <DT><A name="index-gsl_005fmultifit_005frobust_005fwelsch"></A>Robust type:  
       <STRONG>gsl_multifit_robust_welsch</STRONG></DT>
    <DD>
    <P>This specifies the Welsch function which can perform well in cases where  
       the residuals have an exponential distribution. The weight function is 
    given     by </P>
    <DIV class="example"><PRE class="example">w(e) = \exp(-e^2)
</PRE></DIV>
    <P>and the default tuning constant is <EM>t = 2.985</EM>. 
</P></DD></DL></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multifit_robust_free</STRONG><EM>(gsl_multifit_robust_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005fname"></A>Function: 
  <EM>const   char *</EM> <STRONG>gsl_multifit_robust_name</STRONG> <EM>(const   
  gsl_multifit_robust_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the name of the robust type <VAR>T</VAR> specified to 
    <CODE>gsl_multifit_robust_alloc</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005ftune"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_robust_tune</STRONG> <EM>(const double   
  <VAR>tune</VAR>, gsl_multifit_robust_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function sets the tuning constant <EM>t</EM> used to adjust the   
  residuals at each iteration to <VAR>tune</VAR>. Decreasing the tuning constant 
    increases the downweight assigned to large residuals, while increasing the   
  tuning constant decreases the downweight assigned to large residuals. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005fmaxiter"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_robust_maxiter</STRONG> <EM>(const size_t   
  <VAR>maxiter</VAR>, gsl_multifit_robust_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function sets the maximum number of iterations in the iteratively   
  reweighted least squares algorithm to <VAR>maxiter</VAR>. By default, this   
  value is set to 100 by <CODE>gsl_multifit_robust_alloc</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005fweights"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_robust_weights</STRONG> <EM>(const   
  gsl_vector * <VAR>r</VAR>, gsl_vector * <VAR>wts</VAR>,   
  gsl_multifit_robust_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function assigns weights to the vector <VAR>wts</VAR> using the   
  residual vector <VAR>r</VAR> and previously specified weighting function. The  
   output weights are given by <EM>wts_i = w(r_i / (t \sigma))</EM>, where the   
  weighting functions <EM>w</EM> are detailed in   
  <CODE>gsl_multifit_robust_alloc</CODE>. <EM>\sigma</EM> is an estimate of the  
   residual standard deviation based on the Median-Absolute-Deviation and   
  <EM>t</EM> is the tuning constant. This function is useful if the user wishes  
   to implement their own robust regression rather than using the supplied   
  <CODE>gsl_multifit_robust</CODE> routine below. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust"></A>Function: 
  <EM>int</EM><STRONG>gsl_multifit_robust</STRONG> <EM>(const gsl_matrix * 
  <VAR>X</VAR>,   const gsl_vector * <VAR>y</VAR>, gsl_vector * <VAR>c</VAR>, 
  gsl_matrix *   <VAR>cov</VAR>, gsl_multifit_robust_workspace * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the best-fit parameters <VAR>c</VAR> of the model   
  <EM>y = X c</EM> for the observations <VAR>y</VAR> and the matrix of predictor 
    variables <VAR>X</VAR>, attemping to reduce the influence of outliers using  
   the algorithm outlined above. The <EM>p</EM>-by-<EM>p</EM> 
  variance-covariance   matrix of the model parameters <VAR>cov</VAR> is 
  estimated as <EM>\sigma^2   (X^T X)^{-1}</EM>, where <EM>\sigma</EM> is an 
  approximation of the residual   standard deviation using the theory of robust 
  regression. Special care must be   taken when estimating <EM>\sigma</EM> and 
  other statistics such as   <EM>R^2</EM>, and so these are computed internally 
  and are available by   calling the function 
  <CODE>gsl_multifit_robust_statistics</CODE>. </P>
  <P>If the coefficients do not converge within the maximum iteration limit, the 
    function returns <CODE>GSL_EMAXITER</CODE>. In this case, the current   
  estimates of the coefficients and covariance matrix are returned in   
  <VAR>c</VAR> and <VAR>cov</VAR> and the internal fit statistics are computed   
  with these estimates. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005fest"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_robust_est</STRONG> <EM>(const gsl_vector *  
   <VAR>x</VAR>, const gsl_vector * <VAR>c</VAR>, const gsl_matrix *   
  <VAR>cov</VAR>, double * <VAR>y</VAR>, double * <VAR>y_err</VAR>)</EM></DT>
  <DD>
  <P>This function uses the best-fit robust regression coefficients <VAR>c</VAR> 
    and their covariance matrix <VAR>cov</VAR> to compute the fitted function   
  value <VAR>y</VAR> and its standard deviation <VAR>y_err</VAR> for the model   
  <EM>y = x.c</EM> at the point <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005fresiduals"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_robust_residuals</STRONG> <EM>(const   
  gsl_matrix * <VAR>X</VAR>, const gsl_vector * <VAR>y</VAR>, const gsl_vector * 
    <VAR>c</VAR>, gsl_vector * <VAR>r</VAR>, gsl_multifit_robust_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the vector of studentized residuals <EM>r_i = {y_i - 
    (X c)_i \over \sigma \sqrt{1 - h_i}}</EM> for the observations <VAR>y</VAR>, 
    coefficients <VAR>c</VAR> and matrix of predictor variables <VAR>X</VAR>. 
  The   routine <CODE>gsl_multifit_robust</CODE> must first be called to compute 
  the   statisical leverages <EM>h_i</EM> of the matrix <VAR>X</VAR> and 
  residual   standard deviation estimate <EM>\sigma</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005frobust_005fstatistics"></A>Function:   
  <EM>gsl_multifit_robust_stats</EM><STRONG>gsl_multifit_robust_statistics</STRONG> 
  <EM>(const   gsl_multifit_robust_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns a structure containing relevant statistics from a   
  robust regression. The function <CODE>gsl_multifit_robust</CODE> must be   
  called first to perform the regression and calculate these statistics. The   
  returned <CODE>gsl_multifit_robust_stats</CODE> structure contains the   
  following fields. </P>
  <UL class="no-bullet">
    <LI><!-- /@w -->double <CODE>sigma_ols</CODE> This contains the standard     
    deviation of the residuals as computed from ordinary least squares (OLS).    
     </LI>
    <LI><!-- /@w -->double <CODE>sigma_mad</CODE> This contains an estimate of   
      the standard deviation of the final residuals using the     
    Median-Absolute-Deviation statistic </LI>
    <LI><!-- /@w -->double <CODE>sigma_rob</CODE> This contains an estimate of   
      the standard deviation of the final residuals from the theory of robust    
     regression (see Street et al, 1988). </LI>
    <LI><!-- /@w -->double <CODE>sigma</CODE> This contains an estimate of the   
      standard deviation of the final residuals by attemping to reconcile     
    <CODE>sigma_rob</CODE> and <CODE>sigma_ols</CODE> in a reasonable way. </LI>
    <LI><!-- /@w -->double <CODE>Rsq</CODE> This contains the <EM>R^2</EM>     
    coefficient of determination statistic using the estimate     
    <CODE>sigma</CODE>. </LI>
    <LI><!-- /@w -->double <CODE>adj_Rsq</CODE> This contains the adjusted     
    <EM>R^2</EM> coefficient of determination statistic using the estimate     
    <CODE>sigma</CODE>. </LI>
    <LI><!-- /@w -->double <CODE>rmse</CODE> This contains the root mean squared 
        error of the final residuals </LI>
    <LI><!-- /@w -->double <CODE>sse</CODE> This contains the residual sum of    
     squares taking into account the robust covariance matrix. </LI>
    <LI><!-- /@w -->size_t <CODE>dof</CODE> This contains the number of degrees  
       of freedom <EM>n - p</EM> </LI>
    <LI><!-- /@w -->size_t <CODE>numit</CODE> Upon successful convergence, this  
       contains the number of iterations performed </LI>
    <LI><!-- /@w -->gsl_vector * <CODE>weights</CODE> This contains the final    
     weight vector of length <VAR>n</VAR> </LI>
    <LI><!-- /@w -->gsl_vector * <CODE>r</CODE> This contains the final residual 
        vector of length <VAR>n</VAR>, <EM>r = y - X c</EM> </LI></UL></DD></DL>
<HR>
<A name="Troubleshooting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fitting-Examples-for-linear-regression" 
rel="next">Fitting Examples for linear regression</A>, Previous: <A accessKey="p" 
href="#Robust-linear-regression" 
rel="previous">Robust linear regression</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Troubleshooting-1"></A>
<H3 class="section">38.6 Troubleshooting</H3><A name="index-least-squares-troubleshooting"></A>
<P>When using models based on polynomials, care should be taken when 
 constructing the design matrix <EM>X</EM>. If the <EM>x</EM> values are large, 
 then the matrix <EM>X</EM> could be ill-conditioned since its columns are 
powers  of <EM>x</EM>, leading to unstable least-squares solutions. In this case 
it can  often help to center and scale the <EM>x</EM> values using the mean and 
standard  deviation: </P>
<DIV class="example"><PRE class="example">x' = (x - mu)/sigma
</PRE></DIV>
<P>and then construct the <EM>X</EM> matrix using the transformed values 
<EM>x'</EM>. </P>
<HR>
<A name="Fitting-Examples-for-linear-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fitting-Examples-for-multi_002dparameter-linear-regression" 
rel="next">Fitting Examples for multi-parameter linear regression</A>, Previous: 
<A accessKey="p" href="#Troubleshooting" 
rel="previous">Troubleshooting</A>, Up: <A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-for-linear-regression"></A>
<H3 class="section">38.7 Examples for linear regression</H3>
<P>The following program computes a least squares straight-line fit to a simple 
 dataset, and outputs the best-fit line and its associated one 
standard-deviation  error bars. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_fit.h&gt;

int
main (void)
{
  int i, n = 4;
  double x[4] = { 1970, 1980, 1990, 2000 };
  double y[4] = {   12,   11,   14,   13 };
  double w[4] = {  0.1,  0.2,  0.3,  0.4 };

  double c0, c1, cov00, cov01, cov11, chisq;

  gsl_fit_wlinear (x, 1, w, 1, y, 1, n, 
                   &amp;c0, &amp;c1, &amp;cov00, &amp;cov01, &amp;cov11, 
                   &amp;chisq);

  printf ("# best fit: Y = %g + %g X\n", c0, c1);
  printf ("# covariance matrix:\n");
  printf ("# [ %g, %g\n#   %g, %g]\n", 
          cov00, cov01, cov01, cov11);
  printf ("# chisq = %g\n", chisq);

  for (i = 0; i &lt; n; i++)
    printf ("data: %g %g %g\n", 
                   x[i], y[i], 1/sqrt(w[i]));

  printf ("\n");

  for (i = -30; i &lt; 130; i++)
    {
      double xf = x[0] + (i/100.0) * (x[n-1] - x[0]);
      double yf, yf_err;

      gsl_fit_linear_est (xf, 
                          c0, c1, 
                          cov00, cov01, cov11, 
                          &amp;yf, &amp;yf_err);

      printf ("fit: %g %g\n", xf, yf);
      printf ("hi : %g %g\n", xf, yf + yf_err);
      printf ("lo : %g %g\n", xf, yf - yf_err);
    }
  return 0;
}
</PRE></DIV>
<P>The following commands extract the data from the output of the program and 
 display it using the <SMALL>GNU</SMALL> plotutils <CODE>graph</CODE> utility, 
</P>
<DIV class="example"><PRE class="example">$ ./demo &gt; tmp
$ more tmp
# best fit: Y = -106.6 + 0.06 X
# covariance matrix:
# [ 39602, -19.9
#   -19.9, 0.01]
# chisq = 0.8

$ for n in data fit hi lo ; 
   do 
     grep "^$n" tmp | cut -d: -f2 &gt; $n ; 
   done
$ graph -T X -X x -Y y -y 0 20 -m 0 -S 2 -Ie data 
     -S 0 -I a -m 1 fit -m 2 hi -m 2 lo
</PRE></DIV>
<HR>
<A name="Fitting-Examples-for-multi_002dparameter-linear-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fitting-Examples-for-regularized-linear-regression" 
rel="next">Fitting Examples for regularized linear regression</A>, Previous: <A 
accessKey="p" href="#Fitting-Examples-for-linear-regression" 
rel="previous">Fitting Examples for linear regression</A>, Up: <A accessKey="u" 
href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Fitting-Examples-for-multi_002dparameter-linear-regression-1"></A>
<H3 class="section">38.8 Fitting Examples for multi-parameter linear 
 regression</H3>
<P>The following program performs a quadratic fit <EM>y = c_0 + c_1 x + c_2 
 x^2</EM> to a weighted dataset using the generalised linear fitting function 
<CODE>gsl_multifit_wlinear</CODE>. The model matrix <EM>X</EM> for a quadratic 
 fit is given by, </P>
<DIV class="example"><PRE class="example">X = [ 1   , x_0  , x_0^2 ;
      1   , x_1  , x_1^2 ;
      1   , x_2  , x_2^2 ;
      ... , ...  , ...   ]
</PRE></DIV>
<P>where the column of ones corresponds to the constant term <EM>c_0</EM>. The 
 two remaining columns corresponds to the terms <EM>c_1 x</EM> and <EM>c_2 
 x^2</EM>. </P>
<P>The program reads <VAR>n</VAR> lines of data in the format (<VAR>x</VAR>, 
<VAR>y</VAR>, <VAR>err</VAR>) where <VAR>err</VAR> is the error (standard 
 deviation) in the value <VAR>y</VAR>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_multifit.h&gt;

int
main (int argc, char **argv)
{
  int i, n;
  double xi, yi, ei, chisq;
  gsl_matrix *X, *cov;
  gsl_vector *y, *w, *c;

  if (argc != 2)
    {
      fprintf (stderr,"usage: fit n &lt; data\n");
      exit (-1);
    }

  n = atoi (argv[1]);

  X = gsl_matrix_alloc (n, 3);
  y = gsl_vector_alloc (n);
  w = gsl_vector_alloc (n);

  c = gsl_vector_alloc (3);
  cov = gsl_matrix_alloc (3, 3);

  for (i = 0; i &lt; n; i++)
    {
      int count = fscanf (stdin, "%lg %lg %lg",
                          &amp;xi, &amp;yi, &amp;ei);

      if (count != 3)
        {
          fprintf (stderr, "error reading file\n");
          exit (-1);
        }

      printf ("%g %g +/- %g\n", xi, yi, ei);
      
      gsl_matrix_set (X, i, 0, 1.0);
      gsl_matrix_set (X, i, 1, xi);
      gsl_matrix_set (X, i, 2, xi*xi);
      
      gsl_vector_set (y, i, yi);
      gsl_vector_set (w, i, 1.0/(ei*ei));
    }

  {
    gsl_multifit_linear_workspace * work 
      = gsl_multifit_linear_alloc (n, 3);
    gsl_multifit_wlinear (X, w, y, c, cov,
                          &amp;chisq, work);
    gsl_multifit_linear_free (work);
  }

#define C(i) (gsl_vector_get(c,(i)))
#define COV(i,j) (gsl_matrix_get(cov,(i),(j)))

  {
    printf ("# best fit: Y = %g + %g X + %g X^2\n", 
            C(0), C(1), C(2));

    printf ("# covariance matrix:\n");
    printf ("[ %+.5e, %+.5e, %+.5e  \n",
               COV(0,0), COV(0,1), COV(0,2));
    printf ("  %+.5e, %+.5e, %+.5e  \n", 
               COV(1,0), COV(1,1), COV(1,2));
    printf ("  %+.5e, %+.5e, %+.5e ]\n", 
               COV(2,0), COV(2,1), COV(2,2));
    printf ("# chisq = %g\n", chisq);
  }

  gsl_matrix_free (X);
  gsl_vector_free (y);
  gsl_vector_free (w);
  gsl_vector_free (c);
  gsl_matrix_free (cov);

  return 0;
}
</PRE></DIV>
<P>A suitable set of data for fitting can be generated using the following 
 program. It outputs a set of points with gaussian errors from the curve <EM>y = 
 e^x</EM> in the region <EM>0 &lt; x &lt; 2</EM>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_randist.h&gt;

int
main (void)
{
  double x;
  const gsl_rng_type * T;
  gsl_rng * r;
  
  gsl_rng_env_setup ();
  
  T = gsl_rng_default;
  r = gsl_rng_alloc (T);

  for (x = 0.1; x &lt; 2; x+= 0.1)
    {
      double y0 = exp (x);
      double sigma = 0.1 * y0;
      double dy = gsl_ran_gaussian (r, sigma);

      printf ("%g %g %g\n", x, y0 + dy, sigma);
    }

  gsl_rng_free(r);

  return 0;
}
</PRE></DIV>
<P>The data can be prepared by running the resulting executable program, </P>
<DIV class="example"><PRE class="example">$ GSL_RNG_TYPE=mt19937_1999 ./generate &gt; exp.dat
$ more exp.dat
0.1 0.97935 0.110517
0.2 1.3359 0.12214
0.3 1.52573 0.134986
0.4 1.60318 0.149182
0.5 1.81731 0.164872
0.6 1.92475 0.182212
....
</PRE></DIV>
<P>To fit the data use the previous program, with the number of data points 
 given as the first argument. In this case there are 19 data points. </P>
<DIV class="example"><PRE class="example">$ ./fit 19 &lt; exp.dat
0.1 0.97935 +/- 0.110517
0.2 1.3359 +/- 0.12214
...
# best fit: Y = 1.02318 + 0.956201 X + 0.876796 X^2
# covariance matrix:
[ +1.25612e-02, -3.64387e-02, +1.94389e-02  
  -3.64387e-02, +1.42339e-01, -8.48761e-02  
  +1.94389e-02, -8.48761e-02, +5.60243e-02 ]
# chisq = 23.0987
</PRE></DIV>
<P>The parameters of the quadratic fit match the coefficients of the expansion 
 of <EM>e^x</EM>, taking into account the errors on the parameters and the 
<EM>O(x^3)</EM> difference between the exponential and quadratic functions for 
 the larger values of <EM>x</EM>. The errors on the parameters are given by the 
 square-root of the corresponding diagonal elements of the covariance matrix. 
The  chi-squared per degree of freedom is 1.4, indicating a reasonable fit to 
the  data. </P>
<HR>
<A name="Fitting-Examples-for-regularized-linear-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fitting-Examples-for-robust-linear-regression" 
rel="next">Fitting Examples for robust linear regression</A>, Previous: <A 
accessKey="p" href="#Fitting-Examples-for-multi_002dparameter-linear-regression" 
rel="previous">Fitting Examples for multi-parameter linear regression</A>, Up: 
<A accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Fitting-Examples-for-regularized-linear-regression-1"></A>
<H3 class="section">38.9 Fitting Examples for regularized linear regression</H3>
<P>The next program demonstrates the difference between ordinary and regularized 
 least squares when the design matrix is near-singular. In this program, we 
 generate two random normally distributed variables <EM>u</EM> and <EM>v</EM>, 
 with <EM>v = u + noise</EM> so that <EM>u</EM> and <EM>v</EM> are nearly 
 colinear. We then set a third dependent variable <EM>y = u + v + noise</EM> and 
 solve for the coefficients <EM>c_1,c_2</EM> of the model <EM>Y(c_1,c_2) = c_1 u 
 + c_2 v</EM>. Since <EM>u \approx v</EM>, the design matrix <EM>X</EM> is 
nearly  singular, leading to unstable ordinary least squares solutions. </P>
<P>Here is the program output: </P>
<DIV class="example"><PRE class="example">=== Unregularized fit ===
best fit: y = -43.6588 u + 45.6636 v
chisq/dof = 1.00213
=== Regularized fit ===
optimal lambda: 4.51103
best fit: y = 1.00113 u + 1.0032 v
chisq/dof = 1.04499
</PRE></DIV>
<P>We see that the regularized method with the optimal <EM>\lambda = 
 4.51103</EM> finds the correct solution <EM>c_1 \approx c_2 \approx 1</EM>, 
 while the ordinary least squares solution is completely wrong. The optimal 
 regularization parameter <EM>\lambda</EM> is found by calculating the L-curve 
 and finding its corner. The L-curve and its computed corner are plotted below. 
</P>
<P>The program is given below. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_vector.h&gt;
#include &lt;gsl/gsl_matrix.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;
#include &lt;gsl/gsl_multifit.h&gt;

int
main()
{
  const size_t n = 1000; /* number of observations */
  const size_t p = 2;    /* number of model parameters */
  size_t i;
  gsl_rng *r = gsl_rng_alloc(gsl_rng_default);
  gsl_matrix *X = gsl_matrix_alloc(n, p);
  gsl_vector *y = gsl_vector_alloc(n);

  for (i = 0; i &lt; n; ++i)
    {
      /* generate first random variable u */
      double ui = 5.0 * gsl_ran_gaussian(r, 1.0);

      /* set v = u + noise */
      double vi = ui + gsl_ran_gaussian(r, 0.001);

      /* set y = u + v + noise */
      double yi = ui + vi + gsl_ran_gaussian(r, 1.0);

      /* since u =~ v, the matrix X is ill-conditioned */
      gsl_matrix_set(X, i, 0, ui);
      gsl_matrix_set(X, i, 1, vi);

      /* rhs vector */
      gsl_vector_set(y, i, yi);
    }

  {
    const size_t nL = 200;                   /* number of points on L-curve */
    gsl_multifit_linear_workspace *w =
      gsl_multifit_linear_alloc(n, p);
    gsl_vector *c = gsl_vector_alloc(p);     /* OLS solution */
    gsl_vector *c_reg = gsl_vector_alloc(p); /* regularized solution */
    gsl_vector *reg_param = gsl_vector_alloc(nL);
    gsl_vector *rho = gsl_vector_alloc(nL);  /* residual norms */
    gsl_vector *eta = gsl_vector_alloc(nL);  /* solution norms */
    double lambda;                           /* optimal regularization parameter */
    size_t reg_idx;                          /* index of optimal lambda */
    double chisq, rnorm, snorm;

    /* compute SVD of X */
    gsl_multifit_linear_svd(X, w);

    /* unregularized (standard) least squares fit, lambda = 0 */
    gsl_multifit_linear_solve(0.0, X, y, c, &amp;rnorm, &amp;snorm, w);
    chisq = pow(rnorm, 2.0);

    fprintf(stderr, "=== Unregularized fit ===\n");
    fprintf(stderr, "best fit: y = %g u + %g v\n",
      gsl_vector_get(c, 0), gsl_vector_get(c, 1));
    fprintf(stderr, "chisq/dof = %g\n", chisq / (n - p));

    /* calculate L-curve and find its corner */
    gsl_multifit_linear_lcurve(y, reg_param, rho, eta, w);
    gsl_multifit_linear_lcorner(rho, eta, &amp;reg_idx);

    /* store optimal regularization parameter */
    lambda = gsl_vector_get(reg_param, reg_idx);

    /* output L-curve */
    for (i = 0; i &lt; nL; ++i)
      printf("%f %f\n", gsl_vector_get(rho, i), gsl_vector_get(eta, i));

    /* output L-curve corner point */
    printf("\n\n%f %f\n",
           gsl_vector_get(rho, reg_idx),
           gsl_vector_get(eta, reg_idx));

    /* regularize with lambda */
    gsl_multifit_linear_solve(lambda, X, y, c_reg, &amp;rnorm, &amp;snorm, w);
    chisq = pow(rnorm, 2.0) + pow(lambda * snorm, 2.0);

    fprintf(stderr, "=== Regularized fit ===\n");
    fprintf(stderr, "optimal lambda: %g\n", lambda);
    fprintf(stderr, "best fit: y = %g u + %g v\n",
            gsl_vector_get(c_reg, 0), gsl_vector_get(c_reg, 1));
    fprintf(stderr, "chisq/dof = %g\n", chisq / (n - p));

    gsl_multifit_linear_free(w);
    gsl_vector_free(c);
    gsl_vector_free(c_reg);
    gsl_vector_free(reg_param);
    gsl_vector_free(rho);
    gsl_vector_free(eta);
  }

  gsl_rng_free(r);
  gsl_matrix_free(X);
  gsl_vector_free(y);

  return 0;
}
</PRE></DIV>
<HR>
<A name="Fitting-Examples-for-robust-linear-regression"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Fitting-References-and-Further-Reading" 
rel="next">Fitting References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Fitting-Examples-for-regularized-linear-regression" 
rel="previous">Fitting Examples for regularized linear regression</A>, Up: <A 
accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Fitting-Examples-for-robust-linear-regression-1"></A>
<H3 class="section">38.10 Fitting Examples for robust linear regression</H3>
<P>The next program demonstrates the advantage of robust least squares on a 
 dataset with outliers. The program generates linear <EM>(x,y)</EM> data pairs 
on  the line <EM>y = 1.45 x + 3.88</EM>, adds some random noise, and inserts 3 
 outliers into the dataset. Both the robust and ordinary least squares (OLS) 
 coefficients are computed for comparison. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_multifit.h&gt;
#include &lt;gsl/gsl_randist.h&gt;

int
dofit(const gsl_multifit_robust_type *T,
      const gsl_matrix *X, const gsl_vector *y,
      gsl_vector *c, gsl_matrix *cov)
{
  int s;
  gsl_multifit_robust_workspace * work 
    = gsl_multifit_robust_alloc (T, X-&gt;size1, X-&gt;size2);

  s = gsl_multifit_robust (X, y, c, cov, work);
  gsl_multifit_robust_free (work);

  return s;
}

int
main (int argc, char **argv)
{
  int i;
  size_t n;
  const size_t p = 2; /* linear fit */
  gsl_matrix *X, *cov;
  gsl_vector *x, *y, *c, *c_ols;
  const double a = 1.45; /* slope */
  const double b = 3.88; /* intercept */
  gsl_rng *r;

  if (argc != 2)
    {
      fprintf (stderr,"usage: robfit n\n");
      exit (-1);
    }

  n = atoi (argv[1]);

  X = gsl_matrix_alloc (n, p);
  x = gsl_vector_alloc (n);
  y = gsl_vector_alloc (n);

  c = gsl_vector_alloc (p);
  c_ols = gsl_vector_alloc (p);
  cov = gsl_matrix_alloc (p, p);

  r = gsl_rng_alloc(gsl_rng_default);

  /* generate linear dataset */
  for (i = 0; i &lt; n - 3; i++)
    {
      double dx = 10.0 / (n - 1.0);
      double ei = gsl_rng_uniform(r);
      double xi = -5.0 + i * dx;
      double yi = a * xi + b;

      gsl_vector_set (x, i, xi);
      gsl_vector_set (y, i, yi + ei);
    }

  /* add a few outliers */
  gsl_vector_set(x, n - 3, 4.7);
  gsl_vector_set(y, n - 3, -8.3);

  gsl_vector_set(x, n - 2, 3.5);
  gsl_vector_set(y, n - 2, -6.7);

  gsl_vector_set(x, n - 1, 4.1);
  gsl_vector_set(y, n - 1, -6.0);

  /* construct design matrix X for linear fit */
  for (i = 0; i &lt; n; ++i)
    {
      double xi = gsl_vector_get(x, i);

      gsl_matrix_set (X, i, 0, 1.0);
      gsl_matrix_set (X, i, 1, xi);
    }

  /* perform robust and OLS fit */
  dofit(gsl_multifit_robust_ols, X, y, c_ols, cov);
  dofit(gsl_multifit_robust_bisquare, X, y, c, cov);

  /* output data and model */
  for (i = 0; i &lt; n; ++i)
    {
      double xi = gsl_vector_get(x, i);
      double yi = gsl_vector_get(y, i);
      gsl_vector_view v = gsl_matrix_row(X, i);
      double y_ols, y_rob, y_err;

      gsl_multifit_robust_est(&amp;v.vector, c, cov, &amp;y_rob, &amp;y_err);
      gsl_multifit_robust_est(&amp;v.vector, c_ols, cov, &amp;y_ols, &amp;y_err);

      printf("%g %g %g %g\n", xi, yi, y_rob, y_ols);
    }

#define C(i) (gsl_vector_get(c,(i)))
#define COV(i,j) (gsl_matrix_get(cov,(i),(j)))

  {
    printf ("# best fit: Y = %g + %g X\n", 
            C(0), C(1));

    printf ("# covariance matrix:\n");
    printf ("# [ %+.5e, %+.5e\n",
               COV(0,0), COV(0,1));
    printf ("#   %+.5e, %+.5e\n", 
               COV(1,0), COV(1,1));
  }

  gsl_matrix_free (X);
  gsl_vector_free (x);
  gsl_vector_free (y);
  gsl_vector_free (c);
  gsl_vector_free (c_ols);
  gsl_matrix_free (cov);
  gsl_rng_free(r);

  return 0;
}
</PRE></DIV>
<P>The output from the program is shown in the following plot. </P>
<HR>
<A name="Fitting-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Fitting-Examples-for-robust-linear-regression" 
rel="previous">Fitting Examples for robust linear regression</A>, Up: <A 
accessKey="u" href="#Least_002dSquares-Fitting" 
rel="up">Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-30"></A>
<H3 class="section">38.11 References and Further Reading</H3>
<P>A summary of formulas and techniques for least squares fitting can be found 
 in the “Statistics” chapter of the Annual Review of Particle Physics prepared 
by  the Particle Data Group, </P>
<UL class="no-bullet">
  <LI><!-- /@w --><CITE>Review of Particle Properties</CITE>, R.M. Barnett et   
  al., Physical Review D54, 1 (1996) <A 
  href="http://pdg.lbl.gov/">http://pdg.lbl.gov/</A> </LI></UL>
<P>The Review of Particle Physics is available online at the website given 
 above. </P><A name="index-NIST-Statistical-Reference-Datasets"></A><A name="index-Statistical-Reference-Datasets-_0028StRD_0029"></A>
<P>The tests used to prepare these routines are based on the NIST Statistical 
 Reference Datasets. The datasets and their documentation are available from 
NIST  at the following website, </P>
<DIV align="center"><A 
href="http://www.nist.gov/itl/div898/strd/index.html">http://www.nist.gov/itl/div898/strd/index.html</A>. 
</DIV>
<P>More information on Tikhonov regularization can be found in </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Hansen, P. C. (1998), Rank-Deficient and Discrete Ill-Posed   
  Problems: Numerical Aspects of Linear Inversion. SIAM Monogr. on Mathematical  
   Modeling and Computation, Society for Industrial and Applied Mathematics 
</LI>
  <LI><!-- /@w -->M. Rezghi and S. M. Hosseini (2009), A new variant of L-curve  
   for Tikhonov regularization, Journal of Computational and Applied 
  Mathematics,   Volume 231, Issue 2, pages 914-924. </LI></UL>
<P>The GSL implementation of robust linear regression closely follows the 
 publications </P>
<UL class="no-bullet">
  <LI><!-- /@w -->DuMouchel, W. and F. O’Brien (1989), "Integrating a robust   
  option into a multiple regression computing environment," Computer Science and 
    Statistics: Proceedings of the 21st Symposium on the Interface, American   
  Statistical Association </LI>
  <LI><!-- /@w -->Street, J.O., R.J. Carroll, and D. Ruppert (1988), "A note on  
   computing robust regression estimates via iteratively reweighted least   
  squares," The American Statistician, v. 42, pp. 152-154. </LI></UL>
<HR>
<A name="Nonlinear-Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Basis-Splines" 
rel="next">Basis Splines</A>, Previous: <A accessKey="p" href="#Least_002dSquares-Fitting" 
rel="previous">Least-Squares Fitting</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Nonlinear-Least_002dSquares-Fitting-1"></A>
<H2 class="chapter">39 Nonlinear Least-Squares Fitting</H2><A name="index-nonlinear-least-squares-fitting"></A><A 
name="index-least-squares-fitting_002c-nonlinear"></A>
<P>This chapter describes functions for multidimensional nonlinear least-squares 
 fitting. The library provides low level components for a variety of iterative 
 solvers and convergence tests. These can be combined by the user to achieve the 
 desired solution, with full access to the intermediate steps of the iteration. 
 Each class of methods uses the same framework, so that you can switch between 
 solvers at runtime without needing to recompile your program. Each instance of 
a  solver keeps track of its own state, allowing the solvers to be used in 
 multi-threaded programs. </P>
<P>The header file <SAMP>gsl_multifit_nlin.h</SAMP> contains prototypes for the 
 multidimensional nonlinear fitting functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Overview-of-Nonlinear-Least_002dSquares-Fitting">Overview 
            of Nonlinear Least-Squares Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Overview-of-Weighted-Nonlinear-Least_002dSquares-Fitting">Overview 
            of Weighted Nonlinear Least-Squares Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Overview-of-Regularized-Nonlinear-Least_002dSquares-Fitting">Overview 
            of Regularized Nonlinear Least-Squares Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Providing-the-Function-to-be-Minimized">Providing 
            the Function to be Minimized</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Finite-Difference-Jacobian">Finite 
            Difference Jacobian</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#High-Level-Driver">High 
            Level Driver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Minimization-Algorithms-without-Derivatives">Minimization 
            Algorithms without Derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Computing-the-covariance-matrix-of-best-fit-parameters">Computing 
            the covariance matrix of best fit parameters</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Troubleshooting-Nonlinear-Least-Squares">Troubleshooting 
            Nonlinear Least Squares</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Example-programs-for-Nonlinear-Least_002dSquares-Fitting">Example 
            programs for Nonlinear Least-Squares Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting">References 
            and Further Reading for Nonlinear Least-Squares Fitting</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Overview-of-Nonlinear-Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Overview-of-Weighted-Nonlinear-Least_002dSquares-Fitting" 
rel="next">Overview of Weighted Nonlinear Least-Squares Fitting</A>, Up: <A 
accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-5"></A>
<H3 class="section">39.1 Overview</H3><A name="index-nonlinear-least-squares-fitting_002c-overview"></A>
<P>The problem of multidimensional nonlinear least-squares fitting requires the 
 minimization of the squared residuals of <EM>n</EM> functions, <EM>f_i</EM>, in 
<EM>p</EM> parameters, <EM>x_i</EM>, </P>
<DIV class="example"><PRE class="example">\Phi(x) = (1/2) || f(x) ||^2
        = (1/2) \sum_{i=1}^{n} f_i(x_1, ..., x_p)^2 
</PRE></DIV>
<P>All algorithms proceed from an initial guess using the linearization, </P>
<DIV class="example"><PRE class="example">\psi(\delta) = || f(x+\delta) || ~=~ || f(x) + J \delta ||
</PRE></DIV>
<P>where <EM>x</EM> is the initial point, <EM>\delta</EM> is the proposed step 
 and <EM>J</EM> is the Jacobian matrix <EM>J_{ij} = d f_i / d x_j</EM>. 
 Additional strategies are used to enlarge the region of convergence. These 
 include requiring a decrease in the norm <EM>||f||</EM> on each step or using a 
 trust region to avoid steps which fall outside the linear regime. </P>
<P>Note that the model parameters are denoted by <EM>x</EM> in this chapter 
 since the non-linear least-squares algorithms are described geometrically (i.e. 
 finding the minimum of a surface). The independent variable of any data to be 
 fitted is denoted by <EM>t</EM>. </P>
<HR>
<A name="Overview-of-Weighted-Nonlinear-Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Overview-of-Regularized-Nonlinear-Least_002dSquares-Fitting" 
rel="next">Overview of Regularized Nonlinear Least-Squares Fitting</A>, 
Previous: <A accessKey="p" href="#Overview-of-Nonlinear-Least_002dSquares-Fitting" 
rel="previous">Overview of Nonlinear Least-Squares Fitting</A>, Up: <A 
accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Weighted-Nonlinear-Least_002dSquares"></A>
<H3 class="section">39.2 Weighted Nonlinear Least-Squares</H3>
<P>Weighted nonlinear least-squares fitting minimizes the function </P>
<DIV class="example"><PRE class="example">\Phi(x) = (1/2) || f(x) ||^2
        = (1/2) \sum_{i=1}^{n} f_i(x_1, ..., x_p)^2 
</PRE></DIV>
<P>where <EM>W = diag(w_1,w_2,...,w_n)</EM> is the weighting matrix, and the 
 weights <EM>w_i</EM> are commonly defined as <EM>w_i = 1/\sigma_i^2</EM>, where 
<EM>\sigma_i</EM> is the error in the <EM>i</EM>th measurement. A simple change 
 of variables <EM>\tilde{f} = \sqrt{W} f</EM> yields <EM>\Phi(x) = {1 \over 2} 
 ||\tilde{f}||^2</EM>, which is in the same form as the unweighted case. The 
user  can either perform this transform directly on their function residuals and 
 Jacobian, or use the <CODE>gsl_multifit_fdfsolver_wset</CODE> interface which 
 automatically performs the correct scaling. To manually perform this 
 transformation, the residuals and Jacobian should be modified according to </P>
<DIV class="example"><PRE class="example">f_i = (Y(x, t_i) - y_i) / \sigma_i
</PRE></DIV>
<P>where <EM>Y_i = Y(x,t_i)</EM>. </P>
<HR>
<A name="Overview-of-Regularized-Nonlinear-Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-the-Nonlinear-Least_002dSquares-Solver" 
rel="next">Initializing the Nonlinear Least-Squares Solver</A>, Previous: <A 
accessKey="p" href="#Overview-of-Weighted-Nonlinear-Least_002dSquares-Fitting" 
rel="previous">Overview of Weighted Nonlinear Least-Squares Fitting</A>, Up: <A 
accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Regularized-Nonlinear-Least_002dSquares"></A>
<H3 class="section">39.3 Regularized Nonlinear Least-Squares</H3>
<P>In cases where the Jacobian <EM>J</EM> is rank-deficient or singular, 
 standard nonlinear least squares can sometimes produce undesirable and unstable 
 solutions. In these cases, it can help to regularize the problem using ridge or 
 Tikhonov regularization. In this method, we introduce a term in our 
minimization  function which is designed to damp the solution vector <EM>x</EM>, 
or give  preference to solutions with smaller norms. </P>
<DIV class="example"><PRE class="example">\Phi(x) = (1/2) || f(x) ||^2 + (1/2) ||Lx||^2
</PRE></DIV>
<P>Here, the regularization matrix <EM>L</EM> is often set as <EM>L = \lambda 
 I</EM>, for a positive scalar <EM>\lambda</EM>, but can also be a general 
<EM>m</EM>-by-<EM>p</EM> (where <EM>m</EM> is any number of rows) matrix 
 depending on the structure of the problem to be solved. If we define a new 
<EM>(n+m)</EM>-by-1 vector </P>
<DIV class="example"><PRE class="example">f~(x) = [ f(x); Lx ]
</PRE></DIV>
<P>or, in the weighted case, </P>
<DIV class="example"><PRE class="example">f~(x) = [ sqrt(W) f(x); Lx ]
</PRE></DIV>
<P>then </P>
<DIV class="example"><PRE class="example">\Phi(x) = (1/2) || f~(x) ||^2
</PRE></DIV>
<P>which is in the same form as the standard nonlinear least squares problem. 
 The corresponding <EM>(n+m)</EM>-by-<EM>p</EM> Jacobian matrix is </P>
<DIV class="example"><PRE class="example">F~(x) = [ J; L ]
</PRE></DIV>
<P>or for weighted systems </P>
<DIV class="example"><PRE class="example">F~(x) = [ sqrt(W) J; L ]
</PRE></DIV>
<P>While the user could explicitly form the <EM>\tilde{f}(x)</EM> vector and 
<EM>\tilde{J}</EM> matrix, the <CODE>fdfridge</CODE> interface described below 
 allows the user to specify the original data vector <EM>f(x)</EM>, Jacobian 
<EM>J</EM>, regularization matrix <EM>L</EM>, and optional weighting matrix 
<EM>W</EM>, and automatically forms <EM>\tilde{f}(x)</EM> and <EM>\tilde{J}</EM> 
 to solve the system. This allows switching between regularized and 
 non-regularized solutions with minimal code changes. </P>
<HR>
<A name="Initializing-the-Nonlinear-Least_002dSquares-Solver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Providing-the-Function-to-be-Minimized" 
rel="next">Providing the Function to be Minimized</A>, Previous: <A accessKey="p" 
href="#Overview-of-Regularized-Nonlinear-Least_002dSquares-Fitting" 
rel="previous">Overview of Regularized Nonlinear Least-Squares Fitting</A>, Up: 
<A accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-Solver-3"></A>
<H3 class="section">39.4 Initializing the Solver</H3>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005falloc"></A>Function:   
  <EM>gsl_multifit_fsolver *</EM> 
  <STRONG>gsl_multifit_fsolver_alloc</STRONG><EM>(const 
  gsl_multifit_fsolver_type * <VAR>T</VAR>, size_t <VAR>n</VAR>,   size_t 
  <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultifit_005ffsolver"></A><A name="index-gsl_005fmultifit_005ffsolver_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a solver   
  of type <VAR>T</VAR> for <VAR>n</VAR> observations and <VAR>p</VAR>   
  parameters. The number of observations <VAR>n</VAR> must be greater than or   
  equal to parameters <VAR>p</VAR>. </P>
  <P>If there is insufficient memory to create the solver then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005falloc"></A>Function:   
  <EM>gsl_multifit_fdfsolver *</EM><STRONG>gsl_multifit_fdfsolver_alloc</STRONG> 
  <EM>(const   gsl_multifit_fdfsolver_type * <VAR>T</VAR>, size_t <VAR>n</VAR>, 
  size_t   <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultifit_005ffdfsolver"></A><A name="index-gsl_005fmultifit_005ffdfsolver_005ftype"></A>
  <P>This function returns a pointer to a newly allocated instance of a   
  derivative solver of type <VAR>T</VAR> for <VAR>n</VAR> observations and   
  <VAR>p</VAR> parameters. For example, the following code creates an instance   
  of a Levenberg-Marquardt solver for 100 data points and 3 parameters, </P>
  <DIV class="example"><PRE class="example">const gsl_multifit_fdfsolver_type * T 
    = gsl_multifit_fdfsolver_lmder;
gsl_multifit_fdfsolver * s 
    = gsl_multifit_fdfsolver_alloc (T, 100, 3);
</PRE></DIV>
  <P>The number of observations <VAR>n</VAR> must be greater than or equal to   
  parameters <VAR>p</VAR>. </P>
  <P>If there is insufficient memory to create the solver then the function   
  returns a null pointer and the error handler is invoked with an error code of  
   <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005falloc"></A>Function:   
  <EM>gsl_multifit_fdfridge *</EM> 
  <STRONG>gsl_multifit_fdfridge_alloc</STRONG><EM>(const 
  gsl_multifit_fdfsolver_type * <VAR>T</VAR>, size_t <VAR>n</VAR>,   size_t 
  <VAR>p</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fmultifit_005ffdfridge"></A>
  <P>This function returns a pointer to a newly allocated instance of a   
  derivative solver of type <VAR>T</VAR> for <VAR>n</VAR> observations and   
  <VAR>p</VAR> parameters. The solver will automatically form the augmented   
  system <EM>\tilde{f}(x)</EM> and <EM>\tilde{J}</EM> for ridge (Tikhonov)   
  regression. If there is insufficient memory to create the solver then the   
  function returns a null pointer and the error handler is invoked with an error 
    code of <CODE>GSL_ENOMEM</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fsolver_set</STRONG><EM>(gsl_multifit_fsolver * 
  <VAR>s</VAR>, gsl_multifit_function *   <VAR>f</VAR>, const gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function initializes, or reinitializes, an existing solver   
  <VAR>s</VAR> to use the function <VAR>f</VAR> and the initial guess   
  <VAR>x</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfsolver_set</STRONG><EM>(gsl_multifit_fdfsolver * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fwset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfsolver_wset</STRONG><EM>(gsl_multifit_fdfsolver * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const gsl_vector *   <VAR>wts</VAR>)</EM></DT>
  <DD>
  <P>These functions initialize, or reinitialize, an existing solver   
  <VAR>s</VAR> to use the function and derivative <VAR>fdf</VAR> and the initial 
    guess <VAR>x</VAR>. </P>
  <P>Optionally, a weight vector <VAR>wts</VAR> can be given to perform a   
  weighted nonlinear regression. Here, the weighting matrix is <EM>W =   
  diag(w_1,w_2,...,w_n)</EM>. The <VAR>wts</VAR> vector is referenced throughout 
    the iteration so it should not be freed by the caller until the iteration   
  terminates. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_set</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const double   <VAR>lambda</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fwset"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_wset</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const double   <VAR>lambda</VAR>, const gsl_vector * 
  <VAR>wts</VAR>)</EM></DT>
  <DD>
  <P>This function initializes, or reinitializes, an existing ridge solver   
  <VAR>s</VAR> to use the function and derivative <VAR>fdf</VAR> and the initial 
    guess <VAR>x</VAR>. Here, the regularization matrix is set to <EM>L = 
  \lambda   I</EM>, with <EM>\lambda</EM> specified in <VAR>lambda</VAR>. </P>
  <P>Optionally, a weight vector <VAR>wts</VAR> can be given to perform a   
  weighted nonlinear regression. Here, the weighting matrix is <EM>W =   
  diag(w_1,w_2,...,w_n)</EM>. The <VAR>wts</VAR> vector is referenced throughout 
    the iteration so it should not be freed by the caller until the iteration   
  terminates. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fset2"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_set2</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const gsl_vector *   <VAR>lambda</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fwset2"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_wset2</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const gsl_vector *   <VAR>lambda</VAR>, const gsl_vector * 
  <VAR>wts</VAR>)</EM></DT>
  <DD>
  <P>This function initializes, or reinitializes, an existing ridge solver   
  <VAR>s</VAR> to use the function and derivative <VAR>fdf</VAR> and the initial 
    guess <VAR>x</VAR>. Here, the regularization matrix is set to <EM>L =   
  diag(\lambda_1,\lambda_2,...,\lambda_p)</EM>, where the <EM>\lambda_i</EM> are 
    given in <VAR>lambda</VAR>. </P>
  <P>Optionally, a weight vector <VAR>wts</VAR> can be given to perform a   
  weighted nonlinear regression. Here, the weighting matrix is <EM>W =   
  diag(w_1,w_2,...,w_n)</EM>. The <VAR>wts</VAR> vector is referenced throughout 
    the iteration so it should not be freed by the caller until the iteration   
  terminates. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fset3"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_set3</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const gsl_matrix *   <VAR>L</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fwset3"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_wset3</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, gsl_multifit_function_fdf *   <VAR>fdf</VAR>, const gsl_vector * 
  <VAR>x</VAR>, const gsl_matrix *   <VAR>L</VAR>, const gsl_vector * 
  <VAR>wts</VAR>)</EM></DT>
  <DD>
  <P>This function initializes, or reinitializes, an existing ridge solver   
  <VAR>s</VAR> to use the function and derivative <VAR>fdf</VAR> and the initial 
    guess <VAR>x</VAR>. Here, the regularization matrix is set to <VAR>L</VAR>,  
   which must have <EM>p</EM> columns but may have any number of rows. </P>
  <P>Optionally, a weight vector <VAR>wts</VAR> can be given to perform a   
  weighted nonlinear regression. Here, the weighting matrix is <EM>W =   
  diag(w_1,w_2,...,w_n)</EM>. The <VAR>wts</VAR> vector is referenced throughout 
    the iteration so it should not be freed by the caller until the iteration   
  terminates. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multifit_fsolver_free</STRONG><EM>(gsl_multifit_fsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multifit_fdfsolver_free</STRONG><EM>(gsl_multifit_fdfsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_multifit_fdfridge_free</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions free all the memory associated with the solver   
  <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_multifit_fsolver_name</STRONG> <EM>(const   
  gsl_multifit_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_multifit_fdfsolver_name</STRONG> <EM>(const  
   gsl_multifit_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_multifit_fdfridge_name</STRONG> <EM>(const   
  gsl_multifit_fdfridge * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return a pointer to the name of the solver. For example,   
  </P>
  <DIV class="example"><PRE class="example">printf ("s is a '%s' solver\n", 
        gsl_multifit_fdfsolver_name (s));
</PRE></DIV>
  <P>would print something like <CODE>s is a 'lmder' solver</CODE>. </P></DD></DL>
<HR>
<A name="Providing-the-Function-to-be-Minimized"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Finite-Difference-Jacobian" 
rel="next">Finite Difference Jacobian</A>, Previous: <A accessKey="p" href="#Initializing-the-Nonlinear-Least_002dSquares-Solver" 
rel="previous">Initializing the Nonlinear Least-Squares Solver</A>, Up: <A 
accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Providing-the-Function-to-be-Minimized-1"></A>
<H3 class="section">39.5 Providing the Function to be Minimized</H3>
<P>You must provide <EM>n</EM> functions of <EM>p</EM> variables for the 
 minimization algorithms to operate on. In order to allow for arbitrary 
 parameters the functions are defined by the following data types: </P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffunction"></A>Data Type:   
  <STRONG>gsl_multifit_function</STRONG></DT>
  <DD>
  <P>This data type defines a general system of functions with arbitrary   
  parameters. </P>
  <DL compact="">
    <DT><CODE>int (* f) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_vector * <VAR>f</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the vector result <EM>f(x,params)</EM> in     
    <VAR>f</VAR> for argument <VAR>x</VAR> and arbitrary parameters     
    <VAR>params</VAR>, returning an appropriate error code if the function     
    cannot be computed. </P></DD>
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>the number of functions, i.e. the number of components of the vector     
    <VAR>f</VAR>. </P></DD>
    <DT><CODE>size_t p</CODE></DT>
    <DD>
    <P>the number of independent variables, i.e. the number of components of the 
        vector <VAR>x</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the arbitrary parameters of the function. 
</P></DD></DL></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffunction_005ffdf"></A>Data Type:   
  <STRONG>gsl_multifit_function_fdf</STRONG></DT>
  <DD>
  <P>This data type defines a general system of functions with arbitrary   
  parameters and the corresponding Jacobian matrix of derivatives, </P>
  <DL compact="">
    <DT><CODE>int (* f) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_vector * <VAR>f</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the vector result <EM>f(x,params)</EM> in     
    <VAR>f</VAR> for argument <VAR>x</VAR> and arbitrary parameters     
    <VAR>params</VAR>, returning an appropriate error code if the function     
    cannot be computed. </P></DD>
    <DT><CODE>int (* df) (const gsl_vector * <VAR>x</VAR>, void *     
    <VAR>params</VAR>, gsl_matrix * <VAR>J</VAR>)</CODE></DT>
    <DD>
    <P>this function should store the <VAR>n</VAR>-by-<VAR>p</VAR> matrix result 
        <EM>J_ij = d f_i(x,params) / d x_j</EM> in <VAR>J</VAR> for argument     
    <VAR>x</VAR> and arbitrary parameters <VAR>params</VAR>, returning an     
    appropriate error code if the function cannot be computed. If an analytic    
     Jacobian is unavailable, or too expensive to compute, this function pointer 
        may be set to NULL, in which case the Jacobian will be internally 
    computed     using finite difference approximations of the function 
    <VAR>f</VAR>.     </P></DD>
    <DT><CODE>size_t n</CODE></DT>
    <DD>
    <P>the number of functions, i.e. the number of components of the vector     
    <VAR>f</VAR>. </P></DD>
    <DT><CODE>size_t p</CODE></DT>
    <DD>
    <P>the number of independent variables, i.e. the number of components of the 
        vector <VAR>x</VAR>. </P></DD>
    <DT><CODE>void * params</CODE></DT>
    <DD>
    <P>a pointer to the arbitrary parameters of the function. </P></DD>
    <DT><CODE>size_t nevalf</CODE></DT>
    <DD>
    <P>This does not need to be set by the user. It counts the number of     
    function evaluations and is initialized by the <CODE>_set</CODE> function.   
      </P></DD>
    <DT><CODE>size_t nevaldf</CODE></DT>
    <DD>
    <P>This does not need to be set by the user. It counts the number of     
    Jacobian evaluations and is initialized by the <CODE>_set</CODE> function.   
      </P></DD></DL></DD></DL>
<P>Note that when fitting a non-linear model against experimental data, the data 
 is passed to the functions above using the <VAR>params</VAR> argument and the 
 trial best-fit parameters through the <VAR>x</VAR> argument. </P>
<HR>
<A name="Finite-Difference-Jacobian"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Iteration-of-the-Minimization-Algorithm" 
rel="next">Iteration of the Minimization Algorithm</A>, Previous: <A accessKey="p" 
href="#Providing-the-Function-to-be-Minimized" 
rel="previous">Providing the Function to be Minimized</A>, Up: <A accessKey="u" 
href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Finite-Difference-Jacobian-1"></A>
<H3 class="section">39.6 Finite Difference Jacobian</H3>
<P>For the algorithms which require a Jacobian matrix of derivatives of the fit 
 functions, there are times when an analytic Jacobian may be unavailable or too 
 expensive to compute. Therefore GSL supports approximating the Jacobian 
 numerically using finite differences of the fit functions. This is typically 
 done by setting the relevant function pointers of the 
<CODE>gsl_multifit_function_fdf</CODE> data type to NULL, however the following 
 functions allow the user to access the approximate Jacobian directly if needed. 
</P>
<DL>
  <DT><A 
  name="index-gsl_005fmultifit_005ffdfsolver_005fdif_005fdf"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_fdfsolver_dif_df</STRONG> <EM>(const   
  gsl_vector * <VAR>x</VAR>, const gsl_vector * <VAR>wts</VAR>,   
  gsl_multifit_function_fdf * <VAR>fdf</VAR>, const gsl_vector * <VAR>f</VAR>,   
  gsl_matrix * <VAR>J</VAR>)</EM></DT>
  <DD>
  <P>This function takes as input the current position <VAR>x</VAR>, weight   
  vector <VAR>wts</VAR> and function values computed at the current position   
  <VAR>f</VAR>, along with <VAR>fdf</VAR> which specifies the fit function and   
  parameters and approximates the <VAR>n</VAR>-by-<VAR>p</VAR> Jacobian   
  <VAR>J</VAR> using forward finite differences: <EM>J_ij = sqrt(w_i) d f_i(x) / 
    d x_j = sqrt(w_i) (f_i(x + h_j e_j) - f_i(x)) / h_j</EM>. where <EM>h_j =   
  \epsilon |x_j|</EM>, and <EM>\epsilon</EM> is the square root of the machine   
  precision <CODE>GSL_DBL_EPSILON</CODE>. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fmultifit_005ffdfsolver_005fdif_005ffdf"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_fdfsolver_dif_fdf</STRONG> <EM>(const   
  gsl_vector * <VAR>x</VAR>, gsl_multifit_function_fdf * <VAR>fdf</VAR>,   
  gsl_vector * <VAR>f</VAR>, gsl_matrix * <VAR>J</VAR>)</EM></DT>
  <DD>
  <P>This function is deprecated and will be removed in a future release.   
  </P></DD></DL>
<HR>
<A name="Iteration-of-the-Minimization-Algorithm"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Search-Stopping-Parameters-for-Minimization-Algorithms" 
rel="next">Search Stopping Parameters for Minimization Algorithms</A>, Previous: 
<A accessKey="p" href="#Finite-Difference-Jacobian" 
rel="previous">Finite Difference Jacobian</A>, Up: <A accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Iteration-4"></A>
<H3 class="section">39.7 Iteration</H3>
<P>The following functions drive the iteration of each algorithm. Each function 
 performs one iteration to update the state of any solver of the corresponding 
 type. The same functions work for all solvers so that different methods can be 
 substituted at runtime without modifications to the code. </P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fsolver_iterate</STRONG><EM>(gsl_multifit_fsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfsolver_iterate</STRONG><EM>(gsl_multifit_fdfsolver * 
  <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fiterate"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_iterate</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions perform a single iteration of the solver <VAR>s</VAR>. If   
  the iteration encounters an unexpected problem then an error code will be   
  returned. The solver maintains a current estimate of the best-fit parameters   
  at all times. </P></DD></DL>
<P>The solver struct <VAR>s</VAR> contains the following entries, which can be 
 used to track the progress of the solution: </P>
<DL compact="">
  <DT><CODE>gsl_vector * x</CODE></DT>
  <DD>
  <P>The current position. </P></DD>
  <DT><CODE>gsl_vector * f</CODE></DT>
  <DD>
  <P>The function residual vector at the current position <EM>f(x)</EM>.   
  </P></DD>
  <DT><CODE>gsl_vector * dx</CODE></DT>
  <DD>
  <P>The difference between the current position and the previous position, i.e. 
    the last step <EM>\delta</EM>, taken as a vector. </P></DD></DL>
<P>The best-fit information also can be accessed with the following auxiliary 
 functions, </P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005fposition"></A>Function:   
  <EM>gsl_vector *</EM> <STRONG>gsl_multifit_fsolver_position</STRONG><EM>(const 
  gsl_multifit_fsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fposition"></A>Function:  
   <EM>gsl_vector *</EM> 
  <STRONG>gsl_multifit_fdfsolver_position</STRONG><EM>(const 
  gsl_multifit_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fposition"></A>Function:   
  <EM>gsl_vector *</EM> 
  <STRONG>gsl_multifit_fdfridge_position</STRONG><EM>(const 
  gsl_multifit_fdfridge * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current position <EM>x</EM> (i.e. best-fit   
  parameters) of the solver <VAR>s</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fresidual"></A>Function:  
   <EM>gsl_vector *</EM> 
  <STRONG>gsl_multifit_fdfsolver_residual</STRONG><EM>(const 
  gsl_multifit_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fresidual"></A>Function:   
  <EM>gsl_vector *</EM> 
  <STRONG>gsl_multifit_fdfridge_residual</STRONG><EM>(const 
  gsl_multifit_fdfridge * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the current residual vector <EM>f</EM> of the solver 
    <VAR>s</VAR>. For weighted cases, the residual vector includes the weighting 
    factor <EM>\sqrt{W}</EM>. For ridge regression, the residual vector is the   
  augmented vector <EM>\tilde{f}</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fniter"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_multifit_fdfsolver_niter</STRONG> <EM>(const   
  gsl_multifit_fdfsolver * <VAR>s</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fniter"></A>Function:   
  <EM>size_t</EM> <STRONG>gsl_multifit_fdfridge_niter</STRONG> <EM>(const   
  gsl_multifit_fdfridge * <VAR>s</VAR>)</EM></DT>
  <DD>
  <P>These functions return the number of iterations performed so far. The   
  iteration counter is updated on each call to the <CODE>_iterate</CODE>   
  functions above, and reset to 0 in the <CODE>_set</CODE> functions. 
</P></DD></DL>
<HR>
<A name="Search-Stopping-Parameters-for-Minimization-Algorithms"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#High-Level-Driver" 
rel="next">High Level Driver</A>, Previous: <A accessKey="p" href="#Iteration-of-the-Minimization-Algorithm" 
rel="previous">Iteration of the Minimization Algorithm</A>, Up: <A accessKey="u" 
href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Search-Stopping-Parameters-3"></A>
<H3 class="section">39.8 Search Stopping Parameters</H3><A name="index-nonlinear-fitting_002c-stopping-parameters"></A>
<P>A minimization procedure should stop when one of the following conditions is 
 true: </P>
<UL>
  <LI>A minimum has been found to within the user-specified precision. </LI>
  <LI>A user-specified maximum number of iterations has been reached. </LI>
  <LI>An error has occurred. </LI></UL>
<P>The handling of these conditions is under user control. The functions below 
 allow the user to test the current estimate of the best-fit parameters in 
 several standard ways. </P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005ftest"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_fdfsolver_test</STRONG> <EM>(const   
  gsl_multifit_fdfsolver * <VAR>s</VAR>, const double <VAR>xtol</VAR>, const   
  double <VAR>gtol</VAR>, const double <VAR>ftol</VAR>, int *   
  <VAR>info</VAR>)</EM></DT>
  <DD>
  <P>This function tests for convergence of the minimization method using the   
  following criteria: </P>
  <UL>
    <LI>Testing for a small step size relative to the current parameter vector   
      
    <DIV class="example"><PRE class="example">|\delta_i| &lt;= xtol (|x_i| + xtol)
</PRE></DIV>
    <P>for each <EM>0 &lt;= i &lt; p</EM>. Each element of the step vector     
    <EM>\delta</EM> is tested individually in case the different parameters have 
        widely different scales. Adding <VAR>xtol</VAR> to <EM>|x_i|</EM> helps 
    the     test avoid breaking down in situations where the true solution value 
    <EM>x_i     = 0</EM>. If this test succeeds, <VAR>info</VAR> is set to 1 and 
    the     function returns <CODE>GSL_SUCCESS</CODE>. </P>
    <P>A general guideline for selecting the step tolerance is to choose     
    <EM>xtol = 10^{-d}</EM> where <EM>d</EM> is the number of accurate decimal   
      digits desired in the solution <EM>x</EM>. See Dennis and Schnabel for 
    more     information. </P></LI>
    <LI>Testing for a small gradient (<EM>g = \nabla \Phi(x) = J^T f</EM>)     
    indicating a local function minimum:     
    <DIV class="example"><PRE class="example">||g||_inf &lt;= gtol
</PRE></DIV>
    <P>This expression tests whether the ratio <EM>(\nabla \Phi)_i x_i /     
    \Phi</EM> is small. Testing this scaled gradient is a better than <EM>\nabla 
        \Phi</EM> alone since it is a dimensionless quantity and so independent 
    of     the scale of the problem. The <CODE>max</CODE> arguments help ensure 
    the     test doesn’t break down in regions where <EM>x_i</EM> or 
    <EM>\Phi(x)</EM>     are close to 0. If this test succeeds, <VAR>info</VAR> 
    is set to 2 and the     function returns <CODE>GSL_SUCCESS</CODE>. </P>
    <P>A general guideline for choosing the gradient tolerance is to set     
    <CODE>gtol = GSL_DBL_EPSILON^(1/3)</CODE>. See Dennis and Schnabel for more  
       information. </P></LI></UL>
  <P>If none of the tests succeed, <VAR>info</VAR> is set to 0 and the function  
   returns <CODE>GSL_CONTINUE</CODE>, indicating further iterations are 
  required.   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ftest_005fdelta"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_test_delta</STRONG> <EM>(const gsl_vector *  
   <VAR>dx</VAR>, const gsl_vector * <VAR>x</VAR>, double <VAR>epsabs</VAR>,   
  double <VAR>epsrel</VAR>)</EM></DT>
  <DD>
  <P>This function tests for the convergence of the sequence by comparing the   
  last step <VAR>dx</VAR> with the absolute error <VAR>epsabs</VAR> and relative 
    error <VAR>epsrel</VAR> to the current position <VAR>x</VAR>. The test 
  returns   <CODE>GSL_SUCCESS</CODE> if the following condition is achieved, 
</P>
  <DIV class="example"><PRE class="example">|dx_i| &lt; epsabs + epsrel |x_i|
</PRE></DIV>
  <P>for each component of <VAR>x</VAR> and returns <CODE>GSL_CONTINUE</CODE>   
  otherwise. </P></DD></DL><A name="index-residual_002c-in-nonlinear-systems-of-equations-1"></A>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ftest_005fgradient"></A>Function:   
  <EM>int</EM> <STRONG>gsl_multifit_test_gradient</STRONG> <EM>(const gsl_vector 
    * <VAR>g</VAR>, double <VAR>epsabs</VAR>)</EM></DT>
  <DD>
  <P>This function tests the residual gradient <VAR>g</VAR> against the absolute 
    error bound <VAR>epsabs</VAR>. Mathematically, the gradient should be 
  exactly   zero at the minimum. The test returns <CODE>GSL_SUCCESS</CODE> if 
  the   following condition is achieved, </P>
  <DIV class="example"><PRE class="example">\sum_i |g_i| &lt; epsabs
</PRE></DIV>
  <P>and returns <CODE>GSL_CONTINUE</CODE> otherwise. This criterion is suitable 
    for situations where the precise location of the minimum, <EM>x</EM>, is   
  unimportant provided a value can be found where the gradient is small enough.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005fgradient"></A>Function: 
  <EM>int</EM><STRONG>gsl_multifit_gradient</STRONG> <EM>(const gsl_matrix * 
  <VAR>J</VAR>,   const gsl_vector * <VAR>f</VAR>, gsl_vector * 
  <VAR>g</VAR>)</EM></DT>
  <DD>
  <P>This function computes the gradient <VAR>g</VAR> of <EM>\Phi(x) = (1/2)   
  ||f(x)||^2</EM> from the Jacobian matrix <EM>J</EM> and the function values   
  <VAR>f</VAR>, using the formula <EM>g = J^T f</EM>. </P></DD></DL>
<HR>
<A name="High-Level-Driver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Algorithms-using-Derivatives" 
rel="next">Minimization Algorithms using Derivatives</A>, Previous: <A 
accessKey="p" href="#Search-Stopping-Parameters-for-Minimization-Algorithms" 
rel="previous">Search Stopping Parameters for Minimization Algorithms</A>, Up: 
<A accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="High-Level-Driver-1"></A>
<H3 class="section">39.9 High Level Driver</H3>
<P>These routines provide a high level wrapper that combine the iteration and 
 convergence testing for easy use. </P>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffsolver_005fdriver"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fsolver_driver</STRONG><EM>(gsl_multifit_fsolver * 
  <VAR>s</VAR>, const size_t <VAR>maxiter</VAR>,   const double 
  <VAR>epsabs</VAR>, const double <VAR>epsrel</VAR>)</EM></DT>
  <DD>
  <P>This function iterates the solver <VAR>s</VAR> for a maximum of   
  <VAR>maxiter</VAR> iterations. After each iteration, the system is tested for  
   convergence using <CODE>gsl_multifit_test_delta</CODE> with the error   
  tolerances <VAR>epsabs</VAR> and <VAR>epsrel</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fdriver"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfsolver_driver</STRONG><EM>(gsl_multifit_fdfsolver * 
  <VAR>s</VAR>, const size_t <VAR>maxiter</VAR>,   const double <VAR>xtol</VAR>, 
  const double <VAR>gtol</VAR>, const double   <VAR>ftol</VAR>, int * 
  <VAR>info</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fmultifit_005ffdfridge_005fdriver"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfridge_driver</STRONG><EM>(gsl_multifit_fdfridge * 
  <VAR>s</VAR>, const size_t <VAR>maxiter</VAR>,   const double <VAR>xtol</VAR>, 
  const double <VAR>gtol</VAR>, const double   <VAR>ftol</VAR>, int * 
  <VAR>info</VAR>)</EM></DT>
  <DD>
  <P>These functions iterate the solver <VAR>s</VAR> for a maximum of   
  <VAR>maxiter</VAR> iterations. After each iteration, the system is tested for  
   convergence with the error tolerances <VAR>xtol</VAR>, <VAR>gtol</VAR> and   
  <VAR>ftol</VAR>. Upon successful convergence, the function returns   
  <CODE>GSL_SUCCESS</CODE> and sets <VAR>info</VAR> to the reason for   
  convergence (see <CODE>gsl_multifit_fdfsolver_test</CODE>). Otherwise, the   
  function returns <CODE>GSL_EMAXITER</CODE> indicating the system did not   
  converge after <VAR>maxiter</VAR> iterations. </P></DD></DL>
<HR>
<A name="Minimization-Algorithms-using-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Minimization-Algorithms-without-Derivatives" 
rel="next">Minimization Algorithms without Derivatives</A>, Previous: <A 
accessKey="p" href="#High-Level-Driver" 
rel="previous">High Level Driver</A>, Up: <A accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Minimization-Algorithms-using-Derivatives-1"></A>
<H3 class="section">39.10 Minimization Algorithms using Derivatives</H3>
<P>The minimization algorithms described in this section make use of both the 
 function and its derivative. They require an initial guess for the location of 
 the minimum. There is no absolute guarantee of convergence—the function must be 
 suitable for this technique and the initial guess must be sufficiently close to 
 the minimum for it to work. </P><A name="index-Levenberg_002dMarquardt-algorithms"></A>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005flmsder"></A>Derivative   
  Solver: <STRONG>gsl_multifit_fdfsolver_lmsder</STRONG></DT>
  <DD><A name="index-LMDER-algorithm"></A><A name="index-MINPACK_002c-minimization-algorithms-1"></A>
  <P>This is a robust and efficient version of the Levenberg-Marquardt algorithm 
    as implemented in the scaled <SMALL>LMDER</SMALL> routine in   
  <SMALL>MINPACK</SMALL>. Minpack was written by Jorge J. Moré, Burton S. Garbow 
    and Kenneth E. Hillstrom. </P>
  <P>The algorithm uses a generalized trust region to keep each step under   
  control. In order to be accepted a proposed new position <EM>x'</EM> must   
  satisfy the condition <EM>|D (x' - x)| &lt; \Delta</EM>, where <EM>D</EM> is a 
    diagonal scaling matrix and <EM>\Delta</EM> is the size of the trust region. 
    The components of <EM>D</EM> are computed internally, using the column norms 
    of the Jacobian to estimate the sensitivity of the residual to each 
  component   of <EM>x</EM>. This improves the behavior of the algorithm for 
  badly scaled   functions. </P>
  <P>On each iteration the algorithm attempts to minimize the linear system   
  <EM>|f + J \delta|</EM> subject to the constraint <EM>|D \delta| &lt;   
  \Delta</EM>. The solution to this constrained linear system is found by   
  solving the linear least squares system </P>
  <DIV class="example"><PRE class="example">[J; sqrt(mu) D] \delta = - [f; 0]
</PRE></DIV>
  <P>where <EM>\mu</EM> is the Levenberg-Marquardt parameter. The above system   
  is solved using a QR decomposition of <EM>J</EM>. </P>
  <P>The proposed step <EM>\delta</EM> is now tested by evaluating the function  
   at the resulting point, <EM>x'</EM>. If the step reduces the norm of the   
  function sufficiently, and follows the predicted behavior of the function   
  within the trust region, then it is accepted and the size of the trust region  
   is increased. If the proposed step fails to improve the solution, or differs  
   significantly from the expected behavior within the trust region, then the   
  size of the trust region is decreased and another trial step is computed. </P>
  <P>The algorithm also monitors the progress of the solution and returns an   
  error if the changes in the solution are smaller than the machine precision.   
  The possible error codes are, </P>
  <DL compact="">
    <DT><CODE>GSL_ETOLF</CODE></DT>
    <DD>
    <P>the decrease in the function falls below machine precision </P></DD>
    <DT><CODE>GSL_ETOLX</CODE></DT>
    <DD>
    <P>the change in the position vector falls below machine precision </P></DD>
    <DT><CODE>GSL_ETOLG</CODE></DT>
    <DD>
    <P>the norm of the gradient, relative to the norm of the function, falls     
    below machine precision </P></DD>
    <DT><CODE>GSL_ENOPROG</CODE></DT>
    <DD>
    <P>the routine has made 10 or more attempts to find a suitable trial step    
     without success (but subsequent calls can be made to continue the 
    search).<A href="#FOOT15" 
    name="DOCF15"><SUP>15</SUP></A> </P></DD></DL>
  <P>These error codes indicate that further iterations will be unlikely to   
  change the solution from its current value. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005flmder"></A>Derivative   
  Solver: <STRONG>gsl_multifit_fdfsolver_lmder</STRONG></DT>
  <DD>
  <P>This is an unscaled version of the <SMALL>LMDER</SMALL> algorithm. The   
  elements of the diagonal scaling matrix <EM>D</EM> are set to 1. This   
  algorithm may be useful in circumstances where the scaled version of   
  <SMALL>LMDER</SMALL> converges too slowly, or the function is already scaled   
  appropriately. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005flmniel"></A>Derivative   
  Solver: <STRONG>gsl_multifit_fdfsolver_lmniel</STRONG></DT>
  <DD>
  <P>This is a Levenberg-Marquardt solver based on a smoother updating procedure 
    for the damping parameter <EM>\mu</EM> proposed by Nielsen, 1999. It does 
  not   use a trust region approach and only performs rudimentary scaling and is 
    therefore not as robust as <CODE>lmsder</CODE>. However, on each iteration 
  it   solves the normal equation system to compute the next step: </P>
  <DIV class="example"><PRE class="example">(J^T J + \mu I) \delta = -J^T f
</PRE></DIV>
  <P>which makes it a much more practical method for problems with a large   
  number of residuals (<EM>n &gt;&gt; p</EM>), since only the   
  <EM>p</EM>-by-<EM>p</EM> matrix <EM>J^T J</EM> is decomposed rather than the   
  full <EM>n</EM>-by-<EM>p</EM> Jacobian. This makes a significant difference in 
    efficiency when solving systems with large amounts of data. While not as   
  robust as <CODE>lmsder</CODE>, this algorithm has proven effective on a wide   
  class of problems. </P></DD></DL>
<HR>
<A name="Minimization-Algorithms-without-Derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Computing-the-covariance-matrix-of-best-fit-parameters" 
rel="next">Computing the covariance matrix of best fit parameters</A>, Previous: 
<A accessKey="p" href="#Minimization-Algorithms-using-Derivatives" 
rel="previous">Minimization Algorithms using Derivatives</A>, Up: <A accessKey="u" 
href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Minimization-Algorithms-without-Derivatives-1"></A>
<H3 class="section">39.11 Minimization Algorithms without Derivatives</H3>
<P>There are no algorithms implemented in this section at the moment. </P>
<HR>
<A name="Computing-the-covariance-matrix-of-best-fit-parameters"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Troubleshooting-Nonlinear-Least-Squares" 
rel="next">Troubleshooting Nonlinear Least Squares</A>, Previous: <A accessKey="p" 
href="#Minimization-Algorithms-without-Derivatives" 
rel="previous">Minimization Algorithms without Derivatives</A>, Up: <A 
accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Computing-the-covariance-matrix-of-best-fit-parameters-1"></A>
<H3 class="section">39.12 Computing the covariance matrix of best fit 
 parameters</H3><A name="index-best_002dfit-parameters_002c-covariance"></A><A 
name="index-least-squares_002c-covariance-of-best_002dfit-parameters"></A><A 
name="index-covariance-matrix_002c-nonlinear-fits"></A>
<DL>
  <DT><A name="index-gsl_005fmultifit_005ffdfsolver_005fjac"></A>Function:   
  <EM>int</EM> 
  <STRONG>gsl_multifit_fdfsolver_jac</STRONG><EM>(gsl_multifit_fdfsolver * 
  <VAR>s</VAR>, gsl_matrix *   <VAR>J</VAR>)</EM></DT>
  <DD>
  <P>This function stores the <EM>n</EM>-by-<EM>p</EM> Jacobian matrix for the   
  current iteration of the solver <VAR>s</VAR> into the output <VAR>J</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fmultifit_005fcovar"></A>Function: 
  <EM>int</EM><STRONG>gsl_multifit_covar</STRONG> <EM>(const gsl_matrix * 
  <VAR>J</VAR>,   const double <VAR>epsrel</VAR>, gsl_matrix * 
  <VAR>covar</VAR>)</EM></DT>
  <DD>
  <P>This function computes the covariance matrix of best-fit parameters using   
  the Jacobian matrix <VAR>J</VAR> and stores it in <VAR>covar</VAR>. The   
  parameter <VAR>epsrel</VAR> is used to remove linear-dependent columns when   
  <VAR>J</VAR> is rank deficient. </P>
  <P>The covariance matrix is given by, </P>
  <DIV class="example"><PRE class="example">covar = (J^T J)^{-1}
</PRE></DIV>
  <P>or in the weighted case, </P>
  <DIV class="example"><PRE class="example">covar = (J^T W J)^{-1}
</PRE></DIV>
  <P>and is computed by QR decomposition of J with column-pivoting. Any columns  
   of <EM>R</EM> which satisfy </P>
  <DIV class="example"><PRE class="example">|R_{kk}| &lt;= epsrel |R_{11}|
</PRE></DIV>
  <P>are considered linearly-dependent and are excluded from the covariance   
  matrix (the corresponding rows and columns of the covariance matrix are set to 
    zero). </P>
  <P>If the minimisation uses the weighted least-squares function <EM>f_i =   
  (Y(x, t_i) - y_i) / \sigma_i</EM> then the covariance matrix above gives the   
  statistical error on the best-fit parameters resulting from the Gaussian   
  errors <EM>\sigma_i</EM> on the underlying data <EM>y_i</EM>. This can be   
  verified from the relation <EM>\delta f = J \delta c</EM> and the fact that   
  the fluctuations in <EM>f</EM> from the data <EM>y_i</EM> are normalised by   
  <EM>\sigma_i</EM> and so satisfy <EM>&lt;\delta f \delta f^T&gt; = I</EM>. 
</P>
  <P>For an unweighted least-squares function <EM>f_i = (Y(x, t_i) - y_i)</EM>   
  the covariance matrix above should be multiplied by the variance of the   
  residuals about the best-fit <EM>\sigma^2 = \sum (y_i - Y(x,t_i))^2 /   
  (n-p)</EM> to give the variance-covariance matrix <EM>\sigma^2 C</EM>. This   
  estimates the statistical error on the best-fit parameters from the scatter of 
    the underlying data. </P>
  <P>For more information about covariance matrices see <A href="#Fitting-Overview">Fitting 
    Overview</A>. </P></DD></DL>
<HR>
<A name="Troubleshooting-Nonlinear-Least-Squares"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-Nonlinear-Least_002dSquares-Fitting" 
rel="next">Example programs for Nonlinear Least-Squares Fitting</A>, Previous: 
<A accessKey="p" href="#Computing-the-covariance-matrix-of-best-fit-parameters" 
rel="previous">Computing the covariance matrix of best fit parameters</A>, Up: 
<A accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Troubleshooting-2"></A>
<H3 class="section">39.13 Troubleshooting</H3>
<P>When developing a code to solve a nonlinear least squares problem, here are a 
 few considerations to keep in mind. </P>
<OL>
  <LI>The most common difficulty is the accurate implementation of the Jacobian  
   matrix. If the analytic Jacobian is not properly provided to the solver, this 
    can hinder and many times prevent convergence of the method. When developing 
  a   new nonlinear least squares code, it often helps to compare the program 
  output   with the internally computed finite difference Jacobian and the user 
  supplied   analytic Jacobian. If there is a large difference in coefficients, 
  it is   likely the analytic Jacobian is incorrectly implemented. </LI>
  <LI>If your code is having difficulty converging, the next thing to check is   
  the starting point provided to the solver. The methods of this chapter are   
  local methods, meaning if you provide a starting point far away from the true  
   minimum, the method may converge to a local minimum or not converge at all.   
  Sometimes it is possible to solve a linearized approximation to the nonlinear  
   problem, and use the linear solution as the starting point to the nonlinear   
  problem. </LI>
  <LI>If the various parameters of the coefficient vector <EM>x</EM> vary widely 
    in magnitude, then the problem is said to be badly scaled. The methods of 
  this   chapter do attempt to automatically rescale the elements of <EM>x</EM> 
  to have   roughly the same order of magnitude, but in extreme cases this could 
  still   cause problems for convergence. In these cases it is recommended for 
  the user   to scale their parameter vector <EM>x</EM> so that each parameter 
  spans   roughly the same range, say <EM>[-1,1]</EM>. The solution vector can 
  be   backscaled to recover the original units of the problem. </LI></OL>
<HR>
<A name="Example-programs-for-Nonlinear-Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting" 
rel="next">References and Further Reading for Nonlinear Least-Squares 
Fitting</A>,  Previous: <A accessKey="p" href="#Troubleshooting-Nonlinear-Least-Squares" 
rel="previous">Troubleshooting Nonlinear Least Squares</A>, Up: <A accessKey="u" 
href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-28"></A>
<H3 class="section">39.14 Examples</H3>
<P>The following example program fits a weighted exponential model with 
 background to experimental data, <EM>Y = A \exp(-\lambda t) + b</EM>. The first 
 part of the program sets up the functions <CODE>expb_f</CODE> and 
<CODE>expb_df</CODE> to calculate the model and its Jacobian. The appropriate 
 fitting function is given by, </P>
<DIV class="example"><PRE class="example">f_i = (A \exp(-\lambda t_i) + b) - y_i
</PRE></DIV>
<P>where we have chosen <EM>t_i = i</EM>. The Jacobian matrix <EM>J</EM> is the 
 derivative of these functions with respect to the three parameters (<EM>A</EM>, 
<EM>\lambda</EM>, <EM>b</EM>). It is given by, </P>
<DIV class="example"><PRE class="example">J_{ij} = d f_i / d x_j
</PRE></DIV>
<P>where <EM>x_0 = A</EM>, <EM>x_1 = \lambda</EM> and <EM>x_2 = b</EM>. The 
 weights are given by <EM>w_i = 1/\sigma_i^2</EM>. </P>
<DIV class="example"><PRE class="verbatim">/* expfit.c -- model functions for exponential + background */

struct data {
  size_t n;
  double * y;
};

int
expb_f (const gsl_vector * x, void *data, 
        gsl_vector * f)
{
  size_t n = ((struct data *)data)-&gt;n;
  double *y = ((struct data *)data)-&gt;y;

  double A = gsl_vector_get (x, 0);
  double lambda = gsl_vector_get (x, 1);
  double b = gsl_vector_get (x, 2);

  size_t i;

  for (i = 0; i &lt; n; i++)
    {
      /* Model Yi = A * exp(-lambda * i) + b */
      double t = i;
      double Yi = A * exp (-lambda * t) + b;
      gsl_vector_set (f, i, Yi - y[i]);
    }

  return GSL_SUCCESS;
}

int
expb_df (const gsl_vector * x, void *data, 
         gsl_matrix * J)
{
  size_t n = ((struct data *)data)-&gt;n;

  double A = gsl_vector_get (x, 0);
  double lambda = gsl_vector_get (x, 1);

  size_t i;

  for (i = 0; i &lt; n; i++)
    {
      /* Jacobian matrix J(i,j) = dfi / dxj, */
      /* where fi = (Yi - yi)/sigma[i],      */
      /*       Yi = A * exp(-lambda * i) + b  */
      /* and the xj are the parameters (A,lambda,b) */
      double t = i;
      double e = exp(-lambda * t);
      gsl_matrix_set (J, i, 0, e); 
      gsl_matrix_set (J, i, 1, -t * A * e);
      gsl_matrix_set (J, i, 2, 1.0);
    }
  return GSL_SUCCESS;
}
</PRE></DIV>
<P>The main part of the program sets up a Levenberg-Marquardt solver and some 
 simulated random data. The data uses the known parameters (5.0,0.1,1.0) 
combined  with Gaussian noise (standard deviation = 0.1) over a range of 40 
timesteps. The  initial guess for the parameters is chosen as (0.0, 1.0, 0.0). 
</P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;
#include &lt;gsl/gsl_vector.h&gt;
#include &lt;gsl/gsl_blas.h&gt;
#include &lt;gsl/gsl_multifit_nlin.h&gt;

#include "expfit.c"

/* number of data points to fit */
#define N 40

int
main (void)
{
  const gsl_multifit_fdfsolver_type *T = gsl_multifit_fdfsolver_lmsder;
  gsl_multifit_fdfsolver *s;
  int status, info;
  size_t i;
  const size_t n = N;
  const size_t p = 3;

  gsl_matrix *covar = gsl_matrix_alloc (p, p);
  double y[N], weights[N];
  struct data d = { n, y };
  gsl_multifit_function_fdf f;
  double x_init[3] = { 1.0, 0.0, 0.0 };
  gsl_vector_view x = gsl_vector_view_array (x_init, p);
  gsl_vector_view w = gsl_vector_view_array(weights, n);
  const gsl_rng_type * type;
  gsl_rng * r;
  gsl_vector *res_f;
  double chi, chi0;

  const double xtol = 1e-8;
  const double gtol = 1e-8;
  const double ftol = 0.0;

  gsl_rng_env_setup();

  type = gsl_rng_default;
  r = gsl_rng_alloc (type);

  f.f = &amp;expb_f;
  f.df = &amp;expb_df;   /* set to NULL for finite-difference Jacobian */
  f.n = n;
  f.p = p;
  f.params = &amp;d;

  /* This is the data to be fitted */

  for (i = 0; i &lt; n; i++)
    {
      double t = i;
      double yi = 1.0 + 5 * exp (-0.1 * t);
      double si = 0.1 * yi;
      double dy = gsl_ran_gaussian(r, si);

      weights[i] = 1.0 / (si * si);
      y[i] = yi + dy;
      printf ("data: %zu %g %g\n", i, y[i], si);
    };

  s = gsl_multifit_fdfsolver_alloc (T, n, p);

  /* initialize solver with starting point and weights */
  gsl_multifit_fdfsolver_wset (s, &amp;f, &amp;x.vector, &amp;w.vector);

  /* compute initial residual norm */
  res_f = gsl_multifit_fdfsolver_residual(s);
  chi0 = gsl_blas_dnrm2(res_f);

  /* solve the system with a maximum of 20 iterations */
  status = gsl_multifit_fdfsolver_driver(s, 20, xtol, gtol, ftol, &amp;info);

  gsl_multifit_fdfsolver_covar (s, 0.0, covar);

  /* compute final residual norm */
  chi = gsl_blas_dnrm2(res_f);

#define FIT(i) gsl_vector_get(s-&gt;x, i)
#define ERR(i) sqrt(gsl_matrix_get(covar,i,i))

  fprintf(stderr, "summary from method '%s'\n",
          gsl_multifit_fdfsolver_name(s));
  fprintf(stderr, "number of iterations: %zu\n",
          gsl_multifit_fdfsolver_niter(s));
  fprintf(stderr, "function evaluations: %zu\n", f.nevalf);
  fprintf(stderr, "Jacobian evaluations: %zu\n", f.nevaldf);
  fprintf(stderr, "reason for stopping: %s\n",
          (info == 1) ? "small step size" : "small gradient");
  fprintf(stderr, "initial |f(x)| = %g\n", chi0);
  fprintf(stderr, "final   |f(x)| = %g\n", chi);

  { 
    double dof = n - p;
    double c = GSL_MAX_DBL(1, chi / sqrt(dof)); 

    fprintf(stderr, "chisq/dof = %g\n",  pow(chi, 2.0) / dof);

    fprintf (stderr, "A      = %.5f +/- %.5f\n", FIT(0), c*ERR(0));
    fprintf (stderr, "lambda = %.5f +/- %.5f\n", FIT(1), c*ERR(1));
    fprintf (stderr, "b      = %.5f +/- %.5f\n", FIT(2), c*ERR(2));
  }

  fprintf (stderr, "status = %s\n", gsl_strerror (status));

  gsl_multifit_fdfsolver_free (s);
  gsl_matrix_free (covar);
  gsl_rng_free (r);
  return 0;
}
</PRE></DIV>
<P>The iteration terminates when the relative change in x is smaller than 
<EM>10^{-8}</EM>, or when the magnitude of the gradient falls below 
<EM>10^{-8}</EM>. Here are the results of running the program: </P>
<DIV class="smallexample"><PRE class="smallexample">summary from method 'lmsder'
number of iterations: 8
function evaluations: 11
Jacobian evaluations: 9
reason for stopping: small step size
initial |f(x)| = 31.1919
final   |f(x)| = 5.45418
chisq/dof = 0.804002
A      = 5.17379 +/- 0.27938
lambda = 0.11104 +/- 0.00817
b      = 1.05283 +/- 0.05365
status = success
</PRE></DIV>
<P>The approximate values of the parameters are found correctly, and the 
 chi-squared value indicates a good fit (the chi-squared per degree of freedom 
is  approximately 1). In this case the errors on the parameters can be estimated 
 from the square roots of the diagonal elements of the covariance matrix. </P>
<P>If the chi-squared value shows a poor fit (i.e. <EM>chi^2/dof &gt;&gt; 
 1</EM>) then the error estimates obtained from the covariance matrix will be 
too  small. In the example program the error estimates are multiplied by 
<EM>\sqrt{\chi^2/dof}</EM> in this case, a common way of increasing the errors 
 for a poor fit. Note that a poor fit will result from the use an inappropriate 
 model, and the scaled error estimates may then be outside the range of validity 
 for Gaussian errors. </P>
<HR>
<A 
name="References-and-Further-Reading-for-Nonlinear-Least_002dSquares-Fitting"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Example-programs-for-Nonlinear-Least_002dSquares-Fitting" 
rel="previous">Example programs for Nonlinear Least-Squares Fitting</A>, Up: <A 
accessKey="u" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="up">Nonlinear Least-Squares Fitting</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-31"></A>
<H3 class="section">39.15 References and Further Reading</H3>
<P>The <SMALL>MINPACK</SMALL> algorithm is described in the following article, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->J.J. Moré, <CITE>The Levenberg-Marquardt Algorithm:   
  Implementation and Theory</CITE>, Lecture Notes in Mathematics, v630 (1978),   
  ed G. Watson. </LI></UL>
<P>The <CODE>lmniel</CODE> algorithm closely follows the following publications, 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->H. B. Nielsen, “Damping Parameter in Marquardt’s Method”, IMM  
   Department of Mathematical Modeling, DTU, Tech. Report IMM-REP-1999-05 
  (1999).   </LI>
  <LI><!-- /@w -->K. Madsen and H. B. Nielsen, “Introduction to Optimization and 
    Data Fitting”, IMM Department of Mathematical Modeling, DTU, 2010. </LI></UL>
<P>The following publications are also relevant to the algorithms described in 
 this section, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->J. E. Dennis and R. B. Schnabel, Numerical Methods for   
  Unconstrained Optimization and Nonlinear Equations, SIAM, 1996. </LI>
  <LI><!-- /@w -->J.J. Moré, B.S. Garbow, K.E. Hillstrom, “Testing Unconstrained 
    Optimization Software”, ACM Transactions on Mathematical Software, Vol 7, No 
  1   (1981), p 17–41. </LI>
  <LI><!-- /@w -->H. B. Nielsen, “UCTP Test Problems for Unconstrained   
  Optimization”, IMM Department of Mathematical Modeling, DTU, Tech. Report   
  IMM-REP-2000-17 (2000). </LI></UL>
<HR>
<A name="Basis-Splines"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Matrices" 
rel="next">Sparse Matrices</A>, Previous: <A accessKey="p" href="#Nonlinear-Least_002dSquares-Fitting" 
rel="previous">Nonlinear Least-Squares Fitting</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Basis-Splines-1"></A>
<H2 class="chapter">40 Basis Splines</H2><A name="index-basis-splines_002c-B_002dsplines"></A><A 
name="index-splines_002c-basis"></A>
<P>This chapter describes functions for the computation of smoothing basis 
 splines (B-splines). A smoothing spline differs from an interpolating spline in 
 that the resulting curve is not required to pass through each datapoint. See <A 
href="#Interpolation">Interpolation</A>, 
 for information about interpolating splines. </P>
<P>The header file <SAMP>gsl_bspline.h</SAMP> contains the prototypes for the 
 bspline functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Overview-of-B_002dsplines">Overview 
            of B-splines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Initializing-the-B_002dsplines-solver">Initializing 
            the B-splines solver</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Constructing-the-knots-vector">Constructing 
            the knots vector</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Evaluation-of-B_002dspline-basis-functions">Evaluation 
            of B-spline basis functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Evaluation-of-B_002dspline-basis-function-derivatives">Evaluation 
            of B-spline basis function derivatives</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Working-with-the-Greville-abscissae">Working 
            with the Greville abscissae</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Example-programs-for-B_002dsplines">Example 
            programs for B-splines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#B_002dSpline-References-and-Further-Reading">B-Spline 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Overview-of-B_002dsplines"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-the-B_002dsplines-solver" 
rel="next">Initializing the B-splines solver</A>, Up: <A accessKey="u" href="#Basis-Splines" 
rel="up">Basis Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-6"></A>
<H3 class="section">40.1 Overview</H3><A name="index-basis-splines_002c-overview"></A>
<P>B-splines are commonly used as basis functions to fit smoothing curves to 
 large data sets. To do this, the abscissa axis is broken up into some number of 
 intervals, where the endpoints of each interval are called 
<EM>breakpoints</EM>.  These breakpoints are then converted to <EM>knots</EM> by 
imposing various  continuity and smoothness conditions at each interface. Given 
a nondecreasing  knot vector <EM>t = {t_0, t_1, …, t_{n+k-1}}</EM>, the 
<EM>n</EM> basis splines  of order <EM>k</EM> are defined by </P>
<DIV class="example"><PRE class="example">B_(i,1)(x) = (1, t_i &lt;= x &lt; t_(i+1)
             (0, else
B_(i,k)(x) = [(x - t_i)/(t_(i+k-1) - t_i)] B_(i,k-1)(x)
              + [(t_(i+k) - x)/(t_(i+k) - t_(i+1))] B_(i+1,k-1)(x)
</PRE></DIV>
<P>for <EM>i = 0, …, n-1</EM>. The common case of cubic B-splines is given by 
<EM>k = 4</EM>. The above recurrence relation can be evaluated in a numerically 
 stable way by the de Boor algorithm. </P>
<P>If we define appropriate knots on an interval <EM>[a,b]</EM> then the 
 B-spline basis functions form a complete set on that interval. Therefore we can 
 expand a smoothing function as </P>
<DIV class="example"><PRE class="example">f(x) = \sum_i c_i B_(i,k)(x)
</PRE></DIV>
<P>given enough <EM>(x_j, f(x_j))</EM> data pairs. The coefficients <EM>c_i</EM> 
 can be readily obtained from a least-squares fit. </P>
<HR>
<A name="Initializing-the-B_002dsplines-solver"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Constructing-the-knots-vector" 
rel="next">Constructing the knots vector</A>, Previous: <A accessKey="p" href="#Overview-of-B_002dsplines" 
rel="previous">Overview of B-splines</A>, Up: <A accessKey="u" href="#Basis-Splines" 
rel="up">Basis Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Initializing-the-B_002dsplines-solver-1"></A>
<H3 class="section">40.2 Initializing the B-splines solver</H3><A name="index-basis-splines_002c-initializing"></A>
<P>The computation of B-spline functions requires a preallocated workspace of 
 type <CODE>gsl_bspline_workspace</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fbspline_005falloc"></A>Function:   
  <EM>gsl_bspline_workspace *</EM> <STRONG>gsl_bspline_alloc</STRONG> <EM>(const 
    size_t <VAR>k</VAR>, const size_t <VAR>nbreak</VAR>)</EM></DT>
  <DD><A name="index-gsl_005fbspline_005fworkspace"></A>
  <P>This function allocates a workspace for computing B-splines of order   
  <VAR>k</VAR>. The number of breakpoints is given by <VAR>nbreak</VAR>. This   
  leads to <EM>n = nbreak + k - 2</EM> basis functions. Cubic B-splines are   
  specified by <EM>k = 4</EM>. The size of the workspace is <EM>O(2k^2 + 5k +   
  nbreak)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fbspline_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_bspline_free</STRONG> <EM>(gsl_bspline_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<HR>
<A name="Constructing-the-knots-vector"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Evaluation-of-B_002dspline-basis-functions" 
rel="next">Evaluation of B-spline basis functions</A>, Previous: <A accessKey="p" 
href="#Initializing-the-B_002dsplines-solver" 
rel="previous">Initializing the B-splines solver</A>, Up: <A accessKey="u" href="#Basis-Splines" 
rel="up">Basis Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Constructing-the-knots-vector-1"></A>
<H3 class="section">40.3 Constructing the knots vector</H3><A name="index-knots_002c-basis-splines"></A>
<DL>
  <DT><A name="index-gsl_005fbspline_005fknots"></A>Function: 
  <EM>int</EM><STRONG>gsl_bspline_knots</STRONG> <EM>(const gsl_vector *   
  <VAR>breakpts</VAR>, gsl_bspline_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function computes the knots associated with the given breakpoints and  
   stores them internally in <CODE>w-&gt;knots</CODE>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fbspline_005fknots_005funiform"></A>Function:   
  <EM>int</EM> <STRONG>gsl_bspline_knots_uniform</STRONG> <EM>(const double   
  <VAR>a</VAR>, const double <VAR>b</VAR>, gsl_bspline_workspace *   
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function assumes uniformly spaced breakpoints on <EM>[a,b]</EM> and   
  constructs the corresponding knot vector using the previously specified   
  <VAR>nbreak</VAR> parameter. The knots are stored in <CODE>w-&gt;knots</CODE>. 
    </P></DD></DL>
<HR>
<A name="Evaluation-of-B_002dspline-basis-functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Evaluation-of-B_002dspline-basis-function-derivatives" 
rel="next">Evaluation of B-spline basis function derivatives</A>, Previous: <A 
accessKey="p" href="#Constructing-the-knots-vector" 
rel="previous">Constructing the knots vector</A>, Up: <A accessKey="u" href="#Basis-Splines" 
rel="up">Basis Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Evaluation-of-B_002dsplines"></A>
<H3 class="section">40.4 Evaluation of B-splines</H3><A name="index-basis-splines_002c-evaluation"></A>
<DL>
  <DT><A name="index-gsl_005fbspline_005feval"></A>Function: 
  <EM>int</EM><STRONG>gsl_bspline_eval</STRONG> <EM>(const double <VAR>x</VAR>, 
  gsl_vector *   <VAR>B</VAR>, gsl_bspline_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates all B-spline basis functions at the position   
  <VAR>x</VAR> and stores them in the vector <VAR>B</VAR>, so that the   
  <EM>i</EM>-th element is <EM>B_i(x)</EM>. The vector <VAR>B</VAR> must be of   
  length <EM>n = nbreak + k - 2</EM>. This value may also be obtained by calling 
    <CODE>gsl_bspline_ncoeffs</CODE>. Computing all the basis functions at once 
  is   more efficient than computing them individually, due to the nature of the 
    defining recurrence relation. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fbspline_005feval_005fnonzero"></A>Function:   
  <EM>int</EM> <STRONG>gsl_bspline_eval_nonzero</STRONG> <EM>(const double   
  <VAR>x</VAR>, gsl_vector * <VAR>Bk</VAR>, size_t * <VAR>istart</VAR>, size_t * 
    <VAR>iend</VAR>, gsl_bspline_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates all potentially nonzero B-spline basis functions at 
    the position <VAR>x</VAR> and stores them in the vector <VAR>Bk</VAR>, so 
  that   the <EM>i</EM>-th element is <EM>B_(istart+i)(x)</EM>. The last element 
  of   <VAR>Bk</VAR> is <EM>B_(iend)(x)</EM>. The vector <VAR>Bk</VAR> must be 
  of   length <EM>k</EM>. By returning only the nonzero basis functions, this   
  function allows quantities involving linear combinations of the   
  <EM>B_i(x)</EM> to be computed without unnecessary terms (such linear   
  combinations occur, for example, when evaluating an interpolated function).   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fbspline_005fncoeffs"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_bspline_ncoeffs</STRONG> <EM>(gsl_bspline_workspace 
  *   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the number of B-spline coefficients given by <EM>n =  
   nbreak + k - 2</EM>. </P></DD></DL>
<HR>
<A name="Evaluation-of-B_002dspline-basis-function-derivatives"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Working-with-the-Greville-abscissae" 
rel="next">Working with the Greville abscissae</A>, Previous: <A accessKey="p" 
href="#Evaluation-of-B_002dspline-basis-functions" 
rel="previous">Evaluation of B-spline basis functions</A>, Up: <A accessKey="u" 
href="#Basis-Splines" rel="up">Basis 
Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Evaluation-of-B_002dspline-derivatives"></A>
<H3 class="section">40.5 Evaluation of B-spline derivatives</H3><A name="index-basis-splines_002c-derivatives"></A>
<DL>
  <DT><A name="index-gsl_005fbspline_005fderiv_005feval"></A>Function:   
  <EM>int</EM> <STRONG>gsl_bspline_deriv_eval</STRONG> <EM>(const double   
  <VAR>x</VAR>, const size_t <VAR>nderiv</VAR>, gsl_matrix * <VAR>dB</VAR>,   
  gsl_bspline_workspace * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates all B-spline basis function derivatives of orders   
  <EM>0</EM> through <EM>nderiv</EM> (inclusive) at the position <VAR>x</VAR>   
  and stores them in the matrix <VAR>dB</VAR>. The <EM>(i,j)</EM>-th element of  
   <VAR>dB</VAR> is <EM>d^jB_i(x)/dx^j</EM>. The matrix <VAR>dB</VAR> must be of 
    size <EM>n = nbreak + k - 2</EM> by <EM>nderiv + 1</EM>. The value 
  <EM>n</EM>   may also be obtained by calling <CODE>gsl_bspline_ncoeffs</CODE>. 
  Note that   function evaluations are included as the zeroth order derivatives 
  in   <VAR>dB</VAR>. Computing all the basis function derivatives at once is 
  more   efficient than computing them individually, due to the nature of the 
  defining   recurrence relation. </P></DD></DL>
<DL>
  <DT><A 
  name="index-gsl_005fbspline_005fderiv_005feval_005fnonzero"></A>Function:   
  <EM>int</EM> <STRONG>gsl_bspline_deriv_eval_nonzero</STRONG> <EM>(const double 
    <VAR>x</VAR>, const size_t <VAR>nderiv</VAR>, gsl_matrix * <VAR>dB</VAR>,   
  size_t * <VAR>istart</VAR>, size_t * <VAR>iend</VAR>, gsl_bspline_workspace *  
   <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function evaluates all potentially nonzero B-spline basis function   
  derivatives of orders <EM>0</EM> through <EM>nderiv</EM> (inclusive) at the   
  position <VAR>x</VAR> and stores them in the matrix <VAR>dB</VAR>. The   
  <EM>(i,j)</EM>-th element of <VAR>dB</VAR> is <EM>d^j/dx^j   
  B_(istart+i)(x)</EM>. The last row of <VAR>dB</VAR> contains <EM>d^j/dx^j   
  B_(iend)(x)</EM>. The matrix <VAR>dB</VAR> must be of size <EM>k</EM> by at   
  least <EM>nderiv + 1</EM>. Note that function evaluations are included as the  
   zeroth order derivatives in <VAR>dB</VAR>. By returning only the nonzero 
  basis   functions, this function allows quantities involving linear 
  combinations of   the <EM>B_i(x)</EM> and their derivatives to be computed 
  without unnecessary   terms. </P></DD></DL>
<HR>
<A name="Working-with-the-Greville-abscissae"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Example-programs-for-B_002dsplines" 
rel="next">Example programs for B-splines</A>, Previous: <A accessKey="p" href="#Evaluation-of-B_002dspline-basis-function-derivatives" 
rel="previous">Evaluation of B-spline basis function derivatives</A>, Up: <A 
accessKey="u" href="#Basis-Splines" 
rel="up">Basis Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Working-with-the-Greville-abscissae-1"></A>
<H3 class="section">40.6 Working with the Greville abscissae</H3><A name="index-basis-splines_002c-Greville-abscissae"></A><A 
name="index-basis-splines_002c-Marsden_002dSchoenberg-points"></A>
<P>The Greville abscissae are defined to be the mean location of <EM>k-1</EM> 
 consecutive knots in the knot vector for each basis spline function of order 
<EM>k</EM>. With the first and last knots in the 
<CODE>gsl_bspline_workspace</CODE> knot vector excluded, there are 
<CODE>gsl_bspline_ncoeffs</CODE> Greville abscissae for any given B-spline 
 basis. These values are often used in B-spline collocation applications and may 
 also be called Marsden-Schoenberg points. </P>
<DL>
  <DT><A name="index-gsl_005fbspline_005fgreville_005fabscissa"></A>Function:   
  <EM>double</EM> <STRONG>gsl_bspline_greville_abscissa</STRONG> <EM>(size_t   
  <VAR>i</VAR>, gsl_bspline_workspace *<VAR>w</VAR>);</EM></DT>
  <DD>
  <P>Returns the location of the <EM>i</EM>-th Greville abscissa for the given   
  B-spline basis. For the ill-defined case when <EM>k=1</EM>, the implementation 
    chooses to return breakpoint interval midpoints. </P></DD></DL>
<HR>
<A name="Example-programs-for-B_002dsplines"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#B_002dSpline-References-and-Further-Reading" 
rel="next">B-Spline References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Working-with-the-Greville-abscissae" 
rel="previous">Working with the Greville abscissae</A>, Up: <A accessKey="u" 
href="#Basis-Splines" rel="up">Basis 
Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-29"></A>
<H3 class="section">40.7 Examples</H3><A name="index-basis-splines_002c-examples"></A>
<P>The following program computes a linear least squares fit to data using cubic 
 B-spline basis functions with uniform breakpoints. The data is generated from 
 the curve <EM>y(x) = \cos{(x)} \exp{(-x/10)}</EM> on the interval <EM>[0, 
 15]</EM> with Gaussian noise added. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;gsl/gsl_bspline.h&gt;
#include &lt;gsl/gsl_multifit.h&gt;
#include &lt;gsl/gsl_rng.h&gt;
#include &lt;gsl/gsl_randist.h&gt;
#include &lt;gsl/gsl_statistics.h&gt;

/* number of data points to fit */
#define N        200

/* number of fit coefficients */
#define NCOEFFS  12

/* nbreak = ncoeffs + 2 - k = ncoeffs - 2 since k = 4 */
#define NBREAK   (NCOEFFS - 2)

int
main (void)
{
  const size_t n = N;
  const size_t ncoeffs = NCOEFFS;
  const size_t nbreak = NBREAK;
  size_t i, j;
  gsl_bspline_workspace *bw;
  gsl_vector *B;
  double dy;
  gsl_rng *r;
  gsl_vector *c, *w;
  gsl_vector *x, *y;
  gsl_matrix *X, *cov;
  gsl_multifit_linear_workspace *mw;
  double chisq, Rsq, dof, tss;

  gsl_rng_env_setup();
  r = gsl_rng_alloc(gsl_rng_default);

  /* allocate a cubic bspline workspace (k = 4) */
  bw = gsl_bspline_alloc(4, nbreak);
  B = gsl_vector_alloc(ncoeffs);

  x = gsl_vector_alloc(n);
  y = gsl_vector_alloc(n);
  X = gsl_matrix_alloc(n, ncoeffs);
  c = gsl_vector_alloc(ncoeffs);
  w = gsl_vector_alloc(n);
  cov = gsl_matrix_alloc(ncoeffs, ncoeffs);
  mw = gsl_multifit_linear_alloc(n, ncoeffs);

  printf("#m=0,S=0\n");
  /* this is the data to be fitted */
  for (i = 0; i &lt; n; ++i)
    {
      double sigma;
      double xi = (15.0 / (N - 1)) * i;
      double yi = cos(xi) * exp(-0.1 * xi);

      sigma = 0.1 * yi;
      dy = gsl_ran_gaussian(r, sigma);
      yi += dy;

      gsl_vector_set(x, i, xi);
      gsl_vector_set(y, i, yi);
      gsl_vector_set(w, i, 1.0 / (sigma * sigma));

      printf("%f %f\n", xi, yi);
    }

  /* use uniform breakpoints on [0, 15] */
  gsl_bspline_knots_uniform(0.0, 15.0, bw);

  /* construct the fit matrix X */
  for (i = 0; i &lt; n; ++i)
    {
      double xi = gsl_vector_get(x, i);

      /* compute B_j(xi) for all j */
      gsl_bspline_eval(xi, B, bw);

      /* fill in row i of X */
      for (j = 0; j &lt; ncoeffs; ++j)
        {
          double Bj = gsl_vector_get(B, j);
          gsl_matrix_set(X, i, j, Bj);
        }
    }

  /* do the fit */
  gsl_multifit_wlinear(X, w, y, c, cov, &amp;chisq, mw);

  dof = n - ncoeffs;
  tss = gsl_stats_wtss(w-&gt;data, 1, y-&gt;data, 1, y-&gt;size);
  Rsq = 1.0 - chisq / tss;

  fprintf(stderr, "chisq/dof = %e, Rsq = %f\n", 
                   chisq / dof, Rsq);

  /* output the smoothed curve */
  {
    double xi, yi, yerr;

    printf("#m=1,S=0\n");
    for (xi = 0.0; xi &lt; 15.0; xi += 0.1)
      {
        gsl_bspline_eval(xi, B, bw);
        gsl_multifit_linear_est(B, c, cov, &amp;yi, &amp;yerr);
        printf("%f %f\n", xi, yi);
      }
  }

  gsl_rng_free(r);
  gsl_bspline_free(bw);
  gsl_vector_free(B);
  gsl_vector_free(x);
  gsl_vector_free(y);
  gsl_matrix_free(X);
  gsl_vector_free(c);
  gsl_vector_free(w);
  gsl_matrix_free(cov);
  gsl_multifit_linear_free(mw);

  return 0;
} /* main() */
</PRE></DIV>
<P>The output can be plotted with <SMALL>GNU</SMALL> <CODE>graph</CODE>. </P>
<DIV class="example"><PRE class="example">$ ./a.out &gt; bspline.dat
chisq/dof = 1.118217e+00, Rsq = 0.989771
$ graph -T ps -X x -Y y -x 0 15 -y -1 1.3 &lt; bspline.dat &gt; bspline.ps
</PRE></DIV>
<HR>
<A name="B_002dSpline-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Example-programs-for-B_002dsplines" 
rel="previous">Example programs for B-splines</A>, Up: <A accessKey="u" href="#Basis-Splines" 
rel="up">Basis Splines</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="B_002dSpline-References-and-Further-Reading-1"></A>
<H3 class="section">40.8 B-Spline References and Further Reading</H3>
<P>Further information on the algorithms described in this section can be found 
 in the following book, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->C. de Boor, <CITE>A Practical Guide to Splines</CITE> (1978),  
   Springer-Verlag, ISBN 0-387-90356-9. </LI></UL>
<P>Further information of Greville abscissae and B-spline collocation can be 
 found in the following paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Richard W. Johnson, Higher order B-spline collocation at the   
  Greville abscissae. <CITE>Applied Numerical Mathematics</CITE>. vol. 52, 2005, 
    63–75. </LI></UL>
<P>A large collection of B-spline routines is available in the 
<SMALL>PPPACK</SMALL> library available at <A href="http://www.netlib.org/pppack">http://www.netlib.org/pppack</A>, 
which is  also part of <SMALL>SLATEC</SMALL>. </P>
<HR>
<A name="Sparse-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-BLAS-Support" 
rel="next">Sparse BLAS Support</A>, Previous: <A accessKey="p" href="#Basis-Splines" 
rel="previous">Basis Splines</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-Matrices-1"></A>
<H2 class="chapter">41 Sparse Matrices</H2><A 
name="index-sparse-matrices"></A><A name="index-matrices_002c-sparse"></A>
<P>This chapter describes functions for the construction and manipulation of 
 sparse matrices, matrices which are populated primarily with zeros and contain 
 only a few non-zero elements. Sparse matrices often appear in the solution of 
 partial differential equations. It is beneficial to use specialized data 
 structures and algorithms for storing and working with sparse matrices, since 
 dense matrix algorithms and structures can be very slow and use huge amounts of 
 memory when applied to sparse matrices. </P>
<P>The header file <SAMP>gsl_spmatrix.h</SAMP> contains the prototypes for the 
 sparse matrix functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Overview-of-Sparse-Matrices">Overview 
            of Sparse Matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Sparse-matrix-allocation">Sparse 
            matrix allocation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Accessing-sparse-matrix-elements">Accessing 
            sparse matrix elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Initializing-sparse-matrix-elements">Initializing 
            sparse matrix elements</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Copying-sparse-matrices">Copying 
            sparse matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Sparse-matrix-operations">Sparse 
            matrix operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Sparse-matrix-properties">Sparse 
            matrix properties</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Finding-maximum-and-minimum-elements-of-sparse-matrices">Finding 
            maximum and minimum elements of sparse matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Sparse-matrix-compressed-format">Sparse 
            matrix compressed format</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Conversion-between-sparse-and-dense-matrices">Conversion 
            between sparse and dense matrices</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Sparse-Matrix-Examples">Sparse 
            Matrix Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Sparse-Matrix-References-and-Further-Reading">Sparse 
            Matrix References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Overview-of-Sparse-Matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-matrix-allocation" 
rel="next">Sparse matrix allocation</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-7"></A>
<H3 class="section">41.1 Overview</H3><A name="index-sparse-matrices_002c-overview"></A>
<P>These routines provide support for constructing and manipulating sparse 
 matrices in GSL, using an API similar to <CODE>gsl_matrix</CODE>. The basic 
 structure is called <CODE>gsl_spmatrix</CODE>. There are two supported storage 
 formats for sparse matrices: the triplet and compressed column storage (CCS) 
 formats. The triplet format stores triplets <EM>(i,j,x)</EM> for each non-zero 
 element of the matrix. This notation means that the <EM>(i,j)</EM> element of 
 the matrix <EM>A</EM> is <EM>A_{ij} = x</EM>. Compressed column storage stores 
 each column of non-zero values in the sparse matrix in a continuous memory 
 block, keeping pointers to the beginning of each column in that memory block, 
 and storing the row indices of each non-zero element. The triplet format is 
 ideal for adding elements to the sparse matrix structure while it is being 
 constructed, while the compressed column storage is better suited for 
 matrix-matrix multiplication or linear solvers. </P><A name="index-gsl_005fspmatrix"></A>
<P>The <CODE>gsl_spmatrix</CODE> structure is defined as </P>
<DIV class="example"><PRE class="example">typedef struct
{
  size_t size1;
  size_t size2;
  size_t *i;
  double *data;
  size_t *p;
  size_t nzmax;
  size_t nz;
  gsl_spmatrix_tree *tree_data;
  void *work;
  size_t sptype;
} gsl_spmatrix;
</PRE></DIV>
<P>This defines a <VAR>size1</VAR>-by-<VAR>size2</VAR> sparse matrix. The number 
 of non-zero elements currently in the matrix is given by <VAR>nz</VAR>. For the 
 triplet representation, <VAR>i</VAR>, <VAR>p</VAR>, and <VAR>data</VAR> are 
 arrays of size <VAR>nz</VAR> which contain the row indices, column indices, and 
 element value, respectively. So if <EM>data[k] = A(i,j)</EM>, then <EM>i = 
 i[k]</EM> and <EM>j = p[k]</EM>. For compressed column storage, <VAR>i</VAR> 
and <VAR>data</VAR> are arrays of size <VAR>nz</VAR> containing the row indices 
and  element values, identical to the triplet case. <VAR>p</VAR> is an array of 
size <EM>size2 + 1</EM> where <EM>p[j]</EM> points to the index in 
<VAR>data</VAR> of  the start of column <VAR>j</VAR>. Thus, if <EM>data[k] = 
A(i,j)</EM>, then <EM>i  = i[k]</EM> and <EM>p[j] &lt;= k &lt; p[j+1]</EM>. </P>
<P>The parameter <VAR>tree_data</VAR> is a binary tree structure used in the 
 triplet representation, specifically a balanced AVL tree. This speeds up 
element  searches and duplicate detection during the matrix assembly process. 
The  parameter <VAR>work</VAR> is additional workspace needed for various 
operations  like converting from triplet to compressed column storage. 
<VAR>sptype</VAR>  indicates the type of storage format being used (triplet or 
compressed column). </P>
<P>The compressed storage format defined above makes it very simple to interface 
 with sophisticated external linear solver libraries which accept compressed 
 column storage input. The user can simply pass the arrays <VAR>i</VAR>, 
<VAR>p</VAR>, and <VAR>data</VAR> as the compressed column inputs to external 
 libraries. </P>
<HR>
<A name="Sparse-matrix-allocation"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Accessing-sparse-matrix-elements" 
rel="next">Accessing sparse matrix elements</A>, Previous: <A accessKey="p" 
href="#Overview-of-Sparse-Matrices" 
rel="previous">Overview of Sparse Matrices</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-matrix-allocation-1"></A>
<H3 class="section">41.2 Sparse matrix allocation</H3><A name="index-sparse-matrices_002c-allocation"></A>
<P>The functions for allocating memory for a sparse matrix follow the style of 
<CODE>malloc</CODE> and <CODE>free</CODE>. They also perform their own error 
 checking. If there is insufficient memory available to allocate a matrix then 
 the functions call the GSL error handler with an error code of 
<CODE>GSL_ENOMEM</CODE> in addition to returning a null pointer. </P>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005falloc"></A>Function: <EM>gsl_spmatrix  
   *</EM> <STRONG>gsl_spmatrix_alloc</STRONG> <EM>(const size_t <VAR>n1</VAR>,   
  const size_t <VAR>n2</VAR>)</EM></DT>
  <DD>
  <P>This function allocates a sparse matrix of size   
  <VAR>n1</VAR>-by-<VAR>n2</VAR> and initializes it to all zeros. If the size of 
    the matrix is not known at allocation time, both <VAR>n1</VAR> and   
  <VAR>n2</VAR> may be set to 1, and they will automatically grow as elements   
  are added to the matrix. This function sets the matrix to the triplet   
  representation, which is the easiest for adding and accessing matrix elements. 
    This function tries to make a reasonable guess for the number of non-zero   
  elements (<VAR>nzmax</VAR>) which will be added to the matrix by assuming a   
  sparse density of <EM>10\%</EM>. The function   
  <CODE>gsl_spmatrix_alloc_nzmax</CODE> can be used if this number is known more 
    accurately. The workspace is of size <EM>O(nzmax)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005falloc_005fnzmax"></A>Function:   
  <EM>gsl_spmatrix *</EM> <STRONG>gsl_spmatrix_alloc_nzmax</STRONG> <EM>(const   
  size_t <VAR>n1</VAR>, const size_t <VAR>n2</VAR>, const size_t   
  <VAR>nzmax</VAR>, const size_t <VAR>sptype</VAR>)</EM></DT>
  <DD>
  <P>This function allocates a sparse matrix of size   
  <VAR>n1</VAR>-by-<VAR>n2</VAR> and initializes it to all zeros. If the size of 
    the matrix is not known at allocation time, both <VAR>n1</VAR> and   
  <VAR>n2</VAR> may be set to 1, and they will automatically grow as elements   
  are added to the matrix. The parameter <VAR>nzmax</VAR> specifies the maximum  
   number of non-zero elements which will be added to the matrix. It does not   
  need to be precisely known in advance, since storage space will automatically  
   grow using <CODE>gsl_spmatrix_realloc</CODE> if <VAR>nzmax</VAR> is not large 
    enough. Accurate knowledge of this parameter reduces the number of   
  reallocation calls required. The parameter <VAR>sptype</VAR> specifies the   
  storage format of the sparse matrix. Possible values are </P>
  <DL compact="">
    <DT><CODE>GSL_SPMATRIX_TRIPLET</CODE></DT>
    <DD>
    <P>This flag specifies triplet storage. </P></DD>
    <DT><CODE>GSL_SPMATRIX_CCS</CODE></DT>
    <DD>
    <P>This flag specifies compressed column storage. </P></DD></DL>
  <P>The allocated <CODE>gsl_spmatrix</CODE> structure is of size   
  <EM>O(nzmax)</EM>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005frealloc"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_realloc</STRONG> <EM>(const size_t 
  <VAR>nzmax</VAR>,   gsl_spmatrix * <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function reallocates the storage space for <VAR>m</VAR> to accomodate  
   <VAR>nzmax</VAR> non-zero elements. It is typically called internally by   
  <CODE>gsl_spmatrix_set</CODE> if the user wants to add more elements to the   
  sparse matrix than the previously specified <VAR>nzmax</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005ffree"></A>Function: 
  <EM>void</EM><STRONG>gsl_spmatrix_free</STRONG> <EM>(gsl_spmatrix * 
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the sparse matrix   
  <VAR>m</VAR>. </P></DD></DL>
<HR>
<A name="Accessing-sparse-matrix-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Initializing-sparse-matrix-elements" 
rel="next">Initializing sparse matrix elements</A>, Previous: <A accessKey="p" 
href="#Sparse-matrix-allocation" 
rel="previous">Sparse matrix allocation</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Accessing-sparse-matrix-elements-1"></A>
<H3 class="section">41.3 Accessing sparse matrix elements</H3><A name="index-sparse-matrices_002c-accessing-elements"></A>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fget"></A>Function: 
  <EM>double</EM><STRONG>gsl_spmatrix_get</STRONG> <EM>(const gsl_spmatrix * 
  <VAR>m</VAR>,   const size_t <VAR>i</VAR>, const size_t 
<VAR>j</VAR>)</EM></DT>
  <DD>
  <P>This function returns element (<VAR>i</VAR>,<VAR>j</VAR>) of the matrix   
  <VAR>m</VAR>. The matrix may be in triplet or compressed format. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fset"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_set</STRONG> <EM>(gsl_spmatrix * 
  <VAR>m</VAR>, const   size_t <VAR>i</VAR>, const size_t <VAR>j</VAR>, const 
  double   <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function sets element (<VAR>i</VAR>,<VAR>j</VAR>) of the matrix   
  <VAR>m</VAR> to the value <VAR>x</VAR>. The matrix must be in triplet   
  representation. </P></DD></DL>
<HR>
<A name="Initializing-sparse-matrix-elements"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Copying-sparse-matrices" 
rel="next">Copying sparse matrices</A>, Previous: <A accessKey="p" href="#Accessing-sparse-matrix-elements" 
rel="previous">Accessing sparse matrix elements</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Initializing-sparse-matrix-elements-1"></A>
<H3 class="section">41.4 Initializing sparse matrix elements</H3><A name="index-sparse-matrices_002c-initializing-elements"></A>
<P>Since the sparse matrix format only stores the non-zero elements, it is 
 automatically initialized to zero upon allocation. The function 
<CODE>gsl_spmatrix_set_zero</CODE> may be used to re-initialize a matrix to zero 
 after elements have been added to it. </P>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fset_005fzero"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_set_zero</STRONG> <EM>(gsl_spmatrix *   
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function sets (or resets) all the elements of the matrix <VAR>m</VAR>  
   to zero. </P></DD></DL>
<HR>
<A name="Copying-sparse-matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-matrix-operations" 
rel="next">Sparse matrix operations</A>, Previous: <A accessKey="p" href="#Initializing-sparse-matrix-elements" 
rel="previous">Initializing sparse matrix elements</A>, Up: <A accessKey="u" 
href="#Sparse-Matrices" rel="up">Sparse 
Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Copying-sparse-matrices-1"></A>
<H3 class="section">41.5 Copying sparse matrices</H3><A name="index-sparse-matrices_002c-copying"></A>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fmemcpy"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_memcpy</STRONG> <EM>(gsl_spmatrix * 
  <VAR>dest</VAR>,   const gsl_spmatrix * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the elements of the sparse matrix <VAR>src</VAR> into  
   <VAR>dest</VAR>. The two matrices must have the same dimensions and be in the 
    same storage format. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005ftranspose_005fmemcpy"></A>Function:   
  <EM>int</EM> <STRONG>gsl_spmatrix_transpose_memcpy</STRONG> <EM>(gsl_spmatrix  
   * <VAR>dest</VAR>, const gsl_spmatrix * <VAR>src</VAR>)</EM></DT>
  <DD>
  <P>This function copies the transpose of the sparse matrix <VAR>src</VAR> into 
    <VAR>dest</VAR>. The dimensions of <VAR>dest</VAR> must match the transpose 
  of   the matrix <VAR>src</VAR>. Also, both matrices must use the same sparse   
  storage format. </P></DD></DL>
<HR>
<A name="Sparse-matrix-operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-matrix-properties" 
rel="next">Sparse matrix properties</A>, Previous: <A accessKey="p" href="#Copying-sparse-matrices" 
rel="previous">Copying sparse matrices</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-matrix-operations-1"></A>
<H3 class="section">41.6 Sparse matrix operations</H3><A name="index-sparse-matrices_002c-operations"></A>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fadd"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_add</STRONG> <EM>(gsl_spmatrix * 
  <VAR>c</VAR>, const   gsl_spmatrix * <VAR>a</VAR>, const gsl_spmatrix * 
  <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function computes the sum <EM>c = a + b</EM>. The three matrices must  
   have the same dimensions and be stored in compressed column format. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fscale"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_scale</STRONG> <EM>(gsl_spmatrix * 
  <VAR>m</VAR>, const   double <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>This function scales all elements of the matrix <VAR>m</VAR> by the   
  constant factor <VAR>x</VAR>. The result <EM>m(i,j) \leftarrow x m(i,j)</EM>   
  is stored in <VAR>m</VAR>. </P></DD></DL>
<HR>
<A name="Sparse-matrix-properties"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Finding-maximum-and-minimum-elements-of-sparse-matrices" 
rel="next">Finding maximum and minimum elements of sparse matrices</A>, 
Previous: <A accessKey="p" href="#Sparse-matrix-operations" 
rel="previous">Sparse matrix operations</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-matrix-properties-1"></A>
<H3 class="section">41.7 Sparse matrix properties</H3><A name="index-sparse-matrices_002c-properties"></A>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fnnz"></A>Function: 
  <EM>size_t</EM><STRONG>gsl_spmatrix_nnz</STRONG> <EM>(const gsl_spmatrix *   
  <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function returns the number of non-zero elements in <VAR>m</VAR>.   
  </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fequal"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_equal</STRONG> <EM>(const gsl_spmatrix * 
  <VAR>a</VAR>,   const gsl_spmatrix * <VAR>b</VAR>)</EM></DT>
  <DD>
  <P>This function returns 1 if the matrices <VAR>a</VAR> and <VAR>b</VAR> are   
  equal (by comparison of element values) and 0 otherwise. The matrices   
  <VAR>a</VAR> and <VAR>b</VAR> must be either both triplet format or both   
  compressed format for comparison. </P></DD></DL>
<HR>
<A name="Finding-maximum-and-minimum-elements-of-sparse-matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-matrix-compressed-format" 
rel="next">Sparse matrix compressed format</A>, Previous: <A accessKey="p" href="#Sparse-matrix-properties" 
rel="previous">Sparse matrix properties</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Finding-maximum-and-minimum-elements-of-sparse-matrices-1"></A>
<H3 class="section">41.8 Finding maximum and minimum elements of sparse 
 matrices</H3><A name="index-sparse-matrices_002c-min_002fmax-elements"></A>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fminmax"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_minmax</STRONG> <EM>(const gsl_spmatrix * 
  <VAR>m</VAR>,   double * <VAR>min_out</VAR>, double * 
  <VAR>max_out</VAR>)</EM></DT>
  <DD>
  <P>This function returns the minimum and maximum elements of the matrix   
  <VAR>m</VAR>, storing them in <VAR>min_out</VAR> and <VAR>max_out</VAR>, and   
  searching only the non-zero values. </P></DD></DL>
<HR>
<A name="Sparse-matrix-compressed-format"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Conversion-between-sparse-and-dense-matrices" 
rel="next">Conversion between sparse and dense matrices</A>, Previous: <A 
accessKey="p" href="#Finding-maximum-and-minimum-elements-of-sparse-matrices" 
rel="previous">Finding maximum and minimum elements of sparse matrices</A>, Up: 
<A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-matrix-compressed-format-1"></A>
<H3 class="section">41.9 Sparse matrix compressed format</H3><A name="index-sparse-matrices_002c-compression"></A>
<P>GSL supports the compressed column format, in which the non-zero elements in 
 each column are stored contiguously in memory. </P>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fcompcol"></A>Function: 
  <EM>gsl_spmatrix   *</EM> <STRONG>gsl_spmatrix_compcol</STRONG> <EM>(const 
  gsl_spmatrix *   <VAR>T</VAR>)</EM></DT>
  <DD>
  <P>This function creates a sparse matrix in compressed column format from the  
   input sparse matrix <VAR>T</VAR> which must be in triplet format. A pointer 
  to   a newly allocated matrix is returned. The calling function should free 
  the   newly allocated matrix when it is no longer needed. </P></DD></DL>
<HR>
<A name="Conversion-between-sparse-and-dense-matrices"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Matrix-Examples" 
rel="next">Sparse Matrix Examples</A>, Previous: <A accessKey="p" href="#Sparse-matrix-compressed-format" 
rel="previous">Sparse matrix compressed format</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Conversion-between-sparse-and-dense-matrices-1"></A>
<H3 class="section">41.10 Conversion between sparse and dense matrices</H3><A 
name="index-sparse-matrices_002c-conversion"></A>
<P>The <CODE>gsl_spmatrix</CODE> structure can be converted into the dense 
<CODE>gsl_matrix</CODE> format and vice versa with the following routines. </P>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fd2sp"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_d2sp</STRONG> <EM>(gsl_spmatrix * 
  <VAR>S</VAR>, const   gsl_matrix * <VAR>A</VAR>)</EM></DT>
  <DD>
  <P>This function converts the dense matrix <VAR>A</VAR> into sparse triplet   
  format and stores the result in <VAR>S</VAR>. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspmatrix_005fsp2d"></A>Function: 
  <EM>int</EM><STRONG>gsl_spmatrix_sp2d</STRONG> <EM>(gsl_matrix * <VAR>A</VAR>, 
  const   gsl_spmatrix * <VAR>S</VAR>)</EM></DT>
  <DD>
  <P>This function converts the sparse matrix <VAR>S</VAR> into a dense matrix   
  and stores the result in <VAR>A</VAR>. <VAR>S</VAR> must be in triplet format. 
    </P></DD></DL>
<HR>
<A name="Sparse-Matrix-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Matrix-References-and-Further-Reading" 
rel="next">Sparse Matrix References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Conversion-between-sparse-and-dense-matrices" 
rel="previous">Conversion between sparse and dense matrices</A>, Up: <A 
accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-30"></A>
<H3 class="section">41.11 Examples</H3><A name="index-sparse-matrices_002c-examples"></A>
<P>The following example program builds a 5-by-4 sparse matrix and prints it in 
 triplet and compressed column format. The matrix which is constructed is The 
 output of the program is </P>
<DIV class="example"><PRE class="example">printing all matrix elements:
A(0,0) = 0
A(0,1) = 0
A(0,2) = 3.1
A(0,3) = 4.6
A(1,0) = 1
.
.
.
A(4,0) = 4.1
A(4,1) = 0
A(4,2) = 0
A(4,3) = 0
matrix in triplet format (i,j,Aij):
(0, 2, 3.1)
(0, 3, 4.6)
(1, 0, 1.0)
(1, 2, 7.2)
(3, 0, 2.1)
(3, 1, 2.9)
(3, 3, 8.5)
(4, 0, 4.1)
matrix in compressed column format:
i = [ 1, 3, 4, 3, 0, 1, 0, 3, ]
p = [ 0, 3, 4, 6, 8, ]
d = [ 1, 2.1, 4.1, 2.9, 3.1, 7.2, 4.6, 8.5, ]
</PRE></DIV>
<P>We see in the compressed column output, the data array stores each column 
 contiguously, the array <EM>i</EM> stores the row index of the corresponding 
 data element, and the array <EM>p</EM> stores the index of the start of each 
 column in the data array. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;gsl/gsl_spmatrix.h&gt;

int
main()
{
  gsl_spmatrix *A = gsl_spmatrix_alloc(5, 4); /* triplet format */
  gsl_spmatrix *C;
  size_t i, j;

  /* build the sparse matrix */
  gsl_spmatrix_set(A, 0, 2, 3.1);
  gsl_spmatrix_set(A, 0, 3, 4.6);
  gsl_spmatrix_set(A, 1, 0, 1.0);
  gsl_spmatrix_set(A, 1, 2, 7.2);
  gsl_spmatrix_set(A, 3, 0, 2.1);
  gsl_spmatrix_set(A, 3, 1, 2.9);
  gsl_spmatrix_set(A, 3, 3, 8.5);
  gsl_spmatrix_set(A, 4, 0, 4.1);

  printf("printing all matrix elements:\n");
  for (i = 0; i &lt; 5; ++i)
    for (j = 0; j &lt; 4; ++j)
      printf("A(%zu,%zu) = %g\n", i, j,
             gsl_spmatrix_get(A, i, j));

  /* print out elements in triplet format */
  printf("matrix in triplet format (i,j,Aij):\n");
  for (i = 0; i &lt; A-&gt;nz; ++i)
    printf("(%zu, %zu, %.1f)\n", A-&gt;i[i], A-&gt;p[i], A-&gt;data[i]);

  /* convert to compressed column format */
  C = gsl_spmatrix_compcol(A);

  printf("matrix in compressed column format:\n");
  printf("i = [ ");
  for (i = 0; i &lt; C-&gt;nz; ++i)
    printf("%zu, ", C-&gt;i[i]);
  printf("]\n");

  printf("p = [ ");
  for (i = 0; i &lt; C-&gt;size2 + 1; ++i)
    printf("%zu, ", C-&gt;p[i]);
  printf("]\n");

  printf("d = [ ");
  for (i = 0; i &lt; C-&gt;nz; ++i)
    printf("%g, ", C-&gt;data[i]);
  printf("]\n");

  gsl_spmatrix_free(A);
  gsl_spmatrix_free(C);

  return 0;
}
</PRE></DIV>
<HR>
<A name="Sparse-Matrix-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Sparse-Matrix-Examples" 
rel="previous">Sparse Matrix Examples</A>, Up: <A accessKey="u" href="#Sparse-Matrices" 
rel="up">Sparse Matrices</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-32"></A>
<H3 class="section">41.12 References and Further Reading</H3><A name="index-sparse-matrices_002c-references"></A>
<P>The algorithms used by these functions are described in the following 
 sources: </P>
<UL class="no-bullet">
  <LI><!-- /@w -->T. A. Davis, Direct Methods for Sparse Linear Systems, SIAM,   
  2006. </LI>
  <LI><!-- /@w -->CSparse software library, <A href="https://www.cise.ufl.edu/research/sparse/CSparse">https://www.cise.ufl.edu/research/sparse/CSparse</A></LI></UL>
<HR>
<A name="Sparse-BLAS-Support"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Linear-Algebra" 
rel="next">Sparse Linear Algebra</A>, Previous: <A accessKey="p" href="#Sparse-Matrices" 
rel="previous">Sparse Matrices</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-BLAS-Support-1"></A>
<H2 class="chapter">42 Sparse BLAS Support</H2><A 
name="index-sparse-BLAS"></A><A name="index-BLAS_002c-sparse"></A>
<P>The Sparse Basic Linear Algebra Subprograms (<SMALL>BLAS</SMALL>) define a 
 set of fundamental operations on vectors and sparse matrices which can be used 
 to create optimized higher-level linear algebra functionality. GSL supports a 
 limited number of BLAS operations for sparse matrices. </P>
<P>The header file <SAMP>gsl_spblas.h</SAMP> contains the prototypes for the 
 sparse BLAS functions and related declarations. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Sparse-BLAS-operations">Sparse 
            BLAS operations</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Sparse-BLAS-References-and-Further-Reading">Sparse 
            BLAS References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Sparse-BLAS-operations"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-BLAS-References-and-Further-Reading" 
rel="next">Sparse BLAS References and Further Reading</A>, Up: <A accessKey="u" 
href="#Sparse-BLAS-Support" 
rel="up">Sparse BLAS Support</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-BLAS-operations-1"></A>
<H3 class="section">42.1 Sparse BLAS operations</H3><A name="index-sparse-matrices_002c-BLAS-operations"></A>
<DL>
  <DT><A name="index-gsl_005fspblas_005fdgemv"></A>Function: 
  <EM>int</EM><STRONG>gsl_spblas_dgemv</STRONG> <EM>(const CBLAS_TRANSPOSE_t 
  TransA, const   double <VAR>alpha</VAR>, const gsl_spmatrix * <VAR>A</VAR>, 
  const gsl_vector *   <VAR>x</VAR>, const double <VAR>beta</VAR>, gsl_vector *  
   <VAR>y</VAR>)</EM></DT>
  <DD>
  <P>This function computes the matrix-vector product and sum <EM>y \leftarrow   
  \alpha op(A) x + \beta y</EM>, where <EM>op(A) = A</EM>, <EM>A^T</EM> for   
  <VAR>TransA</VAR> = <CODE>CblasNoTrans</CODE>, <CODE>CblasTrans</CODE>.   
  In-place computations are not supported, so <VAR>x</VAR> and <VAR>y</VAR> must 
    be distinct vectors. The matrix <VAR>A</VAR> may be in triplet or compressed 
    format. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fspblas_005fdgemm"></A>Function: 
  <EM>int</EM><STRONG>gsl_spblas_dgemm</STRONG> <EM>(const double 
  <VAR>alpha</VAR>, const   gsl_spmatrix * <VAR>A</VAR>, const gsl_spmatrix * 
  <VAR>B</VAR>, gsl_spmatrix *   <VAR>C</VAR>)</EM></DT>
  <DD>
  <P>This function computes the sparse matrix-matrix product <EM>C = \alpha A   
  B</EM>. The matrices must be in compressed format. </P></DD></DL>
<HR>
<A name="Sparse-BLAS-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Sparse-BLAS-operations" 
rel="previous">Sparse BLAS operations</A>, Up: <A accessKey="u" href="#Sparse-BLAS-Support" 
rel="up">Sparse BLAS Support</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-33"></A>
<H3 class="section">42.2 References and Further Reading</H3><A name="index-sparse-matrices_002c-references-1"></A>
<P>The algorithms used by these functions are described in the following 
 sources: </P>
<UL class="no-bullet">
  <LI><!-- /@w -->T. A. Davis, Direct Methods for Sparse Linear Systems, SIAM,   
  2006. </LI>
  <LI><!-- /@w -->CSparse software library, <A href="https://www.cise.ufl.edu/research/sparse/CSparse">https://www.cise.ufl.edu/research/sparse/CSparse</A></LI></UL>
<HR>
<A name="Sparse-Linear-Algebra"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Physical-Constants" 
rel="next">Physical Constants</A>, Previous: <A accessKey="p" href="#Sparse-BLAS-Support" 
rel="previous">Sparse BLAS Support</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-Linear-Algebra-1"></A>
<H2 class="chapter">43 Sparse Linear Algebra</H2><A name="index-sparse-linear-algebra"></A><A 
name="index-linear-algebra_002c-sparse"></A>
<P>This chapter describes functions for solving sparse linear systems of 
 equations. The library provides linear algebra routines which operate directly 
 on the <CODE>gsl_spmatrix</CODE> and <CODE>gsl_vector</CODE> objects. </P>
<P>The functions described in this chapter are declared in the header file 
<SAMP>gsl_splinalg.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Overview-of-Sparse-Linear-Algebra">Overview 
            of Sparse Linear Algebra</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Sparse-Iterative-Solvers">Sparse 
            Iterative Solvers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Sparse-Linear-Algebra-Examples">Sparse 
            Linear Algebra Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Sparse-Linear-Algebra-References-and-Further-Reading">Sparse 
            Linear Algebra References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Overview-of-Sparse-Linear-Algebra"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Iterative-Solvers" 
rel="next">Sparse Iterative Solvers</A>, Up: <A accessKey="u" href="#Sparse-Linear-Algebra" 
rel="up">Sparse Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-8"></A>
<H3 class="section">43.1 Overview</H3><A name="index-sparse-linear-algebra_002c-overview"></A>
<P>This chapter is primarily concerned with the solution of the linear system 
</P>
<DIV class="example"><PRE class="example">A x = b
</PRE></DIV>
<P>where <EM>A</EM> is a general square <EM>n</EM>-by-<EM>n</EM> non-singular 
 sparse matrix, <EM>x</EM> is an unknown <EM>n</EM>-by-<EM>1</EM> vector, and 
<EM>b</EM> is a given <EM>n</EM>-by-1 right hand side vector. There exist many 
 methods for solving such sparse linear systems, which broadly fall into either 
 direct or iterative categories. Direct methods include LU and QR 
decompositions,  while iterative methods start with an initial guess for the 
vector <EM>x</EM>  and update the guess through iteration until convergence. GSL 
does not currently  provide any direct sparse solvers. </P>
<HR>
<A name="Sparse-Iterative-Solvers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Linear-Algebra-Examples" 
rel="next">Sparse Linear Algebra Examples</A>, Previous: <A accessKey="p" href="#Overview-of-Sparse-Linear-Algebra" 
rel="previous">Overview of Sparse Linear Algebra</A>, Up: <A accessKey="u" href="#Sparse-Linear-Algebra" 
rel="up">Sparse Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Sparse-Iterative-Solvers-1"></A>
<H3 class="section">43.2 Sparse Iterative Solvers</H3><A name="index-sparse-matrices_002c-iterative-solvers"></A><A 
name="index-sparse-linear-algebra_002c-iterative-solvers"></A><A name="index-sparse_002c-iterative-solvers"></A>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Sparse-Iterative-Solver-Overview">Sparse 
            Iterative Solver Overview</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Sparse-Iterative-Solvers-Types">Sparse 
            Iterative Solvers Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Iterating-the-Sparse-Linear-System">Iterating 
            the Sparse Linear System</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Sparse-Iterative-Solver-Overview"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Iterative-Solvers-Types" 
rel="next">Sparse Iterative Solvers Types</A>, Up: <A accessKey="u" href="#Sparse-Iterative-Solvers" 
rel="up">Sparse Iterative Solvers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Overview-9"></A>
<H4 class="subsection">43.2.1 Overview</H4>
<P>Many practical iterative methods of solving large <EM>n</EM>-by-<EM>n</EM> 
 sparse linear systems involve projecting an approximate solution for 
<VAR>x</VAR> onto a subspace of <EM>{\bf R}^n</EM>. If we define a 
<EM>m</EM>-dimensional subspace <EM>{\cal K}</EM> as the subspace of 
 approximations to the solution <VAR>x</VAR>, then <EM>m</EM> constraints must 
be  imposed to determine the next approximation. These <EM>m</EM> constraints 
define  another <EM>m</EM>-dimensional subspace denoted by <EM>{\cal L}</EM>. 
The  subspace dimension <EM>m</EM> is typically chosen to be much smaller than 
<EM>n</EM> in order to reduce the computational effort needed to generate the 
 next approximate solution vector. The many iterative algorithms which exist 
 differ mainly in their choice of <EM>{\cal K}</EM> and <EM>{\cal L}</EM>. </P>
<HR>
<A name="Sparse-Iterative-Solvers-Types"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Iterating-the-Sparse-Linear-System" 
rel="next">Iterating the Sparse Linear System</A>, Previous: <A accessKey="p" 
href="#Sparse-Iterative-Solver-Overview" 
rel="previous">Sparse Iterative Solver Overview</A>, Up: <A accessKey="u" href="#Sparse-Iterative-Solvers" 
rel="up">Sparse Iterative Solvers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Types-of-Sparse-Iterative-Solvers"></A>
<H4 class="subsection">43.2.2 Types of Sparse Iterative Solvers</H4>
<P>The sparse linear algebra library provides the following types of iterative 
 solvers: </P>
<DL>
  <DT><A name="index-gsl_005fsplinalg_005fitersolve_005fgmres"></A>Sparse   
  Iterative Type: <STRONG>gsl_splinalg_itersolve_gmres</STRONG></DT>
  <DD><A name="index-gmres"></A>
  <P>This specifies the Generalized Minimum Residual Method (GMRES). This is a   
  projection method using <EM>{\cal K} = {\cal K}_m</EM> and <EM>{\cal L} = A   
  {\cal K}_m</EM> where <EM>{\cal K}_m</EM> is the <EM>m</EM>-th Krylov subspace 
    </P>
  <DIV class="example"><PRE class="example">K_m = span( r_0, A r_0, ..., A^(m-1) r_0)
</PRE></DIV>
  <P>and <EM>r_0 = b - A x_0</EM> is the residual vector of the initial guess   
  <EM>x_0</EM>. If <EM>m</EM> is set equal to <EM>n</EM>, then the Krylov   
  subspace is <EM>{\bf R}^n</EM> and GMRES will provide the exact solution   
  <VAR>x</VAR>. However, the goal is for the method to arrive at a very good   
  approximation to <VAR>x</VAR> using a much smaller subspace <EM>{\cal   
  K}_m</EM>. By default, the GMRES method selects <EM>m = MIN(n,10)</EM> but the 
    user may specify a different value for <EM>m</EM>. The GMRES storage   
  requirements grow as <EM>O(n(m+1))</EM> and the number of flops grow as   
  <EM>O(4 m^2 n - 4 m^3 / 3)</EM>. </P>
  <P>In the below function <CODE>gsl_splinalg_itersolve_iterate</CODE>, one   
  GMRES iteration is defined as projecting the approximate solution vector onto  
   each Krylov subspace <EM>{\cal K}_1, ..., {\cal K}_m</EM>, and so <EM>m</EM>  
   can be kept smaller by "restarting" the method and calling   
  <CODE>gsl_splinalg_itersolve_iterate</CODE> multiple times, providing the   
  updated approximation <VAR>x</VAR> to each new call. If the method is not   
  adequately converging, the user may try increasing the parameter <EM>m</EM>.   
  </P>
  <P>GMRES is considered a robust general purpose iterative solver, however   
  there are cases where the method stagnates if the matrix is not   
  positive-definite and fails to reduce the residual until the very last   
  projection onto the subspace <EM>{\cal K}_n = {\bf R}^n</EM>. In these cases,  
   preconditioning the linear system can help, but GSL does not currently 
  provide   any preconditioners. </P></DD></DL>
<HR>
<A name="Iterating-the-Sparse-Linear-System"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Sparse-Iterative-Solvers-Types" 
rel="previous">Sparse Iterative Solvers Types</A>, Up: <A accessKey="u" href="#Sparse-Iterative-Solvers" 
rel="up">Sparse Iterative Solvers</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Iterating-the-Sparse-Linear-System-1"></A>
<H4 class="subsection">43.2.3 Iterating the Sparse Linear System</H4>
<P>The following functions are provided to allocate storage for the sparse 
 linear solvers and iterate the system to a solution. </P>
<DL>
  <DT><A name="index-gsl_005fsplinalg_005fitersolve_005falloc"></A>Function:   
  <EM>gsl_splinalg_itersolve *</EM><STRONG>gsl_splinalg_itersolve_alloc</STRONG> 
  <EM>(const   gsl_splinalg_itersolve_type * <VAR>T</VAR>, const size_t 
  <VAR>n</VAR>, const   size_t <VAR>m</VAR>)</EM></DT>
  <DD>
  <P>This function allocates a workspace for the iterative solution of   
  <VAR>n</VAR>-by-<VAR>n</VAR> sparse matrix systems. The iterative solver type  
   is specified by <VAR>T</VAR>. The argument <VAR>m</VAR> specifies the size of 
    the solution candidate subspace <EM>{\cal K}_m</EM>. The dimension   
  <VAR>m</VAR> may be set to 0 in which case a reasonable default value is used. 
    </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsplinalg_005fitersolve_005ffree"></A>Function:   
  <EM>void</EM> 
  <STRONG>gsl_splinalg_itersolve_free</STRONG><EM>(gsl_splinalg_itersolve * 
  <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function frees the memory associated with the workspace <VAR>w</VAR>.  
   </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsplinalg_005fitersolve_005fname"></A>Function:   
  <EM>const char *</EM> <STRONG>gsl_splinalg_itersolve_name</STRONG> <EM>(const  
   gsl_splinalg_itersolve * <VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns a string pointer to the name of the solver. 
</P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsplinalg_005fitersolve_005fiterate"></A>Function:   
  <EM>int</EM> <STRONG>gsl_splinalg_itersolve_iterate</STRONG> <EM>(const   
  gsl_spmatrix *<VAR>A</VAR>, const gsl_vector *<VAR>b</VAR>, const double   
  <VAR>tol</VAR>, gsl_vector *<VAR>x</VAR>, gsl_splinalg_itersolve   
  *<VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function performs one iteration of the iterative method for the sparse 
    linear system specfied by the matrix <VAR>A</VAR>, right hand side vector   
  <VAR>b</VAR> and solution vector <VAR>x</VAR>. On input, <VAR>x</VAR> must be  
   set to an initial guess for the solution. On output, <VAR>x</VAR> is updated  
   to give the current solution estimate. The parameter <VAR>tol</VAR> specifies 
    the relative tolerance between the residual norm and norm of <VAR>b</VAR> in 
    order to check for convergence. When the following condition is satisfied: 
  </P>
  <DIV class="example"><PRE class="example">|| A x - b || &lt;= tol * || b ||
</PRE></DIV>
  <P>the method has converged, the function returns <CODE>GSL_SUCCESS</CODE> and 
    the final solution is provided in <VAR>x</VAR>. Otherwise, the function   
  returns <CODE>GSL_CONTINUE</CODE> to signal that more iterations are required. 
    Here, <EM>|| \cdot ||</EM> represents the Euclidean norm. The input matrix   
  <VAR>A</VAR> may be in triplet or compressed column format. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fsplinalg_005fitersolve_005fnormr"></A>Function:   
  <EM>double</EM> <STRONG>gsl_splinalg_itersolve_normr</STRONG> <EM>(const   
  gsl_splinalg_itersolve *<VAR>w</VAR>)</EM></DT>
  <DD>
  <P>This function returns the current residual norm <EM>||r|| = ||A x -   
  b||</EM>, which is updated after each call to   
  <CODE>gsl_splinalg_itersolve_iterate</CODE>. </P></DD></DL>
<HR>
<A name="Sparse-Linear-Algebra-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Sparse-Linear-Algebra-References-and-Further-Reading" 
rel="next">Sparse Linear Algebra References and Further Reading</A>, Previous: 
<A accessKey="p" href="#Sparse-Iterative-Solvers" 
rel="previous">Sparse Iterative Solvers</A>, Up: <A accessKey="u" href="#Sparse-Linear-Algebra" 
rel="up">Sparse Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-31"></A>
<H3 class="section">43.3 Examples</H3><A name="index-sparse-linear-algebra_002c-examples"></A>
<P>This example program demonstrates the sparse linear algebra routines on the 
 solution of a simple 1D Poisson equation on <EM>[0,1]</EM>: </P>
<DIV class="example"><PRE class="example">u''(x) = f(x) = -\pi^2 \sin(\pi x)
</PRE></DIV>
<P>with boundary conditions <EM>u(0) = u(1) = 0</EM>. The analytic solution of 
 this simple problem is <EM>u(x) = \sin{\pi x}</EM>. We will solve this problem 
 by finite differencing the left hand side to give </P>
<DIV class="example"><PRE class="example">1/h^2 ( u_(i+1) - 2 u_i + u_(i-1) ) = f_i
</PRE></DIV>
<P>Defining a grid of <EM>N</EM> points, <EM>h = 1/(N-1)</EM>. In the finite 
 difference equation above, <EM>u_0 = u_{N-1} = 0</EM> are known from the 
 boundary conditions, so we will only put the equations for <EM>i = 1, ..., 
 N-2</EM> into the matrix system. The resulting <EM>(N-2) \times (N-2)</EM> 
 matrix equation is An example program which constructs and solves this system 
is  given below. The system is solved using the iterative GMRES solver. Here is 
the  output of the program: </P>
<DIV class="example"><PRE class="example">iter 0 residual = 4.297275996844e-11
Converged
</PRE></DIV>
<P>showing that the method converged in a single iteration. The calculated 
 solution is shown in the following plot. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_vector.h&gt;
#include &lt;gsl/gsl_spmatrix.h&gt;
#include &lt;gsl/gsl_splinalg.h&gt;

int
main()
{
  const size_t N = 100;                       /* number of grid points */
  const size_t n = N - 2;                     /* subtract 2 to exclude boundaries */
  const double h = 1.0 / (N - 1.0);           /* grid spacing */
  gsl_spmatrix *A = gsl_spmatrix_alloc(n ,n); /* triplet format */
  gsl_spmatrix *C;                            /* compressed format */
  gsl_vector *f = gsl_vector_alloc(n);        /* right hand side vector */
  gsl_vector *u = gsl_vector_alloc(n);        /* solution vector */
  size_t i;

  /* construct the sparse matrix for the finite difference equation */

  /* construct first row */
  gsl_spmatrix_set(A, 0, 0, -2.0);
  gsl_spmatrix_set(A, 0, 1, 1.0);

  /* construct rows [1:n-2] */
  for (i = 1; i &lt; n - 1; ++i)
    {
      gsl_spmatrix_set(A, i, i + 1, 1.0);
      gsl_spmatrix_set(A, i, i, -2.0);
      gsl_spmatrix_set(A, i, i - 1, 1.0);
    }

  /* construct last row */
  gsl_spmatrix_set(A, n - 1, n - 1, -2.0);
  gsl_spmatrix_set(A, n - 1, n - 2, 1.0);

  /* scale by h^2 */
  gsl_spmatrix_scale(A, 1.0 / (h * h));

  /* construct right hand side vector */
  for (i = 0; i &lt; n; ++i)
    {
      double xi = (i + 1) * h;
      double fi = -M_PI * M_PI * sin(M_PI * xi);
      gsl_vector_set(f, i, fi);
    }

  /* convert to compressed column format */
  C = gsl_spmatrix_compcol(A);

  /* now solve the system with the GMRES iterative solver */
  {
    const double tol = 1.0e-6;  /* solution relative tolerance */
    const size_t max_iter = 10; /* maximum iterations */
    const gsl_splinalg_itersolve_type *T = gsl_splinalg_itersolve_gmres;
    gsl_splinalg_itersolve *work =
      gsl_splinalg_itersolve_alloc(T, n, 0);
    size_t iter = 0;
    double residual;
    int status;

    /* initial guess u = 0 */
    gsl_vector_set_zero(u);

    /* solve the system A u = f */
    do
      {
        status = gsl_splinalg_itersolve_iterate(C, f, tol, u, work);

        /* print out residual norm ||A*u - f|| */
        residual = gsl_splinalg_itersolve_normr(work);
        fprintf(stderr, "iter %zu residual = %.12e\n", iter, residual);

        if (status == GSL_SUCCESS)
          fprintf(stderr, "Converged\n");
      }
    while (status == GSL_CONTINUE &amp;&amp; ++iter &lt; max_iter);

    /* output solution */
    for (i = 0; i &lt; n; ++i)
      {
        double xi = (i + 1) * h;
        double u_exact = sin(M_PI * xi);
        double u_gsl = gsl_vector_get(u, i);

        printf("%f %.12e %.12e\n", xi, u_gsl, u_exact);
      }

    gsl_splinalg_itersolve_free(work);
  }

  gsl_spmatrix_free(A);
  gsl_spmatrix_free(C);
  gsl_vector_free(f);
  gsl_vector_free(u);

  return 0;
} /* main() */
</PRE></DIV>
<HR>
<A name="Sparse-Linear-Algebra-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Sparse-Linear-Algebra-Examples" 
rel="previous">Sparse Linear Algebra Examples</A>, Up: <A accessKey="u" href="#Sparse-Linear-Algebra" 
rel="up">Sparse Linear Algebra</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-34"></A>
<H3 class="section">43.4 References and Further Reading</H3><A name="index-sparse-linear-algebra_002c-references"></A>
<P>The implementation of the GMRES iterative solver closely follows the 
 publications </P>
<UL class="no-bullet">
  <LI><!-- /@w -->H. F. Walker, Implementation of the GMRES method using   
  Householder transformations, SIAM J. Sci. Stat. Comput. 9(1), 1988. </LI>
  <LI><!-- /@w -->Y. Saad, Iterative methods for sparse linear systems, 2nd   
  edition, SIAM, 2003. </LI></UL>
<HR>
<A name="Physical-Constants"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#IEEE-floating_002dpoint-arithmetic" 
rel="next">IEEE floating-point arithmetic</A>, Previous: <A accessKey="p" href="#Sparse-Linear-Algebra" 
rel="previous">Sparse Linear Algebra</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Physical-Constants-1"></A>
<H2 class="chapter">44 Physical Constants</H2><A 
name="index-physical-constants"></A><A 
name="index-constants_002c-physical"></A><A 
name="index-conversion-of-units"></A><A 
name="index-units_002c-conversion-of"></A>
<P>This chapter describes macros for the values of physical constants, such as 
 the speed of light, <EM>c</EM>, and gravitational constant, <EM>G</EM>. The 
 values are available in different unit systems, including the standard MKSA 
 system (meters, kilograms, seconds, amperes) and the CGSM system (centimeters, 
 grams, seconds, gauss), which is commonly used in Astronomy. </P>
<P>The definitions of constants in the MKSA system are available in the file 
<SAMP>gsl_const_mksa.h</SAMP>. The constants in the CGSM system are defined in 
<SAMP>gsl_const_cgsm.h</SAMP>. Dimensionless constants, such as the fine 
 structure constant, which are pure numbers are defined in 
<SAMP>gsl_const_num.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Fundamental-Constants">Fundamental 
            Constants</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Astronomy-and-Astrophysics">Astronomy 
            and Astrophysics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Atomic-and-Nuclear-Physics">Atomic 
            and Nuclear Physics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#Measurement-of-Time">Measurement 
            of Time</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Imperial-Units">Imperial 
            Units </A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="6" href="#Speed-and-Nautical-Units">Speed 
            and Nautical Units</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="7" href="#Printers-Units">Printers 
            Units</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="8" href="#Volume-Area-and-Length">Volume 
            Area and Length</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="9" href="#Mass-and-Weight">Mass 
            and Weight </A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Thermal-Energy-and-Power">Thermal 
            Energy and Power</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Pressure">Pressure</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Viscosity">Viscosity</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Light-and-Illumination">Light 
            and Illumination</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Radioactivity">Radioactivity</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Force-and-Energy">Force 
            and Energy</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Prefixes">Prefixes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Physical-Constant-Examples">Physical 
            Constant Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A href="#Physical-Constant-References-and-Further-Reading">Physical 
            Constant References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<P>The full list of constants is described briefly below. Consult the header 
 files themselves for the values of the constants used in the library. </P>
<HR>
<A name="Fundamental-Constants"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Astronomy-and-Astrophysics" 
rel="next">Astronomy and Astrophysics</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Fundamental-Constants-1"></A>
<H3 class="section">44.1 Fundamental Constants</H3><A name="index-fundamental-constants"></A><A 
name="index-constants_002c-fundamental"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_SPEED_OF_LIGHT</CODE></DT>
  <DD>
  <P>The speed of light in vacuum, <EM>c</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_VACUUM_PERMEABILITY</CODE></DT>
  <DD>
  <P>The permeability of free space, <EM>\mu_0</EM>. This constant is defined in 
    the MKSA system only. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_VACUUM_PERMITTIVITY</CODE></DT>
  <DD>
  <P>The permittivity of free space, <EM>\epsilon_0</EM>. This constant is   
  defined in the MKSA system only. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PLANCKS_CONSTANT_H</CODE></DT>
  <DD>
  <P>Planck’s constant, <EM>h</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR</CODE></DT>
  <DD>
  <P>Planck’s constant divided by <EM>2\pi</EM>, <EM>\hbar</EM>. </P></DD>
  <DT><CODE>GSL_CONST_NUM_AVOGADRO</CODE></DT>
  <DD>
  <P>Avogadro’s number, <EM>N_a</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_FARADAY</CODE></DT>
  <DD>
  <P>The molar charge of 1 Faraday. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_BOLTZMANN</CODE></DT>
  <DD>
  <P>The Boltzmann constant, <EM>k</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MOLAR_GAS</CODE></DT>
  <DD>
  <P>The molar gas constant, <EM>R_0</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_STANDARD_GAS_VOLUME</CODE></DT>
  <DD>
  <P>The standard gas volume, <EM>V_0</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT</CODE></DT>
  <DD>
  <P>The Stefan-Boltzmann radiation constant, <EM>\sigma</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_GAUSS</CODE></DT>
  <DD>
  <P>The magnetic field of 1 Gauss. </P></DD></DL>
<HR>
<A name="Astronomy-and-Astrophysics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Atomic-and-Nuclear-Physics" 
rel="next">Atomic and Nuclear Physics</A>, Previous: <A accessKey="p" href="#Fundamental-Constants" 
rel="previous">Fundamental Constants</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Astronomy-and-Astrophysics-1"></A>
<H3 class="section">44.2 Astronomy and Astrophysics</H3><A name="index-astronomical-constants"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_ASTRONOMICAL_UNIT</CODE></DT>
  <DD>
  <P>The length of 1 astronomical unit (mean earth-sun distance), <EM>au</EM>.   
  </P></DD>
  <DT><CODE>GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT</CODE></DT>
  <DD>
  <P>The gravitational constant, <EM>G</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_LIGHT_YEAR</CODE></DT>
  <DD>
  <P>The distance of 1 light-year, <EM>ly</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PARSEC</CODE></DT>
  <DD>
  <P>The distance of 1 parsec, <EM>pc</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_GRAV_ACCEL</CODE></DT>
  <DD>
  <P>The standard gravitational acceleration on Earth, <EM>g</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_SOLAR_MASS</CODE></DT>
  <DD>
  <P>The mass of the Sun. </P></DD></DL>
<HR>
<A name="Atomic-and-Nuclear-Physics"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Measurement-of-Time" 
rel="next">Measurement of Time</A>, Previous: <A accessKey="p" href="#Astronomy-and-Astrophysics" 
rel="previous">Astronomy and Astrophysics</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Atomic-and-Nuclear-Physics-1"></A>
<H3 class="section">44.3 Atomic and Nuclear Physics</H3><A name="index-atomic-physics_002c-constants"></A><A 
name="index-nuclear-physics_002c-constants"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_ELECTRON_CHARGE</CODE></DT>
  <DD>
  <P>The charge of the electron, <EM>e</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_ELECTRON_VOLT</CODE></DT>
  <DD>
  <P>The energy of 1 electron volt, <EM>eV</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS</CODE></DT>
  <DD>
  <P>The unified atomic mass, <EM>amu</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MASS_ELECTRON</CODE></DT>
  <DD>
  <P>The mass of the electron, <EM>m_e</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MASS_MUON</CODE></DT>
  <DD>
  <P>The mass of the muon, <EM>m_\mu</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MASS_PROTON</CODE></DT>
  <DD>
  <P>The mass of the proton, <EM>m_p</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MASS_NEUTRON</CODE></DT>
  <DD>
  <P>The mass of the neutron, <EM>m_n</EM>. </P></DD>
  <DT><CODE>GSL_CONST_NUM_FINE_STRUCTURE</CODE></DT>
  <DD>
  <P>The electromagnetic fine structure constant <EM>\alpha</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_RYDBERG</CODE></DT>
  <DD>
  <P>The Rydberg constant, <EM>Ry</EM>, in units of energy. This is related to   
  the Rydberg inverse wavelength <EM>R_\infty</EM> by <EM>Ry = h c   
  R_\infty</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_BOHR_RADIUS</CODE></DT>
  <DD>
  <P>The Bohr radius, <EM>a_0</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_ANGSTROM</CODE></DT>
  <DD>
  <P>The length of 1 angstrom. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_BARN</CODE></DT>
  <DD>
  <P>The area of 1 barn. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_BOHR_MAGNETON</CODE></DT>
  <DD>
  <P>The Bohr Magneton, <EM>\mu_B</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_NUCLEAR_MAGNETON</CODE></DT>
  <DD>
  <P>The Nuclear Magneton, <EM>\mu_N</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT</CODE></DT>
  <DD>
  <P>The absolute value of the magnetic moment of the electron, <EM>\mu_e</EM>.  
   The physical magnetic moment of the electron is negative. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT</CODE></DT>
  <DD>
  <P>The magnetic moment of the proton, <EM>\mu_p</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_THOMSON_CROSS_SECTION</CODE></DT>
  <DD>
  <P>The Thomson cross section, <EM>\sigma_T</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_DEBYE</CODE></DT>
  <DD>
  <P>The electric dipole moment of 1 Debye, <EM>D</EM>. </P></DD></DL>
<HR>
<A name="Measurement-of-Time"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Imperial-Units" 
rel="next">Imperial Units</A>, Previous: <A accessKey="p" href="#Atomic-and-Nuclear-Physics" 
rel="previous">Atomic and Nuclear Physics</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Measurement-of-Time-1"></A>
<H3 class="section">44.4 Measurement of Time</H3><A name="index-time-units"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_MINUTE</CODE></DT>
  <DD>
  <P>The number of seconds in 1 minute. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_HOUR</CODE></DT>
  <DD>
  <P>The number of seconds in 1 hour. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_DAY</CODE></DT>
  <DD>
  <P>The number of seconds in 1 day. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_WEEK</CODE></DT>
  <DD>
  <P>The number of seconds in 1 week. </P></DD></DL>
<HR>
<A name="Imperial-Units"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Speed-and-Nautical-Units" 
rel="next">Speed and Nautical Units</A>, Previous: <A accessKey="p" href="#Measurement-of-Time" 
rel="previous">Measurement of Time</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Imperial-Units-1"></A>
<H3 class="section">44.5 Imperial Units</H3><A 
name="index-imperial-units"></A><A name="index-units_002c-imperial"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_INCH</CODE></DT>
  <DD>
  <P>The length of 1 inch. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_FOOT</CODE></DT>
  <DD>
  <P>The length of 1 foot. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_YARD</CODE></DT>
  <DD>
  <P>The length of 1 yard. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MILE</CODE></DT>
  <DD>
  <P>The length of 1 mile. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MIL</CODE></DT>
  <DD>
  <P>The length of 1 mil (1/1000th of an inch). </P></DD></DL>
<HR>
<A name="Speed-and-Nautical-Units"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Printers-Units" 
rel="next">Printers Units</A>, Previous: <A accessKey="p" href="#Imperial-Units" 
rel="previous">Imperial Units</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Speed-and-Nautical-Units-1"></A>
<H3 class="section">44.6 Speed and Nautical Units</H3><A name="index-nautical-units"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_KILOMETERS_PER_HOUR</CODE></DT>
  <DD>
  <P>The speed of 1 kilometer per hour. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_MILES_PER_HOUR</CODE></DT>
  <DD>
  <P>The speed of 1 mile per hour. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_NAUTICAL_MILE</CODE></DT>
  <DD>
  <P>The length of 1 nautical mile. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_FATHOM</CODE></DT>
  <DD>
  <P>The length of 1 fathom. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_KNOT</CODE></DT>
  <DD>
  <P>The speed of 1 knot. </P></DD></DL>
<HR>
<A name="Printers-Units"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Volume-Area-and-Length" 
rel="next">Volume Area and Length</A>, Previous: <A accessKey="p" href="#Speed-and-Nautical-Units" 
rel="previous">Speed and Nautical Units</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Printers-Units-1"></A>
<H3 class="section">44.7 Printers Units</H3><A name="index-printers-units"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_POINT</CODE></DT>
  <DD>
  <P>The length of 1 printer’s point (1/72 inch). </P></DD>
  <DT><CODE>GSL_CONST_MKSA_TEXPOINT</CODE></DT>
  <DD>
  <P>The length of 1 TeX point (1/72.27 inch). </P></DD></DL>
<HR>
<A name="Volume-Area-and-Length"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Mass-and-Weight" 
rel="next">Mass and Weight</A>, Previous: <A accessKey="p" href="#Printers-Units" 
rel="previous">Printers Units</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Volume_002c-Area-and-Length"></A>
<H3 class="section">44.8 Volume, Area and Length</H3><A name="index-volume-units"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_MICRON</CODE></DT>
  <DD>
  <P>The length of 1 micron. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_HECTARE</CODE></DT>
  <DD>
  <P>The area of 1 hectare. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_ACRE</CODE></DT>
  <DD>
  <P>The area of 1 acre. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_LITER</CODE></DT>
  <DD>
  <P>The volume of 1 liter. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_US_GALLON</CODE></DT>
  <DD>
  <P>The volume of 1 US gallon. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_CANADIAN_GALLON</CODE></DT>
  <DD>
  <P>The volume of 1 Canadian gallon. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_UK_GALLON</CODE></DT>
  <DD>
  <P>The volume of 1 UK gallon. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_QUART</CODE></DT>
  <DD>
  <P>The volume of 1 quart. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PINT</CODE></DT>
  <DD>
  <P>The volume of 1 pint. </P></DD></DL>
<HR>
<A name="Mass-and-Weight"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Thermal-Energy-and-Power" 
rel="next">Thermal Energy and Power</A>, Previous: <A accessKey="p" href="#Volume-Area-and-Length" 
rel="previous">Volume Area and Length</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Mass-and-Weight-1"></A>
<H3 class="section">44.9 Mass and Weight</H3><A 
name="index-mass_002c-units-of"></A><A name="index-weight_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_POUND_MASS</CODE></DT>
  <DD>
  <P>The mass of 1 pound. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_OUNCE_MASS</CODE></DT>
  <DD>
  <P>The mass of 1 ounce. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_TON</CODE></DT>
  <DD>
  <P>The mass of 1 ton. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_METRIC_TON</CODE></DT>
  <DD>
  <P>The mass of 1 metric ton (1000 kg). </P></DD>
  <DT><CODE>GSL_CONST_MKSA_UK_TON</CODE></DT>
  <DD>
  <P>The mass of 1 UK ton. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_TROY_OUNCE</CODE></DT>
  <DD>
  <P>The mass of 1 troy ounce. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_CARAT</CODE></DT>
  <DD>
  <P>The mass of 1 carat. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_GRAM_FORCE</CODE></DT>
  <DD>
  <P>The force of 1 gram weight. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_POUND_FORCE</CODE></DT>
  <DD>
  <P>The force of 1 pound weight. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_KILOPOUND_FORCE</CODE></DT>
  <DD>
  <P>The force of 1 kilopound weight. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_POUNDAL</CODE></DT>
  <DD>
  <P>The force of 1 poundal. </P></DD></DL>
<HR>
<A name="Thermal-Energy-and-Power"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Pressure" 
rel="next">Pressure</A>, Previous: <A accessKey="p" href="#Mass-and-Weight" 
rel="previous">Mass and Weight</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Thermal-Energy-and-Power-1"></A>
<H3 class="section">44.10 Thermal Energy and Power</H3><A name="index-energy_002c-units-of"></A><A 
name="index-power_002c-units-of"></A><A name="index-thermal-energy_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_CALORIE</CODE></DT>
  <DD>
  <P>The energy of 1 calorie. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_BTU</CODE></DT>
  <DD>
  <P>The energy of 1 British Thermal Unit, <EM>btu</EM>. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_THERM</CODE></DT>
  <DD>
  <P>The energy of 1 Therm. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_HORSEPOWER</CODE></DT>
  <DD>
  <P>The power of 1 horsepower. </P></DD></DL>
<HR>
<A name="Pressure"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Viscosity" 
rel="next">Viscosity</A>, Previous: <A accessKey="p" href="#Thermal-Energy-and-Power" 
rel="previous">Thermal Energy and Power</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Pressure-1"></A>
<H3 class="section">44.11 Pressure</H3><A 
name="index-pressure_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_BAR</CODE></DT>
  <DD>
  <P>The pressure of 1 bar. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_STD_ATMOSPHERE</CODE></DT>
  <DD>
  <P>The pressure of 1 standard atmosphere. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_TORR</CODE></DT>
  <DD>
  <P>The pressure of 1 torr. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_METER_OF_MERCURY</CODE></DT>
  <DD>
  <P>The pressure of 1 meter of mercury. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_INCH_OF_MERCURY</CODE></DT>
  <DD>
  <P>The pressure of 1 inch of mercury. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_INCH_OF_WATER</CODE></DT>
  <DD>
  <P>The pressure of 1 inch of water. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PSI</CODE></DT>
  <DD>
  <P>The pressure of 1 pound per square inch. </P></DD></DL>
<HR>
<A name="Viscosity"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Light-and-Illumination" 
rel="next">Light and Illumination</A>, Previous: <A accessKey="p" href="#Pressure" 
rel="previous">Pressure</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Viscosity-1"></A>
<H3 class="section">44.12 Viscosity</H3><A 
name="index-viscosity_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_POISE</CODE></DT>
  <DD>
  <P>The dynamic viscosity of 1 poise. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_STOKES</CODE></DT>
  <DD>
  <P>The kinematic viscosity of 1 stokes. </P></DD></DL>
<HR>
<A name="Light-and-Illumination"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Radioactivity" 
rel="next">Radioactivity</A>, Previous: <A accessKey="p" href="#Viscosity" 
rel="previous">Viscosity</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Light-and-Illumination-1"></A>
<H3 class="section">44.13 Light and Illumination</H3><A name="index-light_002c-units-of"></A><A 
name="index-illumination_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_STILB</CODE></DT>
  <DD>
  <P>The luminance of 1 stilb. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_LUMEN</CODE></DT>
  <DD>
  <P>The luminous flux of 1 lumen. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_LUX</CODE></DT>
  <DD>
  <P>The illuminance of 1 lux. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_PHOT</CODE></DT>
  <DD>
  <P>The illuminance of 1 phot. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_FOOTCANDLE</CODE></DT>
  <DD>
  <P>The illuminance of 1 footcandle. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_LAMBERT</CODE></DT>
  <DD>
  <P>The luminance of 1 lambert. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_FOOTLAMBERT</CODE></DT>
  <DD>
  <P>The luminance of 1 footlambert. </P></DD></DL>
<HR>
<A name="Radioactivity"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Force-and-Energy" 
rel="next">Force and Energy</A>, Previous: <A accessKey="p" href="#Light-and-Illumination" 
rel="previous">Light and Illumination</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Radioactivity-1"></A>
<H3 class="section">44.14 Radioactivity</H3><A name="index-radioactivity_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_CURIE</CODE></DT>
  <DD>
  <P>The activity of 1 curie. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_ROENTGEN</CODE></DT>
  <DD>
  <P>The exposure of 1 roentgen. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_RAD</CODE></DT>
  <DD>
  <P>The absorbed dose of 1 rad. </P></DD></DL>
<HR>
<A name="Force-and-Energy"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Prefixes" 
rel="next">Prefixes</A>, Previous: <A accessKey="p" href="#Radioactivity" 
rel="previous">Radioactivity</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Force-and-Energy-1"></A>
<H3 class="section">44.15 Force and Energy</H3><A name="index-force-and-energy_002c-units-of"></A>
<DL compact="">
  <DT><CODE>GSL_CONST_MKSA_NEWTON</CODE></DT>
  <DD>
  <P>The SI unit of force, 1 Newton. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_DYNE</CODE></DT>
  <DD>
  <P>The force of 1 Dyne = <EM>10^-5</EM> Newton. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_JOULE</CODE></DT>
  <DD>
  <P>The SI unit of energy, 1 Joule. </P></DD>
  <DT><CODE>GSL_CONST_MKSA_ERG</CODE></DT>
  <DD>
  <P>The energy 1 erg = <EM>10^-7</EM> Joule. </P></DD></DL>
<HR>
<A name="Prefixes"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Physical-Constant-Examples" 
rel="next">Physical Constant Examples</A>, Previous: <A accessKey="p" href="#Force-and-Energy" 
rel="previous">Force and Energy</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Prefixes-1"></A>
<H3 class="section">44.16 Prefixes</H3><A name="index-prefixes"></A><A name="index-constants_002c-prefixes"></A>
<P>These constants are dimensionless scaling factors. </P>
<DL compact="">
  <DT><CODE>GSL_CONST_NUM_YOTTA</CODE></DT>
  <DD>
  <P><EM>10^24</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_ZETTA</CODE></DT>
  <DD>
  <P><EM>10^21</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_EXA</CODE></DT>
  <DD>
  <P><EM>10^18</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_PETA</CODE></DT>
  <DD>
  <P><EM>10^15</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_TERA</CODE></DT>
  <DD>
  <P><EM>10^12</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_GIGA</CODE></DT>
  <DD>
  <P><EM>10^9</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_MEGA</CODE></DT>
  <DD>
  <P><EM>10^6</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_KILO</CODE></DT>
  <DD>
  <P><EM>10^3</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_MILLI</CODE></DT>
  <DD>
  <P><EM>10^-3</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_MICRO</CODE></DT>
  <DD>
  <P><EM>10^-6</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_NANO</CODE></DT>
  <DD>
  <P><EM>10^-9</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_PICO</CODE></DT>
  <DD>
  <P><EM>10^-12</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_FEMTO</CODE></DT>
  <DD>
  <P><EM>10^-15</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_ATTO</CODE></DT>
  <DD>
  <P><EM>10^-18</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_ZEPTO</CODE></DT>
  <DD>
  <P><EM>10^-21</EM> </P></DD>
  <DT><CODE>GSL_CONST_NUM_YOCTO</CODE></DT>
  <DD>
  <P><EM>10^-24</EM> </P></DD></DL>
<HR>
<A name="Physical-Constant-Examples"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Physical-Constant-References-and-Further-Reading" 
rel="next">Physical Constant References and Further Reading</A>, Previous: <A 
accessKey="p" href="#Prefixes" 
rel="previous">Prefixes</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-32"></A>
<H3 class="section">44.17 Examples</H3>
<P>The following program demonstrates the use of the physical constants in a 
 calculation. In this case, the goal is to calculate the range of light-travel 
 times from Earth to Mars. </P>
<P>The required data is the average distance of each planet from the Sun in 
 astronomical units (the eccentricities and inclinations of the orbits will be 
 neglected for the purposes of this calculation). The average radius of the 
orbit  of Mars is 1.52 astronomical units, and for the orbit of Earth it is 1 
 astronomical unit (by definition). These values are combined with the MKSA 
 values of the constants for the speed of light and the length of an 
astronomical  unit to produce a result for the shortest and longest light-travel 
times in  seconds. The figures are converted into minutes before being 
displayed. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_const_mksa.h&gt;

int
main (void)
{
  double c  = GSL_CONST_MKSA_SPEED_OF_LIGHT;
  double au = GSL_CONST_MKSA_ASTRONOMICAL_UNIT;
  double minutes = GSL_CONST_MKSA_MINUTE;

  /* distance stored in meters */
  double r_earth = 1.00 * au;  
  double r_mars  = 1.52 * au;

  double t_min, t_max;

  t_min = (r_mars - r_earth) / c;
  t_max = (r_mars + r_earth) / c;

  printf ("light travel time from Earth to Mars:\n");
  printf ("minimum = %.1f minutes\n", t_min / minutes);
  printf ("maximum = %.1f minutes\n", t_max / minutes);

  return 0;
}
</PRE></DIV>
<P>Here is the output from the program, </P>
<DIV class="example"><PRE class="verbatim">light travel time from Earth to Mars:
minimum = 4.3 minutes
maximum = 21.0 minutes
</PRE></DIV>
<HR>
<A name="Physical-Constant-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Physical-Constant-Examples" 
rel="previous">Physical Constant Examples</A>, Up: <A accessKey="u" href="#Physical-Constants" 
rel="up">Physical Constants</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-35"></A>
<H3 class="section">44.18 References and Further Reading</H3>
<P>The authoritative sources for physical constants are the 2006 CODATA 
 recommended values, published in the article below. Further information on the 
 values of physical constants is also available from the NIST website. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->P.J. Mohr, B.N. Taylor, D.B. Newell, “CODATA Recommended   
  Values of the Fundamental Physical Constants: 2006”, Reviews of Modern   
  Physics, 80(2), pp. 633–730 (2008). </LI>
  <LI><!-- /@w --><A 
  href="http://www.physics.nist.gov/cuu/Constants/index.html">http://www.physics.nist.gov/cuu/Constants/index.html</A></LI>
  <LI><!-- /@w --><A 
  href="http://physics.nist.gov/Pubs/SP811/appenB9.html">http://physics.nist.gov/Pubs/SP811/appenB9.html</A></LI></UL>
<HR>
<A name="IEEE-floating_002dpoint-arithmetic"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Debugging-Numerical-Programs" 
rel="next">Debugging Numerical Programs</A>, Previous: <A accessKey="p" href="#Physical-Constants" 
rel="previous">Physical Constants</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="IEEE-floating_002dpoint-arithmetic-1"></A>
<H2 class="chapter">45 IEEE floating-point arithmetic</H2><A name="index-IEEE-floating-point"></A>
<P>This chapter describes functions for examining the representation of floating 
 point numbers and controlling the floating point environment of your program. 
 The functions described in this chapter are declared in the header file 
<SAMP>gsl_ieee_utils.h</SAMP>. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#IEEE-References-and-Further-Reading">IEEE 
            References and Further Reading</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Representation-of-floating-point-numbers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Setting-up-your-IEEE-environment" 
rel="next">Setting up your IEEE environment</A>, Up: <A accessKey="u" href="#IEEE-floating_002dpoint-arithmetic" 
rel="up">IEEE floating-point arithmetic</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Representation-of-floating-point-numbers-1"></A>
<H3 class="section">45.1 Representation of floating point numbers</H3><A name="index-IEEE-format-for-floating-point-numbers"></A><A 
name="index-bias_002c-IEEE-format"></A><A 
name="index-exponent_002c-IEEE-format"></A><A name="index-sign-bit_002c-IEEE-format"></A><A 
name="index-mantissa_002c-IEEE-format"></A>
<P>The IEEE Standard for Binary Floating-Point Arithmetic defines binary formats 
 for single and double precision numbers. Each number is composed of three 
parts:  a <EM>sign bit</EM> (<EM>s</EM>), an <EM>exponent</EM> (<EM>E</EM>) and 
a <EM>fraction</EM> (<EM>f</EM>). The numerical value of the combination 
<EM>(s,E,f)</EM> is given by the following formula, </P>
<DIV class="example"><PRE class="example">(-1)^s (1.fffff...) 2^E
</PRE></DIV><A name="index-normalized-form_002c-IEEE-format"></A><A 
name="index-denormalized-form_002c-IEEE-format"></A>
<P>The sign bit is either zero or one. The exponent ranges from a minimum value 
<EM>E_min</EM> to a maximum value <EM>E_max</EM> depending on the precision. The 
 exponent is converted to an unsigned number <EM>e</EM>, known as the <EM>biased 
 exponent</EM>, for storage by adding a <EM>bias</EM> parameter, <EM>e = E + 
 bias</EM>. The sequence <EM>fffff...</EM> represents the digits of the binary 
 fraction <EM>f</EM>. The binary digits are stored in <EM>normalized form</EM>, 
 by adjusting the exponent to give a leading digit of <EM>1</EM>. Since the 
 leading digit is always 1 for normalized numbers it is assumed implicitly and 
 does not have to be stored. Numbers smaller than <EM>2^(E_min)</EM> are be 
 stored in <EM>denormalized form</EM> with a leading zero, </P>
<DIV class="example"><PRE class="example">(-1)^s (0.fffff...) 2^(E_min)
</PRE></DIV><A name="index-zero_002c-IEEE-format"></A><A 
name="index-infinity_002c-IEEE-format"></A>
<P>This allows gradual underflow down to <EM>2^(E_min - p)</EM> for <EM>p</EM> 
 bits of precision. A zero is encoded with the special exponent of <EM>2^(E_min 
-  1)</EM> and infinities with the exponent of <EM>2^(E_max + 1)</EM>. </P><A 
name="index-single-precision_002c-IEEE-format"></A>
<P>The format for single precision numbers uses 32 bits divided in the following 
 way, </P>
<DIV class="smallexample"><PRE class="smallexample">seeeeeeeefffffffffffffffffffffff
    
s = sign bit, 1 bit
e = exponent, 8 bits  (E_min=-126, E_max=127, bias=127)
f = fraction, 23 bits
</PRE></DIV><A 
name="index-double-precision_002c-IEEE-format"></A>
<P>The format for double precision numbers uses 64 bits divided in the following 
 way, </P>
<DIV class="smallexample"><PRE class="smallexample">seeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffff

s = sign bit, 1 bit
e = exponent, 11 bits  (E_min=-1022, E_max=1023, bias=1023)
f = fraction, 52 bits
</PRE></DIV>
<P>It is often useful to be able to investigate the behavior of a calculation at 
 the bit-level and the library provides functions for printing the IEEE 
 representations in a human-readable form. </P>
<DL>
  <DT><A name="index-gsl_005fieee_005ffprintf_005ffloat"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ieee_fprintf_float</STRONG> <EM>(FILE *   
  <VAR>stream</VAR>, const float * <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fieee_005ffprintf_005fdouble"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ieee_fprintf_double</STRONG> <EM>(FILE *   
  <VAR>stream</VAR>, const double * <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions output a formatted version of the IEEE floating-point   
  number pointed to by <VAR>x</VAR> to the stream <VAR>stream</VAR>. A pointer   
  is used to pass the number indirectly, to avoid any undesired promotion from   
  <CODE>float</CODE> to <CODE>double</CODE>. The output takes one of the   
  following forms, </P>
  <DL compact="">
    <DT><CODE>NaN</CODE></DT>
    <DD>
    <P>the Not-a-Number symbol </P></DD>
    <DT><CODE>Inf, -Inf</CODE></DT>
    <DD>
    <P>positive or negative infinity </P></DD>
    <DT><CODE>1.fffff...*2^E, -1.fffff...*2^E</CODE></DT>
    <DD>
    <P>a normalized floating point number </P></DD>
    <DT><CODE>0.fffff...*2^E, -0.fffff...*2^E</CODE></DT>
    <DD>
    <P>a denormalized floating point number </P></DD>
    <DT><CODE>0, -0</CODE></DT>
    <DD>
    <P>positive or negative zero </P></DD></DL>
  <P>The output can be used directly in GNU Emacs Calc mode by preceding it with 
    <CODE>2#</CODE> to indicate binary. </P></DD></DL>
<DL>
  <DT><A name="index-gsl_005fieee_005fprintf_005ffloat"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ieee_printf_float</STRONG> <EM>(const float *   
  <VAR>x</VAR>)</EM></DT>
  <DT><A name="index-gsl_005fieee_005fprintf_005fdouble"></A>Function:   
  <EM>void</EM> <STRONG>gsl_ieee_printf_double</STRONG> <EM>(const double *   
  <VAR>x</VAR>)</EM></DT>
  <DD>
  <P>These functions output a formatted version of the IEEE floating-point   
  number pointed to by <VAR>x</VAR> to the stream <CODE>stdout</CODE>. 
</P></DD></DL>
<P>The following program demonstrates the use of the functions by printing the 
 single and double precision representations of the fraction <EM>1/3</EM>. For 
 comparison the representation of the value promoted from single to double 
 precision is also printed. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_ieee_utils.h&gt;

int
main (void) 
{
  float f = 1.0/3.0;
  double d = 1.0/3.0;

  double fd = f; /* promote from float to double */
  
  printf (" f="); gsl_ieee_printf_float(&amp;f); 
  printf ("\n");

  printf ("fd="); gsl_ieee_printf_double(&amp;fd); 
  printf ("\n");

  printf (" d="); gsl_ieee_printf_double(&amp;d); 
  printf ("\n");

  return 0;
}
</PRE></DIV>
<P>The binary representation of <EM>1/3</EM> is <EM>0.01010101... </EM>. The 
 output below shows that the IEEE format normalizes this fraction to give a 
 leading digit of 1, </P>
<DIV class="smallexample"><PRE class="smallexample"> f= 1.01010101010101010101011*2^-2
fd= 1.0101010101010101010101100000000000000000000000000000*2^-2
 d= 1.0101010101010101010101010101010101010101010101010101*2^-2
</PRE></DIV>
<P>The output also shows that a single-precision number is promoted to 
 double-precision by adding zeros in the binary representation. </P>
<HR>
<A name="Setting-up-your-IEEE-environment"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#IEEE-References-and-Further-Reading" 
rel="next">IEEE References and Further Reading</A>, Previous: <A accessKey="p" 
href="#Representation-of-floating-point-numbers" 
rel="previous">Representation of floating point numbers</A>, Up: <A accessKey="u" 
href="#IEEE-floating_002dpoint-arithmetic" 
rel="up">IEEE floating-point arithmetic</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Setting-up-your-IEEE-environment-1"></A>
<H3 class="section">45.2 Setting up your IEEE environment</H3><A name="index-IEEE-exceptions"></A><A 
name="index-precision_002c-IEEE-arithmetic"></A><A 
name="index-rounding-mode"></A><A name="index-arithmetic-exceptions"></A><A 
name="index-exceptions_002c-IEEE-arithmetic"></A><A name="index-division-by-zero_002c-IEEE-exceptions"></A><A 
name="index-underflow_002c-IEEE-exceptions"></A><A name="index-overflow_002c-IEEE-exceptions"></A>
<P>The IEEE standard defines several <EM>modes</EM> for controlling the behavior 
 of floating point operations. These modes specify the important properties of 
 computer arithmetic: the direction used for rounding (e.g. whether numbers 
 should be rounded up, down or to the nearest number), the rounding precision 
and  how the program should handle arithmetic exceptions, such as division by 
zero. </P>
<P>Many of these features can now be controlled via standard functions such as 
<CODE>fpsetround</CODE>, which should be used whenever they are available. 
 Unfortunately in the past there has been no universal API for controlling their 
 behavior—each system has had its own low-level way of accessing them. To help 
 you write portable programs GSL allows you to specify modes in a 
 platform-independent way using the environment variable 
<CODE>GSL_IEEE_MODE</CODE>. The library then takes care of all the necessary 
 machine-specific initializations for you when you call the function 
<CODE>gsl_ieee_env_setup</CODE>. </P>
<DL>
  <DT><A name="index-gsl_005fieee_005fenv_005fsetup"></A>Function: 
  <EM>void</EM><STRONG>gsl_ieee_env_setup</STRONG> <EM>()</EM></DT>
  <DD><A name="index-GSL_005fIEEE_005fMODE"></A>
  <P>This function reads the environment variable <CODE>GSL_IEEE_MODE</CODE> and 
    attempts to set up the corresponding specified IEEE modes. The environment   
  variable should be a list of keywords, separated by commas, like this, </P>
  <DIV class="display"><PRE class="display"><CODE>GSL_IEEE_MODE</CODE> = "<VAR>keyword</VAR>,<VAR>keyword</VAR>,..."
</PRE></DIV>
  <P>where <VAR>keyword</VAR> is one of the following mode-names, </P>
  <UL class="no-bullet">
    <LI><!-- /@w --><CODE>single-precision</CODE> </LI>
    <LI><!-- /@w --><CODE>double-precision</CODE> </LI>
    <LI><!-- /@w --><CODE>extended-precision</CODE> </LI>
    <LI><!-- /@w --><CODE>round-to-nearest</CODE> </LI>
    <LI><!-- /@w --><CODE>round-down</CODE> </LI>
    <LI><!-- /@w --><CODE>round-up</CODE> </LI>
    <LI><!-- /@w --><CODE>round-to-zero</CODE> </LI>
    <LI><!-- /@w --><CODE>mask-all</CODE> </LI>
    <LI><!-- /@w --><CODE>mask-invalid</CODE> </LI>
    <LI><!-- /@w --><CODE>mask-denormalized</CODE> </LI>
    <LI><!-- /@w --><CODE>mask-division-by-zero</CODE> </LI>
    <LI><!-- /@w --><CODE>mask-overflow</CODE> </LI>
    <LI><!-- /@w --><CODE>mask-underflow</CODE> </LI>
    <LI><!-- /@w --><CODE>trap-inexact</CODE> </LI>
    <LI><!-- /@w --><CODE>trap-common</CODE> </LI></UL>
  <P>If <CODE>GSL_IEEE_MODE</CODE> is empty or undefined then the function   
  returns immediately and no attempt is made to change the system’s IEEE mode.   
  When the modes from <CODE>GSL_IEEE_MODE</CODE> are turned on the function   
  prints a short message showing the new settings to remind you that the results 
    of the program will be affected. </P>
  <P>If the requested modes are not supported by the platform being used then   
  the function calls the error handler and returns an error code of   
  <CODE>GSL_EUNSUP</CODE>. </P>
  <P>When options are specified using this method, the resulting mode is based   
  on a default setting of the highest available precision (double precision or   
  extended precision, depending on the platform) in round-to-nearest mode, with  
   all exceptions enabled apart from the <SMALL>INEXACT</SMALL> exception. The   
  <SMALL>INEXACT</SMALL> exception is generated whenever rounding occurs, so it  
   must generally be disabled in typical scientific calculations. All other   
  floating-point exceptions are enabled by default, including underflows and the 
    use of denormalized numbers, for safety. They can be disabled with the   
  individual <CODE>mask-</CODE> settings or together using   
  <CODE>mask-all</CODE>. </P>
  <P>The following adjusted combination of modes is convenient for many   
  purposes, </P>
  <DIV class="example"><PRE class="example">GSL_IEEE_MODE="double-precision,"\
                "mask-underflow,"\
                  "mask-denormalized"
</PRE></DIV>
  <P>This choice ignores any errors relating to small numbers (either   
  denormalized, or underflowing to zero) but traps overflows, division by zero   
  and invalid operations. </P>
  <P>Note that on the x86 series of processors this function sets both the   
  original x87 mode and the newer <SMALL>MXCSR</SMALL> mode, which controls SSE  
   floating-point operations. The SSE floating-point units do not have a   
  precision-control bit, and always work in double-precision. The   
  single-precision and extended-precision keywords have no effect in this case.  
   </P></DD></DL>
<P>To demonstrate the effects of different rounding modes consider the following 
 program which computes <EM>e</EM>, the base of natural logarithms, by summing a 
 rapidly-decreasing series, </P>
<DIV class="example"><PRE class="example">e = 1 + 1/2! + 1/3! + 1/4! + ... 
  = 2.71828182846...
</PRE></DIV>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_math.h&gt;
#include &lt;gsl/gsl_ieee_utils.h&gt;

int
main (void)
{
  double x = 1, oldsum = 0, sum = 0; 
  int i = 0;

  gsl_ieee_env_setup (); /* read GSL_IEEE_MODE */

  do 
    {
      i++;
      
      oldsum = sum;
      sum += x;
      x = x / i;
      
      printf ("i=%2d sum=%.18f error=%g\n",
              i, sum, sum - M_E);

      if (i &gt; 30)
         break;
    }  
  while (sum != oldsum);

  return 0;
}
</PRE></DIV>
<P>Here are the results of running the program in <CODE>round-to-nearest</CODE> 
 mode. This is the IEEE default so it isn’t really necessary to specify it here, 
</P>
<DIV class="example"><PRE class="example">$ GSL_IEEE_MODE="round-to-nearest" ./a.out 
i= 1 sum=1.000000000000000000 error=-1.71828
i= 2 sum=2.000000000000000000 error=-0.718282
....
i=18 sum=2.718281828459045535 error=4.44089e-16
i=19 sum=2.718281828459045535 error=4.44089e-16
</PRE></DIV>
<P>After nineteen terms the sum converges to within <EM>4 \times 10^-16</EM> of 
 the correct value. If we now change the rounding mode to 
<CODE>round-down</CODE>  the final result is less accurate, </P>
<DIV class="example"><PRE class="example">$ GSL_IEEE_MODE="round-down" ./a.out 
i= 1 sum=1.000000000000000000 error=-1.71828
....
i=19 sum=2.718281828459041094 error=-3.9968e-15
</PRE></DIV>
<P>The result is about <EM>4 \times 10^-15</EM> below the correct value, an 
 order of magnitude worse than the result obtained in the 
<CODE>round-to-nearest</CODE> mode. </P>
<P>If we change to rounding mode to <CODE>round-up</CODE> then the final result 
 is higher than the correct value (when we add each term to the sum the final 
 result is always rounded up, which increases the sum by at least one tick until 
 the added term underflows to zero). To avoid this problem we would need to use 
a  safer converge criterion, such as <CODE>while (fabs(sum - oldsum) &gt; 
 epsilon)</CODE>, with a suitably chosen value of epsilon. </P>
<P>Finally we can see the effect of computing the sum using single-precision 
 rounding, in the default <CODE>round-to-nearest</CODE> mode. In this case the 
 program thinks it is still using double precision numbers but the CPU rounds 
the  result of each floating point operation to single-precision accuracy. This 
 simulates the effect of writing the program using single-precision 
<CODE>float</CODE> variables instead of <CODE>double</CODE> variables. The 
 iteration stops after about half the number of iterations and the final result 
 is much less accurate, </P>
<DIV class="example"><PRE class="example">$ GSL_IEEE_MODE="single-precision" ./a.out 
....
i=12 sum=2.718281984329223633 error=1.5587e-07
</PRE></DIV>
<P>with an error of <EM>O(10^-7)</EM>, which corresponds to single precision 
 accuracy (about 1 part in <EM>10^7</EM>). Continuing the iterations further 
does  not decrease the error because all the subsequent results are rounded to 
the  same value. </P>
<HR>
<A name="IEEE-References-and-Further-Reading"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Setting-up-your-IEEE-environment" 
rel="previous">Setting up your IEEE environment</A>, Up: <A accessKey="u" href="#IEEE-floating_002dpoint-arithmetic" 
rel="up">IEEE floating-point arithmetic</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-36"></A>
<H3 class="section">45.3 References and Further Reading</H3>
<P>The reference for the IEEE standard is, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->ANSI/IEEE Std 754-1985, IEEE Standard for Binary   
  Floating-Point Arithmetic. </LI></UL>
<P>A more pedagogical introduction to the standard can be found in the following 
 paper, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->David Goldberg: What Every Computer Scientist Should Know   
  About Floating-Point Arithmetic. <CITE>ACM Computing Surveys</CITE>, Vol. 23,  
   No. 1 (March 1991), pages 5–48.   
  <P>Corrigendum: <CITE>ACM Computing Surveys</CITE>, Vol. 23, No. 3 (September  
   1991), page 413. and see also the sections by B. A. Wichmann and Charles B.   
  Dunham in Surveyor’s Forum: “What Every Computer Scientist Should Know About   
  Floating-Point Arithmetic”. <CITE>ACM Computing Surveys</CITE>, Vol. 24, No. 3 
    (September 1992), page 319. </P></LI></UL>
<P>A detailed textbook on IEEE arithmetic and its practical use is available 
 from SIAM Press, </P>
<UL class="no-bullet">
  <LI><!-- /@w -->Michael L. Overton, <CITE>Numerical Computing with IEEE   
  Floating Point Arithmetic</CITE>, SIAM Press, ISBN 0898715717. </LI></UL>
<HR>
<A name="Debugging-Numerical-Programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Contributors-to-GSL" 
rel="next">Contributors to GSL</A>, Previous: <A accessKey="p" href="#IEEE-floating_002dpoint-arithmetic" 
rel="previous">IEEE floating-point arithmetic</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Debugging-Numerical-Programs-1"></A>
<H2 class="appendix">Appendix A Debugging Numerical Programs</H2>
<P>This chapter describes some tips and tricks for debugging numerical programs 
 which use GSL. </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Using-gdb">Using 
            gdb</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Examining-floating-point-registers">Examining 
            floating point registers</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Handling-floating-point-exceptions">Handling 
            floating point exceptions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#GCC-warning-options-for-numerical-programs">GCC 
            warning options for numerical programs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="5" href="#Debugging-References">Debugging 
            References</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Using-gdb"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Examining-floating-point-registers" 
rel="next">Examining floating point registers</A>, Up: <A accessKey="u" href="#Debugging-Numerical-Programs" 
rel="up">Debugging Numerical Programs</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Using-gdb-1"></A>
<H3 class="section">A.1 Using gdb</H3><A name="index-gdb"></A><A name="index-debugging-numerical-programs"></A><A 
name="index-breakpoints"></A>
<P>Any errors reported by the library are passed to the function 
<CODE>gsl_error</CODE>. By running your programs under gdb and setting a 
 breakpoint in this function you can automatically catch any library errors. You 
 can add a breakpoint for every session by putting </P>
<DIV class="example"><PRE class="example">break gsl_error
</PRE></DIV>
<P>into your <SAMP>.gdbinit</SAMP> file in the directory where your program is 
 started. </P>
<P>If the breakpoint catches an error then you can use a backtrace 
 (<CODE>bt</CODE>) to see the call-tree, and the arguments which possibly caused 
 the error. By moving up into the calling function you can investigate the 
values  of variables at that point. Here is an example from the program 
<CODE>fft/test_trap</CODE>, which contains the following line, </P>
<DIV class="smallexample"><PRE class="smallexample">status = gsl_fft_complex_wavetable_alloc (0, &amp;complex_wavetable);
</PRE></DIV>
<P>The function <CODE>gsl_fft_complex_wavetable_alloc</CODE> takes the length of 
 an FFT as its first argument. When this line is executed an error will be 
 generated because the length of an FFT is not allowed to be zero. </P>
<P>To debug this problem we start <CODE>gdb</CODE>, using the file 
<SAMP>.gdbinit</SAMP> to define a breakpoint in <CODE>gsl_error</CODE>, </P>
<DIV class="smallexample"><PRE class="smallexample">$ gdb test_trap

GDB is free software and you are welcome to distribute copies
of it under certain conditions; type "show copying" to see
the conditions.  There is absolutely no warranty for GDB;
type "show warranty" for details.  GDB 4.16 (i586-debian-linux), 
Copyright 1996 Free Software Foundation, Inc.

Breakpoint 1 at 0x8050b1e: file error.c, line 14.
</PRE></DIV>
<P>When we run the program this breakpoint catches the error and shows the 
 reason for it. </P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) run
Starting program: test_trap 

Breakpoint 1, gsl_error (reason=0x8052b0d 
    "length n must be positive integer", 
    file=0x8052b04 "c_init.c", line=108, gsl_errno=1) 
    at error.c:14
14        if (gsl_error_handler) 
</PRE></DIV>
<P>The first argument of <CODE>gsl_error</CODE> is always a string describing 
 the error. Now we can look at the backtrace to see what caused the problem, 
</P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) bt
#0  gsl_error (reason=0x8052b0d 
    "length n must be positive integer", 
    file=0x8052b04 "c_init.c", line=108, gsl_errno=1)
    at error.c:14
#1  0x8049376 in gsl_fft_complex_wavetable_alloc (n=0,
    wavetable=0xbffff778) at c_init.c:108
#2  0x8048a00 in main (argc=1, argv=0xbffff9bc) 
    at test_trap.c:94
#3  0x80488be in ___crt_dummy__ ()
</PRE></DIV>
<P>We can see that the error was generated in the function 
<CODE>gsl_fft_complex_wavetable_alloc</CODE> when it was called with an argument 
 of <VAR>n=0</VAR>. The original call came from line 94 in the file 
<SAMP>test_trap.c</SAMP>. </P>
<P>By moving up to the level of the original call we can find the line that 
 caused the error, </P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) up
#1  0x8049376 in gsl_fft_complex_wavetable_alloc (n=0,
    wavetable=0xbffff778) at c_init.c:108
108   GSL_ERROR ("length n must be positive integer", GSL_EDOM);
(gdb) up
#2  0x8048a00 in main (argc=1, argv=0xbffff9bc) 
    at test_trap.c:94
94    status = gsl_fft_complex_wavetable_alloc (0,
        &amp;complex_wavetable);
</PRE></DIV>
<P>Thus we have found the line that caused the problem. From this point we could 
 also print out the values of other variables such as 
<CODE>complex_wavetable</CODE>. </P>
<HR>
<A name="Examining-floating-point-registers"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Handling-floating-point-exceptions" 
rel="next">Handling floating point exceptions</A>, Previous: <A accessKey="p" 
href="#Using-gdb" rel="previous">Using 
gdb</A>, Up: <A accessKey="u" href="#Debugging-Numerical-Programs" 
rel="up">Debugging Numerical Programs</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Examining-floating-point-registers-1"></A>
<H3 class="section">A.2 Examining floating point registers</H3><A name="index-floating-point-registers"></A>
<P>The contents of floating point registers can be examined using the command 
<CODE>info float</CODE> (on supported platforms). </P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) info float
     st0: 0xc4018b895aa17a945000  Valid Normal -7.838871e+308
     st1: 0x3ff9ea3f50e4d7275000  Valid Normal 0.0285946
     st2: 0x3fe790c64ce27dad4800  Valid Normal 6.7415931e-08
     st3: 0x3ffaa3ef0df6607d7800  Spec  Normal 0.0400229
     st4: 0x3c028000000000000000  Valid Normal 4.4501477e-308
     st5: 0x3ffef5412c22219d9000  Zero  Normal 0.9580257
     st6: 0x3fff8000000000000000  Valid Normal 1
     st7: 0xc4028b65a1f6d243c800  Valid Normal -1.566206e+309
   fctrl: 0x0272 53 bit; NEAR; mask DENOR UNDER LOS;
   fstat: 0xb9ba flags 0001; top 7; excep DENOR OVERF UNDER LOS
    ftag: 0x3fff
     fip: 0x08048b5c
     fcs: 0x051a0023
  fopoff: 0x08086820
  fopsel: 0x002b
</PRE></DIV>
<P>Individual registers can be examined using the variables <VAR>$reg</VAR>, 
 where <VAR>reg</VAR> is the register name. </P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) p $st1 
$1 = 0.02859464454261210347719
</PRE></DIV>
<HR>
<A name="Handling-floating-point-exceptions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#GCC-warning-options-for-numerical-programs" 
rel="next">GCC warning options for numerical programs</A>, Previous: <A 
accessKey="p" href="#Examining-floating-point-registers" 
rel="previous">Examining floating point registers</A>, Up: <A accessKey="u" 
href="#Debugging-Numerical-Programs" 
rel="up">Debugging Numerical Programs</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A 
name="Handling-floating-point-exceptions-1"></A>
<H3 class="section">A.3 Handling floating point exceptions</H3><A name="index-exceptions_002c-floating-point"></A><A 
name="index-floating-point-exceptions"></A>
<P>It is possible to stop the program whenever a <CODE>SIGFPE</CODE> floating 
 point exception occurs. This can be useful for finding the cause of an 
 unexpected infinity or <CODE>NaN</CODE>. The current handler settings can be 
 shown with the command <CODE>info signal SIGFPE</CODE>. </P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) info signal SIGFPE
Signal  Stop  Print  Pass to program Description
SIGFPE  Yes   Yes    Yes             Arithmetic exception
</PRE></DIV>
<P>Unless the program uses a signal handler the default setting should be 
 changed so that SIGFPE is not passed to the program, as this would cause it to 
 exit. The command <CODE>handle SIGFPE stop nopass</CODE> prevents this. </P>
<DIV class="smallexample"><PRE class="smallexample">(gdb) handle SIGFPE stop nopass
Signal  Stop  Print  Pass to program Description
SIGFPE  Yes   Yes    No              Arithmetic exception
</PRE></DIV>
<P>Depending on the platform it may be necessary to instruct the kernel to 
 generate signals for floating point exceptions. For programs using GSL this can 
 be achieved using the <CODE>GSL_IEEE_MODE</CODE> environment variable in 
 conjunction with the function <CODE>gsl_ieee_env_setup</CODE> as described in 
 see <A href="#IEEE-floating_002dpoint-arithmetic">IEEE 
 floating-point arithmetic</A>. </P>
<DIV class="example"><PRE class="example">(gdb) set env GSL_IEEE_MODE=double-precision
</PRE></DIV>
<HR>
<A name="GCC-warning-options-for-numerical-programs"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Debugging-References" 
rel="next">Debugging References</A>, Previous: <A accessKey="p" href="#Handling-floating-point-exceptions" 
rel="previous">Handling floating point exceptions</A>, Up: <A accessKey="u" 
href="#Debugging-Numerical-Programs" 
rel="up">Debugging Numerical Programs</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GCC-warning-options-for-numerical-programs-1"></A>
<H3 class="section">A.4 GCC warning options for numerical programs</H3><A name="index-warning-options"></A><A 
name="index-gcc-warning-options"></A>
<P>Writing reliable numerical programs in C requires great care. The following 
 GCC warning options are recommended when compiling numerical programs: </P>
<DIV class="example"><PRE class="example">gcc -ansi -pedantic -Werror -Wall -W 
  -Wmissing-prototypes -Wstrict-prototypes 
  -Wconversion -Wshadow -Wpointer-arith 
  -Wcast-qual -Wcast-align 
  -Wwrite-strings -Wnested-externs 
  -fshort-enums -fno-common -Dinline= -g -O2
</PRE></DIV>
<P>For details of each option consult the manual <CITE>Using and Porting 
 GCC</CITE>. The following table gives a brief explanation of what types of 
 errors these options catch. </P>
<DL compact="">
  <DT><CODE>-ansi -pedantic</CODE></DT>
  <DD>
  <P>Use ANSI C, and reject any non-ANSI extensions. These flags help in writing 
    portable programs that will compile on other systems. </P></DD>
  <DT><CODE>-Werror</CODE></DT>
  <DD>
  <P>Consider warnings to be errors, so that compilation stops. This prevents   
  warnings from scrolling off the top of the screen and being lost. You won’t be 
    able to compile the program until it is completely warning-free. </P></DD>
  <DT><CODE>-Wall</CODE></DT>
  <DD>
  <P>This turns on a set of warnings for common programming problems. You need   
  <CODE>-Wall</CODE>, but it is not enough on its own. </P></DD>
  <DT><CODE>-O2</CODE></DT>
  <DD>
  <P>Turn on optimization. The warnings for uninitialized variables in   
  <CODE>-Wall</CODE> rely on the optimizer to analyze the code. If there is no   
  optimization then these warnings aren’t generated. </P></DD>
  <DT><CODE>-W</CODE></DT>
  <DD>
  <P>This turns on some extra warnings not included in <CODE>-Wall</CODE>, such  
   as missing return values and comparisons between signed and unsigned 
  integers.   </P></DD>
  <DT><CODE>-Wmissing-prototypes -Wstrict-prototypes</CODE></DT>
  <DD>
  <P>Warn if there are any missing or inconsistent prototypes. Without   
  prototypes it is harder to detect problems with incorrect arguments. </P></DD>
  <DT><CODE>-Wconversion</CODE></DT>
  <DD>
  <P>The main use of this option is to warn about conversions from signed to   
  unsigned integers. For example, <CODE>unsigned int x = -1</CODE>. If you need  
   to perform such a conversion you can use an explicit cast. </P></DD>
  <DT><CODE>-Wshadow</CODE></DT>
  <DD>
  <P>This warns whenever a local variable shadows another local variable. If two 
    variables have the same name then it is a potential source of confusion.   
  </P></DD>
  <DT><CODE>-Wpointer-arith -Wcast-qual -Wcast-align</CODE></DT>
  <DD>
  <P>These options warn if you try to do pointer arithmetic for types which   
  don’t have a size, such as <CODE>void</CODE>, if you remove a   
  <CODE>const</CODE> cast from a pointer, or if you cast a pointer to a type   
  which has a different size, causing an invalid alignment. </P></DD>
  <DT><CODE>-Wwrite-strings</CODE></DT>
  <DD>
  <P>This option gives string constants a <CODE>const</CODE> qualifier so that   
  it will be a compile-time error to attempt to overwrite them. </P></DD>
  <DT><CODE>-fshort-enums</CODE></DT>
  <DD>
  <P>This option makes the type of <CODE>enum</CODE> as short as possible.   
  Normally this makes an <CODE>enum</CODE> different from an <CODE>int</CODE>.   
  Consequently any attempts to assign a pointer-to-int to a pointer-to-enum will 
    generate a cast-alignment warning. </P></DD>
  <DT><CODE>-fno-common</CODE></DT>
  <DD>
  <P>This option prevents global variables being simultaneously defined in   
  different object files (you get an error at link time). Such a variable should 
    be defined in one file and referred to in other files with an   
  <CODE>extern</CODE> declaration. </P></DD>
  <DT><CODE>-Wnested-externs</CODE></DT>
  <DD>
  <P>This warns if an <CODE>extern</CODE> declaration is encountered within a   
  function. </P></DD>
  <DT><CODE>-Dinline=</CODE></DT>
  <DD>
  <P>The <CODE>inline</CODE> keyword is not part of ANSI C. Thus if you want to  
   use <CODE>-ansi</CODE> with a program which uses inline functions you can use 
    this preprocessor definition to remove the <CODE>inline</CODE> keywords.   
  </P></DD>
  <DT><CODE>-g</CODE></DT>
  <DD>
  <P>It always makes sense to put debugging symbols in the executable so that   
  you can debug it using <CODE>gdb</CODE>. The only effect of debugging symbols  
   is to increase the size of the file, and you can use the <CODE>strip</CODE>   
  command to remove them later if necessary. </P></DD></DL>
<HR>
<A name="Debugging-References"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#GCC-warning-options-for-numerical-programs" 
rel="previous">GCC warning options for numerical programs</A>, Up: <A accessKey="u" 
href="#Debugging-Numerical-Programs" 
rel="up">Debugging Numerical Programs</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="References-and-Further-Reading-37"></A>
<H3 class="section">A.5 References and Further Reading</H3>
<P>The following books are essential reading for anyone writing and debugging 
 numerical programs with <SMALL>GCC</SMALL> and <SMALL>GDB</SMALL>. </P>
<UL class="no-bullet">
  <LI><!-- /@w -->R.M. Stallman, <CITE>Using and Porting GNU CC</CITE>, Free   
  Software Foundation, ISBN 1882114388 </LI>
  <LI><!-- /@w -->R.M. Stallman, R.H. Pesch, <CITE>Debugging with GDB: The GNU   
  Source-Level Debugger</CITE>, Free Software Foundation, ISBN 1882114779 
</LI></UL>
<P>For a tutorial introduction to the GNU C Compiler and related programs, see 
</P>
<UL class="no-bullet">
  <LI><!-- /@w -->B.J. Gough, <A href="http://www.network-theory.co.uk/gcc/intro/"><CITE>An 
  Introduction to   GCC</CITE></A>, Network Theory Ltd, ISBN 0954161793 </LI></UL>
<HR>
<A name="Contributors-to-GSL"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Autoconf-Macros" 
rel="next">Autoconf Macros</A>, Previous: <A accessKey="p" href="#Debugging-Numerical-Programs" 
rel="previous">Debugging Numerical Programs</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Contributors-to-GSL-1"></A>
<H2 class="appendix">Appendix B Contributors to GSL</H2>
<P>(See the AUTHORS file in the distribution for up-to-date information.) </P>
<DL compact="">
  <DT><STRONG>Mark Galassi</STRONG></DT>
  <DD>
  <P>Conceived GSL (with James Theiler) and wrote the design document. Wrote the 
    simulated annealing package and the relevant chapter in the manual. 
</P></DD>
  <DT><STRONG>James Theiler</STRONG></DT>
  <DD>
  <P>Conceived GSL (with Mark Galassi). Wrote the random number generators and   
  the relevant chapter in this manual. </P></DD>
  <DT><STRONG>Jim Davies</STRONG></DT>
  <DD>
  <P>Wrote the statistical routines and the relevant chapter in this manual.   
  </P></DD>
  <DT><STRONG>Brian Gough</STRONG></DT>
  <DD>
  <P>FFTs, numerical integration, random number generators and distributions,   
  root finding, minimization and fitting, polynomial solvers, complex numbers,   
  physical constants, permutations, vector and matrix functions, histograms,   
  statistics, ieee-utils, revised <SMALL>CBLAS</SMALL> Level 2 &amp; 3, matrix   
  decompositions, eigensystems, cumulative distribution functions, testing,   
  documentation and releases. </P></DD>
  <DT><STRONG>Reid Priedhorsky</STRONG></DT>
  <DD>
  <P>Wrote and documented the initial version of the root finding routines while 
    at Los Alamos National Laboratory, Mathematical Modeling and Analysis Group. 
    </P></DD>
  <DT><STRONG>Gerard Jungman</STRONG></DT>
  <DD>
  <P>Special Functions, Series acceleration, ODEs, BLAS, Linear Algebra,   
  Eigensystems, Hankel Transforms. </P></DD>
  <DT><STRONG>Mike Booth</STRONG></DT>
  <DD>
  <P>Wrote the Monte Carlo library. </P></DD>
  <DT><STRONG>Jorma Olavi Tähtinen</STRONG></DT>
  <DD>
  <P>Wrote the initial complex arithmetic functions. </P></DD>
  <DT><STRONG>Thomas Walter</STRONG></DT>
  <DD>
  <P>Wrote the initial heapsort routines and Cholesky decomposition. </P></DD>
  <DT><STRONG>Fabrice Rossi</STRONG></DT>
  <DD>
  <P>Multidimensional minimization. </P></DD>
  <DT><STRONG>Carlo Perassi</STRONG></DT>
  <DD>
  <P>Implementation of the random number generators in Knuth’s   
  <CITE>Seminumerical Algorithms</CITE>, 3rd Ed. </P></DD>
  <DT><STRONG>Szymon Jaroszewicz</STRONG></DT>
  <DD>
  <P>Wrote the routines for generating combinations. </P></DD>
  <DT><STRONG>Nicolas Darnis</STRONG></DT>
  <DD>
  <P>Wrote the cyclic functions and the initial functions for canonical   
  permutations. </P></DD>
  <DT><STRONG>Jason H. Stover</STRONG></DT>
  <DD>
  <P>Wrote the major cumulative distribution functions. </P></DD>
  <DT><STRONG>Ivo Alxneit</STRONG></DT>
  <DD>
  <P>Wrote the routines for wavelet transforms. </P></DD>
  <DT><STRONG>Tuomo Keskitalo</STRONG></DT>
  <DD>
  <P>Improved the implementation of the ODE solvers and wrote the ode-initval2   
  routines. </P></DD>
  <DT><STRONG>Lowell Johnson</STRONG></DT>
  <DD>
  <P>Implementation of the Mathieu functions. </P></DD>
  <DT><STRONG>Patrick Alken</STRONG></DT>
  <DD>
  <P>Implementation of nonsymmetric and generalized eigensystems, B-splines,   
  robust linear regression, and sparse matrices. </P></DD>
  <DT><STRONG>Rhys Ulerich</STRONG></DT>
  <DD>
  <P>Wrote the multiset routines. </P></DD>
  <DT><STRONG>Pavel Holoborodko</STRONG></DT>
  <DD>
  <P>Wrote the fixed order Gauss-Legendre quadrature routines. </P></DD>
  <DT><STRONG>Pedro Gonnet</STRONG></DT>
  <DD>
  <P>Wrote the <SMALL>CQUAD</SMALL> integration routines. </P></DD></DL>
<P>Thanks to Nigel Lowry for help in proofreading the manual. </P>
<P>The non-symmetric eigensystems routines contain code based on the LAPACK 
 linear algebra library. LAPACK is distributed under the following license: 
</P><BR>
<BLOCKQUOTE>
  <P>Copyright (c) 1992-2006 The University of Tennessee. All rights reserved.   
  </P>
  <P>Redistribution and use in source and binary forms, with or without   
  modification, are permitted provided that the following conditions are met:   
  </P>
  <P>• Redistributions of source code must retain the above copyright notice,   
  this list of conditions and the following disclaimer. </P>
  <P>• Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer listed in this license 
  in   the documentation and/or other materials provided with the distribution. 
  </P>
  <P>• Neither the name of the copyright holders nor the names of its   
  contributors may be used to endorse or promote products derived from this   
  software without specific prior written permission. </P>
  <P>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” 
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE   
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE  
   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL   
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER   
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  
   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
</P></BLOCKQUOTE>
<HR>
<A name="Autoconf-Macros"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#GSL-CBLAS-Library" 
rel="next">GSL CBLAS Library</A>, Previous: <A accessKey="p" href="#Contributors-to-GSL" 
rel="previous">Contributors to GSL</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Autoconf-Macros-1"></A>
<H2 class="appendix">Appendix C Autoconf Macros</H2><A name="index-autoconf_002c-using-with-GSL"></A>
<P>For applications using <CODE>autoconf</CODE> the standard macro 
<CODE>AC_CHECK_LIB</CODE> can be used to link with GSL automatically from a 
<CODE>configure</CODE> script. The library itself depends on the presence of a 
<SMALL>CBLAS</SMALL> and math library as well, so these must also be located 
 before linking with the main <CODE>libgsl</CODE> file. The following commands 
 should be placed in the <SAMP>configure.ac</SAMP> file to perform these tests, 
</P>
<DIV class="example"><PRE class="example">AC_CHECK_LIB([m],[cos])
AC_CHECK_LIB([gslcblas],[cblas_dgemm])
AC_CHECK_LIB([gsl],[gsl_blas_dgemm])
</PRE></DIV>
<P>It is important to check for <CODE>libm</CODE> and <CODE>libgslcblas</CODE> 
 before <CODE>libgsl</CODE>, otherwise the tests will fail. Assuming the 
 libraries are found the output during the configure stage looks like this, </P>
<DIV class="example"><PRE class="example">checking for cos in -lm... yes
checking for cblas_dgemm in -lgslcblas... yes
checking for gsl_blas_dgemm in -lgsl... yes
</PRE></DIV>
<P>If the library is found then the tests will define the macros 
<CODE>HAVE_LIBGSL</CODE>, <CODE>HAVE_LIBGSLCBLAS</CODE>, <CODE>HAVE_LIBM</CODE> 
 and add the options <CODE>-lgsl -lgslcblas -lm</CODE> to the variable 
<CODE>LIBS</CODE>. </P>
<P>The tests above will find any version of the library. They are suitable for 
 general use, where the versions of the functions are not important. An 
 alternative macro is available in the file <SAMP>gsl.m4</SAMP> to test for a 
 specific version of the library. To use this macro simply add the following 
line  to your <SAMP>configure.in</SAMP> file instead of the tests above: </P>
<DIV class="example"><PRE class="example">AX_PATH_GSL(GSL_VERSION,
           [action-if-found],
           [action-if-not-found])
</PRE></DIV>
<P>The argument <CODE>GSL_VERSION</CODE> should be the two or three digit 
<SMALL>MAJOR.MINOR</SMALL> or <SMALL>MAJOR.MINOR.MICRO</SMALL> version number of 
 the release you require. A suitable choice for <CODE>action-if-not-found</CODE> 
 is, </P>
<DIV class="example"><PRE class="example">AC_MSG_ERROR(could not find required version of GSL)
</PRE></DIV>
<P>Then you can add the variables <CODE>GSL_LIBS</CODE> and 
<CODE>GSL_CFLAGS</CODE> to your Makefile.am files to obtain the correct compiler 
 flags. <CODE>GSL_LIBS</CODE> is equal to the output of the <CODE>gsl-config 
 --libs</CODE> command and <CODE>GSL_CFLAGS</CODE> is equal to <CODE>gsl-config 
 --cflags</CODE> command. For example, </P>
<DIV class="example"><PRE class="example">libfoo_la_LDFLAGS = -lfoo $(GSL_LIBS) -lgslcblas
</PRE></DIV>
<P>Note that the macro <CODE>AX_PATH_GSL</CODE> needs to use the C compiler so 
 it should appear in the <SAMP>configure.in</SAMP> file before the macro 
<CODE>AC_LANG_CPLUSPLUS</CODE> for programs that use C++. </P>
<P>To test for <CODE>inline</CODE> the following test should be placed in your 
<SAMP>configure.in</SAMP> file, </P>
<DIV class="example"><PRE class="example">AC_C_INLINE

if test "$ac_cv_c_inline" != no ; then
  AC_DEFINE(HAVE_INLINE,1)
  AC_SUBST(HAVE_INLINE)
fi
</PRE></DIV>
<P>and the macro will then be defined in the compilation flags or by including 
 the file <SAMP>config.h</SAMP> before any library headers. </P>
<P>The following autoconf test will check for <CODE>extern inline</CODE>, </P>
<DIV class="smallexample"><PRE class="smallexample">dnl Check for "extern inline", using a modified version
dnl of the test for AC_C_INLINE from acspecific.mt
dnl
AC_CACHE_CHECK([for extern inline], ac_cv_c_extern_inline,
[ac_cv_c_extern_inline=no
AC_TRY_COMPILE([extern $ac_cv_c_inline double foo(double x);
extern $ac_cv_c_inline double foo(double x) { return x+1.0; };
double foo (double x) { return x + 1.0; };], 
[  foo(1.0)  ],

[ac_cv_c_extern_inline="yes"])
])

if test "$ac_cv_c_extern_inline" != no ; then
  AC_DEFINE(HAVE_INLINE,1)
  AC_SUBST(HAVE_INLINE)
fi
</PRE></DIV>
<P>The substitution of portability functions can be made automatically if you 
 use <CODE>autoconf</CODE>. For example, to test whether the BSD function 
<CODE>hypot</CODE> is available you can include the following line in the 
 configure file <SAMP>configure.in</SAMP> for your application, </P>
<DIV class="example"><PRE class="example">AC_CHECK_FUNCS(hypot)
</PRE></DIV>
<P>and place the following macro definitions in the file 
<SAMP>config.h.in</SAMP>, </P>
<DIV class="example"><PRE class="example">/* Substitute gsl_hypot for missing system hypot */

#ifndef HAVE_HYPOT
#define hypot gsl_hypot
#endif
</PRE></DIV>
<P>The application source files can then use the include command <CODE>#include 
&lt; config.h&gt;</CODE> to substitute <CODE>gsl_hypot</CODE> for each 
occurrence  of <CODE>hypot</CODE> when <CODE>hypot</CODE> is not available. </P>
<HR>
<A name="GSL-CBLAS-Library"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#GNU-General-Public-License" 
rel="next">GNU General Public License</A>, Previous: <A accessKey="p" href="#Autoconf-Macros" 
rel="previous">Autoconf Macros</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GSL-CBLAS-Library-1"></A>
<H2 class="appendix">Appendix D GSL CBLAS Library</H2><A name="index-Low_002dlevel-CBLAS"></A><A 
name="index-CBLAS_002c-Low_002dlevel-interface"></A><A name="index-BLAS_002c-Low_002dlevel-C-interface"></A><A 
name="index-Basic-Linear-Algebra-Subroutines-_0028BLAS_0029-1"></A>
<P>The prototypes for the low-level <SMALL>CBLAS</SMALL> functions are declared 
 in the file <SAMP>gsl_cblas.h</SAMP>. For the definition of the functions 
 consult the documentation available from Netlib (see <A href="#BLAS-References-and-Further-Reading">BLAS 
 References and Further Reading</A>). </P>
<TABLE class="menu" border="0" cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="1" href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="2" href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="3" href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR>
  <TR>
    <TD vAlign="top" align="left">• <A accessKey="4" href="#GSL-CBLAS-Examples">GSL 
            CBLAS Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign="top" align="left"></TD></TR></TBODY></TABLE>
<HR>
<A name="Level-1-CBLAS-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Level-2-CBLAS-Functions" 
rel="next">Level 2 CBLAS Functions</A>, Up: <A accessKey="u" href="#GSL-CBLAS-Library" 
rel="up">GSL CBLAS Library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Level-1-1"></A>
<H3 class="section">D.1 Level 1</H3>
<DL>
  <DT><A name="index-cblas_005fsdsdot"></A>Function: 
  <EM>float</EM><STRONG>cblas_sdsdot</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float   <VAR>alpha</VAR>, const float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const   float * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsdot"></A>Function: 
  <EM>double</EM><STRONG>cblas_dsdot</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const float * <VAR>y</VAR>, 
  const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsdot"></A>Function: 
  <EM>float</EM><STRONG>cblas_sdot</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const float * <VAR>y</VAR>, 
  const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fddot"></A>Function: 
  <EM>double</EM><STRONG>cblas_ddot</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const double * 
  <VAR>y</VAR>, const   int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcdotu_005fsub"></A>Function: 
  <EM>void</EM><STRONG>cblas_cdotu_sub</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>, void * 
<VAR>dotu</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcdotc_005fsub"></A>Function: 
  <EM>void</EM><STRONG>cblas_cdotc_sub</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>, void * 
<VAR>dotc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzdotu_005fsub"></A>Function: 
  <EM>void</EM><STRONG>cblas_zdotu_sub</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>, void * 
<VAR>dotu</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzdotc_005fsub"></A>Function: 
  <EM>void</EM><STRONG>cblas_zdotc_sub</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>, const void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>, void * 
<VAR>dotc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsnrm2"></A>Function: 
  <EM>float</EM><STRONG>cblas_snrm2</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsasum"></A>Function: 
  <EM>float</EM><STRONG>cblas_sasum</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdnrm2"></A>Function: 
  <EM>double</EM><STRONG>cblas_dnrm2</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdasum"></A>Function: 
  <EM>double</EM><STRONG>cblas_dasum</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fscnrm2"></A>Function: 
  <EM>float</EM><STRONG>cblas_scnrm2</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fscasum"></A>Function: 
  <EM>float</EM><STRONG>cblas_scasum</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdznrm2"></A>Function: 
  <EM>double</EM><STRONG>cblas_dznrm2</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdzasum"></A>Function: 
  <EM>double</EM><STRONG>cblas_dzasum</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fisamax"></A>Function: 
  <EM>CBLAS_INDEX</EM><STRONG>cblas_isamax</STRONG> <EM>(const int <VAR>N</VAR>, 
  const float *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fidamax"></A>Function: 
  <EM>CBLAS_INDEX</EM><STRONG>cblas_idamax</STRONG> <EM>(const int <VAR>N</VAR>, 
  const double *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005ficamax"></A>Function: 
  <EM>CBLAS_INDEX</EM><STRONG>cblas_icamax</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fizamax"></A>Function: 
  <EM>CBLAS_INDEX</EM><STRONG>cblas_izamax</STRONG> <EM>(const int <VAR>N</VAR>, 
  const void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsswap"></A>Function: 
  <EM>void</EM><STRONG>cblas_sswap</STRONG> <EM>(const int <VAR>N</VAR>, float * 
    <VAR>x</VAR>, const int <VAR>incx</VAR>, float * <VAR>y</VAR>, const int   
  <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fscopy"></A>Function: 
  <EM>void</EM><STRONG>cblas_scopy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float *   <VAR>x</VAR>, const int <VAR>incx</VAR>, float * <VAR>y</VAR>, const 
  int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsaxpy"></A>Function: 
  <EM>void</EM><STRONG>cblas_saxpy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float   <VAR>alpha</VAR>, const float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, float   * <VAR>y</VAR>, const int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdswap"></A>Function: 
  <EM>void</EM><STRONG>cblas_dswap</STRONG> <EM>(const int <VAR>N</VAR>, double 
  *   <VAR>x</VAR>, const int <VAR>incx</VAR>, double * <VAR>y</VAR>, const int  
   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdcopy"></A>Function: 
  <EM>void</EM><STRONG>cblas_dcopy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double *   <VAR>x</VAR>, const int <VAR>incx</VAR>, double * <VAR>y</VAR>, 
  const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdaxpy"></A>Function: 
  <EM>void</EM><STRONG>cblas_daxpy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double   <VAR>alpha</VAR>, const double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>,   double * <VAR>y</VAR>, const int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcswap"></A>Function: 
  <EM>void</EM><STRONG>cblas_cswap</STRONG> <EM>(const int <VAR>N</VAR>, void * 
  <VAR>x</VAR>,   const int <VAR>incx</VAR>, void * <VAR>y</VAR>, const int   
  <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fccopy"></A>Function: 
  <EM>void</EM><STRONG>cblas_ccopy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>, void * <VAR>y</VAR>, const 
  int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcaxpy"></A>Function: 
  <EM>void</EM><STRONG>cblas_caxpy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, void *   <VAR>y</VAR>, const int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzswap"></A>Function: 
  <EM>void</EM><STRONG>cblas_zswap</STRONG> <EM>(const int <VAR>N</VAR>, void * 
  <VAR>x</VAR>,   const int <VAR>incx</VAR>, void * <VAR>y</VAR>, const int   
  <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzcopy"></A>Function: 
  <EM>void</EM><STRONG>cblas_zcopy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>, void * <VAR>y</VAR>, const 
  int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzaxpy"></A>Function: 
  <EM>void</EM><STRONG>cblas_zaxpy</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, void *   <VAR>y</VAR>, const int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsrotg"></A>Function: 
  <EM>void</EM><STRONG>cblas_srotg</STRONG> <EM>(float * <VAR>a</VAR>, float * 
  <VAR>b</VAR>,   float * <VAR>c</VAR>, float * <VAR>s</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsrotmg"></A>Function: 
  <EM>void</EM><STRONG>cblas_srotmg</STRONG> <EM>(float * <VAR>d1</VAR>, float * 
    <VAR>d2</VAR>, float * <VAR>b1</VAR>, const float <VAR>b2</VAR>, float *   
  <VAR>P</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsrot"></A>Function: 
  <EM>void</EM><STRONG>cblas_srot</STRONG> <EM>(const int <VAR>N</VAR>, float * 
  <VAR>x</VAR>,   const int <VAR>incx</VAR>, float * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>,   const float <VAR>c</VAR>, const float 
  <VAR>s</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsrotm"></A>Function: 
  <EM>void</EM><STRONG>cblas_srotm</STRONG> <EM>(const int <VAR>N</VAR>, float * 
    <VAR>x</VAR>, const int <VAR>incx</VAR>, float * <VAR>y</VAR>, const int   
  <VAR>incy</VAR>, const float * <VAR>P</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdrotg"></A>Function: 
  <EM>void</EM><STRONG>cblas_drotg</STRONG> <EM>(double * <VAR>a</VAR>, double * 
    <VAR>b</VAR>, double * <VAR>c</VAR>, double * <VAR>s</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdrotmg"></A>Function: 
  <EM>void</EM><STRONG>cblas_drotmg</STRONG> <EM>(double * <VAR>d1</VAR>, double 
  *   <VAR>d2</VAR>, double * <VAR>b1</VAR>, const double <VAR>b2</VAR>, double 
  *   <VAR>P</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdrot"></A>Function: 
  <EM>void</EM><STRONG>cblas_drot</STRONG> <EM>(const int <VAR>N</VAR>, double * 
    <VAR>x</VAR>, const int <VAR>incx</VAR>, double * <VAR>y</VAR>, const int   
  <VAR>incy</VAR>, const double <VAR>c</VAR>, const double   
  <VAR>s</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdrotm"></A>Function: 
  <EM>void</EM><STRONG>cblas_drotm</STRONG> <EM>(const int <VAR>N</VAR>, double 
  *   <VAR>x</VAR>, const int <VAR>incx</VAR>, double * <VAR>y</VAR>, const int  
   <VAR>incy</VAR>, const double * <VAR>P</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsscal"></A>Function: 
  <EM>void</EM><STRONG>cblas_sscal</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float   <VAR>alpha</VAR>, float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdscal"></A>Function: 
  <EM>void</EM><STRONG>cblas_dscal</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double   <VAR>alpha</VAR>, double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcscal"></A>Function: 
  <EM>void</EM><STRONG>cblas_cscal</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>alpha</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzscal"></A>Function: 
  <EM>void</EM><STRONG>cblas_zscal</STRONG> <EM>(const int <VAR>N</VAR>, const 
  void *   <VAR>alpha</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcsscal"></A>Function: 
  <EM>void</EM><STRONG>cblas_csscal</STRONG> <EM>(const int <VAR>N</VAR>, const 
  float   <VAR>alpha</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzdscal"></A>Function: 
  <EM>void</EM><STRONG>cblas_zdscal</STRONG> <EM>(const int <VAR>N</VAR>, const 
  double   <VAR>alpha</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<HR>
<A name="Level-2-CBLAS-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Level-3-CBLAS-Functions" 
rel="next">Level 3 CBLAS Functions</A>, Previous: <A accessKey="p" href="#Level-1-CBLAS-Functions" 
rel="previous">Level 1 CBLAS Functions</A>, Up: <A accessKey="u" href="#GSL-CBLAS-Library" 
rel="up">GSL CBLAS Library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Level-2-1"></A>
<H3 class="section">D.2 Level 2</H3>
<DL>
  <DT><A name="index-cblas_005fsgemv"></A>Function: 
  <EM>void</EM><STRONG>cblas_sgemv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const float <VAR>alpha</VAR>, const 
  float * <VAR>A</VAR>,   const int <VAR>lda</VAR>, const float * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>, const float <VAR>beta</VAR>, float * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsgbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_sgbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const int <VAR>KL</VAR>, const int 
  <VAR>KU</VAR>, const   float <VAR>alpha</VAR>, const float * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>,   const float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const float   <VAR>beta</VAR>, float * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstrmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_strmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const float * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, float *   <VAR>x</VAR>, const int 
<VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_stbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const float * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstpmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_stpmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const float * <VAR>Ap</VAR>, float * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstrsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_strsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const float * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, float *   <VAR>x</VAR>, const int 
<VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstbsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_stbsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const float * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstpsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_stpsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const float * <VAR>Ap</VAR>, float * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdgemv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dgemv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const double <VAR>alpha</VAR>, const 
  double * <VAR>A</VAR>,   const int <VAR>lda</VAR>, const double * 
  <VAR>x</VAR>, const int   <VAR>incx</VAR>, const double <VAR>beta</VAR>, 
  double * <VAR>y</VAR>, const   int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdgbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dgbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const int <VAR>KL</VAR>, const int 
  <VAR>KU</VAR>, const   double <VAR>alpha</VAR>, const double * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, const double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const   double <VAR>beta</VAR>, double * <VAR>y</VAR>, const 
  int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtrmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtrmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const double * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, double *   <VAR>x</VAR>, const int 
<VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const double * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtpmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtpmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const double * <VAR>Ap</VAR>, double * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtrsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtrsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const double * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, double *   <VAR>x</VAR>, const int 
<VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtbsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtbsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const double * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtpsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtpsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const double * <VAR>Ap</VAR>, double * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcgemv"></A>Function: 
  <EM>void</EM><STRONG>cblas_cgemv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const void * <VAR>alpha</VAR>, const 
  void * <VAR>A</VAR>,   const int <VAR>lda</VAR>, const void * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>, const void * <VAR>beta</VAR>, void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcgbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_cgbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const int <VAR>KL</VAR>, const int 
  <VAR>KU</VAR>, const void   * <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const void * <VAR>beta</VAR>,   void * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctrmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctrmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>A</VAR>, const int <VAR>lda</VAR>, 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctpmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctpmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>Ap</VAR>, void * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctrsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctrsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>A</VAR>, const int <VAR>lda</VAR>, 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctbsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctbsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctpsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctpsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>Ap</VAR>, void * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzgemv"></A>Function: 
  <EM>void</EM><STRONG>cblas_zgemv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const void * <VAR>alpha</VAR>, const 
  void * <VAR>A</VAR>,   const int <VAR>lda</VAR>, const void * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>, const void * <VAR>beta</VAR>, void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzgbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_zgbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const int 
  <VAR>M</VAR>, const   int <VAR>N</VAR>, const int <VAR>KL</VAR>, const int 
  <VAR>KU</VAR>, const void   * <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const void * <VAR>beta</VAR>,   void * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztrmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztrmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>A</VAR>, const int <VAR>lda</VAR>, 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztpmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztpmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>Ap</VAR>, void * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztrsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztrsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>A</VAR>, const int <VAR>lda</VAR>, 
  void *   <VAR>x</VAR>, const int <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztbsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztbsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const int <VAR>K</VAR>, const void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>, void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztpsv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztpsv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransA</VAR>, const enum CBLAS_DIAG <VAR>Diag</VAR>, 
  const int   <VAR>N</VAR>, const void * <VAR>Ap</VAR>, void * <VAR>x</VAR>, 
  const int   <VAR>incx</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssymv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssymv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const float <VAR>beta</VAR>,   float * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const float <VAR>alpha</VAR>, const 
  float * <VAR>A</VAR>, const   int <VAR>lda</VAR>, const float * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   const float <VAR>beta</VAR>, float * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsspmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_sspmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>Ap</VAR>, 
  const float * <VAR>x</VAR>,   const int <VAR>incx</VAR>, const float 
  <VAR>beta</VAR>, float * <VAR>y</VAR>,   const int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsger"></A>Function: 
  <EM>void</EM><STRONG>cblas_sger</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, const 
  float <VAR>alpha</VAR>,   const float * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const float *   <VAR>y</VAR>, const int <VAR>incy</VAR>, 
  float * <VAR>A</VAR>, const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssyr"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssyr</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, float   * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsspr"></A>Function: 
  <EM>void</EM><STRONG>cblas_sspr</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, float   * <VAR>Ap</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssyr2"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssyr2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, const   float * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, float * <VAR>A</VAR>, const   int 
<VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fsspr2"></A>Function: 
  <EM>void</EM><STRONG>cblas_sspr2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, const   float * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, float *   <VAR>A</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsymv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsymv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const double   <VAR>beta</VAR>, double * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const double <VAR>alpha</VAR>, const 
  double * <VAR>A</VAR>,   const int <VAR>lda</VAR>, const double * 
  <VAR>x</VAR>, const int   <VAR>incx</VAR>, const double <VAR>beta</VAR>, 
  double * <VAR>y</VAR>, const   int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdspmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_dspmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>Ap</VAR>, 
  const double * <VAR>x</VAR>,   const int <VAR>incx</VAR>, const double 
  <VAR>beta</VAR>, double *   <VAR>y</VAR>, const int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdger"></A>Function: 
  <EM>void</EM><STRONG>cblas_dger</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, const 
  double <VAR>alpha</VAR>,   const double * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const double *   <VAR>y</VAR>, const int <VAR>incy</VAR>, 
  double * <VAR>A</VAR>, const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsyr"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsyr</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   double * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdspr"></A>Function: 
  <EM>void</EM><STRONG>cblas_dspr</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   double * <VAR>Ap</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsyr2"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsyr2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   const double * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, double * <VAR>A</VAR>,   const int 
<VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdspr2"></A>Function: 
  <EM>void</EM><STRONG>cblas_dspr2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   const double * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, double *   <VAR>A</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fchemv"></A>Function: 
  <EM>void</EM><STRONG>cblas_chemv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const void * <VAR>beta</VAR>,   void * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fchbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_chbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const void * <VAR>alpha</VAR>, const 
  void * <VAR>A</VAR>, const   int <VAR>lda</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   const void * <VAR>beta</VAR>, void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fchpmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_chpmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>Ap</VAR>, 
  const void * <VAR>x</VAR>, const   int <VAR>incx</VAR>, const void * 
  <VAR>beta</VAR>, void * <VAR>y</VAR>, const   int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcgeru"></A>Function: 
  <EM>void</EM><STRONG>cblas_cgeru</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, const void 
  * <VAR>alpha</VAR>,   const void * <VAR>x</VAR>, const int <VAR>incx</VAR>, 
  const void *   <VAR>y</VAR>, const int <VAR>incy</VAR>, void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcgerc"></A>Function: 
  <EM>void</EM><STRONG>cblas_cgerc</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, const void 
  * <VAR>alpha</VAR>,   const void * <VAR>x</VAR>, const int <VAR>incx</VAR>, 
  const void *   <VAR>y</VAR>, const int <VAR>incy</VAR>, void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcher"></A>Function: 
  <EM>void</EM><STRONG>cblas_cher</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, const 
  int <VAR>incx</VAR>, void *   <VAR>A</VAR>, const int 
<VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fchpr"></A>Function: 
  <EM>void</EM><STRONG>cblas_chpr</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, const 
  int <VAR>incx</VAR>, void *   <VAR>A</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcher2"></A>Function: 
  <EM>void</EM><STRONG>cblas_cher2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, const   void * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, void * <VAR>A</VAR>, const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fchpr2"></A>Function: 
  <EM>void</EM><STRONG>cblas_chpr2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, const   void * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, void * <VAR>Ap</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzhemv"></A>Function: 
  <EM>void</EM><STRONG>cblas_zhemv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>x</VAR>, const int 
  <VAR>incx</VAR>, const void * <VAR>beta</VAR>,   void * <VAR>y</VAR>, const 
  int <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzhbmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_zhbmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const void * <VAR>alpha</VAR>, const 
  void * <VAR>A</VAR>, const   int <VAR>lda</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>,   const void * <VAR>beta</VAR>, void * 
  <VAR>y</VAR>, const int   <VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzhpmv"></A>Function: 
  <EM>void</EM><STRONG>cblas_zhpmv</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>Ap</VAR>, 
  const void * <VAR>x</VAR>, const   int <VAR>incx</VAR>, const void * 
  <VAR>beta</VAR>, void * <VAR>y</VAR>, const   int 
<VAR>incy</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzgeru"></A>Function: 
  <EM>void</EM><STRONG>cblas_zgeru</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, const void 
  * <VAR>alpha</VAR>,   const void * <VAR>x</VAR>, const int <VAR>incx</VAR>, 
  const void *   <VAR>y</VAR>, const int <VAR>incy</VAR>, void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzgerc"></A>Function: 
  <EM>void</EM><STRONG>cblas_zgerc</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, const void 
  * <VAR>alpha</VAR>,   const void * <VAR>x</VAR>, const int <VAR>incx</VAR>, 
  const void *   <VAR>y</VAR>, const int <VAR>incy</VAR>, void * <VAR>A</VAR>, 
  const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzher"></A>Function: 
  <EM>void</EM><STRONG>cblas_zher</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, void *   <VAR>A</VAR>, const int 
  <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzhpr"></A>Function: 
  <EM>void</EM><STRONG>cblas_zhpr</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, void *   <VAR>A</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzher2"></A>Function: 
  <EM>void</EM><STRONG>cblas_zher2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, const   void * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, void * <VAR>A</VAR>, const int   <VAR>lda</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzhpr2"></A>Function: 
  <EM>void</EM><STRONG>cblas_zhpr2</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>x</VAR>, 
  const int <VAR>incx</VAR>, const   void * <VAR>y</VAR>, const int 
  <VAR>incy</VAR>, void * <VAR>Ap</VAR>)</EM></DT></DL>
<HR>
<A name="Level-3-CBLAS-Functions"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#GSL-CBLAS-Examples" 
rel="next">GSL CBLAS Examples</A>, Previous: <A accessKey="p" href="#Level-2-CBLAS-Functions" 
rel="previous">Level 2 CBLAS Functions</A>, Up: <A accessKey="u" href="#GSL-CBLAS-Library" 
rel="up">GSL CBLAS Library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Level-3-1"></A>
<H3 class="section">D.3 Level 3</H3>
<DL>
  <DT><A name="index-cblas_005fsgemm"></A>Function: 
  <EM>void</EM><STRONG>cblas_sgemm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransB</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const float <VAR>alpha</VAR>, const 
  float * <VAR>A</VAR>, const   int <VAR>lda</VAR>, const float * <VAR>B</VAR>, 
  const int <VAR>ldb</VAR>,   const float <VAR>beta</VAR>, float * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssymm"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssymm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, 
  const float <VAR>alpha</VAR>,   const float * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, const float *   <VAR>B</VAR>, const int <VAR>ldb</VAR>, const 
  float <VAR>beta</VAR>, float *   <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssyrk"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssyrk</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   float <VAR>beta</VAR>, float * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fssyr2k"></A>Function: 
  <EM>void</EM><STRONG>cblas_ssyr2k</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   float * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>, const float <VAR>beta</VAR>,   float * <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstrmm"></A>Function: 
  <EM>void</EM><STRONG>cblas_strmm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, float   * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fstrsm"></A>Function: 
  <EM>void</EM><STRONG>cblas_strsm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const float   <VAR>alpha</VAR>, const float * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, float   * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdgemm"></A>Function: 
  <EM>void</EM><STRONG>cblas_dgemm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransB</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const double <VAR>alpha</VAR>, const 
  double * <VAR>A</VAR>,   const int <VAR>lda</VAR>, const double * 
  <VAR>B</VAR>, const int   <VAR>ldb</VAR>, const double <VAR>beta</VAR>, double 
  * <VAR>C</VAR>, const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsymm"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsymm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, 
  const double <VAR>alpha</VAR>,   const double * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, const double *   <VAR>B</VAR>, const int <VAR>ldb</VAR>, const 
  double <VAR>beta</VAR>, double *   <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsyrk"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsyrk</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   double <VAR>beta</VAR>, double * 
  <VAR>C</VAR>, const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdsyr2k"></A>Function: 
  <EM>void</EM><STRONG>cblas_dsyr2k</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   double * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>, const double <VAR>beta</VAR>,   double * <VAR>C</VAR>, const 
  int <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtrmm"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtrmm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>,   double * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fdtrsm"></A>Function: 
  <EM>void</EM><STRONG>cblas_dtrsm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const double   <VAR>alpha</VAR>, const double * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>,   double * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcgemm"></A>Function: 
  <EM>void</EM><STRONG>cblas_cgemm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransB</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const void * <VAR>alpha</VAR>, const 
  void * <VAR>A</VAR>, const   int <VAR>lda</VAR>, const void * <VAR>B</VAR>, 
  const int <VAR>ldb</VAR>, const   void * <VAR>beta</VAR>, void * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcsymm"></A>Function: 
  <EM>void</EM><STRONG>cblas_csymm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, 
  const void * <VAR>alpha</VAR>,   const void * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, const void *   <VAR>B</VAR>, const int <VAR>ldb</VAR>, const 
  void * <VAR>beta</VAR>, void *   <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcsyrk"></A>Function: 
  <EM>void</EM><STRONG>cblas_csyrk</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>beta</VAR>, void * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcsyr2k"></A>Function: 
  <EM>void</EM><STRONG>cblas_csyr2k</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>, const void * <VAR>beta</VAR>,   void * <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctrmm"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctrmm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, void *   <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fctrsm"></A>Function: 
  <EM>void</EM><STRONG>cblas_ctrsm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, void *   <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzgemm"></A>Function: 
  <EM>void</EM><STRONG>cblas_zgemm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>TransB</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const int   <VAR>K</VAR>, const void * <VAR>alpha</VAR>, const 
  void * <VAR>A</VAR>, const   int <VAR>lda</VAR>, const void * <VAR>B</VAR>, 
  const int <VAR>ldb</VAR>, const   void * <VAR>beta</VAR>, void * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzsymm"></A>Function: 
  <EM>void</EM><STRONG>cblas_zsymm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, 
  const void * <VAR>alpha</VAR>,   const void * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, const void *   <VAR>B</VAR>, const int <VAR>ldb</VAR>, const 
  void * <VAR>beta</VAR>, void *   <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzsyrk"></A>Function: 
  <EM>void</EM><STRONG>cblas_zsyrk</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>beta</VAR>, void * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzsyr2k"></A>Function: 
  <EM>void</EM><STRONG>cblas_zsyr2k</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>, const void * <VAR>beta</VAR>,   void * <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztrmm"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztrmm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, void *   <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fztrsm"></A>Function: 
  <EM>void</EM><STRONG>cblas_ztrsm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const enum CBLAS_TRANSPOSE <VAR>TransA</VAR>, 
  const enum CBLAS_DIAG   <VAR>Diag</VAR>, const int <VAR>M</VAR>, const int 
  <VAR>N</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, void *   <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fchemm"></A>Function: 
  <EM>void</EM><STRONG>cblas_chemm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, 
  const void * <VAR>alpha</VAR>,   const void * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, const void *   <VAR>B</VAR>, const int <VAR>ldb</VAR>, const 
  void * <VAR>beta</VAR>, void *   <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcherk"></A>Function: 
  <EM>void</EM><STRONG>cblas_cherk</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const float   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, const 
  int <VAR>lda</VAR>, const   float <VAR>beta</VAR>, void * <VAR>C</VAR>, const 
  int <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fcher2k"></A>Function: 
  <EM>void</EM><STRONG>cblas_cher2k</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>, const float <VAR>beta</VAR>,   void * <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzhemm"></A>Function: 
  <EM>void</EM><STRONG>cblas_zhemm</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_SIDE <VAR>Side</VAR>, const enum 
  CBLAS_UPLO <VAR>Uplo</VAR>,   const int <VAR>M</VAR>, const int <VAR>N</VAR>, 
  const void * <VAR>alpha</VAR>,   const void * <VAR>A</VAR>, const int 
  <VAR>lda</VAR>, const void *   <VAR>B</VAR>, const int <VAR>ldb</VAR>, const 
  void * <VAR>beta</VAR>, void *   <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzherk"></A>Function: 
  <EM>void</EM><STRONG>cblas_zherk</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const double   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   double <VAR>beta</VAR>, void * <VAR>C</VAR>, 
  const int   <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fzher2k"></A>Function: 
  <EM>void</EM><STRONG>cblas_zher2k</STRONG> <EM>(const enum CBLAS_ORDER 
  <VAR>Order</VAR>,   const enum CBLAS_UPLO <VAR>Uplo</VAR>, const enum 
  CBLAS_TRANSPOSE   <VAR>Trans</VAR>, const int <VAR>N</VAR>, const int 
  <VAR>K</VAR>, const void *   <VAR>alpha</VAR>, const void * <VAR>A</VAR>, 
  const int <VAR>lda</VAR>, const   void * <VAR>B</VAR>, const int 
  <VAR>ldb</VAR>, const double <VAR>beta</VAR>,   void * <VAR>C</VAR>, const int 
  <VAR>ldc</VAR>)</EM></DT></DL>
<DL>
  <DT><A name="index-cblas_005fxerbla"></A>Function: 
  <EM>void</EM><STRONG>cblas_xerbla</STRONG> <EM>(int <VAR>p</VAR>, const char * 
    <VAR>rout</VAR>, const char * <VAR>form</VAR>, ...)</EM></DT></DL>
<HR>
<A name="GSL-CBLAS-Examples"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Level-3-CBLAS-Functions" 
rel="previous">Level 3 CBLAS Functions</A>, Up: <A accessKey="u" href="#GSL-CBLAS-Library" 
rel="up">GSL CBLAS Library</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Examples-33"></A>
<H3 class="section">D.4 Examples</H3>
<P>The following program computes the product of two matrices using the Level-3 
<SMALL>BLAS</SMALL> function <SMALL>SGEMM</SMALL>, </P>
<DIV class="example"><PRE class="example">[ 0.11 0.12 0.13 ]  [ 1011 1012 ]     [ 367.76 368.12 ]
[ 0.21 0.22 0.23 ]  [ 1021 1022 ]  =  [ 674.06 674.72 ]
                    [ 1031 1032 ]
</PRE></DIV>
<P>The matrices are stored in row major order but could be stored in column 
 major order if the first argument of the call to <CODE>cblas_sgemm</CODE> was 
 changed to <CODE>CblasColMajor</CODE>. </P>
<DIV class="example"><PRE class="verbatim">#include &lt;stdio.h&gt;
#include &lt;gsl/gsl_cblas.h&gt;

int
main (void)
{
  int lda = 3;

  float A[] = { 0.11, 0.12, 0.13,
                0.21, 0.22, 0.23 };

  int ldb = 2;
  
  float B[] = { 1011, 1012,
                1021, 1022,
                1031, 1032 };

  int ldc = 2;

  float C[] = { 0.00, 0.00,
                0.00, 0.00 };

  /* Compute C = A B */

  cblas_sgemm (CblasRowMajor, 
               CblasNoTrans, CblasNoTrans, 2, 2, 3,
               1.0, A, lda, B, ldb, 0.0, C, ldc);

  printf ("[ %g, %g\n", C[0], C[1]);
  printf ("  %g, %g ]\n", C[2], C[3]);

  return 0;  
}
</PRE></DIV>
<P>To compile the program use the following command line, </P>
<DIV class="example"><PRE class="example">$ gcc -Wall demo.c -lgslcblas
</PRE></DIV>
<P>There is no need to link with the main library <CODE>-lgsl</CODE> in this 
 case as the <SMALL>CBLAS</SMALL> library is an independent unit. Here is the 
 output from the program, </P>
<DIV class="example"><PRE class="example">$ ./a.out
</PRE><PRE class="verbatim">[ 367.76, 368.12
  674.06, 674.72 ]
</PRE></DIV>
<HR>
<A name="GNU-General-Public-License"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#GNU-Free-Documentation-License" 
rel="next">GNU Free Documentation License</A>, Previous: <A accessKey="p" href="#GSL-CBLAS-Library" 
rel="previous">GSL CBLAS Library</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GNU-General-Public-License-1"></A>
<H2 class="unnumbered">GNU General Public License</H2>
<DIV align="center">Version 3, 29 June 2007 </DIV>
<DIV class="display"><PRE class="display">Copyright © 2007 Free Software Foundation, Inc. <A href="http://fsf.org/">http://fsf.org/</A>

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
</PRE></DIV><A 
name="Preamble"></A>
<H3 class="heading">Preamble</H3>
<P>The GNU General Public License is a free, copyleft license for software and 
 other kinds of works. </P>
<P>The licenses for most software and other practical works are designed to take 
 away your freedom to share and change the works. By contrast, the GNU General 
 Public License is intended to guarantee your freedom to share and change all 
 versions of a program–to make sure it remains free software for all its users. 
 We, the Free Software Foundation, use the GNU General Public License for most 
of  our software; it applies also to any other work released this way by its 
 authors. You can apply it to your programs, too. </P>
<P>When we speak of free software, we are referring to freedom, not price. Our 
 General Public Licenses are designed to make sure that you have the freedom to 
 distribute copies of free software (and charge for them if you wish), that you 
 receive source code or can get it if you want it, that you can change the 
 software or use pieces of it in new free programs, and that you know you can do 
 these things. </P>
<P>To protect your rights, we need to prevent others from denying you these 
 rights or asking you to surrender the rights. Therefore, you have certain 
 responsibilities if you distribute copies of the software, or if you modify it: 
 responsibilities to respect the freedom of others. </P>
<P>For example, if you distribute copies of such a program, whether gratis or 
 for a fee, you must pass on to the recipients the same freedoms that you 
 received. You must make sure that they, too, receive or can get the source 
code.  And you must show them these terms so they know their rights. </P>
<P>Developers that use the GNU GPL protect your rights with two steps: (1) 
 assert copyright on the software, and (2) offer you this License giving you 
 legal permission to copy, distribute and/or modify it. </P>
<P>For the developers’ and authors’ protection, the GPL clearly explains that 
 there is no warranty for this free software. For both users’ and authors’ sake, 
 the GPL requires that modified versions be marked as changed, so that their 
 problems will not be attributed erroneously to authors of previous versions. 
</P>
<P>Some devices are designed to deny users access to install or run modified 
 versions of the software inside them, although the manufacturer can do so. This 
 is fundamentally incompatible with the aim of protecting users’ freedom to 
 change the software. The systematic pattern of such abuse occurs in the area of 
 products for individuals to use, which is precisely where it is most 
 unacceptable. Therefore, we have designed this version of the GPL to prohibit 
 the practice for those products. If such problems arise substantially in other 
 domains, we stand ready to extend this provision to those domains in future 
 versions of the GPL, as needed to protect the freedom of users. </P>
<P>Finally, every program is threatened constantly by software patents. States 
 should not allow patents to restrict development and use of software on 
 general-purpose computers, but in those that do, we wish to avoid the special 
 danger that patents applied to a free program could make it effectively 
 proprietary. To prevent this, the GPL assures that patents cannot be used to 
 render the program non-free. </P>
<P>The precise terms and conditions for copying, distribution and modification 
 follow. </P><A name="TERMS-AND-CONDITIONS"></A>
<H3 class="heading">TERMS AND CONDITIONS</H3>
<OL>
  <LI>Definitions.   
  <P>“This License” refers to version 3 of the GNU General Public License. </P>
  <P>“Copyright” also means copyright-like laws that apply to other kinds of   
  works, such as semiconductor masks. </P>
  <P>“The Program” refers to any copyrightable work licensed under this License. 
    Each licensee is addressed as “you”. “Licensees” and “recipients” may be   
  individuals or organizations. </P>
  <P>To “modify” a work means to copy from or adapt all or part of the work in a 
    fashion requiring copyright permission, other than the making of an exact   
  copy. The resulting work is called a “modified version” of the earlier work or 
    a work “based on” the earlier work. </P>
  <P>A “covered work” means either the unmodified Program or a work based on the 
    Program. </P>
  <P>To “propagate” a work means to do anything with it that, without   
  permission, would make you directly or secondarily liable for infringement   
  under applicable copyright law, except executing it on a computer or modifying 
    a private copy. Propagation includes copying, distribution (with or without  
   modification), making available to the public, and in some countries other   
  activities as well. </P>
  <P>To “convey” a work means any kind of propagation that enables other parties 
    to make or receive copies. Mere interaction with a user through a computer   
  network, with no transfer of a copy, is not conveying. </P>
  <P>An interactive user interface displays “Appropriate Legal Notices” to the   
  extent that it includes a convenient and prominently visible feature that (1)  
   displays an appropriate copyright notice, and (2) tells the user that there 
  is   no warranty for the work (except to the extent that warranties are 
  provided),   that licensees may convey the work under this License, and how to 
  view a copy   of this License. If the interface presents a list of user 
  commands or options,   such as a menu, a prominent item in the list meets this 
  criterion. </P></LI>
  <LI>Source Code.   
  <P>The “source code” for a work means the preferred form of the work for   
  making modifications to it. “Object code” means any non-source form of a work. 
    </P>
  <P>A “Standard Interface” means an interface that either is an official   
  standard defined by a recognized standards body, or, in the case of interfaces 
    specified for a particular programming language, one that is widely used 
  among   developers working in that language. </P>
  <P>The “System Libraries” of an executable work include anything, other than   
  the work as a whole, that (a) is included in the normal form of packaging a   
  Major Component, but which is not part of that Major Component, and (b) serves 
    only to enable use of the work with that Major Component, or to implement a  
   Standard Interface for which an implementation is available to the public in  
   source code form. A “Major Component”, in this context, means a major   
  essential component (kernel, window system, and so on) of the specific   
  operating system (if any) on which the executable work runs, or a compiler   
  used to produce the work, or an object code interpreter used to run it. </P>
  <P>The “Corresponding Source” for a work in object code form means all the   
  source code needed to generate, install, and (for an executable work) run the  
   object code and to modify the work, including scripts to control those   
  activities. However, it does not include the work’s System Libraries, or   
  general-purpose tools or generally available free programs which are used   
  unmodified in performing those activities but which are not part of the work.  
   For example, Corresponding Source includes interface definition files   
  associated with source files for the work, and the source code for shared   
  libraries and dynamically linked subprograms that the work is specifically   
  designed to require, such as by intimate data communication or control flow   
  between those subprograms and other parts of the work. </P>
  <P>The Corresponding Source need not include anything that users can   
  regenerate automatically from other parts of the Corresponding Source. </P>
  <P>The Corresponding Source for a work in source code form is that same work.  
   </P></LI>
  <LI>Basic Permissions.   
  <P>All rights granted under this License are granted for the term of copyright 
    on the Program, and are irrevocable provided the stated conditions are met.  
   This License explicitly affirms your unlimited permission to run the   
  unmodified Program. The output from running a covered work is covered by this  
   License only if the output, given its content, constitutes a covered work.   
  This License acknowledges your rights of fair use or other equivalent, as   
  provided by copyright law. </P>
  <P>You may make, run and propagate covered works that you do not convey,   
  without conditions so long as your license otherwise remains in force. You may 
    convey covered works to others for the sole purpose of having them make   
  modifications exclusively for you, or provide you with facilities for running  
   those works, provided that you comply with the terms of this License in   
  conveying all material for which you do not control copyright. Those thus   
  making or running the covered works for you must do so exclusively on your   
  behalf, under your direction and control, on terms that prohibit them from   
  making any copies of your copyrighted material outside their relationship with 
    you. </P>
  <P>Conveying under any other circumstances is permitted solely under the   
  conditions stated below. Sublicensing is not allowed; section 10 makes it   
  unnecessary. </P></LI>
  <LI>Protecting Users’ Legal Rights From Anti-Circumvention Law.   
  <P>No covered work shall be deemed part of an effective technological measure  
   under any applicable law fulfilling obligations under article 11 of the WIPO  
   copyright treaty adopted on 20 December 1996, or similar laws prohibiting or  
   restricting circumvention of such measures. </P>
  <P>When you convey a covered work, you waive any legal power to forbid   
  circumvention of technological measures to the extent such circumvention is   
  effected by exercising rights under this License with respect to the covered   
  work, and you disclaim any intention to limit operation or modification of the 
    work as a means of enforcing, against the work’s users, your or third 
  parties’   legal rights to forbid circumvention of technological measures. 
  </P></LI>
  <LI>Conveying Verbatim Copies.   
  <P>You may convey verbatim copies of the Program’s source code as you receive  
   it, in any medium, provided that you conspicuously and appropriately publish  
   on each copy an appropriate copyright notice; keep intact all notices stating 
    that this License and any non-permissive terms added in accord with section 
  7   apply to the code; keep intact all notices of the absence of any warranty; 
  and   give all recipients a copy of this License along with the Program. </P>
  <P>You may charge any price or no price for each copy that you convey, and you 
    may offer support or warranty protection for a fee. </P></LI>
  <LI>Conveying Modified Source Versions.   
  <P>You may convey a work based on the Program, or the modifications to produce 
    it from the Program, in the form of source code under the terms of section 
  4,   provided that you also meet all of these conditions: </P>
  <OL>
    <LI>The work must carry prominent notices stating that you modified it, and  
       giving a relevant date. </LI>
    <LI>The work must carry prominent notices stating that it is released under  
       this License and any conditions added under section 7. This requirement   
      modifies the requirement in section 4 to “keep intact all notices”. </LI>
    <LI>You must license the entire work, as a whole, under this License to     
    anyone who comes into possession of a copy. This License will therefore     
    apply, along with any applicable section 7 additional terms, to the whole of 
        the work, and all its parts, regardless of how they are packaged. This   
      License gives no permission to license the work in any other way, but it   
      does not invalidate such permission if you have separately received it. 
    </LI>
    <LI>If the work has interactive user interfaces, each must display     
    Appropriate Legal Notices; however, if the Program has interactive     
    interfaces that do not display Appropriate Legal Notices, your work need not 
        make them do so. </LI></OL>
  <P>A compilation of a covered work with other separate and independent works,  
   which are not by their nature extensions of the covered work, and which are   
  not combined with it such as to form a larger program, in or on a volume of a  
   storage or distribution medium, is called an “aggregate” if the compilation   
  and its resulting copyright are not used to limit the access or legal rights   
  of the compilation’s users beyond what the individual works permit. Inclusion  
   of a covered work in an aggregate does not cause this License to apply to the 
    other parts of the aggregate. </P></LI>
  <LI>Conveying Non-Source Forms.   
  <P>You may convey a covered work in object code form under the terms of   
  sections 4 and 5, provided that you also convey the machine-readable   
  Corresponding Source under the terms of this License, in one of these ways:   
  </P>
  <OL>
    <LI>Convey the object code in, or embodied in, a physical product (including 
        a physical distribution medium), accompanied by the Corresponding Source 
        fixed on a durable physical medium customarily used for software     
    interchange. </LI>
    <LI>Convey the object code in, or embodied in, a physical product (including 
        a physical distribution medium), accompanied by a written offer, valid 
    for     at least three years and valid for as long as you offer spare parts 
    or     customer support for that product model, to give anyone who possesses 
    the     object code either (1) a copy of the Corresponding Source for all 
    the     software in the product that is covered by this License, on a 
    durable     physical medium customarily used for software interchange, for a 
    price no     more than your reasonable cost of physically performing this 
    conveying of     source, or (2) access to copy the Corresponding Source from 
    a network server     at no charge. </LI>
    <LI>Convey individual copies of the object code with a copy of the written   
      offer to provide the Corresponding Source. This alternative is allowed 
    only     occasionally and noncommercially, and only if you received the 
    object code     with such an offer, in accord with subsection 6b. </LI>
    <LI>Convey the object code by offering access from a designated place     
    (gratis or for a charge), and offer equivalent access to the Corresponding   
      Source in the same way through the same place at no further charge. You 
    need     not require recipients to copy the Corresponding Source along with 
    the     object code. If the place to copy the object code is a network 
    server, the     Corresponding Source may be on a different server (operated 
    by you or a     third party) that supports equivalent copying facilities, 
    provided you     maintain clear directions next to the object code saying 
    where to find the     Corresponding Source. Regardless of what server hosts 
    the Corresponding     Source, you remain obligated to ensure that it is 
    available for as long as     needed to satisfy these requirements. </LI>
    <LI>Convey the object code using peer-to-peer transmission, provided you     
    inform other peers where the object code and Corresponding Source of the     
    work are being offered to the general public at no charge under subsection   
      6d. </LI></OL>
  <P>A separable portion of the object code, whose source code is excluded from  
   the Corresponding Source as a System Library, need not be included in   
  conveying the object code work. </P>
  <P>A “User Product” is either (1) a “consumer product”, which means any   
  tangible personal property which is normally used for personal, family, or   
  household purposes, or (2) anything designed or sold for incorporation into a  
   dwelling. In determining whether a product is a consumer product, doubtful   
  cases shall be resolved in favor of coverage. For a particular product   
  received by a particular user, “normally used” refers to a typical or common   
  use of that class of product, regardless of the status of the particular user  
   or of the way in which the particular user actually uses, or expects or is   
  expected to use, the product. A product is a consumer product regardless of   
  whether the product has substantial commercial, industrial or non-consumer   
  uses, unless such uses represent the only significant mode of use of the   
  product. </P>
  <P>“Installation Information” for a User Product means any methods,   
  procedures, authorization keys, or other information required to install and   
  execute modified versions of a covered work in that User Product from a   
  modified version of its Corresponding Source. The information must suffice to  
   ensure that the continued functioning of the modified object code is in no   
  case prevented or interfered with solely because modification has been made.   
  </P>
  <P>If you convey an object code work under this section in, or with, or   
  specifically for use in, a User Product, and the conveying occurs as part of a 
    transaction in which the right of possession and use of the User Product is  
   transferred to the recipient in perpetuity or for a fixed term (regardless of 
    how the transaction is characterized), the Corresponding Source conveyed 
  under   this section must be accompanied by the Installation Information. But 
  this   requirement does not apply if neither you nor any third party retains 
  the   ability to install modified object code on the User Product (for 
  example, the   work has been installed in ROM). </P>
  <P>The requirement to provide Installation Information does not include a   
  requirement to continue to provide support service, warranty, or updates for a 
    work that has been modified or installed by the recipient, or for the User   
  Product in which it has been modified or installed. Access to a network may be 
    denied when the modification itself materially and adversely affects the   
  operation of the network or violates the rules and protocols for communication 
    across the network. </P>
  <P>Corresponding Source conveyed, and Installation Information provided, in   
  accord with this section must be in a format that is publicly documented (and  
   with an implementation available to the public in source code form), and must 
    require no special password or key for unpacking, reading or copying. 
  </P></LI>
  <LI>Additional Terms.   
  <P>“Additional permissions” are terms that supplement the terms of this   
  License by making exceptions from one or more of its conditions. Additional   
  permissions that are applicable to the entire Program shall be treated as   
  though they were included in this License, to the extent that they are valid   
  under applicable law. If additional permissions apply only to part of the   
  Program, that part may be used separately under those permissions, but the   
  entire Program remains governed by this License without regard to the   
  additional permissions. </P>
  <P>When you convey a copy of a covered work, you may at your option remove any 
    additional permissions from that copy, or from any part of it. (Additional   
  permissions may be written to require their own removal in certain cases when  
   you modify the work.) You may place additional permissions on material, added 
    by you to a covered work, for which you have or can give appropriate 
  copyright   permission. </P>
  <P>Notwithstanding any other provision of this License, for material you add   
  to a covered work, you may (if authorized by the copyright holders of that   
  material) supplement the terms of this License with terms: </P>
  <OL>
    <LI>Disclaiming warranty or limiting liability differently from the terms of 
        sections 15 and 16 of this License; or </LI>
    <LI>Requiring preservation of specified reasonable legal notices or author   
      attributions in that material or in the Appropriate Legal Notices 
    displayed     by works containing it; or </LI>
    <LI>Prohibiting misrepresentation of the origin of that material, or     
    requiring that modified versions of such material be marked in reasonable    
     ways as different from the original version; or </LI>
    <LI>Limiting the use for publicity purposes of names of licensors or authors 
        of the material; or </LI>
    <LI>Declining to grant rights under trademark law for use of some trade     
    names, trademarks, or service marks; or </LI>
    <LI>Requiring indemnification of licensors and authors of that material by   
      anyone who conveys the material (or modified versions of it) with     
    contractual assumptions of liability to the recipient, for any liability     
    that these contractual assumptions directly impose on those licensors and    
     authors. </LI></OL>
  <P>All other non-permissive additional terms are considered “further   
  restrictions” within the meaning of section 10. If the Program as you received 
    it, or any part of it, contains a notice stating that it is governed by this 
    License along with a term that is a further restriction, you may remove that 
    term. If a license document contains a further restriction but permits   
  relicensing or conveying under this License, you may add to a covered work   
  material governed by the terms of that license document, provided that the   
  further restriction does not survive such relicensing or conveying. </P>
  <P>If you add terms to a covered work in accord with this section, you must   
  place, in the relevant source files, a statement of the additional terms that  
   apply to those files, or a notice indicating where to find the applicable   
  terms. </P>
  <P>Additional terms, permissive or non-permissive, may be stated in the form   
  of a separately written license, or stated as exceptions; the above   
  requirements apply either way. </P></LI>
  <LI>Termination.   
  <P>You may not propagate or modify a covered work except as expressly provided 
    under this License. Any attempt otherwise to propagate or modify it is void, 
    and will automatically terminate your rights under this License (including 
  any   patent licenses granted under the third paragraph of section 11). </P>
  <P>However, if you cease all violation of this License, then your license from 
    a particular copyright holder is reinstated (a) provisionally, unless and   
  until the copyright holder explicitly and finally terminates your license, and 
    (b) permanently, if the copyright holder fails to notify you of the 
  violation   by some reasonable means prior to 60 days after the cessation. 
</P>
  <P>Moreover, your license from a particular copyright holder is reinstated   
  permanently if the copyright holder notifies you of the violation by some   
  reasonable means, this is the first time you have received notice of violation 
    of this License (for any work) from that copyright holder, and you cure the  
   violation prior to 30 days after your receipt of the notice. </P>
  <P>Termination of your rights under this section does not terminate the   
  licenses of parties who have received copies or rights from you under this   
  License. If your rights have been terminated and not permanently reinstated,   
  you do not qualify to receive new licenses for the same material under section 
    10. </P></LI>
  <LI>Acceptance Not Required for Having Copies.   
  <P>You are not required to accept this License in order to receive or run a   
  copy of the Program. Ancillary propagation of a covered work occurring solely  
   as a consequence of using peer-to-peer transmission to receive a copy 
  likewise   does not require acceptance. However, nothing other than this 
  License grants   you permission to propagate or modify any covered work. These 
  actions infringe   copyright if you do not accept this License. Therefore, by 
  modifying or   propagating a covered work, you indicate your acceptance of 
  this License to do   so. </P></LI>
  <LI>Automatic Licensing of Downstream Recipients.   
  <P>Each time you convey a covered work, the recipient automatically receives a 
    license from the original licensors, to run, modify and propagate that work, 
    subject to this License. You are not responsible for enforcing compliance by 
    third parties with this License. </P>
  <P>An “entity transaction” is a transaction transferring control of an   
  organization, or substantially all assets of one, or subdividing an   
  organization, or merging organizations. If propagation of a covered work   
  results from an entity transaction, each party to that transaction who   
  receives a copy of the work also receives whatever licenses to the work the   
  party’s predecessor in interest had or could give under the previous   
  paragraph, plus a right to possession of the Corresponding Source of the work  
   from the predecessor in interest, if the predecessor has it or can get it 
  with   reasonable efforts. </P>
  <P>You may not impose any further restrictions on the exercise of the rights   
  granted or affirmed under this License. For example, you may not impose a   
  license fee, royalty, or other charge for exercise of rights granted under   
  this License, and you may not initiate litigation (including a cross-claim or  
   counterclaim in a lawsuit) alleging that any patent claim is infringed by   
  making, using, selling, offering for sale, or importing the Program or any   
  portion of it. </P></LI>
  <LI>Patents.   
  <P>A “contributor” is a copyright holder who authorizes use under this License 
    of the Program or a work on which the Program is based. The work thus 
  licensed   is called the contributor’s “contributor version”. </P>
  <P>A contributor’s “essential patent claims” are all patent claims owned or   
  controlled by the contributor, whether already acquired or hereafter acquired, 
    that would be infringed by some manner, permitted by this License, of 
  making,   using, or selling its contributor version, but do not include claims 
  that   would be infringed only as a consequence of further modification of the 
    contributor version. For purposes of this definition, “control” includes the 
    right to grant patent sublicenses in a manner consistent with the 
  requirements   of this License. </P>
  <P>Each contributor grants you a non-exclusive, worldwide, royalty-free patent 
    license under the contributor’s essential patent claims, to make, use, sell, 
    offer for sale, import and otherwise run, modify and propagate the contents 
  of   its contributor version. </P>
  <P>In the following three paragraphs, a “patent license” is any express   
  agreement or commitment, however denominated, not to enforce a patent (such as 
    an express permission to practice a patent or covenant not to sue for patent 
    infringement). To “grant” such a patent license to a party means to make 
  such   an agreement or commitment not to enforce a patent against the party. 
  </P>
  <P>If you convey a covered work, knowingly relying on a patent license, and   
  the Corresponding Source of the work is not available for anyone to copy, free 
    of charge and under the terms of this License, through a publicly available  
   network server or other readily accessible means, then you must either (1)   
  cause the Corresponding Source to be so available, or (2) arrange to deprive   
  yourself of the benefit of the patent license for this particular work, or (3) 
    arrange, in a manner consistent with the requirements of this License, to   
  extend the patent license to downstream recipients. “Knowingly relying” means  
   you have actual knowledge that, but for the patent license, your conveying 
  the   covered work in a country, or your recipient’s use of the covered work 
  in a   country, would infringe one or more identifiable patents in that 
  country that   you have reason to believe are valid. </P>
  <P>If, pursuant to or in connection with a single transaction or arrangement,  
   you convey, or propagate by procuring conveyance of, a covered work, and 
  grant   a patent license to some of the parties receiving the covered work 
  authorizing   them to use, propagate, modify or convey a specific copy of the 
  covered work,   then the patent license you grant is automatically extended to 
  all recipients   of the covered work and works based on it. </P>
  <P>A patent license is “discriminatory” if it does not include within the   
  scope of its coverage, prohibits the exercise of, or is conditioned on the   
  non-exercise of one or more of the rights that are specifically granted under  
   this License. You may not convey a covered work if you are a party to an   
  arrangement with a third party that is in the business of distributing   
  software, under which you make payment to the third party based on the extent  
   of your activity of conveying the work, and under which the third party   
  grants, to any of the parties who would receive the covered work from you, a   
  discriminatory patent license (a) in connection with copies of the covered   
  work conveyed by you (or copies made from those copies), or (b) primarily for  
   and in connection with specific products or compilations that contain the   
  covered work, unless you entered into that arrangement, or that patent license 
    was granted, prior to 28 March 2007. </P>
  <P>Nothing in this License shall be construed as excluding or limiting any   
  implied license or other defenses to infringement that may otherwise be   
  available to you under applicable patent law. </P></LI>
  <LI>No Surrender of Others’ Freedom.   
  <P>If conditions are imposed on you (whether by court order, agreement or   
  otherwise) that contradict the conditions of this License, they do not excuse  
   you from the conditions of this License. If you cannot convey a covered work  
   so as to satisfy simultaneously your obligations under this License and any   
  other pertinent obligations, then as a consequence you may not convey it at   
  all. For example, if you agree to terms that obligate you to collect a royalty 
    for further conveying from those to whom you convey the Program, the only 
  way   you could satisfy both those terms and this License would be to refrain  
   entirely from conveying the Program. </P></LI>
  <LI>Use with the GNU Affero General Public License.   
  <P>Notwithstanding any other provision of this License, you have permission to 
    link or combine any covered work with a work licensed under version 3 of the 
    GNU Affero General Public License into a single combined work, and to convey 
    the resulting work. The terms of this License will continue to apply to the  
   part which is the covered work, but the special requirements of the GNU 
  Affero   General Public License, section 13, concerning interaction through a 
  network   will apply to the combination as such. </P></LI>
  <LI>Revised Versions of this License.   
  <P>The Free Software Foundation may publish revised and/or new versions of the 
    GNU General Public License from time to time. Such new versions will be   
  similar in spirit to the present version, but may differ in detail to address  
   new problems or concerns. </P>
  <P>Each version is given a distinguishing version number. If the Program   
  specifies that a certain numbered version of the GNU General Public License   
  “or any later version” applies to it, you have the option of following the   
  terms and conditions either of that numbered version or of any later version   
  published by the Free Software Foundation. If the Program does not specify a   
  version number of the GNU General Public License, you may choose any version   
  ever published by the Free Software Foundation. </P>
  <P>If the Program specifies that a proxy can decide which future versions of   
  the GNU General Public License can be used, that proxy’s public statement of   
  acceptance of a version permanently authorizes you to choose that version for  
   the Program. </P>
  <P>Later license versions may give you additional or different permissions.   
  However, no additional obligations are imposed on any author or copyright   
  holder as a result of your choosing to follow a later version. </P></LI>
  <LI>Disclaimer of Warranty.   
  <P>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE 
    LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR   
  OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER 
    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
  OF   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS 
  TO   THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE 
  PROGRAM   PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, 
  REPAIR OR   CORRECTION. </P></LI>
  <LI>Limitation of Liability.   
  <P>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL  
   ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE   
  PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY   
  GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE   
  OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR  
   DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR 
    A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH   
  HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.   
  </P></LI>
  <LI>Interpretation of Sections 15 and 16.   
  <P>If the disclaimer of warranty and limitation of liability provided above   
  cannot be given local legal effect according to their terms, reviewing courts  
   shall apply local law that most closely approximates an absolute waiver of 
  all   civil liability in connection with the Program, unless a warranty or   
  assumption of liability accompanies a copy of the Program in return for a fee. 
    </P></LI></OL><A name="END-OF-TERMS-AND-CONDITIONS"></A>
<H3 class="heading">END OF TERMS AND CONDITIONS</H3><A name="How-to-Apply-These-Terms-to-Your-New-Programs"></A>
<H3 class="heading">How to Apply These Terms to Your New Programs</H3>
<P>If you develop a new program, and you want it to be of the greatest possible 
 use to the public, the best way to achieve this is to make it free software 
 which everyone can redistribute and change under these terms. </P>
<P>To do so, attach the following notices to the program. It is safest to attach 
 them to the start of each source file to most effectively state the exclusion 
of  warranty; and each file should have at least the “copyright” line and a 
pointer  to where the full notice is found. </P>
<DIV class="smallexample"><PRE class="smallexample"><VAR>one line to give the program's name and a brief idea 
of what it does.</VAR>  
Copyright (C) <VAR>year</VAR> <VAR>name of author</VAR>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <A href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</A>.
</PRE></DIV>
<P>Also add information on how to contact you by electronic and paper mail. </P>
<P>If the program does terminal interaction, make it output a short notice like 
 this when it starts in an interactive mode: </P>
<DIV class="smallexample"><PRE class="smallexample"><VAR>program</VAR> Copyright (C) <VAR>year</VAR> <VAR>name of author</VAR> 
This program comes with ABSOLUTELY NO WARRANTY; for details type ‘<SAMP>show w</SAMP>’.
This is free software, and you are welcome to redistribute it
under certain conditions; type ‘<SAMP>show c</SAMP>’ for details.
</PRE></DIV>
<P>The hypothetical commands ‘<SAMP>show w</SAMP>’ and ‘<SAMP>show c</SAMP>’ 
should show the appropriate parts of the General Public License. Of course, your 
 program’s commands might be different; for a GUI interface, you would use an 
“about box”. </P>
<P>You should also get your employer (if you work as a programmer) or school, if 
 any, to sign a “copyright disclaimer” for the program, if necessary. For more 
 information on this, and how to apply and follow the GNU GPL, see <A href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</A>. 
</P>
<P>The GNU General Public License does not permit incorporating your program 
 into proprietary programs. If your program is a subroutine library, you may 
 consider it more useful to permit linking proprietary applications with the 
 library. If this is what you want to do, use the GNU Lesser General Public 
 License instead of this License. But first, please read <A href="http://www.gnu.org/philosophy/why-not-lgpl.html">http://www.gnu.org/philosophy/why-not-lgpl.html</A>. 
</P>
<HR>
<A name="GNU-Free-Documentation-License"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Function-Index" 
rel="next">Function Index</A>, Previous: <A accessKey="p" href="#GNU-General-Public-License" 
rel="previous">GNU General Public License</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="GNU-Free-Documentation-License-1"></A>
<H2 class="unnumbered">GNU Free Documentation License</H2>
<DIV align="center">Version 1.3, 3 November 2008 </DIV>
<DIV class="display"><PRE class="display">Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<A href="http://fsf.org/">http://fsf.org/</A>

Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is
not allowed.
</PRE></DIV>
<OL>
  <LI>PREAMBLE   
  <P>The purpose of this License is to make a manual, textbook, or other   
  functional and useful document <EM>free</EM> in the sense of freedom: to   
  assure everyone the effective freedom to copy and redistribute it, with or   
  without modifying it, either commercially or noncommercially. Secondarily,   
  this License preserves for the author and publisher a way to get credit for   
  their work, while not being considered responsible for modifications made by   
  others. </P>
  <P>This License is a kind of “copyleft”, which means that derivative works of  
   the document must themselves be free in the same sense. It complements the 
  GNU   General Public License, which is a copyleft license designed for free   
  software. </P>
  <P>We have designed this License in order to use it for manuals for free   
  software, because free software needs free documentation: a free program   
  should come with manuals providing the same freedoms that the software does.   
  But this License is not limited to software manuals; it can be used for any   
  textual work, regardless of subject matter or whether it is published as a   
  printed book. We recommend this License principally for works whose purpose is 
    instruction or reference. </P></LI>
  <LI>APPLICABILITY AND DEFINITIONS   
  <P>This License applies to any manual or other work, in any medium, that   
  contains a notice placed by the copyright holder saying it can be distributed  
   under the terms of this License. Such a notice grants a world-wide,   
  royalty-free license, unlimited in duration, to use that work under the   
  conditions stated herein. The “Document”, below, refers to any such manual or  
   work. Any member of the public is a licensee, and is addressed as “you”. You  
   accept the license if you copy, modify or distribute the work in a way   
  requiring permission under copyright law. </P>
  <P>A “Modified Version” of the Document means any work containing the Document 
    or a portion of it, either copied verbatim, or with modifications and/or   
  translated into another language. </P>
  <P>A “Secondary Section” is a named appendix or a front-matter section of the  
   Document that deals exclusively with the relationship of the publishers or   
  authors of the Document to the Document’s overall subject (or to related   
  matters) and contains nothing that could fall directly within that overall   
  subject. (Thus, if the Document is in part a textbook of mathematics, a   
  Secondary Section may not explain any mathematics.) The relationship could be  
   a matter of historical connection with the subject or with related matters, 
  or   of legal, commercial, philosophical, ethical or political position 
  regarding   them. </P>
  <P>The “Invariant Sections” are certain Secondary Sections whose titles are   
  designated, as being those of Invariant Sections, in the notice that says that 
    the Document is released under this License. If a section does not fit the   
  above definition of Secondary then it is not allowed to be designated as   
  Invariant. The Document may contain zero Invariant Sections. If the Document   
  does not identify any Invariant Sections then there are none. </P>
  <P>The “Cover Texts” are certain short passages of text that are listed, as   
  Front-Cover Texts or Back-Cover Texts, in the notice that says that the   
  Document is released under this License. A Front-Cover Text may be at most 5   
  words, and a Back-Cover Text may be at most 25 words. </P>
  <P>A “Transparent” copy of the Document means a machine-readable copy,   
  represented in a format whose specification is available to the general   
  public, that is suitable for revising the document straightforwardly with   
  generic text editors or (for images composed of pixels) generic paint programs 
    or (for drawings) some widely available drawing editor, and that is suitable 
    for input to text formatters or for automatic translation to a variety of   
  formats suitable for input to text formatters. A copy made in an otherwise   
  Transparent file format whose markup, or absence of markup, has been arranged  
   to thwart or discourage subsequent modification by readers is not 
  Transparent.   An image format is not Transparent if used for any substantial 
  amount of text.   A copy that is not “Transparent” is called “Opaque”. </P>
  <P>Examples of suitable formats for Transparent copies include plain   
  <SMALL>ASCII</SMALL> without markup, Texinfo input format, LaTeX input format, 
    <ACRONYM>SGML</ACRONYM> or <ACRONYM>XML</ACRONYM> using a publicly available 
    <ACRONYM>DTD</ACRONYM>, and standard-conforming simple   
  <ACRONYM>HTML</ACRONYM>, PostScript or <ACRONYM>PDF</ACRONYM> designed for   
  human modification. Examples of transparent image formats include   
  <ACRONYM>PNG</ACRONYM>, <ACRONYM>XCF</ACRONYM> and <ACRONYM>JPG</ACRONYM>.   
  Opaque formats include proprietary formats that can be read and edited only by 
    proprietary word processors, <ACRONYM>SGML</ACRONYM> or 
  <ACRONYM>XML</ACRONYM>   for which the <ACRONYM>DTD</ACRONYM> and/or 
  processing tools are not generally   available, and the machine-generated 
  <ACRONYM>HTML</ACRONYM>, PostScript or   <ACRONYM>PDF</ACRONYM> produced by 
  some word processors for output purposes   only. </P>
  <P>The “Title Page” means, for a printed book, the title page itself, plus   
  such following pages as are needed to hold, legibly, the material this License 
    requires to appear in the title page. For works in formats which do not have 
    any title page as such, “Title Page” means the text near the most prominent  
   appearance of the work’s title, preceding the beginning of the body of the   
  text. </P>
  <P>The “publisher” means any person or entity that distributes copies of the   
  Document to the public. </P>
  <P>A section “Entitled XYZ” means a named subunit of the Document whose title  
   either is precisely XYZ or contains XYZ in parentheses following text that   
  translates XYZ in another language. (Here XYZ stands for a specific section   
  name mentioned below, such as “Acknowledgements”, “Dedications”,   
  “Endorsements”, or “History”.) To “Preserve the Title” of such a section when  
   you modify the Document means that it remains a section “Entitled XYZ”   
  according to this definition. </P>
  <P>The Document may include Warranty Disclaimers next to the notice which   
  states that this License applies to the Document. These Warranty Disclaimers   
  are considered to be included by reference in this License, but only as   
  regards disclaiming warranties: any other implication that these Warranty   
  Disclaimers may have is void and has no effect on the meaning of this License. 
    </P></LI>
  <LI>VERBATIM COPYING   
  <P>You may copy and distribute the Document in any medium, either commercially 
    or noncommercially, provided that this License, the copyright notices, and 
  the   license notice saying this License applies to the Document are 
  reproduced in   all copies, and that you add no other conditions whatsoever to 
  those of this   License. You may not use technical measures to obstruct or 
  control the reading   or further copying of the copies you make or distribute. 
  However, you may   accept compensation in exchange for copies. If you 
  distribute a large enough   number of copies you must also follow the 
  conditions in section 3. </P>
  <P>You may also lend copies, under the same conditions stated above, and you   
  may publicly display copies. </P></LI>
  <LI>COPYING IN QUANTITY   
  <P>If you publish printed copies (or copies in media that commonly have   
  printed covers) of the Document, numbering more than 100, and the Document’s   
  license notice requires Cover Texts, you must enclose the copies in covers   
  that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on   
  the front cover, and Back-Cover Texts on the back cover. Both covers must also 
    clearly and legibly identify you as the publisher of these copies. The front 
    cover must present the full title with all words of the title equally   
  prominent and visible. You may add other material on the covers in addition.   
  Copying with changes limited to the covers, as long as they preserve the title 
    of the Document and satisfy these conditions, can be treated as verbatim   
  copying in other respects. </P>
  <P>If the required texts for either cover are too voluminous to fit legibly,   
  you should put the first ones listed (as many as fit reasonably) on the actual 
    cover, and continue the rest onto adjacent pages. </P>
  <P>If you publish or distribute Opaque copies of the Document numbering more   
  than 100, you must either include a machine-readable Transparent copy along   
  with each Opaque copy, or state in or with each Opaque copy a computer-network 
    location from which the general network-using public has access to download  
   using public-standard network protocols a complete Transparent copy of the   
  Document, free of added material. If you use the latter option, you must take  
   reasonably prudent steps, when you begin distribution of Opaque copies in   
  quantity, to ensure that this Transparent copy will remain thus accessible at  
   the stated location until at least one year after the last time you 
  distribute   an Opaque copy (directly or through your agents or retailers) of 
  that edition   to the public. </P>
  <P>It is requested, but not required, that you contact the authors of the   
  Document well before redistributing any large number of copies, to give them a 
    chance to provide you with an updated version of the Document. </P></LI>
  <LI>MODIFICATIONS   
  <P>You may copy and distribute a Modified Version of the Document under the   
  conditions of sections 2 and 3 above, provided that you release the Modified   
  Version under precisely this License, with the Modified Version filling the   
  role of the Document, thus licensing distribution and modification of the   
  Modified Version to whoever possesses a copy of it. In addition, you must do   
  these things in the Modified Version: </P>
  <OL>
    <LI>Use in the Title Page (and on the covers, if any) a title distinct from  
       that of the Document, and from those of previous versions (which should, 
    if     there were any, be listed in the History section of the Document). 
    You may     use the same title as a previous version if the original 
    publisher of that     version gives permission. </LI>
    <LI>List on the Title Page, as authors, one or more persons or entities     
    responsible for authorship of the modifications in the Modified Version,     
    together with at least five of the principal authors of the Document (all of 
        its principal authors, if it has fewer than five), unless they release 
    you     from this requirement. </LI>
    <LI>State on the Title page the name of the publisher of the Modified     
    Version, as the publisher. </LI>
    <LI>Preserve all the copyright notices of the Document. </LI>
    <LI>Add an appropriate copyright notice for your modifications adjacent to   
      the other copyright notices. </LI>
    <LI>Include, immediately after the copyright notices, a license notice     
    giving the public permission to use the Modified Version under the terms of  
       this License, in the form shown in the Addendum below. </LI>
    <LI>Preserve in that license notice the full lists of Invariant Sections and 
        required Cover Texts given in the Document’s license notice. </LI>
    <LI>Include an unaltered copy of this License. </LI>
    <LI>Preserve the section Entitled “History”, Preserve its Title, and add to  
       it an item stating at least the title, year, new authors, and publisher 
    of     the Modified Version as given on the Title Page. If there is no 
    section     Entitled “History” in the Document, create one stating the 
    title, year,     authors, and publisher of the Document as given on its 
    Title Page, then add     an item describing the Modified Version as stated 
    in the previous sentence.     </LI>
    <LI>Preserve the network location, if any, given in the Document for public  
       access to a Transparent copy of the Document, and likewise the network    
     locations given in the Document for previous versions it was based on. 
    These     may be placed in the “History” section. You may omit a network 
    location for     a work that was published at least four years before the 
    Document itself, or     if the original publisher of the version it refers 
    to gives permission. </LI>
    <LI>For any section Entitled “Acknowledgements” or “Dedications”, Preserve   
      the Title of the section, and preserve in the section all the substance 
    and     tone of each of the contributor acknowledgements and/or dedications 
    given     therein. </LI>
    <LI>Preserve all the Invariant Sections of the Document, unaltered in their  
       text and in their titles. Section numbers or the equivalent are not     
    considered part of the section titles. </LI>
    <LI>Delete any section Entitled “Endorsements”. Such a section may not be    
     included in the Modified Version. </LI>
    <LI>Do not retitle any existing section to be Entitled “Endorsements” or to  
       conflict in title with any Invariant Section. </LI>
    <LI>Preserve any Warranty Disclaimers. </LI></OL>
  <P>If the Modified Version includes new front-matter sections or appendices   
  that qualify as Secondary Sections and contain no material copied from the   
  Document, you may at your option designate some or all of these sections as   
  invariant. To do this, add their titles to the list of Invariant Sections in   
  the Modified Version’s license notice. These titles must be distinct from any  
   other section titles. </P>
  <P>You may add a section Entitled “Endorsements”, provided it contains nothing 
    but endorsements of your Modified Version by various parties—for example,   
  statements of peer review or that the text has been approved by an   
  organization as the authoritative definition of a standard. </P>
  <P>You may add a passage of up to five words as a Front-Cover Text, and a   
  passage of up to 25 words as a Back-Cover Text, to the end of the list of   
  Cover Texts in the Modified Version. Only one passage of Front-Cover Text and  
   one of Back-Cover Text may be added by (or through arrangements made by) any  
   one entity. If the Document already includes a cover text for the same cover, 
    previously added by you or by arrangement made by the same entity you are   
  acting on behalf of, you may not add another; but you may replace the old one, 
    on explicit permission from the previous publisher that added the old one. 
  </P>
  <P>The author(s) and publisher(s) of the Document do not by this License give  
   permission to use their names for publicity for or to assert or imply   
  endorsement of any Modified Version. </P></LI>
  <LI>COMBINING DOCUMENTS   
  <P>You may combine the Document with other documents released under this   
  License, under the terms defined in section 4 above for modified versions,   
  provided that you include in the combination all of the Invariant Sections of  
   all of the original documents, unmodified, and list them all as Invariant   
  Sections of your combined work in its license notice, and that you preserve   
  all their Warranty Disclaimers. </P>
  <P>The combined work need only contain one copy of this License, and multiple  
   identical Invariant Sections may be replaced with a single copy. If there are 
    multiple Invariant Sections with the same name but different contents, make  
   the title of each such section unique by adding at the end of it, in   
  parentheses, the name of the original author or publisher of that section if   
  known, or else a unique number. Make the same adjustment to the section titles 
    in the list of Invariant Sections in the license notice of the combined 
  work.   </P>
  <P>In the combination, you must combine any sections Entitled “History” in the 
    various original documents, forming one section Entitled “History”; likewise 
    combine any sections Entitled “Acknowledgements”, and any sections Entitled  
   “Dedications”. You must delete all sections Entitled “Endorsements.” 
</P></LI>
  <LI>COLLECTIONS OF DOCUMENTS   
  <P>You may make a collection consisting of the Document and other documents   
  released under this License, and replace the individual copies of this License 
    in the various documents with a single copy that is included in the   
  collection, provided that you follow the rules of this License for verbatim   
  copying of each of the documents in all other respects. </P>
  <P>You may extract a single document from such a collection, and distribute it 
    individually under this License, provided you insert a copy of this License  
   into the extracted document, and follow this License in all other respects   
  regarding verbatim copying of that document. </P></LI>
  <LI>AGGREGATION WITH INDEPENDENT WORKS   
  <P>A compilation of the Document or its derivatives with other separate and   
  independent documents or works, in or on a volume of a storage or distribution 
    medium, is called an “aggregate” if the copyright resulting from the   
  compilation is not used to limit the legal rights of the compilation’s users   
  beyond what the individual works permit. When the Document is included in an   
  aggregate, this License does not apply to the other works in the aggregate   
  which are not themselves derivative works of the Document. </P>
  <P>If the Cover Text requirement of section 3 is applicable to these copies of 
    the Document, then if the Document is less than one half of the entire   
  aggregate, the Document’s Cover Texts may be placed on covers that bracket the 
    Document within the aggregate, or the electronic equivalent of covers if the 
    Document is in electronic form. Otherwise they must appear on printed covers 
    that bracket the whole aggregate. </P></LI>
  <LI>TRANSLATION   
  <P>Translation is considered a kind of modification, so you may distribute   
  translations of the Document under the terms of section 4. Replacing Invariant 
    Sections with translations requires special permission from their copyright  
   holders, but you may include translations of some or all Invariant Sections 
  in   addition to the original versions of these Invariant Sections. You may 
  include   a translation of this License, and all the license notices in the 
  Document,   and any Warranty Disclaimers, provided that you also include the 
  original   English version of this License and the original versions of those 
  notices and   disclaimers. In case of a disagreement between the translation 
  and the   original version of this License or a notice or disclaimer, the 
  original   version will prevail. </P>
  <P>If a section in the Document is Entitled “Acknowledgements”, “Dedications”, 
    or “History”, the requirement (section 4) to Preserve its Title (section 1)  
   will typically require changing the actual title. </P></LI>
  <LI>TERMINATION   
  <P>You may not copy, modify, sublicense, or distribute the Document except as  
   expressly provided under this License. Any attempt otherwise to copy, modify, 
    sublicense, or distribute it is void, and will automatically terminate your  
   rights under this License. </P>
  <P>However, if you cease all violation of this License, then your license from 
    a particular copyright holder is reinstated (a) provisionally, unless and   
  until the copyright holder explicitly and finally terminates your license, and 
    (b) permanently, if the copyright holder fails to notify you of the 
  violation   by some reasonable means prior to 60 days after the cessation. 
</P>
  <P>Moreover, your license from a particular copyright holder is reinstated   
  permanently if the copyright holder notifies you of the violation by some   
  reasonable means, this is the first time you have received notice of violation 
    of this License (for any work) from that copyright holder, and you cure the  
   violation prior to 30 days after your receipt of the notice. </P>
  <P>Termination of your rights under this section does not terminate the   
  licenses of parties who have received copies or rights from you under this   
  License. If your rights have been terminated and not permanently reinstated,   
  receipt of a copy of some or all of the same material does not give you any   
  rights to use it. </P></LI>
  <LI>FUTURE REVISIONS OF THIS LICENSE   
  <P>The Free Software Foundation may publish new, revised versions of the GNU   
  Free Documentation License from time to time. Such new versions will be   
  similar in spirit to the present version, but may differ in detail to address  
   new problems or concerns. See <A 
  href="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</A>. </P>
  <P>Each version of the License is given a distinguishing version number. If   
  the Document specifies that a particular numbered version of this License “or  
   any later version” applies to it, you have the option of following the terms  
   and conditions either of that specified version or of any later version that  
   has been published (not as a draft) by the Free Software Foundation. If the   
  Document does not specify a version number of this License, you may choose any 
    version ever published (not as a draft) by the Free Software Foundation. If  
   the Document specifies that a proxy can decide which future versions of this  
   License can be used, that proxy’s public statement of acceptance of a version 
    permanently authorizes you to choose that version for the Document. 
</P></LI>
  <LI>RELICENSING   
  <P>“Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World   
  Wide Web server that publishes copyrightable works and also provides prominent 
    facilities for anybody to edit those works. A public wiki that anybody can   
  edit is an example of such a server. A “Massive Multiauthor Collaboration” (or 
    “MMC”) contained in the site means any set of copyrightable works thus   
  published on the MMC site. </P>
  <P>“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license   
  published by Creative Commons Corporation, a not-for-profit corporation with a 
    principal place of business in San Francisco, California, as well as future  
   copyleft versions of that license published by that same organization. </P>
  <P>“Incorporate” means to publish or republish a Document, in whole or in   
  part, as part of another Document. </P>
  <P>An MMC is “eligible for relicensing” if it is licensed under this License,  
   and if all works that were first published under this License somewhere other 
    than this MMC, and subsequently incorporated in whole or in part into the 
  MMC,   (1) had no cover texts or invariant sections, and (2) were thus 
  incorporated   prior to November 1, 2008. </P>
  <P>The operator of an MMC Site may republish an MMC contained in the site   
  under CC-BY-SA on the same site at any time before August 1, 2009, provided   
  the MMC is eligible for relicensing. </P></LI></OL><A name="ADDENDUM_003a-How-to-use-this-License-for-your-documents"></A>
<H3 class="heading">ADDENDUM: How to use this License for your documents</H3>
<P>To use this License in a document you have written, include a copy of the 
 License in the document and put the following copyright and license notices 
just  after the title page: </P>
<DIV class="smallexample"><PRE class="smallexample">  Copyright (C)  <VAR>year</VAR>  <VAR>your name</VAR>.
  Permission is granted to copy, distribute and/or modify
  this document under the terms of the GNU Free
  Documentation License, Version 1.3 or any later version
  published by the Free Software Foundation; with no
  Invariant Sections, no Front-Cover Texts, and no
  Back-Cover Texts.  A copy of the license is included in
  the section entitled ``GNU Free Documentation License''.
</PRE></DIV>
<P>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, 
 replace the “with…Texts.” line with this: </P>
<DIV class="smallexample"><PRE class="smallexample">  with the Invariant Sections being <VAR>list their
  titles</VAR>, with the Front-Cover Texts being <VAR>list</VAR>, and 
  with the Back-Cover Texts being <VAR>list</VAR>.
</PRE></DIV>
<P>If you have Invariant Sections without Cover Texts, or some other combination 
 of the three, merge those two alternatives to suit the situation. </P>
<P>If your document contains nontrivial examples of program code, we recommend 
 releasing these examples in parallel under your choice of free software 
license,  such as the GNU General Public License, to permit their use in free 
software. </P>
<HR>
<A name="Function-Index"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Variable-Index" 
rel="next">Variable Index</A>, Previous: <A accessKey="p" href="#GNU-Free-Documentation-License" 
rel="previous">GNU Free Documentation License</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Function-Index-1"></A>
<H2 class="unnumbered">Function Index</H2>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Function-Index_fn_letter-C"><B>C</B></A> 
            &nbsp; <A class="summary-letter" href="#Function-Index_fn_letter-G"><B>G</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<TABLE class="index-fn" border="0">
  <TBODY>
  <TR>
    <TD></TD>
    <TH align="left">Index Entry</TH>
    <TD>&nbsp;</TD>
    <TH align="left">Section</TH></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Function-Index_fn_letter-C">C</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcaxpy"><CODE>cblas_caxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fccopy"><CODE>cblas_ccopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcdotc_005fsub"><CODE>cblas_cdotc_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcdotu_005fsub"><CODE>cblas_cdotu_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcgbmv"><CODE>cblas_cgbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcgemm"><CODE>cblas_cgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcgemv"><CODE>cblas_cgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcgerc"><CODE>cblas_cgerc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcgeru"><CODE>cblas_cgeru</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fchbmv"><CODE>cblas_chbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fchemm"><CODE>cblas_chemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fchemv"><CODE>cblas_chemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcher"><CODE>cblas_cher</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcher2"><CODE>cblas_cher2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcher2k"><CODE>cblas_cher2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcherk"><CODE>cblas_cherk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fchpmv"><CODE>cblas_chpmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fchpr"><CODE>cblas_chpr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fchpr2"><CODE>cblas_chpr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcscal"><CODE>cblas_cscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcsscal"><CODE>cblas_csscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcswap"><CODE>cblas_cswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcsymm"><CODE>cblas_csymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcsyr2k"><CODE>cblas_csyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fcsyrk"><CODE>cblas_csyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctbmv"><CODE>cblas_ctbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctbsv"><CODE>cblas_ctbsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctpmv"><CODE>cblas_ctpmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctpsv"><CODE>cblas_ctpsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctrmm"><CODE>cblas_ctrmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctrmv"><CODE>cblas_ctrmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctrsm"><CODE>cblas_ctrsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fctrsv"><CODE>cblas_ctrsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdasum"><CODE>cblas_dasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdaxpy"><CODE>cblas_daxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdcopy"><CODE>cblas_dcopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fddot"><CODE>cblas_ddot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdgbmv"><CODE>cblas_dgbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdgemm"><CODE>cblas_dgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdgemv"><CODE>cblas_dgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdger"><CODE>cblas_dger</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdnrm2"><CODE>cblas_dnrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdrot"><CODE>cblas_drot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdrotg"><CODE>cblas_drotg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdrotm"><CODE>cblas_drotm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdrotmg"><CODE>cblas_drotmg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsbmv"><CODE>cblas_dsbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdscal"><CODE>cblas_dscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsdot"><CODE>cblas_dsdot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdspmv"><CODE>cblas_dspmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdspr"><CODE>cblas_dspr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdspr2"><CODE>cblas_dspr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdswap"><CODE>cblas_dswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsymm"><CODE>cblas_dsymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsymv"><CODE>cblas_dsymv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsyr"><CODE>cblas_dsyr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsyr2"><CODE>cblas_dsyr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsyr2k"><CODE>cblas_dsyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdsyrk"><CODE>cblas_dsyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtbmv"><CODE>cblas_dtbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtbsv"><CODE>cblas_dtbsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtpmv"><CODE>cblas_dtpmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtpsv"><CODE>cblas_dtpsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtrmm"><CODE>cblas_dtrmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtrmv"><CODE>cblas_dtrmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtrsm"><CODE>cblas_dtrsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdtrsv"><CODE>cblas_dtrsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdzasum"><CODE>cblas_dzasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fdznrm2"><CODE>cblas_dznrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005ficamax"><CODE>cblas_icamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fidamax"><CODE>cblas_idamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fisamax"><CODE>cblas_isamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fizamax"><CODE>cblas_izamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsasum"><CODE>cblas_sasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsaxpy"><CODE>cblas_saxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fscasum"><CODE>cblas_scasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fscnrm2"><CODE>cblas_scnrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fscopy"><CODE>cblas_scopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsdot"><CODE>cblas_sdot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsdsdot"><CODE>cblas_sdsdot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsgbmv"><CODE>cblas_sgbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsgemm"><CODE>cblas_sgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsgemv"><CODE>cblas_sgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsger"><CODE>cblas_sger</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsnrm2"><CODE>cblas_snrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsrot"><CODE>cblas_srot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsrotg"><CODE>cblas_srotg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsrotm"><CODE>cblas_srotm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsrotmg"><CODE>cblas_srotmg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssbmv"><CODE>cblas_ssbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsscal"><CODE>cblas_sscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsspmv"><CODE>cblas_sspmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsspr"><CODE>cblas_sspr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsspr2"><CODE>cblas_sspr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fsswap"><CODE>cblas_sswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssymm"><CODE>cblas_ssymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssymv"><CODE>cblas_ssymv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssyr"><CODE>cblas_ssyr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssyr2"><CODE>cblas_ssyr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssyr2k"><CODE>cblas_ssyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fssyrk"><CODE>cblas_ssyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstbmv"><CODE>cblas_stbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstbsv"><CODE>cblas_stbsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstpmv"><CODE>cblas_stpmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstpsv"><CODE>cblas_stpsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstrmm"><CODE>cblas_strmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstrmv"><CODE>cblas_strmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstrsm"><CODE>cblas_strsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fstrsv"><CODE>cblas_strsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fxerbla"><CODE>cblas_xerbla</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzaxpy"><CODE>cblas_zaxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzcopy"><CODE>cblas_zcopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzdotc_005fsub"><CODE>cblas_zdotc_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzdotu_005fsub"><CODE>cblas_zdotu_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzdscal"><CODE>cblas_zdscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzgbmv"><CODE>cblas_zgbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzgemm"><CODE>cblas_zgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzgemv"><CODE>cblas_zgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzgerc"><CODE>cblas_zgerc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzgeru"><CODE>cblas_zgeru</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzhbmv"><CODE>cblas_zhbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzhemm"><CODE>cblas_zhemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzhemv"><CODE>cblas_zhemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzher"><CODE>cblas_zher</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzher2"><CODE>cblas_zher2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzher2k"><CODE>cblas_zher2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzherk"><CODE>cblas_zherk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzhpmv"><CODE>cblas_zhpmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzhpr"><CODE>cblas_zhpr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzhpr2"><CODE>cblas_zhpr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzscal"><CODE>cblas_zscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzswap"><CODE>cblas_zswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-CBLAS-Functions">Level 
            1 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzsymm"><CODE>cblas_zsymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzsyr2k"><CODE>cblas_zsyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fzsyrk"><CODE>cblas_zsyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztbmv"><CODE>cblas_ztbmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztbsv"><CODE>cblas_ztbsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztpmv"><CODE>cblas_ztpmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztpsv"><CODE>cblas_ztpsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztrmm"><CODE>cblas_ztrmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztrmv"><CODE>cblas_ztrmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztrsm"><CODE>cblas_ztrsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-CBLAS-Functions">Level 
            3 CBLAS Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cblas_005fztrsv"><CODE>cblas_ztrsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-CBLAS-Functions">Level 
            2 CBLAS Functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Function-Index_fn_letter-G">G</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005facosh"><CODE>gsl_acosh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fasinh"><CODE>gsl_asinh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fatanh"><CODE>gsl_atanh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcaxpy"><CODE>gsl_blas_caxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fccopy"><CODE>gsl_blas_ccopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcdotc"><CODE>gsl_blas_cdotc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcdotu"><CODE>gsl_blas_cdotu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcgemm"><CODE>gsl_blas_cgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcgemv"><CODE>gsl_blas_cgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcgerc"><CODE>gsl_blas_cgerc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcgeru"><CODE>gsl_blas_cgeru</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fchemm"><CODE>gsl_blas_chemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fchemv"><CODE>gsl_blas_chemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcher"><CODE>gsl_blas_cher</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcher2"><CODE>gsl_blas_cher2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcher2k"><CODE>gsl_blas_cher2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcherk"><CODE>gsl_blas_cherk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcscal"><CODE>gsl_blas_cscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcsscal"><CODE>gsl_blas_csscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcswap"><CODE>gsl_blas_cswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcsymm"><CODE>gsl_blas_csymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcsyr2k"><CODE>gsl_blas_csyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fcsyrk"><CODE>gsl_blas_csyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fctrmm"><CODE>gsl_blas_ctrmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fctrmv"><CODE>gsl_blas_ctrmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fctrsm"><CODE>gsl_blas_ctrsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fctrsv"><CODE>gsl_blas_ctrsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdasum"><CODE>gsl_blas_dasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdaxpy"><CODE>gsl_blas_daxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdcopy"><CODE>gsl_blas_dcopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fddot"><CODE>gsl_blas_ddot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdgemm"><CODE>gsl_blas_dgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdgemv"><CODE>gsl_blas_dgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdger"><CODE>gsl_blas_dger</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdnrm2"><CODE>gsl_blas_dnrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdrot"><CODE>gsl_blas_drot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdrotg"><CODE>gsl_blas_drotg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdrotm"><CODE>gsl_blas_drotm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdrotmg"><CODE>gsl_blas_drotmg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdscal"><CODE>gsl_blas_dscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsdot"><CODE>gsl_blas_dsdot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdswap"><CODE>gsl_blas_dswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsymm"><CODE>gsl_blas_dsymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsymv"><CODE>gsl_blas_dsymv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsyr"><CODE>gsl_blas_dsyr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsyr2"><CODE>gsl_blas_dsyr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsyr2k"><CODE>gsl_blas_dsyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdsyrk"><CODE>gsl_blas_dsyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdtrmm"><CODE>gsl_blas_dtrmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdtrmv"><CODE>gsl_blas_dtrmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdtrsm"><CODE>gsl_blas_dtrsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdtrsv"><CODE>gsl_blas_dtrsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdzasum"><CODE>gsl_blas_dzasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fdznrm2"><CODE>gsl_blas_dznrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005ficamax"><CODE>gsl_blas_icamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fidamax"><CODE>gsl_blas_idamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fisamax"><CODE>gsl_blas_isamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fizamax"><CODE>gsl_blas_izamax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsasum"><CODE>gsl_blas_sasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsaxpy"><CODE>gsl_blas_saxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fscasum"><CODE>gsl_blas_scasum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fscnrm2"><CODE>gsl_blas_scnrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fscopy"><CODE>gsl_blas_scopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsdot"><CODE>gsl_blas_sdot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsdsdot"><CODE>gsl_blas_sdsdot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsgemm"><CODE>gsl_blas_sgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsgemv"><CODE>gsl_blas_sgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsger"><CODE>gsl_blas_sger</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsnrm2"><CODE>gsl_blas_snrm2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsrot"><CODE>gsl_blas_srot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsrotg"><CODE>gsl_blas_srotg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsrotm"><CODE>gsl_blas_srotm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsrotmg"><CODE>gsl_blas_srotmg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsscal"><CODE>gsl_blas_sscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fsswap"><CODE>gsl_blas_sswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fssymm"><CODE>gsl_blas_ssymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fssymv"><CODE>gsl_blas_ssymv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fssyr"><CODE>gsl_blas_ssyr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fssyr2"><CODE>gsl_blas_ssyr2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fssyr2k"><CODE>gsl_blas_ssyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fssyrk"><CODE>gsl_blas_ssyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fstrmm"><CODE>gsl_blas_strmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fstrmv"><CODE>gsl_blas_strmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fstrsm"><CODE>gsl_blas_strsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fstrsv"><CODE>gsl_blas_strsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzaxpy"><CODE>gsl_blas_zaxpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzcopy"><CODE>gsl_blas_zcopy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzdotc"><CODE>gsl_blas_zdotc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzdotu"><CODE>gsl_blas_zdotu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzdscal"><CODE>gsl_blas_zdscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzgemm"><CODE>gsl_blas_zgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzgemv"><CODE>gsl_blas_zgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzgerc"><CODE>gsl_blas_zgerc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzgeru"><CODE>gsl_blas_zgeru</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzhemm"><CODE>gsl_blas_zhemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzhemv"><CODE>gsl_blas_zhemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzher"><CODE>gsl_blas_zher</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzher2"><CODE>gsl_blas_zher2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzher2k"><CODE>gsl_blas_zher2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzherk"><CODE>gsl_blas_zherk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzscal"><CODE>gsl_blas_zscal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzswap"><CODE>gsl_blas_zswap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzsymm"><CODE>gsl_blas_zsymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzsyr2k"><CODE>gsl_blas_zsyr2k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fzsyrk"><CODE>gsl_blas_zsyrk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fztrmm"><CODE>gsl_blas_ztrmm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fztrmv"><CODE>gsl_blas_ztrmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fztrsm"><CODE>gsl_blas_ztrsm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblas_005fztrsv"><CODE>gsl_blas_ztrsv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005falloc"><CODE>gsl_block_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Block-allocation">Block 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005fcalloc"><CODE>gsl_block_calloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Block-allocation">Block 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005ffprintf"><CODE>gsl_block_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-blocks">Reading 
            and writing blocks</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005ffread"><CODE>gsl_block_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-blocks">Reading 
            and writing blocks</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005ffree"><CODE>gsl_block_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Block-allocation">Block 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005ffscanf"><CODE>gsl_block_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-blocks">Reading 
            and writing blocks</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock_005ffwrite"><CODE>gsl_block_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-blocks">Reading 
            and writing blocks</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005falloc"><CODE>gsl_bspline_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-B_002dsplines-solver">Initializing 
            the B-splines solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fderiv_005feval"><CODE>gsl_bspline_deriv_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-function-derivatives">Evaluation 
            of B-spline basis function derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fderiv_005feval_005fnonzero"><CODE>gsl_bspline_deriv_eval_nonzero</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-function-derivatives">Evaluation 
            of B-spline basis function derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005feval"><CODE>gsl_bspline_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-functions">Evaluation 
            of B-spline basis functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005feval_005fnonzero"><CODE>gsl_bspline_eval_nonzero</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-functions">Evaluation 
            of B-spline basis functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005ffree"><CODE>gsl_bspline_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-B_002dsplines-solver">Initializing 
            the B-splines solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fgreville_005fabscissa"><CODE>gsl_bspline_greville_abscissa</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Working-with-the-Greville-abscissae">Working 
            with the Greville abscissae</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fknots"><CODE>gsl_bspline_knots</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Constructing-the-knots-vector">Constructing 
            the knots vector</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fknots_005funiform"><CODE>gsl_bspline_knots_uniform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Constructing-the-knots-vector">Constructing 
            the knots vector</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fncoeffs"><CODE>gsl_bspline_ncoeffs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-functions">Evaluation 
            of B-spline basis functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fbeta_005fP"><CODE>gsl_cdf_beta_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fbeta_005fPinv"><CODE>gsl_cdf_beta_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fbeta_005fQ"><CODE>gsl_cdf_beta_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fbeta_005fQinv"><CODE>gsl_cdf_beta_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fbinomial_005fP"><CODE>gsl_cdf_binomial_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Binomial-Distribution">The 
            Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fbinomial_005fQ"><CODE>gsl_cdf_binomial_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Binomial-Distribution">The 
            Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fcauchy_005fP"><CODE>gsl_cdf_cauchy_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fcauchy_005fPinv"><CODE>gsl_cdf_cauchy_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fcauchy_005fQ"><CODE>gsl_cdf_cauchy_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fcauchy_005fQinv"><CODE>gsl_cdf_cauchy_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fchisq_005fP"><CODE>gsl_cdf_chisq_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fchisq_005fPinv"><CODE>gsl_cdf_chisq_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fchisq_005fQ"><CODE>gsl_cdf_chisq_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fchisq_005fQinv"><CODE>gsl_cdf_chisq_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fexponential_005fP"><CODE>gsl_cdf_exponential_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fexponential_005fPinv"><CODE>gsl_cdf_exponential_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fexponential_005fQ"><CODE>gsl_cdf_exponential_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fexponential_005fQinv"><CODE>gsl_cdf_exponential_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fexppow_005fP"><CODE>gsl_cdf_exppow_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Power-Distribution">The 
            Exponential Power Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fexppow_005fQ"><CODE>gsl_cdf_exppow_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Power-Distribution">The 
            Exponential Power Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ffdist_005fP"><CODE>gsl_cdf_fdist_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ffdist_005fPinv"><CODE>gsl_cdf_fdist_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ffdist_005fQ"><CODE>gsl_cdf_fdist_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ffdist_005fQinv"><CODE>gsl_cdf_fdist_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fflat_005fP"><CODE>gsl_cdf_flat_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fflat_005fPinv"><CODE>gsl_cdf_flat_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fflat_005fQ"><CODE>gsl_cdf_flat_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fflat_005fQinv"><CODE>gsl_cdf_flat_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgamma_005fP"><CODE>gsl_cdf_gamma_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgamma_005fPinv"><CODE>gsl_cdf_gamma_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgamma_005fQ"><CODE>gsl_cdf_gamma_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgamma_005fQinv"><CODE>gsl_cdf_gamma_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgaussian_005fP"><CODE>gsl_cdf_gaussian_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgaussian_005fPinv"><CODE>gsl_cdf_gaussian_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgaussian_005fQ"><CODE>gsl_cdf_gaussian_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgaussian_005fQinv"><CODE>gsl_cdf_gaussian_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgeometric_005fP"><CODE>gsl_cdf_geometric_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Geometric-Distribution">The 
            Geometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgeometric_005fQ"><CODE>gsl_cdf_geometric_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Geometric-Distribution">The 
            Geometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel1_005fP"><CODE>gsl_cdf_gumbel1_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel1_005fPinv"><CODE>gsl_cdf_gumbel1_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel1_005fQ"><CODE>gsl_cdf_gumbel1_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel1_005fQinv"><CODE>gsl_cdf_gumbel1_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel2_005fP"><CODE>gsl_cdf_gumbel2_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel2_005fPinv"><CODE>gsl_cdf_gumbel2_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel2_005fQ"><CODE>gsl_cdf_gumbel2_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fgumbel2_005fQinv"><CODE>gsl_cdf_gumbel2_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fhypergeometric_005fP"><CODE>gsl_cdf_hypergeometric_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fhypergeometric_005fQ"><CODE>gsl_cdf_hypergeometric_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flaplace_005fP"><CODE>gsl_cdf_laplace_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flaplace_005fPinv"><CODE>gsl_cdf_laplace_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flaplace_005fQ"><CODE>gsl_cdf_laplace_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flaplace_005fQinv"><CODE>gsl_cdf_laplace_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flogistic_005fP"><CODE>gsl_cdf_logistic_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flogistic_005fPinv"><CODE>gsl_cdf_logistic_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flogistic_005fQ"><CODE>gsl_cdf_logistic_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flogistic_005fQinv"><CODE>gsl_cdf_logistic_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flognormal_005fP"><CODE>gsl_cdf_lognormal_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flognormal_005fPinv"><CODE>gsl_cdf_lognormal_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flognormal_005fQ"><CODE>gsl_cdf_lognormal_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005flognormal_005fQinv"><CODE>gsl_cdf_lognormal_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fnegative_005fbinomial_005fP"><CODE>gsl_cdf_negative_binomial_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Negative-Binomial-Distribution">The 
            Negative Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fnegative_005fbinomial_005fQ"><CODE>gsl_cdf_negative_binomial_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Negative-Binomial-Distribution">The 
            Negative Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpareto_005fP"><CODE>gsl_cdf_pareto_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpareto_005fPinv"><CODE>gsl_cdf_pareto_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpareto_005fQ"><CODE>gsl_cdf_pareto_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpareto_005fQinv"><CODE>gsl_cdf_pareto_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpascal_005fP"><CODE>gsl_cdf_pascal_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pascal-Distribution">The 
            Pascal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpascal_005fQ"><CODE>gsl_cdf_pascal_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pascal-Distribution">The 
            Pascal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpoisson_005fP"><CODE>gsl_cdf_poisson_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Poisson-Distribution">The 
            Poisson Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fpoisson_005fQ"><CODE>gsl_cdf_poisson_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Poisson-Distribution">The 
            Poisson Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005frayleigh_005fP"><CODE>gsl_cdf_rayleigh_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005frayleigh_005fPinv"><CODE>gsl_cdf_rayleigh_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005frayleigh_005fQ"><CODE>gsl_cdf_rayleigh_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005frayleigh_005fQinv"><CODE>gsl_cdf_rayleigh_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ftdist_005fP"><CODE>gsl_cdf_tdist_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ftdist_005fPinv"><CODE>gsl_cdf_tdist_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ftdist_005fQ"><CODE>gsl_cdf_tdist_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005ftdist_005fQinv"><CODE>gsl_cdf_tdist_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fugaussian_005fP"><CODE>gsl_cdf_ugaussian_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fugaussian_005fPinv"><CODE>gsl_cdf_ugaussian_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fugaussian_005fQ"><CODE>gsl_cdf_ugaussian_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fugaussian_005fQinv"><CODE>gsl_cdf_ugaussian_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fweibull_005fP"><CODE>gsl_cdf_weibull_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fweibull_005fPinv"><CODE>gsl_cdf_weibull_Pinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fweibull_005fQ"><CODE>gsl_cdf_weibull_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcdf_005fweibull_005fQinv"><CODE>gsl_cdf_weibull_Qinv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005falloc"><CODE>gsl_cheb_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creation-and-Calculation-of-Chebyshev-Series">Creation 
            and Calculation of Chebyshev Series</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005fcalc_005fderiv"><CODE>gsl_cheb_calc_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-and-Integrals">Derivatives 
            and Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005fcalc_005finteg"><CODE>gsl_cheb_calc_integ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-and-Integrals">Derivatives 
            and Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005fcoeffs"><CODE>gsl_cheb_coeffs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-Functions-for-Chebyshev-Series">Auxiliary 
            Functions for Chebyshev Series</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005feval"><CODE>gsl_cheb_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Series-Evaluation">Chebyshev 
            Series Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005feval_005ferr"><CODE>gsl_cheb_eval_err</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Series-Evaluation">Chebyshev 
            Series Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005feval_005fn"><CODE>gsl_cheb_eval_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Series-Evaluation">Chebyshev 
            Series Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005feval_005fn_005ferr"><CODE>gsl_cheb_eval_n_err</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Series-Evaluation">Chebyshev 
            Series Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005ffree"><CODE>gsl_cheb_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creation-and-Calculation-of-Chebyshev-Series">Creation 
            and Calculation of Chebyshev Series</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005finit"><CODE>gsl_cheb_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creation-and-Calculation-of-Chebyshev-Series">Creation 
            and Calculation of Chebyshev Series</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005forder"><CODE>gsl_cheb_order</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-Functions-for-Chebyshev-Series">Auxiliary 
            Functions for Chebyshev Series</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005fsize"><CODE>gsl_cheb_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-Functions-for-Chebyshev-Series">Auxiliary 
            Functions for Chebyshev Series</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005falloc"><CODE>gsl_combination_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-allocation">Combination 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fcalloc"><CODE>gsl_combination_calloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-allocation">Combination 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fdata"><CODE>gsl_combination_data</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-properties">Combination 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005ffprintf"><CODE>gsl_combination_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-combinations">Reading 
            and writing combinations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005ffread"><CODE>gsl_combination_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-combinations">Reading 
            and writing combinations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005ffree"><CODE>gsl_combination_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-allocation">Combination 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005ffscanf"><CODE>gsl_combination_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-combinations">Reading 
            and writing combinations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005ffwrite"><CODE>gsl_combination_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-combinations">Reading 
            and writing combinations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fget"><CODE>gsl_combination_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-combination-elements">Accessing 
            combination elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005finit_005ffirst"><CODE>gsl_combination_init_first</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-allocation">Combination 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005finit_005flast"><CODE>gsl_combination_init_last</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-allocation">Combination 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fk"><CODE>gsl_combination_k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-properties">Combination 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fmemcpy"><CODE>gsl_combination_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-allocation">Combination 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fn"><CODE>gsl_combination_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-properties">Combination 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fnext"><CODE>gsl_combination_next</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-functions">Combination 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fprev"><CODE>gsl_combination_prev</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-functions">Combination 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination_005fvalid"><CODE>gsl_combination_valid</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-properties">Combination 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fabs"><CODE>gsl_complex_abs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fabs2"><CODE>gsl_complex_abs2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fadd"><CODE>gsl_complex_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fadd_005fimag"><CODE>gsl_complex_add_imag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fadd_005freal"><CODE>gsl_complex_add_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccos"><CODE>gsl_complex_arccos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccosh"><CODE>gsl_complex_arccosh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccosh_005freal"><CODE>gsl_complex_arccosh_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccos_005freal"><CODE>gsl_complex_arccos_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccot"><CODE>gsl_complex_arccot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccoth"><CODE>gsl_complex_arccoth</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccsc"><CODE>gsl_complex_arccsc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccsch"><CODE>gsl_complex_arccsch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farccsc_005freal"><CODE>gsl_complex_arccsc_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farcsec"><CODE>gsl_complex_arcsec</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farcsech"><CODE>gsl_complex_arcsech</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farcsec_005freal"><CODE>gsl_complex_arcsec_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farcsin"><CODE>gsl_complex_arcsin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farcsinh"><CODE>gsl_complex_arcsinh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farcsin_005freal"><CODE>gsl_complex_arcsin_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farctan"><CODE>gsl_complex_arctan</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farctanh"><CODE>gsl_complex_arctanh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farctanh_005freal"><CODE>gsl_complex_arctanh_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005farg"><CODE>gsl_complex_arg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fconjugate"><CODE>gsl_complex_conjugate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fcos"><CODE>gsl_complex_cos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fcosh"><CODE>gsl_complex_cosh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fcot"><CODE>gsl_complex_cot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fcoth"><CODE>gsl_complex_coth</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fcsc"><CODE>gsl_complex_csc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fcsch"><CODE>gsl_complex_csch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fdiv"><CODE>gsl_complex_div</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fdiv_005fimag"><CODE>gsl_complex_div_imag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fdiv_005freal"><CODE>gsl_complex_div_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fexp"><CODE>gsl_complex_exp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005finverse"><CODE>gsl_complex_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005flog"><CODE>gsl_complex_log</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005flog10"><CODE>gsl_complex_log10</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005flogabs"><CODE>gsl_complex_logabs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005flog_005fb"><CODE>gsl_complex_log_b</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fmul"><CODE>gsl_complex_mul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fmul_005fimag"><CODE>gsl_complex_mul_imag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fmul_005freal"><CODE>gsl_complex_mul_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fnegative"><CODE>gsl_complex_negative</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fpolar"><CODE>gsl_complex_polar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fpoly_005fcomplex_005feval"><CODE>gsl_complex_poly_complex_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fpow"><CODE>gsl_complex_pow</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fpow_005freal"><CODE>gsl_complex_pow_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005frect"><CODE>gsl_complex_rect</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsec"><CODE>gsl_complex_sec</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsech"><CODE>gsl_complex_sech</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsin"><CODE>gsl_complex_sin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsinh"><CODE>gsl_complex_sinh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsqrt"><CODE>gsl_complex_sqrt</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsqrt_005freal"><CODE>gsl_complex_sqrt_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsub"><CODE>gsl_complex_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsub_005fimag"><CODE>gsl_complex_sub_imag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005fsub_005freal"><CODE>gsl_complex_sub_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005ftan"><CODE>gsl_complex_tan</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex_005ftanh"><CODE>gsl_complex_tanh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fderiv_005fbackward"><CODE>gsl_deriv_backward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation-functions">Numerical 
            Differentiation functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fderiv_005fcentral"><CODE>gsl_deriv_central</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation-functions">Numerical 
            Differentiation functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fderiv_005fforward"><CODE>gsl_deriv_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation-functions">Numerical 
            Differentiation functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005falloc"><CODE>gsl_dht_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005fapply"><CODE>gsl_dht_apply</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005ffree"><CODE>gsl_dht_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005finit"><CODE>gsl_dht_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005fk_005fsample"><CODE>gsl_dht_k_sample</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005fnew"><CODE>gsl_dht_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht_005fx_005fsample"><CODE>gsl_dht_x_sample</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgen"><CODE>gsl_eigen_gen</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenherm"><CODE>gsl_eigen_genherm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenhermv"><CODE>gsl_eigen_genhermv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenhermv_005falloc"><CODE>gsl_eigen_genhermv_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenhermv_005ffree"><CODE>gsl_eigen_genhermv_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenhermv_005fsort"><CODE>gsl_eigen_genhermv_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenherm_005falloc"><CODE>gsl_eigen_genherm_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenherm_005ffree"><CODE>gsl_eigen_genherm_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymm"><CODE>gsl_eigen_gensymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymmv"><CODE>gsl_eigen_gensymmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymmv_005falloc"><CODE>gsl_eigen_gensymmv_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymmv_005ffree"><CODE>gsl_eigen_gensymmv_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymmv_005fsort"><CODE>gsl_eigen_gensymmv_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymm_005falloc"><CODE>gsl_eigen_gensymm_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymm_005ffree"><CODE>gsl_eigen_gensymm_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenv"><CODE>gsl_eigen_genv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenv_005falloc"><CODE>gsl_eigen_genv_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenv_005ffree"><CODE>gsl_eigen_genv_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenv_005fQZ"><CODE>gsl_eigen_genv_QZ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenv_005fsort"><CODE>gsl_eigen_genv_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgen_005falloc"><CODE>gsl_eigen_gen_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgen_005ffree"><CODE>gsl_eigen_gen_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgen_005fparams"><CODE>gsl_eigen_gen_params</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgen_005fQZ"><CODE>gsl_eigen_gen_QZ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fherm"><CODE>gsl_eigen_herm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fhermv"><CODE>gsl_eigen_hermv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fhermv_005falloc"><CODE>gsl_eigen_hermv_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fhermv_005ffree"><CODE>gsl_eigen_hermv_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fhermv_005fsort"><CODE>gsl_eigen_hermv_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fherm_005falloc"><CODE>gsl_eigen_herm_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fherm_005ffree"><CODE>gsl_eigen_herm_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymm"><CODE>gsl_eigen_nonsymm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv"><CODE>gsl_eigen_nonsymmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv_005falloc"><CODE>gsl_eigen_nonsymmv_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv_005ffree"><CODE>gsl_eigen_nonsymmv_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv_005fparams"><CODE>gsl_eigen_nonsymmv_params</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv_005fsort"><CODE>gsl_eigen_nonsymmv_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv_005fZ"><CODE>gsl_eigen_nonsymmv_Z</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymm_005falloc"><CODE>gsl_eigen_nonsymm_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymm_005ffree"><CODE>gsl_eigen_nonsymm_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymm_005fparams"><CODE>gsl_eigen_nonsymm_params</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymm_005fZ"><CODE>gsl_eigen_nonsymm_Z</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymm"><CODE>gsl_eigen_symm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymmv"><CODE>gsl_eigen_symmv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymmv_005falloc"><CODE>gsl_eigen_symmv_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymmv_005ffree"><CODE>gsl_eigen_symmv_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymmv_005fsort"><CODE>gsl_eigen_symmv_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymm_005falloc"><CODE>gsl_eigen_symm_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymm_005ffree"><CODE>gsl_eigen_symm_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fERROR"><CODE>GSL_ERROR</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-GSL-error-reporting-in-your-own-functions">Using 
            GSL error reporting in your own functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fERROR_005fVAL"><CODE>GSL_ERROR_VAL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-GSL-error-reporting-in-your-own-functions">Using 
            GSL error reporting in your own functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fexpm1"><CODE>gsl_expm1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffcmp"><CODE>gsl_fcmp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Approximate-Comparison-of-Floating-Point-Numbers">Approximate 
            Comparison of Floating Point Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fbackward"><CODE>gsl_fft_complex_backward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fforward"><CODE>gsl_fft_complex_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005finverse"><CODE>gsl_fft_complex_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005fbackward"><CODE>gsl_fft_complex_radix2_backward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005fbackward"><CODE>gsl_fft_complex_radix2_dif_backward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005fforward"><CODE>gsl_fft_complex_radix2_dif_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005finverse"><CODE>gsl_fft_complex_radix2_dif_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005fdif_005ftransform"><CODE>gsl_fft_complex_radix2_dif_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005fforward"><CODE>gsl_fft_complex_radix2_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005finverse"><CODE>gsl_fft_complex_radix2_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fradix2_005ftransform"><CODE>gsl_fft_complex_radix2_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005ftransform"><CODE>gsl_fft_complex_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fwavetable_005falloc"><CODE>gsl_fft_complex_wavetable_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fwavetable_005ffree"><CODE>gsl_fft_complex_wavetable_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fworkspace_005falloc"><CODE>gsl_fft_complex_workspace_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fworkspace_005ffree"><CODE>gsl_fft_complex_workspace_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005fradix2_005fbackward"><CODE>gsl_fft_halfcomplex_radix2_backward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005fradix2_005finverse"><CODE>gsl_fft_halfcomplex_radix2_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005fradix2_005funpack"><CODE>gsl_fft_halfcomplex_radix2_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005ftransform"><CODE>gsl_fft_halfcomplex_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005funpack"><CODE>gsl_fft_halfcomplex_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005fwavetable_005falloc"><CODE>gsl_fft_halfcomplex_wavetable_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005fwavetable_005ffree"><CODE>gsl_fft_halfcomplex_wavetable_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fradix2_005ftransform"><CODE>gsl_fft_real_radix2_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005ftransform"><CODE>gsl_fft_real_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005funpack"><CODE>gsl_fft_real_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fwavetable_005falloc"><CODE>gsl_fft_real_wavetable_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fwavetable_005ffree"><CODE>gsl_fft_real_wavetable_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fworkspace_005falloc"><CODE>gsl_fft_real_workspace_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fworkspace_005ffree"><CODE>gsl_fft_real_workspace_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffinite"><CODE>gsl_finite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffit_005flinear"><CODE>gsl_fit_linear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-with-a-constant-term">Linear 
            regression with a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffit_005flinear_005fest"><CODE>gsl_fit_linear_est</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-with-a-constant-term">Linear 
            regression with a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffit_005fmul"><CODE>gsl_fit_mul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-without-a-constant-term">Linear 
            regression without a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffit_005fmul_005fest"><CODE>gsl_fit_mul_est</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-without-a-constant-term">Linear 
            regression without a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffit_005fwlinear"><CODE>gsl_fit_wlinear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-with-a-constant-term">Linear 
            regression with a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffit_005fwmul"><CODE>gsl_fit_wmul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-without-a-constant-term">Linear 
            regression without a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffrexp"><CODE>gsl_frexp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fheapsort"><CODE>gsl_heapsort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-objects">Sorting 
            objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fheapsort_005findex"><CODE>gsl_heapsort_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-objects">Sorting 
            objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005faccumulate"><CODE>gsl_histogram2d_accumulate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fadd"><CODE>gsl_histogram2d_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005falloc"><CODE>gsl_histogram2d_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-allocation">2D 
            Histogram allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fclone"><CODE>gsl_histogram2d_clone</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-2D-Histograms">Copying 
            2D Histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fcov"><CODE>gsl_histogram2d_cov</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fdiv"><CODE>gsl_histogram2d_div</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fequal_005fbins_005fp"><CODE>gsl_histogram2d_equal_bins_p</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005ffind"><CODE>gsl_histogram2d_find</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Searching-2D-histogram-ranges">Searching 
            2D histogram ranges</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005ffprintf"><CODE>gsl_histogram2d_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-2D-histograms">Reading 
            and writing 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005ffread"><CODE>gsl_histogram2d_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-2D-histograms">Reading 
            and writing 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005ffree"><CODE>gsl_histogram2d_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-allocation">2D 
            Histogram allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005ffscanf"><CODE>gsl_histogram2d_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-2D-histograms">Reading 
            and writing 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005ffwrite"><CODE>gsl_histogram2d_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-2D-histograms">Reading 
            and writing 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fget"><CODE>gsl_histogram2d_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fget_005fxrange"><CODE>gsl_histogram2d_get_xrange</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fget_005fyrange"><CODE>gsl_histogram2d_get_yrange</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fincrement"><CODE>gsl_histogram2d_increment</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fmax_005fbin"><CODE>gsl_histogram2d_max_bin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fmax_005fval"><CODE>gsl_histogram2d_max_val</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fmemcpy"><CODE>gsl_histogram2d_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-2D-Histograms">Copying 
            2D Histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fmin_005fbin"><CODE>gsl_histogram2d_min_bin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fmin_005fval"><CODE>gsl_histogram2d_min_val</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fmul"><CODE>gsl_histogram2d_mul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fnx"><CODE>gsl_histogram2d_nx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fny"><CODE>gsl_histogram2d_ny</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fpdf_005falloc"><CODE>gsl_histogram2d_pdf_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-2D-histograms">Resampling 
            from 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fpdf_005ffree"><CODE>gsl_histogram2d_pdf_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-2D-histograms">Resampling 
            from 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fpdf_005finit"><CODE>gsl_histogram2d_pdf_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-2D-histograms">Resampling 
            from 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fpdf_005fsample"><CODE>gsl_histogram2d_pdf_sample</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-2D-histograms">Resampling 
            from 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005freset"><CODE>gsl_histogram2d_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fscale"><CODE>gsl_histogram2d_scale</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fset_005franges"><CODE>gsl_histogram2d_set_ranges</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-allocation">2D 
            Histogram allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fset_005franges_005funiform"><CODE>gsl_histogram2d_set_ranges_uniform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-allocation">2D 
            Histogram allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fshift"><CODE>gsl_histogram2d_shift</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fsub"><CODE>gsl_histogram2d_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Operations">2D 
            Histogram Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fsum"><CODE>gsl_histogram2d_sum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fxmax"><CODE>gsl_histogram2d_xmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fxmean"><CODE>gsl_histogram2d_xmean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fxmin"><CODE>gsl_histogram2d_xmin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fxsigma"><CODE>gsl_histogram2d_xsigma</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fymax"><CODE>gsl_histogram2d_ymax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fymean"><CODE>gsl_histogram2d_ymean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fymin"><CODE>gsl_histogram2d_ymin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-2D-histogram-elements">Updating 
            and accessing 2D histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fysigma"><CODE>gsl_histogram2d_ysigma</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Histogram-Statistics">2D 
            Histogram Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005faccumulate"><CODE>gsl_histogram_accumulate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fadd"><CODE>gsl_histogram_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005falloc"><CODE>gsl_histogram_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-allocation">Histogram 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fbins"><CODE>gsl_histogram_bins</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fclone"><CODE>gsl_histogram_clone</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-Histograms">Copying 
            Histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fdiv"><CODE>gsl_histogram_div</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fequal_005fbins_005fp"><CODE>gsl_histogram_equal_bins_p</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005ffind"><CODE>gsl_histogram_find</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Searching-histogram-ranges">Searching 
            histogram ranges</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005ffprintf"><CODE>gsl_histogram_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-histograms">Reading 
            and writing histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005ffread"><CODE>gsl_histogram_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-histograms">Reading 
            and writing histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005ffree"><CODE>gsl_histogram_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-allocation">Histogram 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005ffscanf"><CODE>gsl_histogram_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-histograms">Reading 
            and writing histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005ffwrite"><CODE>gsl_histogram_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-histograms">Reading 
            and writing histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fget"><CODE>gsl_histogram_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fget_005frange"><CODE>gsl_histogram_get_range</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fincrement"><CODE>gsl_histogram_increment</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmax"><CODE>gsl_histogram_max</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmax_005fbin"><CODE>gsl_histogram_max_bin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmax_005fval"><CODE>gsl_histogram_max_val</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmean"><CODE>gsl_histogram_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmemcpy"><CODE>gsl_histogram_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-Histograms">Copying 
            Histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmin"><CODE>gsl_histogram_min</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmin_005fbin"><CODE>gsl_histogram_min_bin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmin_005fval"><CODE>gsl_histogram_min_val</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fmul"><CODE>gsl_histogram_mul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fpdf_005falloc"><CODE>gsl_histogram_pdf_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fpdf_005ffree"><CODE>gsl_histogram_pdf_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fpdf_005finit"><CODE>gsl_histogram_pdf_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fpdf_005fsample"><CODE>gsl_histogram_pdf_sample</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005freset"><CODE>gsl_histogram_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Updating-and-accessing-histogram-elements">Updating 
            and accessing histogram elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fscale"><CODE>gsl_histogram_scale</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fset_005franges"><CODE>gsl_histogram_set_ranges</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-allocation">Histogram 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fset_005franges_005funiform"><CODE>gsl_histogram_set_ranges_uniform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-allocation">Histogram 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fshift"><CODE>gsl_histogram_shift</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fsigma"><CODE>gsl_histogram_sigma</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fsub"><CODE>gsl_histogram_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Operations">Histogram 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fsum"><CODE>gsl_histogram_sum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhypot"><CODE>gsl_hypot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhypot3"><CODE>gsl_hypot3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fieee_005fenv_005fsetup"><CODE>gsl_ieee_env_setup</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fieee_005ffprintf_005fdouble"><CODE>gsl_ieee_fprintf_double</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fieee_005ffprintf_005ffloat"><CODE>gsl_ieee_fprintf_float</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fieee_005fprintf_005fdouble"><CODE>gsl_ieee_printf_double</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fieee_005fprintf_005ffloat"><CODE>gsl_ieee_printf_float</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fIMAG"><CODE>GSL_IMAG</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fcquad"><CODE>gsl_integration_cquad</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#CQUAD-doubly_002dadaptive-integration">CQUAD 
            doubly-adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fcquad_005fworkspace_005falloc"><CODE>gsl_integration_cquad_workspace_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#CQUAD-doubly_002dadaptive-integration">CQUAD 
            doubly-adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fcquad_005fworkspace_005ffree"><CODE>gsl_integration_cquad_workspace_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#CQUAD-doubly_002dadaptive-integration">CQUAD 
            doubly-adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fglfixed"><CODE>gsl_integration_glfixed</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fglfixed_005fpoint"><CODE>gsl_integration_glfixed_point</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fglfixed_005ftable_005falloc"><CODE>gsl_integration_glfixed_table_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fglfixed_005ftable_005ffree"><CODE>gsl_integration_glfixed_table_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqag"><CODE>gsl_integration_qag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAG-adaptive-integration">QAG 
            adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqagi"><CODE>gsl_integration_qagi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGI-adaptive-integration-on-infinite-intervals">QAGI 
            adaptive integration on infinite intervals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqagil"><CODE>gsl_integration_qagil</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGI-adaptive-integration-on-infinite-intervals">QAGI 
            adaptive integration on infinite intervals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqagiu"><CODE>gsl_integration_qagiu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGI-adaptive-integration-on-infinite-intervals">QAGI 
            adaptive integration on infinite intervals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqagp"><CODE>gsl_integration_qagp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGP-adaptive-integration-with-known-singular-points">QAGP 
            adaptive integration with known singular points</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqags"><CODE>gsl_integration_qags</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGS-adaptive-integration-with-singularities">QAGS 
            adaptive integration with singularities</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawc"><CODE>gsl_integration_qawc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWC-adaptive-integration-for-Cauchy-principal-values">QAWC 
            adaptive integration for Cauchy principal values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawf"><CODE>gsl_integration_qawf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWF-adaptive-integration-for-Fourier-integrals">QAWF 
            adaptive integration for Fourier integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawo"><CODE>gsl_integration_qawo</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawo_005ftable_005falloc"><CODE>gsl_integration_qawo_table_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawo_005ftable_005ffree"><CODE>gsl_integration_qawo_table_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawo_005ftable_005fset"><CODE>gsl_integration_qawo_table_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawo_005ftable_005fset_005flength"><CODE>gsl_integration_qawo_table_set_length</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqaws"><CODE>gsl_integration_qaws</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqaws_005ftable_005falloc"><CODE>gsl_integration_qaws_table_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqaws_005ftable_005ffree"><CODE>gsl_integration_qaws_table_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqaws_005ftable_005fset"><CODE>gsl_integration_qaws_table_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqng"><CODE>gsl_integration_qng</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QNG-non_002dadaptive-Gauss_002dKronrod-integration">QNG 
            non-adaptive Gauss-Kronrod integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fworkspace_005falloc"><CODE>gsl_integration_workspace_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAG-adaptive-integration">QAG 
            adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fworkspace_005ffree"><CODE>gsl_integration_workspace_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAG-adaptive-integration">QAG 
            adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005falloc"><CODE>gsl_interp2d_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Functions">2D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fbicubic"><CODE>gsl_interp2d_bicubic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fbilinear"><CODE>gsl_interp2d_bilinear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval"><CODE>gsl_interp2d_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fx"><CODE>gsl_interp2d_eval_deriv_x</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fxx"><CODE>gsl_interp2d_eval_deriv_xx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fxx_005fe"><CODE>gsl_interp2d_eval_deriv_xx_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fxy"><CODE>gsl_interp2d_eval_deriv_xy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fxy_005fe"><CODE>gsl_interp2d_eval_deriv_xy_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fx_005fe"><CODE>gsl_interp2d_eval_deriv_x_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fy"><CODE>gsl_interp2d_eval_deriv_y</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fyy"><CODE>gsl_interp2d_eval_deriv_yy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fyy_005fe"><CODE>gsl_interp2d_eval_deriv_yy_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fderiv_005fy_005fe"><CODE>gsl_interp2d_eval_deriv_y_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fe"><CODE>gsl_interp2d_eval_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fextrap"><CODE>gsl_interp2d_eval_extrap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005feval_005fextrap_005fe"><CODE>gsl_interp2d_eval_extrap_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Evaluation-of-Interpolating-Functions">2D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005ffree"><CODE>gsl_interp2d_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Functions">2D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fget"><CODE>gsl_interp2d_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Grids">2D 
            Interpolation Grids</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fidx"><CODE>gsl_interp2d_idx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Grids">2D 
            Interpolation Grids</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005finit"><CODE>gsl_interp2d_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Functions">2D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fmin_005fsize"><CODE>gsl_interp2d_min_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fname"><CODE>gsl_interp2d_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005fset"><CODE>gsl_interp2d_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Grids">2D 
            Interpolation Grids</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005ftype_005fmin_005fsize"><CODE>gsl_interp2d_type_min_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005faccel_005falloc"><CODE>gsl_interp_accel_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005faccel_005ffind"><CODE>gsl_interp_accel_find</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005faccel_005ffree"><CODE>gsl_interp_accel_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005faccel_005freset"><CODE>gsl_interp_accel_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fakima"><CODE>gsl_interp_akima</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fakima_005fperiodic"><CODE>gsl_interp_akima_periodic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005falloc"><CODE>gsl_interp_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Functions">1D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fbsearch"><CODE>gsl_interp_bsearch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fcspline"><CODE>gsl_interp_cspline</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fcspline_005fperiodic"><CODE>gsl_interp_cspline_periodic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval"><CODE>gsl_interp_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005fderiv"><CODE>gsl_interp_eval_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005fderiv2"><CODE>gsl_interp_eval_deriv2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005fderiv2_005fe"><CODE>gsl_interp_eval_deriv2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005fderiv_005fe"><CODE>gsl_interp_eval_deriv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005fe"><CODE>gsl_interp_eval_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005finteg"><CODE>gsl_interp_eval_integ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005feval_005finteg_005fe"><CODE>gsl_interp_eval_integ_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Evaluation-of-Interpolating-Functions">1D 
            Evaluation of Interpolating Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005ffree"><CODE>gsl_interp_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Functions">1D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005finit"><CODE>gsl_interp_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Functions">1D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005flinear"><CODE>gsl_interp_linear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fmin_005fsize"><CODE>gsl_interp_min_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fname"><CODE>gsl_interp_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fpolynomial"><CODE>gsl_interp_polynomial</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005fsteffen"><CODE>gsl_interp_steffen</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005ftype_005fmin_005fsize"><CODE>gsl_interp_type_min_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fisinf"><CODE>gsl_isinf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fisnan"><CODE>gsl_isnan</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fIS_005fEVEN"><CODE>GSL_IS_EVEN</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Testing-for-Odd-and-Even-Numbers">Testing 
            for Odd and Even Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fIS_005fODD"><CODE>GSL_IS_ODD</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Testing-for-Odd-and-Even-Numbers">Testing 
            for Odd and Even Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fldexp"><CODE>gsl_ldexp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fbalance_005fmatrix"><CODE>gsl_linalg_balance_matrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Balancing">Balancing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fbidiag_005fdecomp"><CODE>gsl_linalg_bidiag_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Bidiagonalization">Bidiagonalization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fbidiag_005funpack"><CODE>gsl_linalg_bidiag_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Bidiagonalization">Bidiagonalization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fbidiag_005funpack2"><CODE>gsl_linalg_bidiag_unpack2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Bidiagonalization">Bidiagonalization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fbidiag_005funpack_005fB"><CODE>gsl_linalg_bidiag_unpack_B</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Bidiagonalization">Bidiagonalization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcholesky_005fdecomp"><CODE>gsl_linalg_cholesky_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcholesky_005finvert"><CODE>gsl_linalg_cholesky_invert</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcholesky_005fsolve"><CODE>gsl_linalg_cholesky_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcholesky_005fsvx"><CODE>gsl_linalg_cholesky_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fcholesky_005fdecomp"><CODE>gsl_linalg_complex_cholesky_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fcholesky_005finvert"><CODE>gsl_linalg_complex_cholesky_invert</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fcholesky_005fsolve"><CODE>gsl_linalg_complex_cholesky_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fcholesky_005fsvx"><CODE>gsl_linalg_complex_cholesky_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fhouseholder_005fhm"><CODE>gsl_linalg_complex_householder_hm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fhouseholder_005fhv"><CODE>gsl_linalg_complex_householder_hv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fhouseholder_005fmh"><CODE>gsl_linalg_complex_householder_mh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fhouseholder_005ftransform"><CODE>gsl_linalg_complex_householder_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005fdecomp"><CODE>gsl_linalg_complex_LU_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005fdet"><CODE>gsl_linalg_complex_LU_det</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005finvert"><CODE>gsl_linalg_complex_LU_invert</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005flndet"><CODE>gsl_linalg_complex_LU_lndet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005frefine"><CODE>gsl_linalg_complex_LU_refine</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005fsgndet"><CODE>gsl_linalg_complex_LU_sgndet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005fsolve"><CODE>gsl_linalg_complex_LU_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fcomplex_005fLU_005fsvx"><CODE>gsl_linalg_complex_LU_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fgivens"><CODE>gsl_linalg_givens</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Givens-Rotations">Givens 
            Rotations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fgivens_005fgv"><CODE>gsl_linalg_givens_gv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Givens-Rotations">Givens 
            Rotations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhermtd_005fdecomp"><CODE>gsl_linalg_hermtd_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Hermitian-Matrices">Tridiagonal 
            Decomposition of Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhermtd_005funpack"><CODE>gsl_linalg_hermtd_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Hermitian-Matrices">Tridiagonal 
            Decomposition of Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhermtd_005funpack_005fT"><CODE>gsl_linalg_hermtd_unpack_T</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Hermitian-Matrices">Tridiagonal 
            Decomposition of Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhessenberg_005fdecomp"><CODE>gsl_linalg_hessenberg_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg-Decomposition-of-Real-Matrices">Hessenberg 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhessenberg_005fset_005fzero"><CODE>gsl_linalg_hessenberg_set_zero</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg-Decomposition-of-Real-Matrices">Hessenberg 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhessenberg_005funpack"><CODE>gsl_linalg_hessenberg_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg-Decomposition-of-Real-Matrices">Hessenberg 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhessenberg_005funpack_005faccum"><CODE>gsl_linalg_hessenberg_unpack_accum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg-Decomposition-of-Real-Matrices">Hessenberg 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhesstri_005fdecomp"><CODE>gsl_linalg_hesstri_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg_002dTriangular-Decomposition-of-Real-Matrices">Hessenberg-Triangular 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fHH_005fsolve"><CODE>gsl_linalg_HH_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-solver-for-linear-systems">Householder 
            solver for linear systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fHH_005fsvx"><CODE>gsl_linalg_HH_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-solver-for-linear-systems">Householder 
            solver for linear systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhouseholder_005fhm"><CODE>gsl_linalg_householder_hm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhouseholder_005fhv"><CODE>gsl_linalg_householder_hv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhouseholder_005fmh"><CODE>gsl_linalg_householder_mh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fhouseholder_005ftransform"><CODE>gsl_linalg_householder_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005fdecomp"><CODE>gsl_linalg_LU_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005fdet"><CODE>gsl_linalg_LU_det</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005finvert"><CODE>gsl_linalg_LU_invert</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005flndet"><CODE>gsl_linalg_LU_lndet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005frefine"><CODE>gsl_linalg_LU_refine</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005fsgndet"><CODE>gsl_linalg_LU_sgndet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005fsolve"><CODE>gsl_linalg_LU_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fLU_005fsvx"><CODE>gsl_linalg_LU_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fdecomp"><CODE>gsl_linalg_QRPT_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fdecomp2"><CODE>gsl_linalg_QRPT_decomp2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fQRsolve"><CODE>gsl_linalg_QRPT_QRsolve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fRsolve"><CODE>gsl_linalg_QRPT_Rsolve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fRsvx"><CODE>gsl_linalg_QRPT_Rsvx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fsolve"><CODE>gsl_linalg_QRPT_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fsvx"><CODE>gsl_linalg_QRPT_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQRPT_005fupdate"><CODE>gsl_linalg_QRPT_update</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fdecomp"><CODE>gsl_linalg_QR_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005flssolve"><CODE>gsl_linalg_QR_lssolve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fQRsolve"><CODE>gsl_linalg_QR_QRsolve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fQTmat"><CODE>gsl_linalg_QR_QTmat</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fQTvec"><CODE>gsl_linalg_QR_QTvec</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fQvec"><CODE>gsl_linalg_QR_Qvec</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fRsolve"><CODE>gsl_linalg_QR_Rsolve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fRsvx"><CODE>gsl_linalg_QR_Rsvx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fsolve"><CODE>gsl_linalg_QR_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fsvx"><CODE>gsl_linalg_QR_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005funpack"><CODE>gsl_linalg_QR_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fQR_005fupdate"><CODE>gsl_linalg_QR_update</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fR_005fsolve"><CODE>gsl_linalg_R_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fR_005fsvx"><CODE>gsl_linalg_R_svx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsolve_005fcyc_005ftridiag"><CODE>gsl_linalg_solve_cyc_tridiag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Systems">Tridiagonal 
            Systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsolve_005fsymm_005fcyc_005ftridiag"><CODE>gsl_linalg_solve_symm_cyc_tridiag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Systems">Tridiagonal 
            Systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsolve_005fsymm_005ftridiag"><CODE>gsl_linalg_solve_symm_tridiag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Systems">Tridiagonal 
            Systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsolve_005ftridiag"><CODE>gsl_linalg_solve_tridiag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Systems">Tridiagonal 
            Systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fSV_005fdecomp"><CODE>gsl_linalg_SV_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fSV_005fdecomp_005fjacobi"><CODE>gsl_linalg_SV_decomp_jacobi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fSV_005fdecomp_005fmod"><CODE>gsl_linalg_SV_decomp_mod</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fSV_005fleverage"><CODE>gsl_linalg_SV_leverage</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fSV_005fsolve"><CODE>gsl_linalg_SV_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsymmtd_005fdecomp"><CODE>gsl_linalg_symmtd_decomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices">Tridiagonal 
            Decomposition of Real Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsymmtd_005funpack"><CODE>gsl_linalg_symmtd_unpack</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices">Tridiagonal 
            Decomposition of Real Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flinalg_005fsymmtd_005funpack_005fT"><CODE>gsl_linalg_symmtd_unpack_T</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices">Tridiagonal 
            Decomposition of Real Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005flog1p"><CODE>gsl_log1p</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fadd"><CODE>gsl_matrix_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-operations">Matrix 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fadd_005fconstant"><CODE>gsl_matrix_add_constant</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-operations">Matrix 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005falloc"><CODE>gsl_matrix_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-allocation">Matrix 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fcalloc"><CODE>gsl_matrix_calloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-allocation">Matrix 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fcolumn"><CODE>gsl_matrix_column</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fcolumn"><CODE>gsl_matrix_const_column</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fdiagonal"><CODE>gsl_matrix_const_diagonal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fptr"><CODE>gsl_matrix_const_ptr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-matrix-elements">Accessing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005frow"><CODE>gsl_matrix_const_row</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fsubcolumn"><CODE>gsl_matrix_const_subcolumn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fsubdiagonal"><CODE>gsl_matrix_const_subdiagonal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fsubmatrix"><CODE>gsl_matrix_const_submatrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fsubrow"><CODE>gsl_matrix_const_subrow</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fsuperdiagonal"><CODE>gsl_matrix_const_superdiagonal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fview_005farray"><CODE>gsl_matrix_const_view_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fview_005farray_005fwith_005ftda"><CODE>gsl_matrix_const_view_array_with_tda</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fview_005fvector"><CODE>gsl_matrix_const_view_vector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fview_005fvector_005fwith_005ftda"><CODE>gsl_matrix_const_view_vector_with_tda</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fdiagonal"><CODE>gsl_matrix_diagonal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fdiv_005felements"><CODE>gsl_matrix_div_elements</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-operations">Matrix 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fequal"><CODE>gsl_matrix_equal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-properties">Matrix 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ffprintf"><CODE>gsl_matrix_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-matrices">Reading 
            and writing matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ffread"><CODE>gsl_matrix_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-matrices">Reading 
            and writing matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ffree"><CODE>gsl_matrix_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-allocation">Matrix 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ffscanf"><CODE>gsl_matrix_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-matrices">Reading 
            and writing matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ffwrite"><CODE>gsl_matrix_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-matrices">Reading 
            and writing matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fget"><CODE>gsl_matrix_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-matrix-elements">Accessing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fget_005fcol"><CODE>gsl_matrix_get_col</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-rows-and-columns">Copying 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fget_005frow"><CODE>gsl_matrix_get_row</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-rows-and-columns">Copying 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fisneg"><CODE>gsl_matrix_isneg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-properties">Matrix 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fisnonneg"><CODE>gsl_matrix_isnonneg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-properties">Matrix 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fisnull"><CODE>gsl_matrix_isnull</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-properties">Matrix 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fispos"><CODE>gsl_matrix_ispos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-properties">Matrix 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fmax"><CODE>gsl_matrix_max</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fmax_005findex"><CODE>gsl_matrix_max_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fmemcpy"><CODE>gsl_matrix_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-matrices">Copying 
            matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fmin"><CODE>gsl_matrix_min</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fminmax"><CODE>gsl_matrix_minmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fminmax_005findex"><CODE>gsl_matrix_minmax_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fmin_005findex"><CODE>gsl_matrix_min_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-matrices">Finding 
            maximum and minimum elements of matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fmul_005felements"><CODE>gsl_matrix_mul_elements</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-operations">Matrix 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fptr"><CODE>gsl_matrix_ptr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-matrix-elements">Accessing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005frow"><CODE>gsl_matrix_row</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fscale"><CODE>gsl_matrix_scale</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-operations">Matrix 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fset"><CODE>gsl_matrix_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-matrix-elements">Accessing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fset_005fall"><CODE>gsl_matrix_set_all</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fset_005fcol"><CODE>gsl_matrix_set_col</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-rows-and-columns">Copying 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fset_005fidentity"><CODE>gsl_matrix_set_identity</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fset_005frow"><CODE>gsl_matrix_set_row</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-rows-and-columns">Copying 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fset_005fzero"><CODE>gsl_matrix_set_zero</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fsub"><CODE>gsl_matrix_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-operations">Matrix 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fsubcolumn"><CODE>gsl_matrix_subcolumn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fsubdiagonal"><CODE>gsl_matrix_subdiagonal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fsubmatrix"><CODE>gsl_matrix_submatrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fsubrow"><CODE>gsl_matrix_subrow</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fsuperdiagonal"><CODE>gsl_matrix_superdiagonal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fswap"><CODE>gsl_matrix_swap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-matrices">Copying 
            matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fswap_005fcolumns"><CODE>gsl_matrix_swap_columns</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-rows-and-columns">Exchanging 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fswap_005frowcol"><CODE>gsl_matrix_swap_rowcol</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-rows-and-columns">Exchanging 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fswap_005frows"><CODE>gsl_matrix_swap_rows</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-rows-and-columns">Exchanging 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ftranspose"><CODE>gsl_matrix_transpose</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-rows-and-columns">Exchanging 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005ftranspose_005fmemcpy"><CODE>gsl_matrix_transpose_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-rows-and-columns">Exchanging 
            rows and columns</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fview_005farray"><CODE>gsl_matrix_view_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fview_005farray_005fwith_005ftda"><CODE>gsl_matrix_view_array_with_tda</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fview_005fvector"><CODE>gsl_matrix_view_vector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fview_005fvector_005fwith_005ftda"><CODE>gsl_matrix_view_vector_with_tda</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMAX"><CODE>GSL_MAX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMAX_005fDBL"><CODE>GSL_MAX_DBL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMAX_005fINT"><CODE>GSL_MAX_INT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMAX_005fLDBL"><CODE>GSL_MAX_LDBL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMIN"><CODE>GSL_MIN</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMIN_005fDBL"><CODE>GSL_MIN_DBL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005falloc"><CODE>gsl_min_fminimizer_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fbrent"><CODE>gsl_min_fminimizer_brent</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005ffree"><CODE>gsl_min_fminimizer_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005ff_005flower"><CODE>gsl_min_fminimizer_f_lower</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005ff_005fminimum"><CODE>gsl_min_fminimizer_f_minimum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005ff_005fupper"><CODE>gsl_min_fminimizer_f_upper</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fgoldensection"><CODE>gsl_min_fminimizer_goldensection</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fiterate"><CODE>gsl_min_fminimizer_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fname"><CODE>gsl_min_fminimizer_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fquad_005fgolden"><CODE>gsl_min_fminimizer_quad_golden</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fset"><CODE>gsl_min_fminimizer_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fset_005fwith_005fvalues"><CODE>gsl_min_fminimizer_set_with_values</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fx_005flower"><CODE>gsl_min_fminimizer_x_lower</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fx_005fminimum"><CODE>gsl_min_fminimizer_x_minimum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005fx_005fupper"><CODE>gsl_min_fminimizer_x_upper</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Iteration">Minimization 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMIN_005fINT"><CODE>GSL_MIN_INT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fMIN_005fLDBL"><CODE>GSL_MIN_LDBL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ftest_005finterval"><CODE>gsl_min_test_interval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Stopping-Parameters">Minimization 
            Stopping Parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005falloc"><CODE>gsl_monte_miser_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005ffree"><CODE>gsl_monte_miser_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005finit"><CODE>gsl_monte_miser_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005fintegrate"><CODE>gsl_monte_miser_integrate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005fparams_005fget"><CODE>gsl_monte_miser_params_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005fparams_005fset"><CODE>gsl_monte_miser_params_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fplain_005falloc"><CODE>gsl_monte_plain_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fplain_005ffree"><CODE>gsl_monte_plain_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fplain_005finit"><CODE>gsl_monte_plain_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fplain_005fintegrate"><CODE>gsl_monte_plain_integrate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005falloc"><CODE>gsl_monte_vegas_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005fchisq"><CODE>gsl_monte_vegas_chisq</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005ffree"><CODE>gsl_monte_vegas_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005finit"><CODE>gsl_monte_vegas_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005fintegrate"><CODE>gsl_monte_vegas_integrate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005fparams_005fget"><CODE>gsl_monte_vegas_params_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005fparams_005fset"><CODE>gsl_monte_vegas_params_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005frunval"><CODE>gsl_monte_vegas_runval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005fcovar"><CODE>gsl_multifit_covar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Computing-the-covariance-matrix-of-best-fit-parameters">Computing 
            the covariance matrix of best fit parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005falloc"><CODE>gsl_multifit_fdfridge_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fdriver"><CODE>gsl_multifit_fdfridge_driver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#High-Level-Driver">High 
            Level Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005ffree"><CODE>gsl_multifit_fdfridge_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fiterate"><CODE>gsl_multifit_fdfridge_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fname"><CODE>gsl_multifit_fdfridge_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fniter"><CODE>gsl_multifit_fdfridge_niter</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fposition"><CODE>gsl_multifit_fdfridge_position</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fresidual"><CODE>gsl_multifit_fdfridge_residual</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fset"><CODE>gsl_multifit_fdfridge_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fset2"><CODE>gsl_multifit_fdfridge_set2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fset3"><CODE>gsl_multifit_fdfridge_set3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fwset"><CODE>gsl_multifit_fdfridge_wset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fwset2"><CODE>gsl_multifit_fdfridge_wset2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge_005fwset3"><CODE>gsl_multifit_fdfridge_wset3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005falloc"><CODE>gsl_multifit_fdfsolver_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fdif_005fdf"><CODE>gsl_multifit_fdfsolver_dif_df</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finite-Difference-Jacobian">Finite 
            Difference Jacobian</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fdif_005ffdf"><CODE>gsl_multifit_fdfsolver_dif_fdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finite-Difference-Jacobian">Finite 
            Difference Jacobian</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fdriver"><CODE>gsl_multifit_fdfsolver_driver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#High-Level-Driver">High 
            Level Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005ffree"><CODE>gsl_multifit_fdfsolver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fiterate"><CODE>gsl_multifit_fdfsolver_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fjac"><CODE>gsl_multifit_fdfsolver_jac</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Computing-the-covariance-matrix-of-best-fit-parameters">Computing 
            the covariance matrix of best fit parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005flmder"><CODE>gsl_multifit_fdfsolver_lmder</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005flmniel"><CODE>gsl_multifit_fdfsolver_lmniel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005flmsder"><CODE>gsl_multifit_fdfsolver_lmsder</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fname"><CODE>gsl_multifit_fdfsolver_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fniter"><CODE>gsl_multifit_fdfsolver_niter</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fposition"><CODE>gsl_multifit_fdfsolver_position</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fresidual"><CODE>gsl_multifit_fdfsolver_residual</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fset"><CODE>gsl_multifit_fdfsolver_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005ftest"><CODE>gsl_multifit_fdfsolver_test</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005fwset"><CODE>gsl_multifit_fdfsolver_wset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005falloc"><CODE>gsl_multifit_fsolver_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005fdriver"><CODE>gsl_multifit_fsolver_driver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#High-Level-Driver">High 
            Level Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005ffree"><CODE>gsl_multifit_fsolver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005fiterate"><CODE>gsl_multifit_fsolver_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005fname"><CODE>gsl_multifit_fsolver_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005fposition"><CODE>gsl_multifit_fsolver_position</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-Minimization-Algorithm">Iteration 
            of the Minimization Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005fset"><CODE>gsl_multifit_fsolver_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005fgradient"><CODE>gsl_multifit_gradient</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear"><CODE>gsl_multifit_linear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005falloc"><CODE>gsl_multifit_linear_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fbsvd"><CODE>gsl_multifit_linear_bsvd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fest"><CODE>gsl_multifit_linear_est</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005ffree"><CODE>gsl_multifit_linear_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fgenform1"><CODE>gsl_multifit_linear_genform1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fgenform2"><CODE>gsl_multifit_linear_genform2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005flcorner"><CODE>gsl_multifit_linear_lcorner</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005flcorner2"><CODE>gsl_multifit_linear_lcorner2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005flcurve"><CODE>gsl_multifit_linear_lcurve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fLk"><CODE>gsl_multifit_linear_Lk</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fresiduals"><CODE>gsl_multifit_linear_residuals</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fsolve"><CODE>gsl_multifit_linear_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fstdform1"><CODE>gsl_multifit_linear_stdform1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fstdform2"><CODE>gsl_multifit_linear_stdform2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fsvd"><CODE>gsl_multifit_linear_svd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust"><CODE>gsl_multifit_robust</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005falloc"><CODE>gsl_multifit_robust_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fbisquare"><CODE>gsl_multifit_robust_bisquare</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fcauchy"><CODE>gsl_multifit_robust_cauchy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fdefault"><CODE>gsl_multifit_robust_default</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fest"><CODE>gsl_multifit_robust_est</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005ffair"><CODE>gsl_multifit_robust_fair</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005ffree"><CODE>gsl_multifit_robust_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fhuber"><CODE>gsl_multifit_robust_huber</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fmaxiter"><CODE>gsl_multifit_robust_maxiter</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fname"><CODE>gsl_multifit_robust_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fols"><CODE>gsl_multifit_robust_ols</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fresiduals"><CODE>gsl_multifit_robust_residuals</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fstatistics"><CODE>gsl_multifit_robust_statistics</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005ftune"><CODE>gsl_multifit_robust_tune</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fweights"><CODE>gsl_multifit_robust_weights</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fwelsch"><CODE>gsl_multifit_robust_welsch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ftest_005fdelta"><CODE>gsl_multifit_test_delta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ftest_005fgradient"><CODE>gsl_multifit_test_gradient</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005fwlinear"><CODE>gsl_multifit_wlinear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005falloc"><CODE>gsl_multimin_fdfminimizer_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fconjugate_005ffr"><CODE>gsl_multimin_fdfminimizer_conjugate_fr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fconjugate_005fpr"><CODE>gsl_multimin_fdfminimizer_conjugate_pr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005ffree"><CODE>gsl_multimin_fdfminimizer_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fgradient"><CODE>gsl_multimin_fdfminimizer_gradient</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fiterate"><CODE>gsl_multimin_fdfminimizer_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fminimum"><CODE>gsl_multimin_fdfminimizer_minimum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fname"><CODE>gsl_multimin_fdfminimizer_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005frestart"><CODE>gsl_multimin_fdfminimizer_restart</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fset"><CODE>gsl_multimin_fdfminimizer_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fsteepest_005fdescent"><CODE>gsl_multimin_fdfminimizer_steepest_descent</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fvector_005fbfgs"><CODE>gsl_multimin_fdfminimizer_vector_bfgs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fvector_005fbfgs2"><CODE>gsl_multimin_fdfminimizer_vector_bfgs2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005fx"><CODE>gsl_multimin_fdfminimizer_x</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005falloc"><CODE>gsl_multimin_fminimizer_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005ffree"><CODE>gsl_multimin_fminimizer_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fiterate"><CODE>gsl_multimin_fminimizer_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fminimum"><CODE>gsl_multimin_fminimizer_minimum</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fname"><CODE>gsl_multimin_fminimizer_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fnmsimplex"><CODE>gsl_multimin_fminimizer_nmsimplex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fnmsimplex2"><CODE>gsl_multimin_fminimizer_nmsimplex2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fnmsimplex2rand"><CODE>gsl_multimin_fminimizer_nmsimplex2rand</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fset"><CODE>gsl_multimin_fminimizer_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fsize"><CODE>gsl_multimin_fminimizer_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005fx"><CODE>gsl_multimin_fminimizer_x</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Iteration">Multimin 
            Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ftest_005fgradient"><CODE>gsl_multimin_test_gradient</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Stopping-Criteria">Multimin 
            Stopping Criteria</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ftest_005fsize"><CODE>gsl_multimin_test_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Stopping-Criteria">Multimin 
            Stopping Criteria</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005falloc"><CODE>gsl_multiroot_fdfsolver_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fdx"><CODE>gsl_multiroot_fdfsolver_dx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005ff"><CODE>gsl_multiroot_fdfsolver_f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005ffree"><CODE>gsl_multiroot_fdfsolver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fgnewton"><CODE>gsl_multiroot_fdfsolver_gnewton</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fhybridj"><CODE>gsl_multiroot_fdfsolver_hybridj</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fhybridsj"><CODE>gsl_multiroot_fdfsolver_hybridsj</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fiterate"><CODE>gsl_multiroot_fdfsolver_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fname"><CODE>gsl_multiroot_fdfsolver_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fnewton"><CODE>gsl_multiroot_fdfsolver_newton</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005froot"><CODE>gsl_multiroot_fdfsolver_root</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005fset"><CODE>gsl_multiroot_fdfsolver_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005falloc"><CODE>gsl_multiroot_fsolver_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fbroyden"><CODE>gsl_multiroot_fsolver_broyden</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fdnewton"><CODE>gsl_multiroot_fsolver_dnewton</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fdx"><CODE>gsl_multiroot_fsolver_dx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005ff"><CODE>gsl_multiroot_fsolver_f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005ffree"><CODE>gsl_multiroot_fsolver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fhybrid"><CODE>gsl_multiroot_fsolver_hybrid</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fhybrids"><CODE>gsl_multiroot_fsolver_hybrids</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fiterate"><CODE>gsl_multiroot_fsolver_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fname"><CODE>gsl_multiroot_fsolver_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005froot"><CODE>gsl_multiroot_fsolver_root</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iteration-of-the-multidimensional-solver">Iteration 
            of the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005fset"><CODE>gsl_multiroot_fsolver_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ftest_005fdelta"><CODE>gsl_multiroot_test_delta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-the-multidimensional-solver">Search 
            Stopping Parameters for the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ftest_005fresidual"><CODE>gsl_multiroot_test_residual</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-the-multidimensional-solver">Search 
            Stopping Parameters for the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005falloc"><CODE>gsl_multiset_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-allocation">Multiset 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fcalloc"><CODE>gsl_multiset_calloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-allocation">Multiset 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fdata"><CODE>gsl_multiset_data</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-properties">Multiset 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005ffprintf"><CODE>gsl_multiset_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-multisets">Reading 
            and writing multisets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005ffread"><CODE>gsl_multiset_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-multisets">Reading 
            and writing multisets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005ffree"><CODE>gsl_multiset_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-allocation">Multiset 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005ffscanf"><CODE>gsl_multiset_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-multisets">Reading 
            and writing multisets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005ffwrite"><CODE>gsl_multiset_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-multisets">Reading 
            and writing multisets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fget"><CODE>gsl_multiset_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-multiset-elements">Accessing 
            multiset elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005finit_005ffirst"><CODE>gsl_multiset_init_first</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-allocation">Multiset 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005finit_005flast"><CODE>gsl_multiset_init_last</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-allocation">Multiset 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fk"><CODE>gsl_multiset_k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-properties">Multiset 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fmemcpy"><CODE>gsl_multiset_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-allocation">Multiset 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fn"><CODE>gsl_multiset_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-properties">Multiset 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fnext"><CODE>gsl_multiset_next</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-functions">Multiset 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fprev"><CODE>gsl_multiset_prev</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-functions">Multiset 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset_005fvalid"><CODE>gsl_multiset_valid</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-properties">Multiset 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fbookdata"><CODE>gsl_ntuple_bookdata</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Writing-ntuples">Writing 
            ntuples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fclose"><CODE>gsl_ntuple_close</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Closing-an-ntuple-file">Closing 
            an ntuple file</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fcreate"><CODE>gsl_ntuple_create</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-ntuples">Creating 
            ntuples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fopen"><CODE>gsl_ntuple_open</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Opening-an-existing-ntuple-file">Opening 
            an existing ntuple file</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fproject"><CODE>gsl_ntuple_project</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fread"><CODE>gsl_ntuple_read</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-ntuples">Reading 
            ntuples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fwrite"><CODE>gsl_ntuple_write</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Writing-ntuples">Writing 
            ntuples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005falloc"><CODE>gsl_odeiv2_control_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005ferrlevel"><CODE>gsl_odeiv2_control_errlevel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005ffree"><CODE>gsl_odeiv2_control_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fhadjust"><CODE>gsl_odeiv2_control_hadjust</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005finit"><CODE>gsl_odeiv2_control_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fname"><CODE>gsl_odeiv2_control_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fscaled_005fnew"><CODE>gsl_odeiv2_control_scaled_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fset_005fdriver"><CODE>gsl_odeiv2_control_set_driver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fstandard_005fnew"><CODE>gsl_odeiv2_control_standard_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fyp_005fnew"><CODE>gsl_odeiv2_control_yp_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005fy_005fnew"><CODE>gsl_odeiv2_control_y_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005falloc_005fscaled_005fnew"><CODE>gsl_odeiv2_driver_alloc_scaled_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005falloc_005fstandard_005fnew"><CODE>gsl_odeiv2_driver_alloc_standard_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005falloc_005fyp_005fnew"><CODE>gsl_odeiv2_driver_alloc_yp_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005falloc_005fy_005fnew"><CODE>gsl_odeiv2_driver_alloc_y_new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005fapply"><CODE>gsl_odeiv2_driver_apply</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005fapply_005ffixed_005fstep"><CODE>gsl_odeiv2_driver_apply_fixed_step</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005ffree"><CODE>gsl_odeiv2_driver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005freset"><CODE>gsl_odeiv2_driver_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005freset_005fhstart"><CODE>gsl_odeiv2_driver_reset_hstart</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005fset_005fhmax"><CODE>gsl_odeiv2_driver_set_hmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005fset_005fhmin"><CODE>gsl_odeiv2_driver_set_hmin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fdriver_005fset_005fnmax"><CODE>gsl_odeiv2_driver_set_nmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Driver">Driver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve_005falloc"><CODE>gsl_odeiv2_evolve_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve_005fapply"><CODE>gsl_odeiv2_evolve_apply</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve_005fapply_005ffixed_005fstep"><CODE>gsl_odeiv2_evolve_apply_fixed_step</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve_005ffree"><CODE>gsl_odeiv2_evolve_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve_005freset"><CODE>gsl_odeiv2_evolve_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve_005fset_005fdriver"><CODE>gsl_odeiv2_evolve_set_driver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005falloc"><CODE>gsl_odeiv2_step_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005fapply"><CODE>gsl_odeiv2_step_apply</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005fbsimp"><CODE>gsl_odeiv2_step_bsimp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005ffree"><CODE>gsl_odeiv2_step_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005fmsadams"><CODE>gsl_odeiv2_step_msadams</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005fmsbdf"><CODE>gsl_odeiv2_step_msbdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005fname"><CODE>gsl_odeiv2_step_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005forder"><CODE>gsl_odeiv2_step_order</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005freset"><CODE>gsl_odeiv2_step_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frk1imp"><CODE>gsl_odeiv2_step_rk1imp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frk2"><CODE>gsl_odeiv2_step_rk2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frk2imp"><CODE>gsl_odeiv2_step_rk2imp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frk4"><CODE>gsl_odeiv2_step_rk4</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frk4imp"><CODE>gsl_odeiv2_step_rk4imp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frk8pd"><CODE>gsl_odeiv2_step_rk8pd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frkck"><CODE>gsl_odeiv2_step_rkck</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005frkf45"><CODE>gsl_odeiv2_step_rkf45</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005fset_005fdriver"><CODE>gsl_odeiv2_step_set_driver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005falloc"><CODE>gsl_permutation_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-allocation">Permutation 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fcalloc"><CODE>gsl_permutation_calloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-allocation">Permutation 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fcanonical_005fcycles"><CODE>gsl_permutation_canonical_cycles</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutations-in-cyclic-form">Permutations 
            in cyclic form</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fcanonical_005fto_005flinear"><CODE>gsl_permutation_canonical_to_linear</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutations-in-cyclic-form">Permutations 
            in cyclic form</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fdata"><CODE>gsl_permutation_data</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-properties">Permutation 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005ffprintf"><CODE>gsl_permutation_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-permutations">Reading 
            and writing permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005ffread"><CODE>gsl_permutation_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-permutations">Reading 
            and writing permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005ffree"><CODE>gsl_permutation_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-allocation">Permutation 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005ffscanf"><CODE>gsl_permutation_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-permutations">Reading 
            and writing permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005ffwrite"><CODE>gsl_permutation_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-permutations">Reading 
            and writing permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fget"><CODE>gsl_permutation_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-permutation-elements">Accessing 
            permutation elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005finit"><CODE>gsl_permutation_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-allocation">Permutation 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005finverse"><CODE>gsl_permutation_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005finversions"><CODE>gsl_permutation_inversions</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutations-in-cyclic-form">Permutations 
            in cyclic form</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005flinear_005fcycles"><CODE>gsl_permutation_linear_cycles</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutations-in-cyclic-form">Permutations 
            in cyclic form</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005flinear_005fto_005fcanonical"><CODE>gsl_permutation_linear_to_canonical</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutations-in-cyclic-form">Permutations 
            in cyclic form</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fmemcpy"><CODE>gsl_permutation_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-allocation">Permutation 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fmul"><CODE>gsl_permutation_mul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Applying-Permutations">Applying 
            Permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fnext"><CODE>gsl_permutation_next</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fprev"><CODE>gsl_permutation_prev</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005freverse"><CODE>gsl_permutation_reverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fsize"><CODE>gsl_permutation_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-properties">Permutation 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fswap"><CODE>gsl_permutation_swap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-permutation-elements">Accessing 
            permutation elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation_005fvalid"><CODE>gsl_permutation_valid</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-properties">Permutation 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermute"><CODE>gsl_permute</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Applying-Permutations">Applying 
            Permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermute_005finverse"><CODE>gsl_permute_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Applying-Permutations">Applying 
            Permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermute_005fvector"><CODE>gsl_permute_vector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Applying-Permutations">Applying 
            Permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermute_005fvector_005finverse"><CODE>gsl_permute_vector_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Applying-Permutations">Applying 
            Permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005feval"><CODE>gsl_poly_complex_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005fsolve"><CODE>gsl_poly_complex_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Polynomial-Equations">General 
            Polynomial Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005fsolve_005fcubic"><CODE>gsl_poly_complex_solve_cubic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cubic-Equations">Cubic 
            Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005fsolve_005fquadratic"><CODE>gsl_poly_complex_solve_quadratic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quadratic-Equations">Quadratic 
            Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005fworkspace_005falloc"><CODE>gsl_poly_complex_workspace_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Polynomial-Equations">General 
            Polynomial Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005fworkspace_005ffree"><CODE>gsl_poly_complex_workspace_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Polynomial-Equations">General 
            Polynomial Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fdd_005feval"><CODE>gsl_poly_dd_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fdd_005fhermite_005finit"><CODE>gsl_poly_dd_hermite_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fdd_005finit"><CODE>gsl_poly_dd_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fdd_005ftaylor"><CODE>gsl_poly_dd_taylor</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005feval"><CODE>gsl_poly_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005feval_005fderivs"><CODE>gsl_poly_eval_derivs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fsolve_005fcubic"><CODE>gsl_poly_solve_cubic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cubic-Equations">Cubic 
            Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fsolve_005fquadratic"><CODE>gsl_poly_solve_quadratic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quadratic-Equations">Quadratic 
            Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f2"><CODE>gsl_pow_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f3"><CODE>gsl_pow_3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f4"><CODE>gsl_pow_4</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f5"><CODE>gsl_pow_5</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f6"><CODE>gsl_pow_6</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f7"><CODE>gsl_pow_7</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f8"><CODE>gsl_pow_8</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005f9"><CODE>gsl_pow_9</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005fint"><CODE>gsl_pow_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpow_005fuint"><CODE>gsl_pow_uint</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Small-integer-powers">Small 
            integer powers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005falloc"><CODE>gsl_qrng_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-initialization">Quasi-random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fclone"><CODE>gsl_qrng_clone</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Saving-and-restoring-quasi_002drandom-number-generator-state">Saving 
            and restoring quasi-random number generator state</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005ffree"><CODE>gsl_qrng_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-initialization">Quasi-random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fget"><CODE>gsl_qrng_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sampling-from-a-quasi_002drandom-number-generator">Sampling 
            from a quasi-random number generator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fhalton"><CODE>gsl_qrng_halton</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-algorithms">Quasi-random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005finit"><CODE>gsl_qrng_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-initialization">Quasi-random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fmemcpy"><CODE>gsl_qrng_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Saving-and-restoring-quasi_002drandom-number-generator-state">Saving 
            and restoring quasi-random number generator state</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fname"><CODE>gsl_qrng_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-quasi_002drandom-number-generator-functions">Auxiliary 
            quasi-random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fniederreiter_005f2"><CODE>gsl_qrng_niederreiter_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-algorithms">Quasi-random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005freversehalton"><CODE>gsl_qrng_reversehalton</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-algorithms">Quasi-random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fsize"><CODE>gsl_qrng_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-quasi_002drandom-number-generator-functions">Auxiliary 
            quasi-random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fsobol"><CODE>gsl_qrng_sobol</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-algorithms">Quasi-random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005fstate"><CODE>gsl_qrng_state</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-quasi_002drandom-number-generator-functions">Auxiliary 
            quasi-random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbernoulli"><CODE>gsl_ran_bernoulli</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bernoulli-Distribution">The 
            Bernoulli Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbernoulli_005fpdf"><CODE>gsl_ran_bernoulli_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bernoulli-Distribution">The 
            Bernoulli Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbeta"><CODE>gsl_ran_beta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbeta_005fpdf"><CODE>gsl_ran_beta_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbinomial"><CODE>gsl_ran_binomial</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Binomial-Distribution">The 
            Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbinomial_005fpdf"><CODE>gsl_ran_binomial_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Binomial-Distribution">The 
            Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbivariate_005fgaussian"><CODE>gsl_ran_bivariate_gaussian</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bivariate-Gaussian-Distribution">The 
            Bivariate Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fbivariate_005fgaussian_005fpdf"><CODE>gsl_ran_bivariate_gaussian_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bivariate-Gaussian-Distribution">The 
            Bivariate Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fcauchy"><CODE>gsl_ran_cauchy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fcauchy_005fpdf"><CODE>gsl_ran_cauchy_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fchisq"><CODE>gsl_ran_chisq</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fchisq_005fpdf"><CODE>gsl_ran_chisq_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fchoose"><CODE>gsl_ran_choose</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Shuffling-and-Sampling">Shuffling 
            and Sampling</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdirichlet"><CODE>gsl_ran_dirichlet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Dirichlet-Distribution">The 
            Dirichlet Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdirichlet_005flnpdf"><CODE>gsl_ran_dirichlet_lnpdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Dirichlet-Distribution">The 
            Dirichlet Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdirichlet_005fpdf"><CODE>gsl_ran_dirichlet_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Dirichlet-Distribution">The 
            Dirichlet Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdir_005f2d"><CODE>gsl_ran_dir_2d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdir_005f2d_005ftrig_005fmethod"><CODE>gsl_ran_dir_2d_trig_method</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdir_005f3d"><CODE>gsl_ran_dir_3d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdir_005fnd"><CODE>gsl_ran_dir_nd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdiscrete"><CODE>gsl_ran_discrete</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdiscrete_005ffree"><CODE>gsl_ran_discrete_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdiscrete_005fpdf"><CODE>gsl_ran_discrete_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdiscrete_005fpreproc"><CODE>gsl_ran_discrete_preproc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fexponential"><CODE>gsl_ran_exponential</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fexponential_005fpdf"><CODE>gsl_ran_exponential_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fexppow"><CODE>gsl_ran_exppow</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Power-Distribution">The 
            Exponential Power Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fexppow_005fpdf"><CODE>gsl_ran_exppow_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Power-Distribution">The 
            Exponential Power Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005ffdist"><CODE>gsl_ran_fdist</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005ffdist_005fpdf"><CODE>gsl_ran_fdist_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fflat"><CODE>gsl_ran_flat</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fflat_005fpdf"><CODE>gsl_ran_flat_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgamma"><CODE>gsl_ran_gamma</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgamma_005fknuth"><CODE>gsl_ran_gamma_knuth</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgamma_005fpdf"><CODE>gsl_ran_gamma_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgaussian"><CODE>gsl_ran_gaussian</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgaussian_005fpdf"><CODE>gsl_ran_gaussian_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgaussian_005fratio_005fmethod"><CODE>gsl_ran_gaussian_ratio_method</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgaussian_005ftail"><CODE>gsl_ran_gaussian_tail</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Tail-Distribution">The 
            Gaussian Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgaussian_005ftail_005fpdf"><CODE>gsl_ran_gaussian_tail_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Tail-Distribution">The 
            Gaussian Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgaussian_005fziggurat"><CODE>gsl_ran_gaussian_ziggurat</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgeometric"><CODE>gsl_ran_geometric</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Geometric-Distribution">The 
            Geometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgeometric_005fpdf"><CODE>gsl_ran_geometric_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Geometric-Distribution">The 
            Geometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgumbel1"><CODE>gsl_ran_gumbel1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgumbel1_005fpdf"><CODE>gsl_ran_gumbel1_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgumbel2"><CODE>gsl_ran_gumbel2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fgumbel2_005fpdf"><CODE>gsl_ran_gumbel2_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fhypergeometric"><CODE>gsl_ran_hypergeometric</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fhypergeometric_005fpdf"><CODE>gsl_ran_hypergeometric_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flandau"><CODE>gsl_ran_landau</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Landau-Distribution">The 
            Landau Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flandau_005fpdf"><CODE>gsl_ran_landau_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Landau-Distribution">The 
            Landau Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flaplace"><CODE>gsl_ran_laplace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flaplace_005fpdf"><CODE>gsl_ran_laplace_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flevy"><CODE>gsl_ran_levy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Levy-alpha_002dStable-Distributions">The 
            Levy alpha-Stable Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flevy_005fskew"><CODE>gsl_ran_levy_skew</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Levy-skew-alpha_002dStable-Distribution">The 
            Levy skew alpha-Stable Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flogarithmic"><CODE>gsl_ran_logarithmic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logarithmic-Distribution">The 
            Logarithmic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flogarithmic_005fpdf"><CODE>gsl_ran_logarithmic_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logarithmic-Distribution">The 
            Logarithmic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flogistic"><CODE>gsl_ran_logistic</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flogistic_005fpdf"><CODE>gsl_ran_logistic_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flognormal"><CODE>gsl_ran_lognormal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005flognormal_005fpdf"><CODE>gsl_ran_lognormal_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fmultinomial"><CODE>gsl_ran_multinomial</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Multinomial-Distribution">The 
            Multinomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fmultinomial_005flnpdf"><CODE>gsl_ran_multinomial_lnpdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Multinomial-Distribution">The 
            Multinomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fmultinomial_005fpdf"><CODE>gsl_ran_multinomial_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Multinomial-Distribution">The 
            Multinomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fnegative_005fbinomial"><CODE>gsl_ran_negative_binomial</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Negative-Binomial-Distribution">The 
            Negative Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fnegative_005fbinomial_005fpdf"><CODE>gsl_ran_negative_binomial_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Negative-Binomial-Distribution">The 
            Negative Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fpareto"><CODE>gsl_ran_pareto</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fpareto_005fpdf"><CODE>gsl_ran_pareto_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fpascal"><CODE>gsl_ran_pascal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pascal-Distribution">The 
            Pascal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fpascal_005fpdf"><CODE>gsl_ran_pascal_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pascal-Distribution">The 
            Pascal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fpoisson"><CODE>gsl_ran_poisson</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Poisson-Distribution">The 
            Poisson Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fpoisson_005fpdf"><CODE>gsl_ran_poisson_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Poisson-Distribution">The 
            Poisson Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005frayleigh"><CODE>gsl_ran_rayleigh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005frayleigh_005fpdf"><CODE>gsl_ran_rayleigh_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005frayleigh_005ftail"><CODE>gsl_ran_rayleigh_tail</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Tail-Distribution">The 
            Rayleigh Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005frayleigh_005ftail_005fpdf"><CODE>gsl_ran_rayleigh_tail_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Tail-Distribution">The 
            Rayleigh Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fsample"><CODE>gsl_ran_sample</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Shuffling-and-Sampling">Shuffling 
            and Sampling</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fshuffle"><CODE>gsl_ran_shuffle</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Shuffling-and-Sampling">Shuffling 
            and Sampling</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005ftdist"><CODE>gsl_ran_tdist</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005ftdist_005fpdf"><CODE>gsl_ran_tdist_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fugaussian"><CODE>gsl_ran_ugaussian</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fugaussian_005fpdf"><CODE>gsl_ran_ugaussian_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fugaussian_005fratio_005fmethod"><CODE>gsl_ran_ugaussian_ratio_method</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fugaussian_005ftail"><CODE>gsl_ran_ugaussian_tail</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Tail-Distribution">The 
            Gaussian Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fugaussian_005ftail_005fpdf"><CODE>gsl_ran_ugaussian_tail_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Tail-Distribution">The 
            Gaussian Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fweibull"><CODE>gsl_ran_weibull</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fweibull_005fpdf"><CODE>gsl_ran_weibull_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fREAL"><CODE>GSL_REAL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005falloc"><CODE>gsl_rng_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fborosh13"><CODE>gsl_rng_borosh13</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fclone"><CODE>gsl_rng_clone</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-random-number-generator-state">Copying 
            random number generator state</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fcmrg"><CODE>gsl_rng_cmrg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fcoveyou"><CODE>gsl_rng_coveyou</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fenv_005fsetup"><CODE>gsl_rng_env_setup</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-environment-variables">Random 
            number environment variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ffishman18"><CODE>gsl_rng_fishman18</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ffishman20"><CODE>gsl_rng_fishman20</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ffishman2x"><CODE>gsl_rng_fishman2x</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ffread"><CODE>gsl_rng_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-random-number-generator-state">Reading 
            and writing random number generator state</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ffree"><CODE>gsl_rng_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ffwrite"><CODE>gsl_rng_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-random-number-generator-state">Reading 
            and writing random number generator state</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fget"><CODE>gsl_rng_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sampling-from-a-random-number-generator">Sampling 
            from a random number generator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fgfsr4"><CODE>gsl_rng_gfsr4</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fknuthran"><CODE>gsl_rng_knuthran</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fknuthran2"><CODE>gsl_rng_knuthran2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fknuthran2002"><CODE>gsl_rng_knuthran2002</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005flecuyer21"><CODE>gsl_rng_lecuyer21</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fmax"><CODE>gsl_rng_max</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fmemcpy"><CODE>gsl_rng_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-random-number-generator-state">Copying 
            random number generator state</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fmin"><CODE>gsl_rng_min</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fminstd"><CODE>gsl_rng_minstd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fmrg"><CODE>gsl_rng_mrg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fmt19937"><CODE>gsl_rng_mt19937</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fname"><CODE>gsl_rng_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fr250"><CODE>gsl_rng_r250</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005frand"><CODE>gsl_rng_rand</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005frand48"><CODE>gsl_rng_rand48</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005frandom_005fbsd"><CODE>gsl_rng_random_bsd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005frandom_005fglibc2"><CODE>gsl_rng_random_glibc2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005frandom_005flibc5"><CODE>gsl_rng_random_libc5</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005frandu"><CODE>gsl_rng_randu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franf"><CODE>gsl_rng_ranf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlux"><CODE>gsl_rng_ranlux</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlux389"><CODE>gsl_rng_ranlux389</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlxd1"><CODE>gsl_rng_ranlxd1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlxd2"><CODE>gsl_rng_ranlxd2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlxs0"><CODE>gsl_rng_ranlxs0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlxs1"><CODE>gsl_rng_ranlxs1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franlxs2"><CODE>gsl_rng_ranlxs2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005franmar"><CODE>gsl_rng_ranmar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fset"><CODE>gsl_rng_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fsize"><CODE>gsl_rng_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fslatec"><CODE>gsl_rng_slatec</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fstate"><CODE>gsl_rng_state</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ftaus"><CODE>gsl_rng_taus</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ftaus2"><CODE>gsl_rng_taus2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ftransputer"><CODE>gsl_rng_transputer</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ftt800"><CODE>gsl_rng_tt800</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ftypes_005fsetup"><CODE>gsl_rng_types_setup</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Auxiliary-random-number-generator-functions">Auxiliary 
            random number generator functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005funi"><CODE>gsl_rng_uni</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005funi32"><CODE>gsl_rng_uni32</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005funiform"><CODE>gsl_rng_uniform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sampling-from-a-random-number-generator">Sampling 
            from a random number generator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005funiform_005fint"><CODE>gsl_rng_uniform_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sampling-from-a-random-number-generator">Sampling 
            from a random number generator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005funiform_005fpos"><CODE>gsl_rng_uniform_pos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sampling-from-a-random-number-generator">Sampling 
            from a random number generator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fvax"><CODE>gsl_rng_vax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fwaterman14"><CODE>gsl_rng_waterman14</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fzuf"><CODE>gsl_rng_zuf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005falloc"><CODE>gsl_root_fdfsolver_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005ffree"><CODE>gsl_root_fdfsolver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005fiterate"><CODE>gsl_root_fdfsolver_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Iteration">Root 
            Finding Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005fname"><CODE>gsl_root_fdfsolver_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005fnewton"><CODE>gsl_root_fdfsolver_newton</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005froot"><CODE>gsl_root_fdfsolver_root</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Iteration">Root 
            Finding Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005fsecant"><CODE>gsl_root_fdfsolver_secant</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005fset"><CODE>gsl_root_fdfsolver_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005fsteffenson"><CODE>gsl_root_fdfsolver_steffenson</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005falloc"><CODE>gsl_root_fsolver_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fbisection"><CODE>gsl_root_fsolver_bisection</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fbrent"><CODE>gsl_root_fsolver_brent</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005ffalsepos"><CODE>gsl_root_fsolver_falsepos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005ffree"><CODE>gsl_root_fsolver_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fiterate"><CODE>gsl_root_fsolver_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Iteration">Root 
            Finding Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fname"><CODE>gsl_root_fsolver_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005froot"><CODE>gsl_root_fsolver_root</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Iteration">Root 
            Finding Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fset"><CODE>gsl_root_fsolver_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fx_005flower"><CODE>gsl_root_fsolver_x_lower</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Iteration">Root 
            Finding Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005fx_005fupper"><CODE>gsl_root_fsolver_x_upper</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Iteration">Root 
            Finding Iteration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ftest_005fdelta"><CODE>gsl_root_test_delta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters">Search 
            Stopping Parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ftest_005finterval"><CODE>gsl_root_test_interval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters">Search 
            Stopping Parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ftest_005fresidual"><CODE>gsl_root_test_residual</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters">Search 
            Stopping Parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fadd"><CODE>gsl_rstat_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Adding-Data-to-the-Accumulator">Running 
            Statistics Adding Data to the Accumulator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005falloc"><CODE>gsl_rstat_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Initializing-the-Accumulator">Running 
            Statistics Initializing the Accumulator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005ffree"><CODE>gsl_rstat_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Initializing-the-Accumulator">Running 
            Statistics Initializing the Accumulator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fkurtosis"><CODE>gsl_rstat_kurtosis</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fmax"><CODE>gsl_rstat_max</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fmean"><CODE>gsl_rstat_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fmedian"><CODE>gsl_rstat_median</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fmin"><CODE>gsl_rstat_min</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fn"><CODE>gsl_rstat_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Adding-Data-to-the-Accumulator">Running 
            Statistics Adding Data to the Accumulator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fquantile_005fadd"><CODE>gsl_rstat_quantile_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Quantiles">Running 
            Statistics Quantiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fquantile_005falloc"><CODE>gsl_rstat_quantile_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Quantiles">Running 
            Statistics Quantiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fquantile_005ffree"><CODE>gsl_rstat_quantile_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Quantiles">Running 
            Statistics Quantiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fquantile_005fget"><CODE>gsl_rstat_quantile_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Quantiles">Running 
            Statistics Quantiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005freset"><CODE>gsl_rstat_reset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Initializing-the-Accumulator">Running 
            Statistics Initializing the Accumulator</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fsd"><CODE>gsl_rstat_sd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fskew"><CODE>gsl_rstat_skew</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frstat_005fvariance"><CODE>gsl_rstat_variance</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics-Current-Statistics">Running 
            Statistics Current Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fSET_005fCOMPLEX"><CODE>GSL_SET_COMPLEX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fset_005ferror_005fhandler"><CODE>gsl_set_error_handler</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Handlers">Error 
            Handlers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fset_005ferror_005fhandler_005foff"><CODE>gsl_set_error_handler_off</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Handlers">Error 
            Handlers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fSET_005fIMAG"><CODE>GSL_SET_IMAG</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fSET_005fREAL"><CODE>GSL_SET_REAL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi"><CODE>gsl_sf_airy_Ai</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fderiv"><CODE>gsl_sf_airy_Ai_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fderiv_005fe"><CODE>gsl_sf_airy_Ai_deriv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fderiv_005fscaled"><CODE>gsl_sf_airy_Ai_deriv_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fderiv_005fscaled_005fe"><CODE>gsl_sf_airy_Ai_deriv_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fe"><CODE>gsl_sf_airy_Ai_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fscaled"><CODE>gsl_sf_airy_Ai_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fAi_005fscaled_005fe"><CODE>gsl_sf_airy_Ai_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi"><CODE>gsl_sf_airy_Bi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fderiv"><CODE>gsl_sf_airy_Bi_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fderiv_005fe"><CODE>gsl_sf_airy_Bi_deriv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fderiv_005fscaled"><CODE>gsl_sf_airy_Bi_deriv_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fderiv_005fscaled_005fe"><CODE>gsl_sf_airy_Bi_deriv_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Derivatives-of-Airy-Functions">Derivatives 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fe"><CODE>gsl_sf_airy_Bi_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fscaled"><CODE>gsl_sf_airy_Bi_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fBi_005fscaled_005fe"><CODE>gsl_sf_airy_Bi_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions">Airy 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fAi"><CODE>gsl_sf_airy_zero_Ai</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Airy-Functions">Zeros 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fAi_005fderiv"><CODE>gsl_sf_airy_zero_Ai_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Derivatives-of-Airy-Functions">Zeros 
            of Derivatives of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fAi_005fderiv_005fe"><CODE>gsl_sf_airy_zero_Ai_deriv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Derivatives-of-Airy-Functions">Zeros 
            of Derivatives of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fAi_005fe"><CODE>gsl_sf_airy_zero_Ai_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Airy-Functions">Zeros 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fBi"><CODE>gsl_sf_airy_zero_Bi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Airy-Functions">Zeros 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fBi_005fderiv"><CODE>gsl_sf_airy_zero_Bi_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Derivatives-of-Airy-Functions">Zeros 
            of Derivatives of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fBi_005fderiv_005fe"><CODE>gsl_sf_airy_zero_Bi_deriv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Derivatives-of-Airy-Functions">Zeros 
            of Derivatives of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fairy_005fzero_005fBi_005fe"><CODE>gsl_sf_airy_zero_Bi_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Airy-Functions">Zeros 
            of Airy Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fangle_005frestrict_005fpos"><CODE>gsl_sf_angle_restrict_pos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Restriction-Functions">Restriction 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fangle_005frestrict_005fpos_005fe"><CODE>gsl_sf_angle_restrict_pos_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Restriction-Functions">Restriction 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fangle_005frestrict_005fsymm"><CODE>gsl_sf_angle_restrict_symm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Restriction-Functions">Restriction 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fangle_005frestrict_005fsymm_005fe"><CODE>gsl_sf_angle_restrict_symm_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Restriction-Functions">Restriction 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fatanint"><CODE>gsl_sf_atanint</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Arctangent-Integral">Arctangent 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fatanint_005fe"><CODE>gsl_sf_atanint_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Arctangent-Integral">Arctangent 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI0"><CODE>gsl_sf_bessel_I0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI0_005fe"><CODE>gsl_sf_bessel_I0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI0_005fscaled"><CODE>gsl_sf_bessel_I0_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fi0_005fscaled"><CODE>gsl_sf_bessel_i0_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI0_005fscaled_005fe"><CODE>gsl_sf_bessel_I0_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fi0_005fscaled_005fe"><CODE>gsl_sf_bessel_i0_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI1"><CODE>gsl_sf_bessel_I1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI1_005fe"><CODE>gsl_sf_bessel_I1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI1_005fscaled"><CODE>gsl_sf_bessel_I1_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fi1_005fscaled"><CODE>gsl_sf_bessel_i1_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fI1_005fscaled_005fe"><CODE>gsl_sf_bessel_I1_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fi1_005fscaled_005fe"><CODE>gsl_sf_bessel_i1_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fi2_005fscaled"><CODE>gsl_sf_bessel_i2_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fi2_005fscaled_005fe"><CODE>gsl_sf_bessel_i2_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fil_005fscaled"><CODE>gsl_sf_bessel_il_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fil_005fscaled_005farray"><CODE>gsl_sf_bessel_il_scaled_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fil_005fscaled_005fe"><CODE>gsl_sf_bessel_il_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fIn"><CODE>gsl_sf_bessel_In</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fInu"><CODE>gsl_sf_bessel_Inu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fInu_005fe"><CODE>gsl_sf_bessel_Inu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fInu_005fscaled"><CODE>gsl_sf_bessel_Inu_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fInu_005fscaled_005fe"><CODE>gsl_sf_bessel_Inu_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fIn_005farray"><CODE>gsl_sf_bessel_In_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fIn_005fe"><CODE>gsl_sf_bessel_In_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fIn_005fscaled"><CODE>gsl_sf_bessel_In_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fIn_005fscaled_005farray"><CODE>gsl_sf_bessel_In_scaled_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fIn_005fscaled_005fe"><CODE>gsl_sf_bessel_In_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJ0"><CODE>gsl_sf_bessel_J0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fj0"><CODE>gsl_sf_bessel_j0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJ0_005fe"><CODE>gsl_sf_bessel_J0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fj0_005fe"><CODE>gsl_sf_bessel_j0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJ1"><CODE>gsl_sf_bessel_J1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fj1"><CODE>gsl_sf_bessel_j1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJ1_005fe"><CODE>gsl_sf_bessel_J1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fj1_005fe"><CODE>gsl_sf_bessel_j1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fj2"><CODE>gsl_sf_bessel_j2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fj2_005fe"><CODE>gsl_sf_bessel_j2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fjl"><CODE>gsl_sf_bessel_jl</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fjl_005farray"><CODE>gsl_sf_bessel_jl_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fjl_005fe"><CODE>gsl_sf_bessel_jl_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fjl_005fsteed_005farray"><CODE>gsl_sf_bessel_jl_steed_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJn"><CODE>gsl_sf_bessel_Jn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJnu"><CODE>gsl_sf_bessel_Jnu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJnu_005fe"><CODE>gsl_sf_bessel_Jnu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJn_005farray"><CODE>gsl_sf_bessel_Jn_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fJn_005fe"><CODE>gsl_sf_bessel_Jn_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK0"><CODE>gsl_sf_bessel_K0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK0_005fe"><CODE>gsl_sf_bessel_K0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK0_005fscaled"><CODE>gsl_sf_bessel_K0_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fk0_005fscaled"><CODE>gsl_sf_bessel_k0_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK0_005fscaled_005fe"><CODE>gsl_sf_bessel_K0_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fk0_005fscaled_005fe"><CODE>gsl_sf_bessel_k0_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK1"><CODE>gsl_sf_bessel_K1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK1_005fe"><CODE>gsl_sf_bessel_K1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK1_005fscaled"><CODE>gsl_sf_bessel_K1_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fk1_005fscaled"><CODE>gsl_sf_bessel_k1_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fK1_005fscaled_005fe"><CODE>gsl_sf_bessel_K1_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fk1_005fscaled_005fe"><CODE>gsl_sf_bessel_k1_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fk2_005fscaled"><CODE>gsl_sf_bessel_k2_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fk2_005fscaled_005fe"><CODE>gsl_sf_bessel_k2_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fkl_005fscaled"><CODE>gsl_sf_bessel_kl_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fkl_005fscaled_005farray"><CODE>gsl_sf_bessel_kl_scaled_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fkl_005fscaled_005fe"><CODE>gsl_sf_bessel_kl_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKn"><CODE>gsl_sf_bessel_Kn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKnu"><CODE>gsl_sf_bessel_Knu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKnu_005fe"><CODE>gsl_sf_bessel_Knu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKnu_005fscaled"><CODE>gsl_sf_bessel_Knu_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKnu_005fscaled_005fe"><CODE>gsl_sf_bessel_Knu_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKn_005farray"><CODE>gsl_sf_bessel_Kn_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKn_005fe"><CODE>gsl_sf_bessel_Kn_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKn_005fscaled"><CODE>gsl_sf_bessel_Kn_scaled</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKn_005fscaled_005farray"><CODE>gsl_sf_bessel_Kn_scaled_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fKn_005fscaled_005fe"><CODE>gsl_sf_bessel_Kn_scaled_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005flnKnu"><CODE>gsl_sf_bessel_lnKnu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005flnKnu_005fe"><CODE>gsl_sf_bessel_lnKnu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fsequence_005fJnu_005fe"><CODE>gsl_sf_bessel_sequence_Jnu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fY0"><CODE>gsl_sf_bessel_Y0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fy0"><CODE>gsl_sf_bessel_y0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fY0_005fe"><CODE>gsl_sf_bessel_Y0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fy0_005fe"><CODE>gsl_sf_bessel_y0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fY1"><CODE>gsl_sf_bessel_Y1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fy1"><CODE>gsl_sf_bessel_y1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fY1_005fe"><CODE>gsl_sf_bessel_Y1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fy1_005fe"><CODE>gsl_sf_bessel_y1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fy2"><CODE>gsl_sf_bessel_y2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fy2_005fe"><CODE>gsl_sf_bessel_y2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fyl"><CODE>gsl_sf_bessel_yl</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fyl_005farray"><CODE>gsl_sf_bessel_yl_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fyl_005fe"><CODE>gsl_sf_bessel_yl_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fYn"><CODE>gsl_sf_bessel_Yn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fYnu"><CODE>gsl_sf_bessel_Ynu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fYnu_005fe"><CODE>gsl_sf_bessel_Ynu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fYn_005farray"><CODE>gsl_sf_bessel_Yn_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fYn_005fe"><CODE>gsl_sf_bessel_Yn_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fzero_005fJ0"><CODE>gsl_sf_bessel_zero_J0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fzero_005fJ0_005fe"><CODE>gsl_sf_bessel_zero_J0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fzero_005fJ1"><CODE>gsl_sf_bessel_zero_J1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fzero_005fJ1_005fe"><CODE>gsl_sf_bessel_zero_J1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fzero_005fJnu"><CODE>gsl_sf_bessel_zero_Jnu</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbessel_005fzero_005fJnu_005fe"><CODE>gsl_sf_bessel_zero_Jnu_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbeta"><CODE>gsl_sf_beta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Beta-Functions">Beta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbeta_005fe"><CODE>gsl_sf_beta_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Beta-Functions">Beta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbeta_005finc"><CODE>gsl_sf_beta_inc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Beta-Function">Incomplete 
            Beta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fbeta_005finc_005fe"><CODE>gsl_sf_beta_inc_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Beta-Function">Incomplete 
            Beta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fChi"><CODE>gsl_sf_Chi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fChi_005fe"><CODE>gsl_sf_Chi_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fchoose"><CODE>gsl_sf_choose</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fchoose_005fe"><CODE>gsl_sf_choose_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fCi"><CODE>gsl_sf_Ci</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fCi_005fe"><CODE>gsl_sf_Ci_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fclausen"><CODE>gsl_sf_clausen</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Clausen-Functions">Clausen 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fclausen_005fe"><CODE>gsl_sf_clausen_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Clausen-Functions">Clausen 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcomplex_005fcos_005fe"><CODE>gsl_sf_complex_cos_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcomplex_005fdilog_005fe"><CODE>gsl_sf_complex_dilog_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Argument">Complex 
            Argument</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcomplex_005flogsin_005fe"><CODE>gsl_sf_complex_logsin_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcomplex_005flog_005fe"><CODE>gsl_sf_complex_log_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcomplex_005fsin_005fe"><CODE>gsl_sf_complex_sin_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005f0"><CODE>gsl_sf_conicalP_0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005f0_005fe"><CODE>gsl_sf_conicalP_0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005f1"><CODE>gsl_sf_conicalP_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005f1_005fe"><CODE>gsl_sf_conicalP_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fcyl_005freg"><CODE>gsl_sf_conicalP_cyl_reg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fcyl_005freg_005fe"><CODE>gsl_sf_conicalP_cyl_reg_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fhalf"><CODE>gsl_sf_conicalP_half</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fhalf_005fe"><CODE>gsl_sf_conicalP_half_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fmhalf"><CODE>gsl_sf_conicalP_mhalf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fmhalf_005fe"><CODE>gsl_sf_conicalP_mhalf_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fsph_005freg"><CODE>gsl_sf_conicalP_sph_reg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fconicalP_005fsph_005freg_005fe"><CODE>gsl_sf_conicalP_sph_reg_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conical-Functions">Conical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcos"><CODE>gsl_sf_cos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcos_005fe"><CODE>gsl_sf_cos_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcos_005ferr_005fe"><CODE>gsl_sf_cos_err_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-With-Error-Estimates">Trigonometric 
            Functions With Error Estimates</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fCL_005farray"><CODE>gsl_sf_coulomb_CL_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Function-Normalization-Constant">Coulomb 
            Wave Function Normalization Constant</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fCL_005fe"><CODE>gsl_sf_coulomb_CL_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Function-Normalization-Constant">Coulomb 
            Wave Function Normalization Constant</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fwave_005fFGp_005farray"><CODE>gsl_sf_coulomb_wave_FGp_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Functions">Coulomb 
            Wave Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fwave_005fFG_005farray"><CODE>gsl_sf_coulomb_wave_FG_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Functions">Coulomb 
            Wave Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fwave_005fFG_005fe"><CODE>gsl_sf_coulomb_wave_FG_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Functions">Coulomb 
            Wave Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fwave_005fF_005farray"><CODE>gsl_sf_coulomb_wave_F_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Functions">Coulomb 
            Wave Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoulomb_005fwave_005fsphF_005farray"><CODE>gsl_sf_coulomb_wave_sphF_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Wave-Functions">Coulomb 
            Wave Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoupling_005f3j"><CODE>gsl_sf_coupling_3j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t3_002dj-Symbols">3-j 
            Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoupling_005f3j_005fe"><CODE>gsl_sf_coupling_3j_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t3_002dj-Symbols">3-j 
            Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoupling_005f6j"><CODE>gsl_sf_coupling_6j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t6_002dj-Symbols">6-j 
            Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoupling_005f6j_005fe"><CODE>gsl_sf_coupling_6j_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t6_002dj-Symbols">6-j 
            Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoupling_005f9j"><CODE>gsl_sf_coupling_9j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t9_002dj-Symbols">9-j 
            Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fcoupling_005f9j_005fe"><CODE>gsl_sf_coupling_9j_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t9_002dj-Symbols">9-j 
            Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdawson"><CODE>gsl_sf_dawson</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Dawson-Function">Dawson 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdawson_005fe"><CODE>gsl_sf_dawson_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Dawson-Function">Dawson 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f1"><CODE>gsl_sf_debye_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f1_005fe"><CODE>gsl_sf_debye_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f2"><CODE>gsl_sf_debye_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f2_005fe"><CODE>gsl_sf_debye_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f3"><CODE>gsl_sf_debye_3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f3_005fe"><CODE>gsl_sf_debye_3_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f4"><CODE>gsl_sf_debye_4</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f4_005fe"><CODE>gsl_sf_debye_4_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f5"><CODE>gsl_sf_debye_5</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f5_005fe"><CODE>gsl_sf_debye_5_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f6"><CODE>gsl_sf_debye_6</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdebye_005f6_005fe"><CODE>gsl_sf_debye_6_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdilog"><CODE>gsl_sf_dilog</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Argument">Real 
            Argument</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdilog_005fe"><CODE>gsl_sf_dilog_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Argument">Real 
            Argument</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdoublefact"><CODE>gsl_sf_doublefact</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fdoublefact_005fe"><CODE>gsl_sf_doublefact_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fD"><CODE>gsl_sf_ellint_D</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fD_005fe"><CODE>gsl_sf_ellint_D_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fE"><CODE>gsl_sf_ellint_E</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fEcomp"><CODE>gsl_sf_ellint_Ecomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fEcomp_005fe"><CODE>gsl_sf_ellint_Ecomp_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fE_005fe"><CODE>gsl_sf_ellint_E_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fF"><CODE>gsl_sf_ellint_F</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fF_005fe"><CODE>gsl_sf_ellint_F_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fKcomp"><CODE>gsl_sf_ellint_Kcomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fKcomp_005fe"><CODE>gsl_sf_ellint_Kcomp_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fP"><CODE>gsl_sf_ellint_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fPcomp"><CODE>gsl_sf_ellint_Pcomp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fPcomp_005fe"><CODE>gsl_sf_ellint_Pcomp_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Complete-Elliptic-Integrals">Legendre 
            Form of Complete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fP_005fe"><CODE>gsl_sf_ellint_P_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Form-of-Incomplete-Elliptic-Integrals">Legendre 
            Form of Incomplete Elliptic Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRC"><CODE>gsl_sf_ellint_RC</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRC_005fe"><CODE>gsl_sf_ellint_RC_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRD"><CODE>gsl_sf_ellint_RD</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRD_005fe"><CODE>gsl_sf_ellint_RD_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRF"><CODE>gsl_sf_ellint_RF</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRF_005fe"><CODE>gsl_sf_ellint_RF_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRJ"><CODE>gsl_sf_ellint_RJ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fellint_005fRJ_005fe"><CODE>gsl_sf_ellint_RJ_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Carlson-Forms">Carlson 
            Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005felljac_005fe"><CODE>gsl_sf_elljac_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elliptic-Functions-_0028Jacobi_0029">Elliptic 
            Functions (Jacobi)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferf"><CODE>gsl_sf_erf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Function">Error 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferfc"><CODE>gsl_sf_erfc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complementary-Error-Function">Complementary 
            Error Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferfc_005fe"><CODE>gsl_sf_erfc_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complementary-Error-Function">Complementary 
            Error Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferf_005fe"><CODE>gsl_sf_erf_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Function">Error 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferf_005fQ"><CODE>gsl_sf_erf_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferf_005fQ_005fe"><CODE>gsl_sf_erf_Q_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferf_005fZ"><CODE>gsl_sf_erf_Z</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ferf_005fZ_005fe"><CODE>gsl_sf_erf_Z_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005feta"><CODE>gsl_sf_eta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eta-Function">Eta 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005feta_005fe"><CODE>gsl_sf_eta_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eta-Function">Eta 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005feta_005fint"><CODE>gsl_sf_eta_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eta-Function">Eta 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005feta_005fint_005fe"><CODE>gsl_sf_eta_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eta-Function">Eta 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp"><CODE>gsl_sf_exp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Function">Exponential 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005f3"><CODE>gsl_sf_expint_3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ei_005f3_0028x_0029">Ei_3(x)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005f3_005fe"><CODE>gsl_sf_expint_3_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ei_005f3_0028x_0029">Ei_3(x)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fE1"><CODE>gsl_sf_expint_E1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fE1_005fe"><CODE>gsl_sf_expint_E1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fE2"><CODE>gsl_sf_expint_E2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fE2_005fe"><CODE>gsl_sf_expint_E2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fEi"><CODE>gsl_sf_expint_Ei</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ei_0028x_0029">Ei(x)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fEi_005fe"><CODE>gsl_sf_expint_Ei_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ei_0028x_0029">Ei(x)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fEn"><CODE>gsl_sf_expint_En</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpint_005fEn_005fe"><CODE>gsl_sf_expint_En_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpm1"><CODE>gsl_sf_expm1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexpm1_005fe"><CODE>gsl_sf_expm1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexprel"><CODE>gsl_sf_exprel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexprel_005f2"><CODE>gsl_sf_exprel_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexprel_005f2_005fe"><CODE>gsl_sf_exprel_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexprel_005fe"><CODE>gsl_sf_exprel_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexprel_005fn"><CODE>gsl_sf_exprel_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexprel_005fn_005fe"><CODE>gsl_sf_exprel_n_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Relative-Exponential-Functions">Relative 
            Exponential Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fe"><CODE>gsl_sf_exp_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Function">Exponential 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fe10_005fe"><CODE>gsl_sf_exp_e10_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Function">Exponential 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005ferr_005fe"><CODE>gsl_sf_exp_err_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponentiation-With-Error-Estimate">Exponentiation 
            With Error Estimate</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005ferr_005fe10_005fe"><CODE>gsl_sf_exp_err_e10_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponentiation-With-Error-Estimate">Exponentiation 
            With Error Estimate</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fmult"><CODE>gsl_sf_exp_mult</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Function">Exponential 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fmult_005fe"><CODE>gsl_sf_exp_mult_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Function">Exponential 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fmult_005fe10_005fe"><CODE>gsl_sf_exp_mult_e10_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Function">Exponential 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fmult_005ferr_005fe"><CODE>gsl_sf_exp_mult_err_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponentiation-With-Error-Estimate">Exponentiation 
            With Error Estimate</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fexp_005fmult_005ferr_005fe10_005fe"><CODE>gsl_sf_exp_mult_err_e10_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponentiation-With-Error-Estimate">Exponentiation 
            With Error Estimate</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffact"><CODE>gsl_sf_fact</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffact_005fe"><CODE>gsl_sf_fact_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f0"><CODE>gsl_sf_fermi_dirac_0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f0_005fe"><CODE>gsl_sf_fermi_dirac_0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f1"><CODE>gsl_sf_fermi_dirac_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f1_005fe"><CODE>gsl_sf_fermi_dirac_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f2"><CODE>gsl_sf_fermi_dirac_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f2_005fe"><CODE>gsl_sf_fermi_dirac_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f3half"><CODE>gsl_sf_fermi_dirac_3half</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005f3half_005fe"><CODE>gsl_sf_fermi_dirac_3half_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fhalf"><CODE>gsl_sf_fermi_dirac_half</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fhalf_005fe"><CODE>gsl_sf_fermi_dirac_half_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005finc_005f0"><CODE>gsl_sf_fermi_dirac_inc_0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Fermi_002dDirac-Integrals">Incomplete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005finc_005f0_005fe"><CODE>gsl_sf_fermi_dirac_inc_0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Fermi_002dDirac-Integrals">Incomplete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fint"><CODE>gsl_sf_fermi_dirac_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fint_005fe"><CODE>gsl_sf_fermi_dirac_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fm1"><CODE>gsl_sf_fermi_dirac_m1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fm1_005fe"><CODE>gsl_sf_fermi_dirac_m1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fmhalf"><CODE>gsl_sf_fermi_dirac_mhalf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ffermi_005fdirac_005fmhalf_005fe"><CODE>gsl_sf_fermi_dirac_mhalf_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma"><CODE>gsl_sf_gamma</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgammainv"><CODE>gsl_sf_gammainv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgammainv_005fe"><CODE>gsl_sf_gammainv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgammastar"><CODE>gsl_sf_gammastar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgammastar_005fe"><CODE>gsl_sf_gammastar_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005fe"><CODE>gsl_sf_gamma_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005finc"><CODE>gsl_sf_gamma_inc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005finc_005fe"><CODE>gsl_sf_gamma_inc_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005finc_005fP"><CODE>gsl_sf_gamma_inc_P</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005finc_005fP_005fe"><CODE>gsl_sf_gamma_inc_P_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005finc_005fQ"><CODE>gsl_sf_gamma_inc_Q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgamma_005finc_005fQ_005fe"><CODE>gsl_sf_gamma_inc_Q_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005f1"><CODE>gsl_sf_gegenpoly_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005f1_005fe"><CODE>gsl_sf_gegenpoly_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005f2"><CODE>gsl_sf_gegenpoly_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005f2_005fe"><CODE>gsl_sf_gegenpoly_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005f3"><CODE>gsl_sf_gegenpoly_3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005f3_005fe"><CODE>gsl_sf_gegenpoly_3_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005farray"><CODE>gsl_sf_gegenpoly_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005fn"><CODE>gsl_sf_gegenpoly_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fgegenpoly_005fn_005fe"><CODE>gsl_sf_gegenpoly_n_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhazard"><CODE>gsl_sf_hazard</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhazard_005fe"><CODE>gsl_sf_hazard_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhydrogenicR"><CODE>gsl_sf_hydrogenicR</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Normalized-Hydrogenic-Bound-States">Normalized 
            Hydrogenic Bound States</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhydrogenicR_005f1"><CODE>gsl_sf_hydrogenicR_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Normalized-Hydrogenic-Bound-States">Normalized 
            Hydrogenic Bound States</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhydrogenicR_005f1_005fe"><CODE>gsl_sf_hydrogenicR_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Normalized-Hydrogenic-Bound-States">Normalized 
            Hydrogenic Bound States</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhydrogenicR_005fe"><CODE>gsl_sf_hydrogenicR_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Normalized-Hydrogenic-Bound-States">Normalized 
            Hydrogenic Bound States</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f0F1"><CODE>gsl_sf_hyperg_0F1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f0F1_005fe"><CODE>gsl_sf_hyperg_0F1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f1F1"><CODE>gsl_sf_hyperg_1F1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f1F1_005fe"><CODE>gsl_sf_hyperg_1F1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f1F1_005fint"><CODE>gsl_sf_hyperg_1F1_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f1F1_005fint_005fe"><CODE>gsl_sf_hyperg_1F1_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F0"><CODE>gsl_sf_hyperg_2F0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F0_005fe"><CODE>gsl_sf_hyperg_2F0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1"><CODE>gsl_sf_hyperg_2F1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005fconj"><CODE>gsl_sf_hyperg_2F1_conj</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005fconj_005fe"><CODE>gsl_sf_hyperg_2F1_conj_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005fconj_005frenorm"><CODE>gsl_sf_hyperg_2F1_conj_renorm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005fconj_005frenorm_005fe"><CODE>gsl_sf_hyperg_2F1_conj_renorm_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005fe"><CODE>gsl_sf_hyperg_2F1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005frenorm"><CODE>gsl_sf_hyperg_2F1_renorm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005f2F1_005frenorm_005fe"><CODE>gsl_sf_hyperg_2F1_renorm_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005fU"><CODE>gsl_sf_hyperg_U</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005fU_005fe"><CODE>gsl_sf_hyperg_U_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005fU_005fe10_005fe"><CODE>gsl_sf_hyperg_U_e10_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005fU_005fint"><CODE>gsl_sf_hyperg_U_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005fU_005fint_005fe"><CODE>gsl_sf_hyperg_U_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhyperg_005fU_005fint_005fe10_005fe"><CODE>gsl_sf_hyperg_U_int_e10_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhypot"><CODE>gsl_sf_hypot</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhypot_005fe"><CODE>gsl_sf_hypot_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhzeta"><CODE>gsl_sf_hzeta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hurwitz-Zeta-Function">Hurwitz 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fhzeta_005fe"><CODE>gsl_sf_hzeta_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hurwitz-Zeta-Function">Hurwitz 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005f1"><CODE>gsl_sf_laguerre_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005f1_005fe"><CODE>gsl_sf_laguerre_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005f2"><CODE>gsl_sf_laguerre_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005f2_005fe"><CODE>gsl_sf_laguerre_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005f3"><CODE>gsl_sf_laguerre_3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005f3_005fe"><CODE>gsl_sf_laguerre_3_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005fn"><CODE>gsl_sf_laguerre_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flaguerre_005fn_005fe"><CODE>gsl_sf_laguerre_n_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flambert_005fW0"><CODE>gsl_sf_lambert_W0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Lambert-W-Functions">Lambert 
            W Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flambert_005fW0_005fe"><CODE>gsl_sf_lambert_W0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Lambert-W-Functions">Lambert 
            W Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flambert_005fWm1"><CODE>gsl_sf_lambert_Wm1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Lambert-W-Functions">Lambert 
            W Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flambert_005fWm1_005fe"><CODE>gsl_sf_lambert_Wm1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Lambert-W-Functions">Lambert 
            W Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005farray"><CODE>gsl_sf_legendre_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005farray_005fe"><CODE>gsl_sf_legendre_array_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005farray_005findex"><CODE>gsl_sf_legendre_array_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005farray_005fn"><CODE>gsl_sf_legendre_array_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005farray_005fsize"><CODE>gsl_sf_legendre_array_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv2_005falt_005farray"><CODE>gsl_sf_legendre_deriv2_alt_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv2_005falt_005farray_005fe"><CODE>gsl_sf_legendre_deriv2_alt_array_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv2_005farray"><CODE>gsl_sf_legendre_deriv2_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv2_005farray_005fe"><CODE>gsl_sf_legendre_deriv2_array_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv_005falt_005farray"><CODE>gsl_sf_legendre_deriv_alt_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv_005falt_005farray_005fe"><CODE>gsl_sf_legendre_deriv_alt_array_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv_005farray"><CODE>gsl_sf_legendre_deriv_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fderiv_005farray_005fe"><CODE>gsl_sf_legendre_deriv_array_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d"><CODE>gsl_sf_legendre_H3d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d_005f0"><CODE>gsl_sf_legendre_H3d_0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d_005f0_005fe"><CODE>gsl_sf_legendre_H3d_0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d_005f1"><CODE>gsl_sf_legendre_H3d_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d_005f1_005fe"><CODE>gsl_sf_legendre_H3d_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d_005farray"><CODE>gsl_sf_legendre_H3d_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fH3d_005fe"><CODE>gsl_sf_legendre_H3d_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Functions-for-Hyperbolic-Space">Radial 
            Functions for Hyperbolic Space</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fP1"><CODE>gsl_sf_legendre_P1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fP1_005fe"><CODE>gsl_sf_legendre_P1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fP2"><CODE>gsl_sf_legendre_P2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fP2_005fe"><CODE>gsl_sf_legendre_P2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fP3"><CODE>gsl_sf_legendre_P3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fP3_005fe"><CODE>gsl_sf_legendre_P3_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPl"><CODE>gsl_sf_legendre_Pl</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPlm"><CODE>gsl_sf_legendre_Plm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPlm_005farray"><CODE>gsl_sf_legendre_Plm_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPlm_005fderiv_005farray"><CODE>gsl_sf_legendre_Plm_deriv_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPlm_005fe"><CODE>gsl_sf_legendre_Plm_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPl_005farray"><CODE>gsl_sf_legendre_Pl_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPl_005fderiv_005farray"><CODE>gsl_sf_legendre_Pl_deriv_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fPl_005fe"><CODE>gsl_sf_legendre_Pl_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fQ0"><CODE>gsl_sf_legendre_Q0</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fQ0_005fe"><CODE>gsl_sf_legendre_Q0_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fQ1"><CODE>gsl_sf_legendre_Q1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fQ1_005fe"><CODE>gsl_sf_legendre_Q1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fQl"><CODE>gsl_sf_legendre_Ql</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fQl_005fe"><CODE>gsl_sf_legendre_Ql_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Polynomials">Legendre 
            Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fsphPlm"><CODE>gsl_sf_legendre_sphPlm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fsphPlm_005farray"><CODE>gsl_sf_legendre_sphPlm_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fsphPlm_005fderiv_005farray"><CODE>gsl_sf_legendre_sphPlm_deriv_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flegendre_005fsphPlm_005fe"><CODE>gsl_sf_legendre_sphPlm_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Associated-Legendre-Polynomials-and-Spherical-Harmonics">Associated 
            Legendre Polynomials and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnbeta"><CODE>gsl_sf_lnbeta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Beta-Functions">Beta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnbeta_005fe"><CODE>gsl_sf_lnbeta_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Beta-Functions">Beta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnchoose"><CODE>gsl_sf_lnchoose</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnchoose_005fe"><CODE>gsl_sf_lnchoose_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flncosh"><CODE>gsl_sf_lncosh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flncosh_005fe"><CODE>gsl_sf_lncosh_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flndoublefact"><CODE>gsl_sf_lndoublefact</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flndoublefact_005fe"><CODE>gsl_sf_lndoublefact_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnfact"><CODE>gsl_sf_lnfact</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnfact_005fe"><CODE>gsl_sf_lnfact_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flngamma"><CODE>gsl_sf_lngamma</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flngamma_005fcomplex_005fe"><CODE>gsl_sf_lngamma_complex_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flngamma_005fe"><CODE>gsl_sf_lngamma_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flngamma_005fsgn_005fe"><CODE>gsl_sf_lngamma_sgn_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnpoch"><CODE>gsl_sf_lnpoch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnpoch_005fe"><CODE>gsl_sf_lnpoch_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnpoch_005fsgn_005fe"><CODE>gsl_sf_lnpoch_sgn_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnsinh"><CODE>gsl_sf_lnsinh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flnsinh_005fe"><CODE>gsl_sf_lnsinh_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog"><CODE>gsl_sf_log</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005f1plusx"><CODE>gsl_sf_log_1plusx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005f1plusx_005fe"><CODE>gsl_sf_log_1plusx_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005f1plusx_005fmx"><CODE>gsl_sf_log_1plusx_mx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005f1plusx_005fmx_005fe"><CODE>gsl_sf_log_1plusx_mx_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005fabs"><CODE>gsl_sf_log_abs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005fabs_005fe"><CODE>gsl_sf_log_abs_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005fe"><CODE>gsl_sf_log_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005ferfc"><CODE>gsl_sf_log_erfc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Log-Complementary-Error-Function">Log 
            Complementary Error Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005flog_005ferfc_005fe"><CODE>gsl_sf_log_erfc_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Log-Complementary-Error-Function">Log 
            Complementary Error Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fa"><CODE>gsl_sf_mathieu_a</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005falloc"><CODE>gsl_sf_mathieu_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Workspace">Mathieu 
            Function Workspace</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fa_005farray"><CODE>gsl_sf_mathieu_a_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fa_005fe"><CODE>gsl_sf_mathieu_a_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fb"><CODE>gsl_sf_mathieu_b</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fb_005farray"><CODE>gsl_sf_mathieu_b_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fb_005fe"><CODE>gsl_sf_mathieu_b_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fce"><CODE>gsl_sf_mathieu_ce</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fce_005farray"><CODE>gsl_sf_mathieu_ce_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fce_005fe"><CODE>gsl_sf_mathieu_ce_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005ffree"><CODE>gsl_sf_mathieu_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Workspace">Mathieu 
            Function Workspace</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fMc"><CODE>gsl_sf_mathieu_Mc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fMc_005farray"><CODE>gsl_sf_mathieu_Mc_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fMc_005fe"><CODE>gsl_sf_mathieu_Mc_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fMs"><CODE>gsl_sf_mathieu_Ms</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fMs_005farray"><CODE>gsl_sf_mathieu_Ms_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fMs_005fe"><CODE>gsl_sf_mathieu_Ms_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fse"><CODE>gsl_sf_mathieu_se</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fse_005farray"><CODE>gsl_sf_mathieu_se_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fse_005fe"><CODE>gsl_sf_mathieu_se_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmultiply_005fe"><CODE>gsl_sf_multiply_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Operations">Elementary 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmultiply_005ferr_005fe"><CODE>gsl_sf_multiply_err_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Operations">Elementary 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpoch"><CODE>gsl_sf_poch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpochrel"><CODE>gsl_sf_pochrel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpochrel_005fe"><CODE>gsl_sf_pochrel_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpoch_005fe"><CODE>gsl_sf_poch_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpolar_005fto_005frect"><CODE>gsl_sf_polar_to_rect</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-Functions">Conversion 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpow_005fint"><CODE>gsl_sf_pow_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Power-Function">Power 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpow_005fint_005fe"><CODE>gsl_sf_pow_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Power-Function">Power 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi"><CODE>gsl_sf_psi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Digamma-Function">Digamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005f1"><CODE>gsl_sf_psi_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigamma-Function">Trigamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005f1piy"><CODE>gsl_sf_psi_1piy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Digamma-Function">Digamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005f1piy_005fe"><CODE>gsl_sf_psi_1piy_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Digamma-Function">Digamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005f1_005fe"><CODE>gsl_sf_psi_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigamma-Function">Trigamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005f1_005fint"><CODE>gsl_sf_psi_1_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigamma-Function">Trigamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005f1_005fint_005fe"><CODE>gsl_sf_psi_1_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigamma-Function">Trigamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005fe"><CODE>gsl_sf_psi_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Digamma-Function">Digamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005fint"><CODE>gsl_sf_psi_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Digamma-Function">Digamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005fint_005fe"><CODE>gsl_sf_psi_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Digamma-Function">Digamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005fn"><CODE>gsl_sf_psi_n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polygamma-Function">Polygamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fpsi_005fn_005fe"><CODE>gsl_sf_psi_n_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polygamma-Function">Polygamma 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005frect_005fto_005fpolar"><CODE>gsl_sf_rect_to_polar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-Functions">Conversion 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fShi"><CODE>gsl_sf_Shi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fShi_005fe"><CODE>gsl_sf_Shi_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fSi"><CODE>gsl_sf_Si</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsin"><CODE>gsl_sf_sin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsinc"><CODE>gsl_sf_sinc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsinc_005fe"><CODE>gsl_sf_sinc_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsin_005fe"><CODE>gsl_sf_sin_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsin_005ferr_005fe"><CODE>gsl_sf_sin_err_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-With-Error-Estimates">Trigonometric 
            Functions With Error Estimates</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fSi_005fe"><CODE>gsl_sf_Si_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsynchrotron_005f1"><CODE>gsl_sf_synchrotron_1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Synchrotron-Functions">Synchrotron 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsynchrotron_005f1_005fe"><CODE>gsl_sf_synchrotron_1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Synchrotron-Functions">Synchrotron 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsynchrotron_005f2"><CODE>gsl_sf_synchrotron_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Synchrotron-Functions">Synchrotron 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fsynchrotron_005f2_005fe"><CODE>gsl_sf_synchrotron_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Synchrotron-Functions">Synchrotron 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftaylorcoeff"><CODE>gsl_sf_taylorcoeff</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftaylorcoeff_005fe"><CODE>gsl_sf_taylorcoeff_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f2"><CODE>gsl_sf_transport_2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f2_005fe"><CODE>gsl_sf_transport_2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f3"><CODE>gsl_sf_transport_3</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f3_005fe"><CODE>gsl_sf_transport_3_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f4"><CODE>gsl_sf_transport_4</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f4_005fe"><CODE>gsl_sf_transport_4_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f5"><CODE>gsl_sf_transport_5</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005ftransport_005f5_005fe"><CODE>gsl_sf_transport_5_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzeta"><CODE>gsl_sf_zeta</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function">Riemann 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzetam1"><CODE>gsl_sf_zetam1</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function-Minus-One">Riemann 
            Zeta Function Minus One</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzetam1_005fe"><CODE>gsl_sf_zetam1_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function-Minus-One">Riemann 
            Zeta Function Minus One</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzetam1_005fint"><CODE>gsl_sf_zetam1_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function-Minus-One">Riemann 
            Zeta Function Minus One</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzetam1_005fint_005fe"><CODE>gsl_sf_zetam1_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function-Minus-One">Riemann 
            Zeta Function Minus One</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzeta_005fe"><CODE>gsl_sf_zeta_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function">Riemann 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzeta_005fint"><CODE>gsl_sf_zeta_int</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function">Riemann 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fzeta_005fint_005fe"><CODE>gsl_sf_zeta_int_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function">Riemann 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fSIGN"><CODE>GSL_SIGN</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Testing-the-Sign-of-Numbers">Testing 
            the Sign of Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fsolve"><CODE>gsl_siman_solve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort"><CODE>gsl_sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort2"><CODE>gsl_sort2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005findex"><CODE>gsl_sort_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005flargest"><CODE>gsl_sort_largest</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005flargest_005findex"><CODE>gsl_sort_largest_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fsmallest"><CODE>gsl_sort_smallest</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fsmallest_005findex"><CODE>gsl_sort_smallest_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector"><CODE>gsl_sort_vector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector2"><CODE>gsl_sort_vector2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector_005findex"><CODE>gsl_sort_vector_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector_005flargest"><CODE>gsl_sort_vector_largest</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector_005flargest_005findex"><CODE>gsl_sort_vector_largest_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector_005fsmallest"><CODE>gsl_sort_vector_smallest</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsort_005fvector_005fsmallest_005findex"><CODE>gsl_sort_vector_smallest_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Selecting-the-k-smallest-or-largest-elements">Selecting 
            the k smallest or largest elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspblas_005fdgemm"><CODE>gsl_spblas_dgemm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-BLAS-operations">Sparse 
            BLAS operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspblas_005fdgemv"><CODE>gsl_spblas_dgemv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-BLAS-operations">Sparse 
            BLAS operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsplinalg_005fitersolve_005falloc"><CODE>gsl_splinalg_itersolve_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iterating-the-Sparse-Linear-System">Iterating 
            the Sparse Linear System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsplinalg_005fitersolve_005ffree"><CODE>gsl_splinalg_itersolve_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iterating-the-Sparse-Linear-System">Iterating 
            the Sparse Linear System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsplinalg_005fitersolve_005fgmres"><CODE>gsl_splinalg_itersolve_gmres</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Iterative-Solvers-Types">Sparse 
            Iterative Solvers Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsplinalg_005fitersolve_005fiterate"><CODE>gsl_splinalg_itersolve_iterate</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iterating-the-Sparse-Linear-System">Iterating 
            the Sparse Linear System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsplinalg_005fitersolve_005fname"><CODE>gsl_splinalg_itersolve_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iterating-the-Sparse-Linear-System">Iterating 
            the Sparse Linear System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsplinalg_005fitersolve_005fnormr"><CODE>gsl_splinalg_itersolve_normr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Iterating-the-Sparse-Linear-System">Iterating 
            the Sparse Linear System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005falloc"><CODE>gsl_spline2d_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval"><CODE>gsl_spline2d_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fx"><CODE>gsl_spline2d_eval_deriv_x</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fxx"><CODE>gsl_spline2d_eval_deriv_xx</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fxx_005fe"><CODE>gsl_spline2d_eval_deriv_xx_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fxy"><CODE>gsl_spline2d_eval_deriv_xy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fxy_005fe"><CODE>gsl_spline2d_eval_deriv_xy_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fx_005fe"><CODE>gsl_spline2d_eval_deriv_x_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fy"><CODE>gsl_spline2d_eval_deriv_y</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fyy"><CODE>gsl_spline2d_eval_deriv_yy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fyy_005fe"><CODE>gsl_spline2d_eval_deriv_yy_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fderiv_005fy_005fe"><CODE>gsl_spline2d_eval_deriv_y_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005feval_005fe"><CODE>gsl_spline2d_eval_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005ffree"><CODE>gsl_spline2d_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005fget"><CODE>gsl_spline2d_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005finit"><CODE>gsl_spline2d_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005fmin_005fsize"><CODE>gsl_spline2d_min_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005fname"><CODE>gsl_spline2d_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d_005fset"><CODE>gsl_spline2d_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005falloc"><CODE>gsl_spline_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval"><CODE>gsl_spline_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005fderiv"><CODE>gsl_spline_eval_deriv</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005fderiv2"><CODE>gsl_spline_eval_deriv2</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005fderiv2_005fe"><CODE>gsl_spline_eval_deriv2_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005fderiv_005fe"><CODE>gsl_spline_eval_deriv_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005fe"><CODE>gsl_spline_eval_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005finteg"><CODE>gsl_spline_eval_integ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005feval_005finteg_005fe"><CODE>gsl_spline_eval_integ_e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005ffree"><CODE>gsl_spline_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005finit"><CODE>gsl_spline_init</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005fmin_005fsize"><CODE>gsl_spline_min_size</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline_005fname"><CODE>gsl_spline_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fadd"><CODE>gsl_spmatrix_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-operations">Sparse 
            matrix operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005falloc"><CODE>gsl_spmatrix_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-allocation">Sparse 
            matrix allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005falloc_005fnzmax"><CODE>gsl_spmatrix_alloc_nzmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-allocation">Sparse 
            matrix allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fcompcol"><CODE>gsl_spmatrix_compcol</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-compressed-format">Sparse 
            matrix compressed format</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fd2sp"><CODE>gsl_spmatrix_d2sp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-between-sparse-and-dense-matrices">Conversion 
            between sparse and dense matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fequal"><CODE>gsl_spmatrix_equal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-properties">Sparse 
            matrix properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005ffree"><CODE>gsl_spmatrix_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-allocation">Sparse 
            matrix allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fget"><CODE>gsl_spmatrix_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-sparse-matrix-elements">Accessing 
            sparse matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fmemcpy"><CODE>gsl_spmatrix_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-sparse-matrices">Copying 
            sparse matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fminmax"><CODE>gsl_spmatrix_minmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-sparse-matrices">Finding 
            maximum and minimum elements of sparse matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fnnz"><CODE>gsl_spmatrix_nnz</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-properties">Sparse 
            matrix properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005frealloc"><CODE>gsl_spmatrix_realloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-allocation">Sparse 
            matrix allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fscale"><CODE>gsl_spmatrix_scale</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-operations">Sparse 
            matrix operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fset"><CODE>gsl_spmatrix_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-sparse-matrix-elements">Accessing 
            sparse matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fset_005fzero"><CODE>gsl_spmatrix_set_zero</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-sparse-matrix-elements">Initializing 
            sparse matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005fsp2d"><CODE>gsl_spmatrix_sp2d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-between-sparse-and-dense-matrices">Conversion 
            between sparse and dense matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix_005ftranspose_005fmemcpy"><CODE>gsl_spmatrix_transpose_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-sparse-matrices">Copying 
            sparse matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fabsdev"><CODE>gsl_stats_absdev</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Absolute-deviation">Absolute 
            deviation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fabsdev_005fm"><CODE>gsl_stats_absdev_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Absolute-deviation">Absolute 
            deviation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fcorrelation"><CODE>gsl_stats_correlation</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Correlation">Correlation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fcovariance"><CODE>gsl_stats_covariance</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Covariance">Covariance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fcovariance_005fm"><CODE>gsl_stats_covariance_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Covariance">Covariance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fkurtosis"><CODE>gsl_stats_kurtosis</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fkurtosis_005fm_005fsd"><CODE>gsl_stats_kurtosis_m_sd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005flag1_005fautocorrelation"><CODE>gsl_stats_lag1_autocorrelation</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Autocorrelation">Autocorrelation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005flag1_005fautocorrelation_005fm"><CODE>gsl_stats_lag1_autocorrelation_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Autocorrelation">Autocorrelation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fmax"><CODE>gsl_stats_max</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fmax_005findex"><CODE>gsl_stats_max_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fmean"><CODE>gsl_stats_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fmedian_005ffrom_005fsorted_005fdata"><CODE>gsl_stats_median_from_sorted_data</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Median-and-Percentiles">Median 
            and Percentiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fmin"><CODE>gsl_stats_min</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fminmax"><CODE>gsl_stats_minmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fminmax_005findex"><CODE>gsl_stats_minmax_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fmin_005findex"><CODE>gsl_stats_min_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-values">Maximum 
            and Minimum values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fquantile_005ffrom_005fsorted_005fdata"><CODE>gsl_stats_quantile_from_sorted_data</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Median-and-Percentiles">Median 
            and Percentiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fsd"><CODE>gsl_stats_sd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fsd_005fm"><CODE>gsl_stats_sd_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fsd_005fwith_005ffixed_005fmean"><CODE>gsl_stats_sd_with_fixed_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fskew"><CODE>gsl_stats_skew</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fskew_005fm_005fsd"><CODE>gsl_stats_skew_m_sd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fspearman"><CODE>gsl_stats_spearman</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Correlation">Correlation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005ftss"><CODE>gsl_stats_tss</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005ftss_005fm"><CODE>gsl_stats_tss_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fvariance"><CODE>gsl_stats_variance</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fvariance_005fm"><CODE>gsl_stats_variance_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fvariance_005fwith_005ffixed_005fmean"><CODE>gsl_stats_variance_with_fixed_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mean-and-standard-deviation-and-variance">Mean 
            and standard deviation and variance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwabsdev"><CODE>gsl_stats_wabsdev</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwabsdev_005fm"><CODE>gsl_stats_wabsdev_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwkurtosis"><CODE>gsl_stats_wkurtosis</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwkurtosis_005fm_005fsd"><CODE>gsl_stats_wkurtosis_m_sd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwmean"><CODE>gsl_stats_wmean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwsd"><CODE>gsl_stats_wsd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwsd_005fm"><CODE>gsl_stats_wsd_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwsd_005fwith_005ffixed_005fmean"><CODE>gsl_stats_wsd_with_fixed_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwskew"><CODE>gsl_stats_wskew</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwskew_005fm_005fsd"><CODE>gsl_stats_wskew_m_sd</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwtss"><CODE>gsl_stats_wtss</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwtss_005fm"><CODE>gsl_stats_wtss_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwvariance"><CODE>gsl_stats_wvariance</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwvariance_005fm"><CODE>gsl_stats_wvariance_m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstats_005fwvariance_005fwith_005ffixed_005fmean"><CODE>gsl_stats_wvariance_with_fixed_mean</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Weighted-Samples">Weighted 
            Samples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fstrerror"><CODE>gsl_strerror</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005futrunc_005faccel"><CODE>gsl_sum_levin_utrunc_accel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions-without-error-estimation">Acceleration 
            functions without error estimation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005futrunc_005falloc"><CODE>gsl_sum_levin_utrunc_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions-without-error-estimation">Acceleration 
            functions without error estimation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005futrunc_005ffree"><CODE>gsl_sum_levin_utrunc_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions-without-error-estimation">Acceleration 
            functions without error estimation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005fu_005faccel"><CODE>gsl_sum_levin_u_accel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions">Acceleration 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005fu_005falloc"><CODE>gsl_sum_levin_u_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions">Acceleration 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005fu_005ffree"><CODE>gsl_sum_levin_u_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions">Acceleration 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fadd"><CODE>gsl_vector_add</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-operations">Vector 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fadd_005fconstant"><CODE>gsl_vector_add_constant</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-operations">Vector 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005falloc"><CODE>gsl_vector_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-allocation">Vector 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fcalloc"><CODE>gsl_vector_calloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-allocation">Vector 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fcomplex_005fconst_005fimag"><CODE>gsl_vector_complex_const_imag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fcomplex_005fconst_005freal"><CODE>gsl_vector_complex_const_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fcomplex_005fimag"><CODE>gsl_vector_complex_imag</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fcomplex_005freal"><CODE>gsl_vector_complex_real</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fconst_005fptr"><CODE>gsl_vector_const_ptr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fconst_005fsubvector"><CODE>gsl_vector_const_subvector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fconst_005fsubvector_005fwith_005fstride"><CODE>gsl_vector_const_subvector_with_stride</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fconst_005fview_005farray"><CODE>gsl_vector_const_view_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fconst_005fview_005farray_005fwith_005fstride"><CODE>gsl_vector_const_view_array_with_stride</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fdiv"><CODE>gsl_vector_div</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-operations">Vector 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fequal"><CODE>gsl_vector_equal</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-properties">Vector 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005ffprintf"><CODE>gsl_vector_fprintf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-vectors">Reading 
            and writing vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005ffread"><CODE>gsl_vector_fread</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-vectors">Reading 
            and writing vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005ffree"><CODE>gsl_vector_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-allocation">Vector 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005ffscanf"><CODE>gsl_vector_fscanf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-vectors">Reading 
            and writing vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005ffwrite"><CODE>gsl_vector_fwrite</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reading-and-writing-vectors">Reading 
            and writing vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fget"><CODE>gsl_vector_get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fisneg"><CODE>gsl_vector_isneg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-properties">Vector 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fisnonneg"><CODE>gsl_vector_isnonneg</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-properties">Vector 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fisnull"><CODE>gsl_vector_isnull</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-properties">Vector 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fispos"><CODE>gsl_vector_ispos</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-properties">Vector 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fmax"><CODE>gsl_vector_max</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fmax_005findex"><CODE>gsl_vector_max_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fmemcpy"><CODE>gsl_vector_memcpy</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-vectors">Copying 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fmin"><CODE>gsl_vector_min</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fminmax"><CODE>gsl_vector_minmax</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fminmax_005findex"><CODE>gsl_vector_minmax_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fmin_005findex"><CODE>gsl_vector_min_index</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-vectors">Finding 
            maximum and minimum elements of vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fmul"><CODE>gsl_vector_mul</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-operations">Vector 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fptr"><CODE>gsl_vector_ptr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005freverse"><CODE>gsl_vector_reverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-elements">Exchanging 
            elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fscale"><CODE>gsl_vector_scale</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-operations">Vector 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fset"><CODE>gsl_vector_set</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fset_005fall"><CODE>gsl_vector_set_all</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-vector-elements">Initializing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fset_005fbasis"><CODE>gsl_vector_set_basis</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-vector-elements">Initializing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fset_005fzero"><CODE>gsl_vector_set_zero</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-vector-elements">Initializing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fsub"><CODE>gsl_vector_sub</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-operations">Vector 
            operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fsubvector"><CODE>gsl_vector_subvector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fsubvector_005fwith_005fstride"><CODE>gsl_vector_subvector_with_stride</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fswap"><CODE>gsl_vector_swap</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-vectors">Copying 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fswap_005felements"><CODE>gsl_vector_swap_elements</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exchanging-elements">Exchanging 
            elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fview_005farray"><CODE>gsl_vector_view_array</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fview_005farray_005fwith_005fstride"><CODE>gsl_vector_view_array_with_stride</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005fnstransform"><CODE>gsl_wavelet2d_nstransform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005fnstransform_005fforward"><CODE>gsl_wavelet2d_nstransform_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005fnstransform_005finverse"><CODE>gsl_wavelet2d_nstransform_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005fnstransform_005fmatrix"><CODE>gsl_wavelet2d_nstransform_matrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005fnstransform_005fmatrix_005fforward"><CODE>gsl_wavelet2d_nstransform_matrix_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005fnstransform_005fmatrix_005finverse"><CODE>gsl_wavelet2d_nstransform_matrix_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005ftransform"><CODE>gsl_wavelet2d_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005ftransform_005fforward"><CODE>gsl_wavelet2d_transform_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005ftransform_005finverse"><CODE>gsl_wavelet2d_transform_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005ftransform_005fmatrix"><CODE>gsl_wavelet2d_transform_matrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005ftransform_005fmatrix_005fforward"><CODE>gsl_wavelet2d_transform_matrix_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet2d_005ftransform_005fmatrix_005finverse"><CODE>gsl_wavelet2d_transform_matrix_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005falloc"><CODE>gsl_wavelet_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fbspline"><CODE>gsl_wavelet_bspline</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fbspline_005fcentered"><CODE>gsl_wavelet_bspline_centered</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fdaubechies"><CODE>gsl_wavelet_daubechies</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fdaubechies_005fcentered"><CODE>gsl_wavelet_daubechies_centered</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005ffree"><CODE>gsl_wavelet_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fhaar"><CODE>gsl_wavelet_haar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fhaar_005fcentered"><CODE>gsl_wavelet_haar_centered</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fname"><CODE>gsl_wavelet_name</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005ftransform"><CODE>gsl_wavelet_transform</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-one-dimension">DWT 
            in one dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005ftransform_005fforward"><CODE>gsl_wavelet_transform_forward</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-one-dimension">DWT 
            in one dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005ftransform_005finverse"><CODE>gsl_wavelet_transform_inverse</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-one-dimension">DWT 
            in one dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fworkspace_005falloc"><CODE>gsl_wavelet_workspace_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fworkspace_005ffree"><CODE>gsl_wavelet_workspace_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Function-Index_fn_letter-C"><B>C</B></A> 
            &nbsp; <A class="summary-letter" href="#Function-Index_fn_letter-G"><B>G</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<HR>
<A name="Variable-Index"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Type-Index" 
rel="next">Type Index</A>, Previous: <A accessKey="p" href="#Function-Index" 
rel="previous">Function Index</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Variable-Index-1"></A>
<H2 class="unnumbered">Variable Index</H2>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Variable-Index_vr_letter-A"><B>A</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-D"><B>D</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-E"><B>E</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-G"><B>G</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-H"><B>H</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-I"><B>I</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-M"><B>M</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-O"><B>O</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-S"><B>S</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-V"><B>V</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<TABLE class="index-vr" border="0">
  <TBODY>
  <TR>
    <TD></TD>
    <TH align="left">Index Entry</TH>
    <TD>&nbsp;</TD>
    <TH align="left">Section</TH></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-A">A</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-alpha"><CODE>alpha</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-alpha-1"><CODE>alpha</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-D">D</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-dither"><CODE>dither</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-E">E</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-estimate_005ffrac"><CODE>estimate_frac</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-G">G</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fC99_005fINLINE-1"><CODE><CODE>GSL_C99_INLINE</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fC99_005fINLINE-2"><CODE><CODE>GSL_C99_INLINE</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheck_005frange"><CODE>gsl_check_range</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fEDOM"><CODE>GSL_EDOM</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fEINVAL"><CODE>GSL_EINVAL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fENOMEM"><CODE>GSL_ENOMEM</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fERANGE"><CODE>GSL_ERANGE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fIEEE_005fMODE"><CODE><CODE>GSL_IEEE_MODE</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fNAN"><CODE>GSL_NAN</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fNEGINF"><CODE>GSL_NEGINF</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fPOSINF"><CODE>GSL_POSINF</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fRANGE_005fCHECK_005fOFF"><CODE><CODE>GSL_RANGE_CHECK_OFF</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fdefault"><CODE>gsl_rng_default</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-environment-variables">Random 
            number environment variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fdefault_005fseed"><CODE>gsl_rng_default_seed</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005fdefault_005fseed-1"><CODE>gsl_rng_default_seed</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-environment-variables">Random 
            number environment variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fRNG_005fSEED-1"><CODE><CODE>GSL_RNG_SEED</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fRNG_005fSEED-2"><CODE><CODE>GSL_RNG_SEED</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-environment-variables">Random 
            number environment variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fRNG_005fTYPE"><CODE><CODE>GSL_RNG_TYPE</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-environment-variables">Random 
            number environment variables</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-H">H</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HAVE_005fINLINE-1"><CODE><CODE>HAVE_INLINE</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-I">I</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-iterations"><CODE>iterations</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-M">M</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-min_005fcalls"><CODE>min_calls</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-min_005fcalls_005fper_005fbisection"><CODE>min_calls_per_bisection</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mode"><CODE>mode</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-O">O</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ostream"><CODE>ostream</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-S">S</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-stage"><CODE>stage</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Variable-Index_vr_letter-V">V</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-verbose"><CODE>verbose</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Variable-Index_vr_letter-A"><B>A</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-D"><B>D</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-E"><B>E</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-G"><B>G</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-H"><B>H</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-I"><B>I</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-M"><B>M</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-O"><B>O</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-S"><B>S</B></A> 
            &nbsp; <A class="summary-letter" href="#Variable-Index_vr_letter-V"><B>V</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<HR>
<A name="Type-Index"></A>
<DIV class="header">
<P>Next: <A accessKey="n" href="#Concept-Index" 
rel="next">Concept Index</A>, Previous: <A accessKey="p" href="#Variable-Index" 
rel="previous">Variable Index</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Type-Index-1"></A>
<H2 class="unnumbered">Type Index</H2>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Type-Index_tp_letter-G"><B>G</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<TABLE class="index-tp" border="0">
  <TBODY>
  <TR>
    <TD></TD>
    <TH align="left">Index Entry</TH>
    <TD>&nbsp;</TD>
    <TH align="left">Section</TH></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Type-Index_tp_letter-G">G</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fblock"><CODE>gsl_block</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Blocks">Blocks</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fbspline_005fworkspace"><CODE>gsl_bspline_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-B_002dsplines-solver">Initializing 
            the B-splines solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcheb_005fseries"><CODE>gsl_cheb_series</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Definitions">Chebyshev 
            Definitions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcombination"><CODE>gsl_combination</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Combination-struct">The 
            Combination struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fcomplex"><CODE>gsl_complex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fdht"><CODE>gsl_dht</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transform-Functions">Discrete 
            Hankel Transform Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenhermv_005fworkspace"><CODE>gsl_eigen_genhermv_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenherm_005fworkspace"><CODE>gsl_eigen_genherm_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymmv_005fworkspace"><CODE>gsl_eigen_gensymmv_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgensymm_005fworkspace"><CODE>gsl_eigen_gensymm_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgenv_005fworkspace"><CODE>gsl_eigen_genv_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fgen_005fworkspace"><CODE>gsl_eigen_gen_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fhermv_005fworkspace"><CODE>gsl_eigen_hermv_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fherm_005fworkspace"><CODE>gsl_eigen_herm_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymmv_005fworkspace"><CODE>gsl_eigen_nonsymmv_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fnonsymm_005fworkspace"><CODE>gsl_eigen_nonsymm_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymmv_005fworkspace"><CODE>gsl_eigen_symmv_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005feigen_005fsymm_005fworkspace"><CODE>gsl_eigen_symm_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ferror_005fhandler_005ft"><CODE>gsl_error_handler_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Handlers">Error 
            Handlers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fwavetable"><CODE>gsl_fft_complex_wavetable</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fcomplex_005fworkspace"><CODE>gsl_fft_complex_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005fhalfcomplex_005fwavetable"><CODE>gsl_fft_halfcomplex_wavetable</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fwavetable"><CODE>gsl_fft_real_wavetable</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffft_005freal_005fworkspace"><CODE>gsl_fft_real_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffunction"><CODE>gsl_function</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-function-to-solve">Providing 
            the function to solve</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005ffunction_005ffdf"><CODE>gsl_function_fdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-function-to-solve">Providing 
            the function to solve</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram"><CODE>gsl_histogram</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-struct">The 
            histogram struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d"><CODE>gsl_histogram2d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-2D-histogram-struct">The 
            2D histogram struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram2d_005fpdf"><CODE>gsl_histogram2d_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-2D-histograms">Resampling 
            from 2D histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fhistogram_005fpdf"><CODE>gsl_histogram_pdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fcquad_005fworkspace"><CODE>gsl_integration_cquad_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#CQUAD-doubly_002dadaptive-integration">CQUAD 
            doubly-adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fglfixed_005ftable"><CODE>gsl_integration_glfixed_table</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fglfixed_005ftable-1"><CODE>gsl_integration_glfixed_table</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fixed-order-Gauss_002dLegendre-integration">Fixed 
            order Gauss-Legendre integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqawo_005ftable"><CODE>gsl_integration_qawo_table</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fqaws_005ftable"><CODE>gsl_integration_qaws_table</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fintegration_005fworkspace"><CODE>gsl_integration_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAG-adaptive-integration">QAG 
            adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp"><CODE>gsl_interp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Functions">1D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp-1"><CODE>gsl_interp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Functions">2D 
            Interpolation Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp2d_005ftype"><CODE>gsl_interp2d_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005faccel"><CODE>gsl_interp_accel</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Index-Look_002dup-and-Acceleration">1D 
            Index Look-up and Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005finterp_005ftype"><CODE>gsl_interp_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix"><CODE>gsl_matrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrices">Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fconst_005fview"><CODE>gsl_matrix_const_view</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmatrix_005fview"><CODE>gsl_matrix_view</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrix-views">Matrix 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer"><CODE>gsl_min_fminimizer</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmin_005ffminimizer_005ftype"><CODE>gsl_min_fminimizer_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Minimizer">Initializing 
            the Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005ffunction"><CODE>gsl_monte_function</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Monte-Carlo-Interface">Monte 
            Carlo Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fmiser_005fstate"><CODE>gsl_monte_miser_state</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fplain_005fstate"><CODE>gsl_monte_plain_state</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmonte_005fvegas_005fstate"><CODE>gsl_monte_vegas_state</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfridge"><CODE>gsl_multifit_fdfridge</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver"><CODE>gsl_multifit_fdfsolver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffdfsolver_005ftype"><CODE>gsl_multifit_fdfsolver_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver"><CODE>gsl_multifit_fsolver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffsolver_005ftype"><CODE>gsl_multifit_fsolver_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Nonlinear-Least_002dSquares-Solver">Initializing 
            the Nonlinear Least-Squares Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffunction"><CODE>gsl_multifit_function</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-Function-to-be-Minimized">Providing 
            the Function to be Minimized</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005ffunction_005ffdf"><CODE>gsl_multifit_function_fdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-Function-to-be-Minimized">Providing 
            the Function to be Minimized</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005flinear_005fworkspace"><CODE>gsl_multifit_linear_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultifit_005frobust_005fworkspace"><CODE>gsl_multifit_robust_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer"><CODE>gsl_multimin_fdfminimizer</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffdfminimizer_005ftype"><CODE>gsl_multimin_fdfminimizer_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer"><CODE>gsl_multimin_fminimizer</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffminimizer_005ftype"><CODE>gsl_multimin_fminimizer_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Minimizer">Initializing 
            the Multidimensional Minimizer</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffunction"><CODE>gsl_multimin_function</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-a-function-to-minimize">Providing 
            a function to minimize</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultimin_005ffunction_005ffdf"><CODE>gsl_multimin_function_fdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-a-function-to-minimize">Providing 
            a function to minimize</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver"><CODE>gsl_multiroot_fdfsolver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffdfsolver_005ftype"><CODE>gsl_multiroot_fdfsolver_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver"><CODE>gsl_multiroot_fsolver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffsolver_005ftype"><CODE>gsl_multiroot_fsolver_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Multidimensional-Solver">Initializing 
            the Multidimensional Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffunction"><CODE>gsl_multiroot_function</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-multidimensional-system-of-equations-to-solve">Providing 
            the multidimensional system of equations to solve</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiroot_005ffunction_005ffdf"><CODE>gsl_multiroot_function_fdf</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-multidimensional-system-of-equations-to-solve">Providing 
            the multidimensional system of equations to solve</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fmultiset"><CODE>gsl_multiset</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Multiset-struct">The 
            Multiset struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple"><CODE>gsl_ntuple</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-ntuple-struct">The 
            ntuple struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fselect_005ffn"><CODE>gsl_ntuple_select_fn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fntuple_005fvalue_005ffn"><CODE>gsl_ntuple_value_fn</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol"><CODE>gsl_odeiv2_control</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fcontrol_005ftype"><CODE>gsl_odeiv2_control_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fevolve"><CODE>gsl_odeiv2_evolve</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep"><CODE>gsl_odeiv2_step</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fstep_005ftype"><CODE>gsl_odeiv2_step_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fodeiv2_005fsystem"><CODE>gsl_odeiv2_system</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Defining-the-ODE-System">Defining 
            the ODE System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpermutation"><CODE>gsl_permutation</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Permutation-struct">The 
            Permutation struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fpoly_005fcomplex_005fworkspace"><CODE>gsl_poly_complex_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Polynomial-Equations">General 
            Polynomial Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng"><CODE>gsl_qrng</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-initialization">Quasi-random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fqrng_005ftype"><CODE>gsl_qrng_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002drandom-number-generator-initialization">Quasi-random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fran_005fdiscrete_005ft"><CODE>gsl_ran_discrete_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng"><CODE>gsl_rng</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005frng_005ftype"><CODE>gsl_rng_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Random-Number-Generator-Interface">The 
            Random Number Generator Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver"><CODE>gsl_root_fdfsolver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffdfsolver_005ftype"><CODE>gsl_root_fdfsolver_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver"><CODE>gsl_root_fsolver</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005froot_005ffsolver_005ftype"><CODE>gsl_root_fsolver_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-Solver">Initializing 
            the Solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fmathieu_005fworkspace"><CODE>gsl_sf_mathieu_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Workspace">Mathieu 
            Function Workspace</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fresult-1"><CODE>gsl_sf_result</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-gsl_005fsf_005fresult-struct">The 
            gsl_sf_result struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fresult_005fe10-1"><CODE>gsl_sf_result_e10</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-gsl_005fsf_005fresult-struct">The 
            gsl_sf_result struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fcopy_005fconstruct_005ft"><CODE>gsl_siman_copy_construct_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fcopy_005ft"><CODE>gsl_siman_copy_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fdestroy_005ft"><CODE>gsl_siman_destroy_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fEfunc_005ft"><CODE>gsl_siman_Efunc_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fmetric_005ft"><CODE>gsl_siman_metric_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fparams_005ft"><CODE>gsl_siman_params_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fprint_005ft"><CODE>gsl_siman_print_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsiman_005fstep_005ft"><CODE>gsl_siman_step_t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-functions">Simulated 
            Annealing functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline"><CODE>gsl_spline</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Higher_002dlevel-Interface">1D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspline2d"><CODE>gsl_spline2d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Higher_002dlevel-Interface">2D 
            Higher-level Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fspmatrix"><CODE>gsl_spmatrix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-Sparse-Matrices">Overview 
            of Sparse Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005futrunc_005fworkspace"><CODE>gsl_sum_levin_utrunc_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions-without-error-estimation">Acceleration 
            functions without error estimation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsum_005flevin_005fu_005fworkspace"><CODE>gsl_sum_levin_u_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Acceleration-functions">Acceleration 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector"><CODE>gsl_vector</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vectors">Vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fconst_005fview"><CODE>gsl_vector_const_view</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fvector_005fview"><CODE>gsl_vector_view</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vector-views">Vector 
            views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet"><CODE>gsl_wavelet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005ftype"><CODE>gsl_wavelet_type</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fwavelet_005fworkspace"><CODE>gsl_wavelet_workspace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Type-Index_tp_letter-G"><B>G</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<HR>
<A name="Concept-Index"></A>
<DIV class="header">
<P>Previous: <A accessKey="p" href="#Type-Index" 
rel="previous">Type Index</A>, Up: <A accessKey="u" href="#Top" 
rel="up">Top</A> &nbsp; [<A title="Index" href="#Function-Index" 
rel="index">Index</A>]</P></DIV><A name="Concept-Index-1"></A>
<H2 class="unnumbered">Concept Index</H2>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Concept-Index_cp_symbol-1"><B>$</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-2"><B>2</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-3"><B>3</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-4"><B>6</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-5"><B>9</B></A> 
            &nbsp; <BR><A class="summary-letter" href="#Concept-Index_cp_letter-A"><B>A</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-B"><B>B</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-C"><B>C</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-D"><B>D</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-E"><B>E</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-F"><B>F</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-G"><B>G</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-H"><B>H</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-I"><B>I</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-J"><B>J</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-K"><B>K</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-L"><B>L</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-M"><B>M</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-N"><B>N</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-O"><B>O</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-P"><B>P</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-Q"><B>Q</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-R"><B>R</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-S"><B>S</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-T"><B>T</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-U"><B>U</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-V"><B>V</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-W"><B>W</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-Y"><B>Y</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-Z"><B>Z</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<TABLE class="index-cp" border="0">
  <TBODY>
  <TR>
    <TD></TD>
    <TH align="left">Index Entry</TH>
    <TD>&nbsp;</TD>
    <TH align="left">Section</TH></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_symbol-1">$</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-_0024_002c-shell-prompt"><CODE>$</CODE>, 
            shell prompt</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conventions-used-in-this-manual">Conventions 
            used in this manual</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_symbol-2">2</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-2D-histograms">2D 
            histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Two-dimensional-histograms">Two 
            dimensional histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-2D-random-direction-vector">2D 
            random direction vector</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_symbol-3">3</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-3_002dj-symbols">3-j 
            symbols</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coupling-Coefficients">Coupling 
            Coefficients</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-3D-random-direction-vector">3D 
            random direction vector</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_symbol-4">6</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-6_002dj-symbols">6-j 
            symbols</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coupling-Coefficients">Coupling 
            Coefficients</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_symbol-5">9</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-9_002dj-symbols">9-j 
            symbols</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coupling-Coefficients">Coupling 
            Coefficients</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-A">A</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-acceleration-of-series">acceleration 
            of series</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Series-Acceleration">Series 
            Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-acosh">acosh</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Adams-method">Adams 
            method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Adaptive-step_002dsize-control_002c-differential-equations">Adaptive 
            step-size control, differential equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Adaptive-Step_002dsize-Control">Adaptive 
            Step-size Control</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Ai_0028x_0029">Ai(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions-and-Derivatives">Airy 
            Functions and Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Airy-functions">Airy 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions-and-Derivatives">Airy 
            Functions and Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Akima-splines">Akima 
            splines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-aliasing-of-arrays">aliasing 
            of arrays</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Aliasing-of-arrays">Aliasing 
            of arrays</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-alternative-optimized-functions">alternative 
            optimized functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Alternative-optimized-functions">Alternative 
            optimized functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-AMAX_002c-Level_002d1-BLAS">AMAX, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-angular-reduction">angular 
            reduction</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Restriction-Functions">Restriction 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ANSI-C_002c-use-of">ANSI 
            C, use of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-the-library">Using 
            the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Apell-symbol_002c-see-Pochhammer-symbol">Apell 
            symbol, see Pochhammer symbol</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-approximate-comparison-of-floating-point-numbers">approximate 
            comparison of floating point numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Approximate-Comparison-of-Floating-Point-Numbers">Approximate 
            Comparison of Floating Point Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-arctangent-integral">arctangent 
            integral</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Arctangent-Integral">Arctangent 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-argument-of-complex-number">argument 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-arithmetic-exceptions">arithmetic 
            exceptions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-asinh">asinh</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-astronomical-constants">astronomical 
            constants</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Astronomy-and-Astrophysics">Astronomy 
            and Astrophysics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ASUM_002c-Level_002d1-BLAS">ASUM, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-atanh">atanh</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-atomic-physics_002c-constants">atomic 
            physics, constants</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Atomic-and-Nuclear-Physics">Atomic 
            and Nuclear Physics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-autoconf_002c-using-with-GSL">autoconf, 
            using with GSL</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Autoconf-Macros">Autoconf 
            Macros</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-AXPY_002c-Level_002d1-BLAS">AXPY, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-B">B</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-B_002dspline-wavelets">B-spline 
            wavelets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bader-and-Deuflhard_002c-Bulirsch_002dStoer-method_002e">Bader 
            and Deuflhard, Bulirsch-Stoer method.</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-balancing-matrices">balancing 
            matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Balancing">Balancing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Basic-Linear-Algebra-Subroutines-_0028BLAS_0029">Basic 
            Linear Algebra Subroutines (BLAS)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#BLAS-Support">BLAS 
            Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Basic-Linear-Algebra-Subroutines-_0028BLAS_0029-1">Basic 
            Linear Algebra Subroutines (BLAS)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GSL-CBLAS-Library">GSL 
            CBLAS Library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-B_002dsplines">basis 
            splines, B-splines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Basis-Splines">Basis 
            Splines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-derivatives">basis 
            splines, derivatives</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-function-derivatives">Evaluation 
            of B-spline basis function derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-evaluation">basis 
            splines, evaluation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evaluation-of-B_002dspline-basis-functions">Evaluation 
            of B-spline basis functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-examples">basis 
            splines, examples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Example-programs-for-B_002dsplines">Example 
            programs for B-splines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-Greville-abscissae">basis 
            splines, Greville abscissae</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Working-with-the-Greville-abscissae">Working 
            with the Greville abscissae</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-initializing">basis 
            splines, initializing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-the-B_002dsplines-solver">Initializing 
            the B-splines solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-Marsden_002dSchoenberg-points">basis 
            splines, Marsden-Schoenberg points</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Working-with-the-Greville-abscissae">Working 
            with the Greville abscissae</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-basis-splines_002c-overview">basis 
            splines, overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-B_002dsplines">Overview 
            of B-splines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-BDF-method">BDF 
            method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bernoulli-trial_002c-random-variates">Bernoulli 
            trial, random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bernoulli-Distribution">The 
            Bernoulli Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bessel-functions">Bessel 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Bessel-Functions">Bessel 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bessel-Functions_002c-Fractional-Order">Bessel 
            Functions, Fractional Order</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-best_002dfit-parameters_002c-covariance">best-fit 
            parameters, covariance</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Computing-the-covariance-matrix-of-best-fit-parameters">Computing 
            the covariance matrix of best fit parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Beta-distribution">Beta 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Beta-Distribution">The 
            Beta Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Beta-function">Beta 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Beta-Functions">Beta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Beta-function_002c-incomplete-normalized">Beta 
            function, incomplete normalized</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Beta-Function">Incomplete 
            Beta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-BFGS-algorithm_002c-minimization">BFGS 
            algorithm, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bi_0028x_0029">Bi(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Airy-Functions-and-Derivatives">Airy 
            Functions and Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bias_002c-IEEE-format">bias, 
            IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bicubic-interpolation">bicubic 
            interpolation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bidiagonalization-of-real-matrices">bidiagonalization 
            of real matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Bidiagonalization">Bidiagonalization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bilinear-interpolation">bilinear 
            interpolation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t2D-Interpolation-Types">2D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-binning-data">binning 
            data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histograms">Histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Binomial-random-variates">Binomial 
            random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Binomial-Distribution">The 
            Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-biorthogonal-wavelets">biorthogonal 
            wavelets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bisection-algorithm-for-finding-roots">bisection 
            algorithm for finding roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bivariate-Gaussian-distribution">Bivariate 
            Gaussian distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bivariate-Gaussian-Distribution">The 
            Bivariate Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-BLAS">BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#BLAS-Support">BLAS 
            Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-BLAS_002c-Low_002dlevel-C-interface">BLAS, 
            Low-level C interface</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GSL-CBLAS-Library">GSL 
            CBLAS Library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-BLAS_002c-sparse">BLAS, 
            sparse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-BLAS-Support">Sparse 
            BLAS Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-blocks">blocks</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vectors-and-Matrices">Vectors 
            and Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bounds-checking_002c-extension-to-GCC">bounds 
            checking, extension to GCC</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-breakpoints">breakpoints</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-gdb">Using 
            gdb</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Brent_0027s-method-for-finding-minima">Brent’s 
            method for finding minima</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Brent_0027s-method-for-finding-roots">Brent’s 
            method for finding roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Broyden-algorithm-for-multidimensional-roots">Broyden 
            algorithm for multidimensional roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-BSD-random-number-generator">BSD 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bug_002dgsl-mailing-list">bug-gsl 
            mailing list</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reporting-Bugs">Reporting 
            Bugs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-bugs_002c-how-to-report">bugs, 
            how to report</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reporting-Bugs">Reporting 
            Bugs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Bulirsch_002dStoer-method">Bulirsch-Stoer 
            method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-C">C</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-C-extensions_002c-compatible-use-of">C 
            extensions, compatible use of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-the-library">Using 
            the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-C_002b_002b_002c-compatibility">C++, 
            compatibility</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Compatibility-with-C_002b_002b">Compatibility 
            with C++</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-C99_002c-inline-keyword">C99, 
            inline keyword</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Carlson-forms-of-Elliptic-integrals">Carlson 
            forms of Elliptic integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Definition-of-Carlson-Forms">Definition 
            of Carlson Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Cash_002dKarp_002c-Runge_002dKutta-method">Cash-Karp, 
            Runge-Kutta method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Cauchy-distribution">Cauchy 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Cauchy-Distribution">The 
            Cauchy Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Cauchy-principal-value_002c-by-numerical-quadrature">Cauchy 
            principal value, by numerical quadrature</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWC-adaptive-integration-for-Cauchy-principal-values">QAWC 
            adaptive integration for Cauchy principal values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-CBLAS">CBLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#BLAS-Support">BLAS 
            Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-CBLAS_002c-Low_002dlevel-interface">CBLAS, 
            Low-level interface</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GSL-CBLAS-Library">GSL 
            CBLAS Library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-CDFs_002c-cumulative-distribution-functions">CDFs, 
            cumulative distribution functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-Number-Distributions">Random 
            Number Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ce_0028q_002cx_0029_002c-Mathieu-function"><EM>ce(q,x)</EM>, 
            Mathieu function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Chebyshev-series">Chebyshev 
            series</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Approximations">Chebyshev 
            Approximations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-checking-combination-for-validity">checking 
            combination for validity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-properties">Combination 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-checking-multiset-for-validity">checking 
            multiset for validity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-properties">Multiset 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-checking-permutation-for-validity">checking 
            permutation for validity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-properties">Permutation 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Chi_0028x_0029">Chi(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Chi_002dsquared-distribution">Chi-squared 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Chi_002dsquared-Distribution">The 
            Chi-squared Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Cholesky-decomposition">Cholesky 
            decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Ci_0028x_0029">Ci(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Clausen-functions">Clausen 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Clausen-Functions">Clausen 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Clenshaw_002dCurtis-quadrature">Clenshaw-Curtis 
            quadrature</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Integrands-with-weight-functions">Integrands 
            with weight functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-CMRG_002c-combined-multiple-recursive-random-number-generator">CMRG, 
            combined multiple recursive random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-code-reuse-in-applications">code 
            reuse in applications</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Code-Reuse">Code 
            Reuse</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-combinations">combinations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combinations">Combinations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-combinatorial-factor-C_0028m_002cn_0029">combinatorial 
            factor C(m,n)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-combinatorial-optimization">combinatorial 
            optimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing">Simulated 
            Annealing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-comparison-functions_002c-definition">comparison 
            functions, definition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-objects">Sorting 
            objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-compatibility">compatibility</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-the-library">Using 
            the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-compiling-programs_002c-include-paths">compiling 
            programs, include paths</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Compiling-and-Linking">Compiling 
            and Linking</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-compiling-programs_002c-library-paths">compiling 
            programs, library paths</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linking-programs-with-the-library">Linking 
            programs with the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complementary-incomplete-Gamma-function">complementary 
            incomplete Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complete-Fermi_002dDirac-integrals">complete 
            Fermi-Dirac integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-arithmetic">complex 
            arithmetic</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-cosine-function_002c-special-functions">complex 
            cosine function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Complex-Gamma-function">Complex 
            Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-hermitian-matrix_002c-eigensystem">complex 
            hermitian matrix, eigensystem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-log-sine-function_002c-special-functions">complex 
            log sine function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-numbers">complex 
            numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Numbers">Complex 
            Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-sinc-function_002c-special-functions">complex 
            sinc function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-complex-sine-function_002c-special-functions">complex 
            sine function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions-for-Complex-Arguments">Trigonometric 
            Functions for Complex Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-confluent-hypergeometric-function">confluent 
            hypergeometric function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-confluent-hypergeometric-functions">confluent 
            hypergeometric functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-conical-functions">conical 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Functions-and-Spherical-Harmonics">Legendre 
            Functions and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Conjugate-gradient-algorithm_002c-minimization">Conjugate 
            gradient algorithm, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-conjugate-of-complex-number">conjugate 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-arithmetic-operators">Complex 
            arithmetic operators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-constant-matrix">constant 
            matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-constants_002c-fundamental">constants, 
            fundamental</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fundamental-Constants">Fundamental 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-constants_002c-mathematical_002d_002d_002ddefined-as-macros">constants, 
            mathematical—defined as macros</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-constants_002c-physical">constants, 
            physical</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Physical-Constants">Physical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-constants_002c-prefixes">constants, 
            prefixes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Prefixes">Prefixes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-contacting-the-GSL-developers">contacting 
            the GSL developers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Further-Information">Further 
            Information</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-conventions_002c-used-in-manual">conventions, 
            used in manual</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conventions-used-in-this-manual">Conventions 
            used in this manual</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-convergence_002c-accelerating-a-series">convergence, 
            accelerating a series</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Series-Acceleration">Series 
            Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-conversion-of-units">conversion 
            of units</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Physical-Constants">Physical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cooling-schedule">cooling 
            schedule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-algorithm">Simulated 
            Annealing algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-COPY_002c-Level_002d1-BLAS">COPY, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-correlation_002c-of-two-datasets">correlation, 
            of two datasets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Correlation">Correlation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cosine-function_002c-special-functions">cosine 
            function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cosine-of-complex-number">cosine 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cost-function">cost 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing">Simulated 
            Annealing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Coulomb-wave-functions">Coulomb 
            wave functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Functions">Coulomb 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-coupling-coefficients">coupling 
            coefficients</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coupling-Coefficients">Coupling 
            Coefficients</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-covariance-matrix_002c-from-linear-regression">covariance 
            matrix, from linear regression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression-with-a-constant-term">Linear 
            regression with a constant term</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-covariance-matrix_002c-linear-fits">covariance 
            matrix, linear fits</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fitting-Overview">Fitting 
            Overview</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-covariance-matrix_002c-nonlinear-fits">covariance 
            matrix, nonlinear fits</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Computing-the-covariance-matrix-of-best-fit-parameters">Computing 
            the covariance matrix of best fit parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-covariance_002c-of-two-datasets">covariance, 
            of two datasets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Covariance">Covariance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cquad_002c-doubly_002dadaptive-integration">cquad, 
            doubly-adaptive integration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#CQUAD-doubly_002dadaptive-integration">CQUAD 
            doubly-adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-CRAY-random-number-generator_002c-RANF">CRAY 
            random number generator, RANF</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cubic-equation_002c-solving">cubic 
            equation, solving</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cubic-Equations">Cubic 
            Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cubic-splines">cubic 
            splines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-cumulative-distribution-functions-_0028CDFs_0029">cumulative 
            distribution functions (CDFs)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-Number-Distributions">Random 
            Number Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Cylindrical-Bessel-Functions">Cylindrical 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-D">D</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Daubechies-wavelets">Daubechies 
            wavelets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Dawson-function">Dawson 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Dawson-Function">Dawson 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DAXPY_002c-Level_002d1-BLAS">DAXPY, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-debugging-numerical-programs">debugging 
            numerical programs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-gdb">Using 
            gdb</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Debye-functions">Debye 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Debye-Functions">Debye 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-denormalized-form_002c-IEEE-format">denormalized 
            form, IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-deprecated-functions">deprecated 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Deprecated-Functions">Deprecated 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-derivatives_002c-calculating-numerically">derivatives, 
            calculating numerically</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation">Numerical 
            Differentiation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-determinant-of-a-matrix_002c-by-LU-decomposition">determinant 
            of a matrix, by LU decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Deuflhard-and-Bader_002c-Bulirsch_002dStoer-method_002e">Deuflhard 
            and Bader, Bulirsch-Stoer method.</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DFTs_002c-see-FFT">DFTs, 
            see FFT</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fast-Fourier-Transforms">Fast 
            Fourier Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-diagonal_002c-of-a-matrix">diagonal, 
            of a matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-differential-equations_002c-initial-value-problems">differential 
            equations, initial value problems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ordinary-Differential-Equations">Ordinary 
            Differential Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-differentiation-of-functions_002c-numeric">differentiation 
            of functions, numeric</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation">Numerical 
            Differentiation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-digamma-function">digamma 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Psi-_0028Digamma_0029-Function">Psi 
            (Digamma) Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-dilogarithm">dilogarithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Dilogarithm">Dilogarithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-direction-vector_002c-random-2D">direction 
            vector, random 2D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-direction-vector_002c-random-3D">direction 
            vector, random 3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-direction-vector_002c-random-N_002ddimensional">direction 
            vector, random N-dimensional</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Dirichlet-distribution">Dirichlet 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Dirichlet-Distribution">The 
            Dirichlet Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-discontinuities_002c-in-ODE-systems">discontinuities, 
            in ODE systems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Evolution">Evolution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-Fourier-Transforms_002c-see-FFT">Discrete 
            Fourier Transforms, see FFT</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fast-Fourier-Transforms">Fast 
            Fourier Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-discrete-Hankel-transforms">discrete 
            Hankel transforms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transforms">Discrete 
            Hankel Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-Newton-algorithm-for-multidimensional-roots">Discrete 
            Newton algorithm for multidimensional roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-random-numbers">Discrete 
            random numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-random-numbers-1">Discrete 
            random numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-random-numbers-2">Discrete 
            random numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-random-numbers-3">Discrete 
            random numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Discrete-random-numbers_002c-preprocessing">Discrete 
            random numbers, preprocessing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Discrete-Distributions">General 
            Discrete Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-divided-differences_002c-polynomials">divided 
            differences, polynomials</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-division-by-zero_002c-IEEE-exceptions">division 
            by zero, IEEE exceptions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-dollar-sign-_0024_002c-shell-prompt">dollar 
            sign <CODE>$</CODE>, shell prompt</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conventions-used-in-this-manual">Conventions 
            used in this manual</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DOT_002c-Level_002d1-BLAS">DOT, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-double-factorial">double 
            factorial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-double-precision_002c-IEEE-format">double 
            precision, IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-downloading-GSL">downloading 
            GSL</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Obtaining-GSL">Obtaining 
            GSL</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DWT-initialization">DWT 
            initialization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DWT_002c-mathematical-definition">DWT, 
            mathematical definition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Definitions">DWT 
            Definitions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DWT_002c-one-dimensional">DWT, 
            one dimensional</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-one-dimension">DWT 
            in one dimension</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DWT_002c-see-wavelet-transforms">DWT, 
            see wavelet transforms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Wavelet-Transforms">Wavelet 
            Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-DWT_002c-two-dimensional">DWT, 
            two dimensional</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-in-two-dimension">DWT 
            in two dimension</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-E">E</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-e_002c-defined-as-a-macro">e, 
            defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-E1_0028x_0029_002c-E2_0028x_0029_002c-Ei_0028x_0029">E1(x), 
            E2(x), Ei(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integral">Exponential 
            Integral</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-eigenvalues-and-eigenvectors">eigenvalues 
            and eigenvectors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eigensystems">Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-elementary-functions">elementary 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Functions">Mathematical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-elementary-operations">elementary 
            operations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Operations">Elementary 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-elliptic-functions-_0028Jacobi_0029">elliptic 
            functions (Jacobi)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elliptic-Functions-_0028Jacobi_0029">Elliptic 
            Functions (Jacobi)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-elliptic-integrals">elliptic 
            integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elliptic-Integrals">Elliptic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-energy-function">energy 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing">Simulated 
            Annealing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-energy_002c-units-of">energy, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Thermal-Energy-and-Power">Thermal 
            Energy and Power</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-erf_0028x_0029">erf(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Functions">Error 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-erfc_0028x_0029">erfc(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Functions">Error 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Erlang-distribution">Erlang 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-error-codes">error 
            codes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-error-codes_002c-reserved">error 
            codes, reserved</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Codes">Error 
            Codes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-error-function">error 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Functions">Error 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Error-handlers">Error 
            handlers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Handlers">Error 
            Handlers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-error-handling">error 
            handling</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Handling">Error 
            Handling</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-error-handling-macros">error 
            handling macros</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-GSL-error-reporting-in-your-own-functions">Using 
            GSL error reporting in your own functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Errors">Errors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Error-Handling">Error 
            Handling</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-estimated-standard-deviation">estimated 
            standard deviation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-estimated-variance">estimated 
            variance</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Eta-Function">Eta 
            Function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eta-Function">Eta 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-euclidean-distance-function_002c-hypot">euclidean 
            distance function, hypot</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-euclidean-distance-function_002c-hypot-1">euclidean 
            distance function, hypot</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Euler_0027s-constant_002c-defined-as-a-macro">Euler’s 
            constant, defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-evaluation-of-polynomials">evaluation 
            of polynomials</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-evaluation-of-polynomials_002c-in-divided-difference-form">evaluation 
            of polynomials, in divided difference form</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Divided-Difference-Representation-of-Polynomials">Divided 
            Difference Representation of Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-examples_002c-conventions-used-in">examples, 
            conventions used in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conventions-used-in-this-manual">Conventions 
            used in this manual</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exceptions_002c-C_002b_002b">exceptions, 
            C++</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Compatibility-with-C_002b_002b">Compatibility 
            with C++</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exceptions_002c-floating-point">exceptions, 
            floating point</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Handling-floating-point-exceptions">Handling 
            floating point exceptions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exceptions_002c-IEEE-arithmetic">exceptions, 
            IEEE arithmetic</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exchanging-permutation-elements">exchanging 
            permutation elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-permutation-elements">Accessing 
            permutation elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exp">exp</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Functions">Exponential 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-expm1">expm1</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exponent_002c-IEEE-format">exponent, 
            IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Exponential-distribution">Exponential 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Distribution">The 
            Exponential Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exponential-function">exponential 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Functions">Exponential 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exponential-integrals">exponential 
            integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integrals">Exponential 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Exponential-power-distribution">Exponential 
            power distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Exponential-Power-Distribution">The 
            Exponential Power Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exponential_002c-difference-from-1-computed-accurately">exponential, 
            difference from 1 computed accurately</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-exponentiation-of-complex-number">exponentiation 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-extern-inline"><CODE>extern 
            inline</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-F">F</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-F_002ddistribution">F-distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-F_002ddistribution">The 
            F-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-factorial">factorial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-factorial-1">factorial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-factorization-of-matrices">factorization 
            of matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-Algebra">Linear 
            Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-false-position-algorithm-for-finding-roots">false 
            position algorithm for finding roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fast-Fourier-Transforms_002c-see-FFT">Fast 
            Fourier Transforms, see FFT</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fast-Fourier-Transforms">Fast 
            Fourier Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fehlberg-method_002c-differential-equations">Fehlberg 
            method, differential equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fermi_002dDirac-function">Fermi-Dirac 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fermi_002dDirac-Function">Fermi-Dirac 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT">FFT</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fast-Fourier-Transforms">Fast 
            Fourier Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT-mathematical-definition">FFT 
            mathematical definition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Definitions">Mathematical 
            Definitions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT-of-complex-data_002c-mixed_002dradix-algorithm">FFT 
            of complex data, mixed-radix algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT-of-complex-data_002c-radix_002d2-algorithm">FFT 
            of complex data, radix-2 algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT-of-real-data">FFT 
            of real data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-real-data-FFTs">Overview 
            of real data FFTs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT-of-real-data_002c-mixed_002dradix-algorithm">FFT 
            of real data, mixed-radix algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT-of-real-data_002c-radix_002d2-algorithm">FFT 
            of real data, radix-2 algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-FFT_002c-complex-data">FFT, 
            complex data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-complex-data-FFTs">Overview 
            of complex data FFTs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-finding-minima">finding 
            minima</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Minimization">One 
            dimensional Minimization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-finding-roots">finding 
            roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-finding-zeros">finding 
            zeros</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-fits_002c-multi_002dparameter-linear">fits, 
            multi-parameter linear</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-fitting">fitting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Least_002dSquares-Fitting">Least-Squares 
            Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-fitting_002c-using-Chebyshev-polynomials">fitting, 
            using Chebyshev polynomials</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Approximations">Chebyshev 
            Approximations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fj_0028x_0029_002c-Fermi_002dDirac-integral">Fj(x), 
            Fermi-Dirac integral</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complete-Fermi_002dDirac-Integrals">Complete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fj_0028x_002cb_0029_002c-incomplete-Fermi_002dDirac-integral">Fj(x,b), 
            incomplete Fermi-Dirac integral</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Fermi_002dDirac-Integrals">Incomplete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-flat-distribution">flat 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fletcher_002dReeves-conjugate-gradient-algorithm_002c-minimization">Fletcher-Reeves 
            conjugate gradient algorithm, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-floating-point-exceptions">floating 
            point exceptions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Handling-floating-point-exceptions">Handling 
            floating point exceptions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-floating-point-numbers_002c-approximate-comparison">floating 
            point numbers, approximate comparison</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Approximate-Comparison-of-Floating-Point-Numbers">Approximate 
            Comparison of Floating Point Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-floating-point-registers">floating 
            point registers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Examining-floating-point-registers">Examining 
            floating point registers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-force-and-energy_002c-units-of">force 
            and energy, units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Force-and-Energy">Force 
            and Energy</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fortran-range-checking_002c-equivalent-in-gcc">Fortran 
            range checking, equivalent in gcc</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Four_002dtap-Generalized-Feedback-Shift-Register">Four-tap 
            Generalized Feedback Shift Register</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fourier-integrals_002c-numerical">Fourier 
            integrals, numerical</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWF-adaptive-integration-for-Fourier-integrals">QAWF 
            adaptive integration for Fourier integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fourier-Transforms_002c-see-FFT">Fourier 
            Transforms, see FFT</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fast-Fourier-Transforms">Fast 
            Fourier Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Fractional-Order-Bessel-Functions">Fractional 
            Order Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-free-software_002c-explanation-of">free 
            software, explanation of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GSL-is-Free-Software">GSL 
            is Free Software</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-frexp">frexp</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-functions_002c-numerical-differentiation">functions, 
            numerical differentiation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation">Numerical 
            Differentiation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-fundamental-constants">fundamental 
            constants</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fundamental-Constants">Fundamental 
            Constants</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-G">G</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gamma-distribution">Gamma 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gamma-Distribution">The 
            Gamma Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gamma-functions">gamma 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gauss_002dKronrod-quadrature">Gauss-Kronrod 
            quadrature</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Integrands-without-weight-functions">Integrands 
            without weight functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gaussian-distribution">Gaussian 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gaussian-distribution_002c-bivariate">Gaussian 
            distribution, bivariate</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bivariate-Gaussian-Distribution">The 
            Bivariate Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gaussian-Tail-distribution">Gaussian 
            Tail distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Tail-Distribution">The 
            Gaussian Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gcc-extensions_002c-range_002dchecking">gcc 
            extensions, range-checking</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gcc-warning-options">gcc 
            warning options</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GCC-warning-options-for-numerical-programs">GCC 
            warning options for numerical programs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gdb">gdb</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-gdb">Using 
            gdb</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gegenbauer-functions">Gegenbauer 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gegenbauer-Functions">Gegenbauer 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GEMM_002c-Level_002d3-BLAS">GEMM, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GEMV_002c-Level_002d2-BLAS">GEMV, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-general-polynomial-equations_002c-solving">general 
            polynomial equations, solving</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#General-Polynomial-Equations">General 
            Polynomial Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-generalized-eigensystems">generalized 
            eigensystems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Nonsymmetric-Eigensystems">Real 
            Generalized Nonsymmetric Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-generalized-hermitian-definite-eigensystems">generalized 
            hermitian definite eigensystems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Generalized-Hermitian_002dDefinite-Eigensystems">Complex 
            Generalized Hermitian-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-generalized-symmetric-eigensystems">generalized 
            symmetric eigensystems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Generalized-Symmetric_002dDefinite-Eigensystems">Real 
            Generalized Symmetric-Definite Eigensystems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Geometric-random-variates">Geometric 
            random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Geometric-Distribution">The 
            Geometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Geometric-random-variates-1">Geometric 
            random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GER_002c-Level_002d2-BLAS">GER, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GERC_002c-Level_002d2-BLAS">GERC, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GERU_002c-Level_002d2-BLAS">GERU, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Givens-rotation">Givens 
            rotation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Givens-Rotations">Givens 
            Rotations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Givens-Rotation_002c-BLAS">Givens 
            Rotation, BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Givens-Rotation_002c-Modified_002c-BLAS">Givens 
            Rotation, Modified, BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gmres">gmres</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Iterative-Solvers-Types">Sparse 
            Iterative Solvers Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GNU-General-Public-License">GNU 
            General Public License</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Introduction">Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-golden-section-algorithm-for-finding-minima">golden 
            section algorithm for finding minima</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fC99_005fINLINE">GSL_C99_INLINE</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-GSL_005fRNG_005fSEED"><CODE>GSL_RNG_SEED</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-initialization">Random 
            number generator initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fresult">gsl_sf_result</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-gsl_005fsf_005fresult-struct">The 
            gsl_sf_result struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-gsl_005fsf_005fresult_005fe10">gsl_sf_result_e10</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-gsl_005fsf_005fresult-struct">The 
            gsl_sf_result struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gumbel-distribution-_0028Type-1_0029">Gumbel 
            distribution (Type 1)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Gumbel-distribution-_0028Type-2_0029">Gumbel 
            distribution (Type 2)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-H">H</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Haar-wavelets">Haar 
            wavelets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Hankel-transforms_002c-discrete">Hankel 
            transforms, discrete</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transforms">Discrete 
            Hankel Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HAVE_005fINLINE">HAVE_INLINE</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hazard-function_002c-normal-distribution">hazard 
            function, normal distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HBOOK">HBOOK</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ntuple-References-and-Further-Reading">Ntuple 
            References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-header-files_002c-including">header 
            files, including</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Compiling-and-Linking">Compiling 
            and Linking</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-heapsort">heapsort</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting">Sorting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HEMM_002c-Level_002d3-BLAS">HEMM, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HEMV_002c-Level_002d2-BLAS">HEMV, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HER_002c-Level_002d2-BLAS">HER, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HER2_002c-Level_002d2-BLAS">HER2, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HER2K_002c-Level_002d3-BLAS">HER2K, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HERK_002c-Level_002d3-BLAS">HERK, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hermitian-matrix_002c-complex_002c-eigensystem">hermitian 
            matrix, complex, eigensystem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hermitian-Matrices">Complex 
            Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Hessenberg-decomposition">Hessenberg 
            decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg-Decomposition-of-Real-Matrices">Hessenberg 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Hessenberg-triangular-decomposition">Hessenberg 
            triangular decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hessenberg_002dTriangular-Decomposition-of-Real-Matrices">Hessenberg-Triangular 
            Decomposition of Real Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-histogram-statistics">histogram 
            statistics</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-histogram_002c-from-ntuple">histogram, 
            from ntuple</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-histograms">histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histograms">Histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-histograms_002c-random-sampling-from">histograms, 
            random sampling from</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Householder-linear-solver">Householder 
            linear solver</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-solver-for-linear-systems">Householder 
            solver for linear systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Householder-matrix">Householder 
            matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Householder-transformation">Householder 
            transformation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Hurwitz-Zeta-Function">Hurwitz 
            Zeta Function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hurwitz-Zeta-Function">Hurwitz 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HYBRID-algorithm_002c-unscaled-without-derivatives">HYBRID 
            algorithm, unscaled without derivatives</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HYBRID-algorithms-for-nonlinear-systems">HYBRID 
            algorithms for nonlinear systems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HYBRIDJ-algorithm">HYBRIDJ 
            algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HYBRIDS-algorithm_002c-scaled-without-derivatives">HYBRIDS 
            algorithm, scaled without derivatives</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-HYBRIDSJ-algorithm">HYBRIDSJ 
            algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hydrogen-atom">hydrogen 
            atom</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coulomb-Functions">Coulomb 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hyperbolic-cosine_002c-inverse">hyperbolic 
            cosine, inverse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hyperbolic-functions_002c-complex-numbers">hyperbolic 
            functions, complex numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Hyperbolic-Functions">Complex 
            Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hyperbolic-integrals">hyperbolic 
            integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hyperbolic-sine_002c-inverse">hyperbolic 
            sine, inverse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hyperbolic-space">hyperbolic 
            space</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Functions-and-Spherical-Harmonics">Legendre 
            Functions and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hyperbolic-tangent_002c-inverse">hyperbolic 
            tangent, inverse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hypergeometric-functions">hypergeometric 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hypergeometric-Functions">Hypergeometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hypergeometric-random-variates">hypergeometric 
            random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Hypergeometric-Distribution">The 
            Hypergeometric Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hypot">hypot</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-hypot-function_002c-special-functions">hypot 
            function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-I">I</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-I_0028x_0029_002c-Bessel-Functions">I(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-i_0028x_0029_002c-Bessel-Functions">i(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-identity-matrix">identity 
            matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-identity-permutation">identity 
            permutation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-allocation">Permutation 
            allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-IEEE-exceptions">IEEE 
            exceptions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-IEEE-floating-point">IEEE 
            floating point</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#IEEE-floating_002dpoint-arithmetic">IEEE 
            floating-point arithmetic</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-IEEE-format-for-floating-point-numbers">IEEE 
            format for floating point numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-IEEE-infinity_002c-defined-as-a-macro">IEEE 
            infinity, defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-IEEE-NaN_002c-defined-as-a-macro">IEEE 
            NaN, defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-illumination_002c-units-of">illumination, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Light-and-Illumination">Light 
            and Illumination</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-imperial-units">imperial 
            units</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Imperial-Units">Imperial 
            Units</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Implicit-Euler-method">Implicit 
            Euler method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Implicit-Runge_002dKutta-method">Implicit 
            Runge-Kutta method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-importance-sampling_002c-VEGAS">importance 
            sampling, VEGAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-including-GSL-header-files">including 
            GSL header files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Compiling-and-Linking">Compiling 
            and Linking</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-incomplete-Beta-function_002c-normalized">incomplete 
            Beta function, normalized</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Beta-Function">Incomplete 
            Beta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-incomplete-Fermi_002dDirac-integral">incomplete 
            Fermi-Dirac integral</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Fermi_002dDirac-Integrals">Incomplete 
            Fermi-Dirac Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-incomplete-Gamma-function">incomplete 
            Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-indirect-sorting">indirect 
            sorting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-objects">Sorting 
            objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-indirect-sorting_002c-of-vector-elements">indirect 
            sorting, of vector elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-infinity_002c-defined-as-a-macro">infinity, 
            defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-infinity_002c-IEEE-format">infinity, 
            IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-info_002dgsl-mailing-list">info-gsl 
            mailing list</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Obtaining-GSL">Obtaining 
            GSL</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-initial-value-problems_002c-differential-equations">initial 
            value problems, differential equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ordinary-Differential-Equations">Ordinary 
            Differential Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-initializing-matrices">initializing 
            matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-initializing-vectors">initializing 
            vectors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-vector-elements">Initializing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inline-functions">inline 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inline-functions">Inline 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-integer-powers">integer 
            powers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Power-Function">Power 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-integrals_002c-exponential">integrals, 
            exponential</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Exponential-Integrals">Exponential 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-integration_002c-numerical-_0028quadrature_0029">integration, 
            numerical (quadrature)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Integration">Numerical 
            Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-interpolation">interpolation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Interpolation">Interpolation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-interpolation_002c-using-Chebyshev-polynomials">interpolation, 
            using Chebyshev polynomials</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Chebyshev-Approximations">Chebyshev 
            Approximations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-complex-trigonometric-functions">inverse 
            complex trigonometric functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Trigonometric-Functions">Inverse 
            Complex Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-cumulative-distribution-functions">inverse 
            cumulative distribution functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-Number-Distributions">Random 
            Number Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-hyperbolic-cosine">inverse 
            hyperbolic cosine</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-hyperbolic-functions_002c-complex-numbers">inverse 
            hyperbolic functions, complex numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Inverse-Complex-Hyperbolic-Functions">Inverse 
            Complex Hyperbolic Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-hyperbolic-sine">inverse 
            hyperbolic sine</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-hyperbolic-tangent">inverse 
            hyperbolic tangent</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverse-of-a-matrix_002c-by-LU-decomposition">inverse 
            of a matrix, by LU decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-inverting-a-permutation">inverting 
            a permutation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Irregular-Modified-Bessel-Functions_002c-Fractional-Order">Irregular 
            Modified Bessel Functions, Fractional Order</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Bessel-Functions-_002d-Fractional-Order">Irregular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-iterating-through-combinations">iterating 
            through combinations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-functions">Combination 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-iterating-through-multisets">iterating 
            through multisets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-functions">Multiset 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-iterating-through-permutations">iterating 
            through permutations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-iterative-refinement-of-solutions-in-linear-systems">iterative 
            refinement of solutions in linear systems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-J">J</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-J_0028x_0029_002c-Bessel-Functions">J(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-j_0028x_0029_002c-Bessel-Functions">j(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Jacobi-elliptic-functions">Jacobi 
            elliptic functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elliptic-Functions-_0028Jacobi_0029">Elliptic 
            Functions (Jacobi)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Jacobi-orthogonalization">Jacobi 
            orthogonalization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Jacobian-matrix_002c-ODEs">Jacobian 
            matrix, ODEs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Defining-the-ODE-System">Defining 
            the ODE System</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Jacobian-matrix_002c-root-finding">Jacobian 
            matrix, root finding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-Multidimensional-Root-Finding">Overview 
            of Multidimensional Root Finding</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-K">K</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-K_0028x_0029_002c-Bessel-Functions">K(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Cylindrical-Bessel-Functions">Irregular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-k_0028x_0029_002c-Bessel-Functions">k(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Modified-Spherical-Bessel-Functions">Irregular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-knots_002c-basis-splines">knots, 
            basis splines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Constructing-the-knots-vector">Constructing 
            the knots vector</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-kurtosis">kurtosis</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-L">L</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Laguerre-functions">Laguerre 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Laguerre-Functions">Laguerre 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Lambert-function">Lambert 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Lambert-W-Functions">Lambert 
            W Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Landau-distribution">Landau 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Landau-Distribution">The 
            Landau Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-LAPACK">LAPACK</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Eigenvalue-and-Eigenvector-References">Eigenvalue 
            and Eigenvector References</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Laplace-distribution">Laplace 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ldexp">ldexp</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-LD_005fLIBRARY_005fPATH">LD_LIBRARY_PATH</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Shared-Libraries">Shared 
            Libraries</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-leading-dimension_002c-matrices">leading 
            dimension, matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrices">Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-least-squares-fit">least 
            squares fit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Least_002dSquares-Fitting">Least-Squares 
            Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-least-squares-fitting_002c-nonlinear">least 
            squares fitting, nonlinear</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Nonlinear-Least_002dSquares-Fitting">Nonlinear 
            Least-Squares Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-least-squares-troubleshooting">least 
            squares troubleshooting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Troubleshooting">Troubleshooting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-least-squares_002c-covariance-of-best_002dfit-parameters">least 
            squares, covariance of best-fit parameters</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Computing-the-covariance-matrix-of-best-fit-parameters">Computing 
            the covariance matrix of best fit parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-least-squares_002c-regularized">least 
            squares, regularized</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-least-squares_002c-robust">least 
            squares, robust</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Legendre-forms-of-elliptic-integrals">Legendre 
            forms of elliptic integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Definition-of-Legendre-Forms">Definition 
            of Legendre Forms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Legendre-functions">Legendre 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Functions-and-Spherical-Harmonics">Legendre 
            Functions and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Legendre-polynomials">Legendre 
            polynomials</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Functions-and-Spherical-Harmonics">Legendre 
            Functions and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-length_002c-computed-accurately-using-hypot">length, 
            computed accurately using hypot</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-length_002c-computed-accurately-using-hypot-1">length, 
            computed accurately using hypot</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Levenberg_002dMarquardt-algorithms">Levenberg-Marquardt 
            algorithms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Levin-u_002dtransform">Levin 
            u-transform</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Series-Acceleration">Series 
            Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Levy-distribution">Levy 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Levy-alpha_002dStable-Distributions">The 
            Levy alpha-Stable Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Levy-distribution_002c-skew">Levy 
            distribution, skew</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Levy-skew-alpha_002dStable-Distribution">The 
            Levy skew alpha-Stable Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-libraries_002c-linking-with">libraries, 
            linking with</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linking-programs-with-the-library">Linking 
            programs with the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-libraries_002c-shared">libraries, 
            shared</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Shared-Libraries">Shared 
            Libraries</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-license-of-GSL">license 
            of GSL</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Introduction">Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-light_002c-units-of">light, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Light-and-Illumination">Light 
            and Illumination</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-algebra">linear 
            algebra</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-Algebra">Linear 
            Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-algebra_002c-BLAS">linear 
            algebra, BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#BLAS-Support">BLAS 
            Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-algebra_002c-sparse">linear 
            algebra, sparse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Linear-Algebra">Sparse 
            Linear Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-interpolation">linear 
            interpolation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-regression">linear 
            regression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-regression">Linear 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-systems_002c-refinement-of-solutions">linear 
            systems, refinement of solutions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linear-systems_002c-solution-of">linear 
            systems, solution of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-linking-with-GSL-libraries">linking 
            with GSL libraries</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linking-programs-with-the-library">Linking 
            programs with the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-LMDER-algorithm">LMDER 
            algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-log1p">log1p</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-and-related-functions">logarithm 
            and related functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Logarithm-and-Related-Functions">Logarithm 
            and Related Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-Beta-function">logarithm 
            of Beta function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Beta-Functions">Beta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-combinatorial-factor-C_0028m_002cn_0029">logarithm 
            of combinatorial factor C(m,n)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-complex-number">logarithm 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-cosh-function_002c-special-functions">logarithm 
            of cosh function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-double-factorial">logarithm 
            of double factorial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-factorial">logarithm 
            of factorial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-Gamma-function">logarithm 
            of Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-Pochhammer-symbol">logarithm 
            of Pochhammer symbol</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-sinh-function_002c-special-functions">logarithm 
            of sinh function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Trigonometric-Functions">Hyperbolic 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm-of-the-determinant-of-a-matrix">logarithm 
            of the determinant of a matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-logarithm_002c-computed-accurately-near-1">logarithm, 
            computed accurately near 1</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Functions">Elementary 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Logarithmic-random-variates">Logarithmic 
            random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logarithmic-Distribution">The 
            Logarithmic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Logistic-distribution">Logistic 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Logistic-Distribution">The 
            Logistic Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Lognormal-distribution">Lognormal 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Lognormal-Distribution">The 
            Lognormal Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-long-double">long 
            double</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Long-double">Long 
            double</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-low-discrepancy-sequences">low 
            discrepancy sequences</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002dRandom-Sequences">Quasi-Random 
            Sequences</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Low_002dlevel-CBLAS">Low-level 
            CBLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GSL-CBLAS-Library">GSL 
            CBLAS Library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-LU-decomposition">LU 
            decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-M">M</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-macros-for-mathematical-constants">macros 
            for mathematical constants</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-magnitude-of-complex-number">magnitude 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Properties-of-complex-numbers">Properties 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mailing-list-archives">mailing 
            list archives</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Further-Information">Further 
            Information</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mailing-list-for-GSL-announcements">mailing 
            list for GSL announcements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Obtaining-GSL">Obtaining 
            GSL</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mailing-list_002c-bug_002dgsl">mailing 
            list, bug-gsl</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reporting-Bugs">Reporting 
            Bugs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mantissa_002c-IEEE-format">mantissa, 
            IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mass_002c-units-of">mass, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mass-and-Weight">Mass 
            and Weight</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mathematical-constants_002c-defined-as-macros">mathematical 
            constants, defined as macros</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mathematical-functions_002c-elementary">mathematical 
            functions, elementary</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Functions">Mathematical 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Function-Characteristic-Values">Mathieu 
            Function Characteristic Values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Mathieu-functions">Mathieu 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathieu-Functions">Mathieu 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrices">matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vectors-and-Matrices">Vectors 
            and Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrices-1">matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrices">Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrices_002c-initializing">matrices, 
            initializing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrices_002c-range_002dchecking">matrices, 
            range-checking</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-matrix-elements">Accessing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrices_002c-sparse">matrices, 
            sparse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Matrices">Sparse 
            Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-determinant">matrix 
            determinant</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-diagonal">matrix 
            diagonal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-factorization">matrix 
            factorization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-Algebra">Linear 
            Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-inverse">matrix 
            inverse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-square-root_002c-Cholesky-decomposition">matrix 
            square root, Cholesky decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-subdiagonal">matrix 
            subdiagonal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix-superdiagonal">matrix 
            superdiagonal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix_002c-constant">matrix, 
            constant</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix_002c-identity">matrix, 
            identity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix_002c-operations">matrix, 
            operations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#BLAS-Support">BLAS 
            Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-matrix_002c-zero">matrix, 
            zero</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-max">max</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-maximal-phase_002c-Daubechies-wavelets">maximal 
            phase, Daubechies wavelets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#DWT-Initialization">DWT 
            Initialization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-maximization_002c-see-minimization">maximization, 
            see minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Minimization">One 
            dimensional Minimization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-maximum-of-two-numbers">maximum 
            of two numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-maximum-value_002c-from-histogram">maximum 
            value, from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mean">mean</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-mean-value_002c-from-histogram">mean 
            value, from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Mills_0027-ratio_002c-inverse">Mills’ 
            ratio, inverse</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Probability-functions">Probability 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-min">min</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-BFGS-algorithm">minimization, 
            BFGS algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-caveats">minimization, 
            caveats</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Caveats">Minimization 
            Caveats</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-conjugate-gradient-algorithm">minimization, 
            conjugate gradient algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-multidimensional">minimization, 
            multidimensional</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multidimensional-Minimization">Multidimensional 
            Minimization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-one_002ddimensional">minimization, 
            one-dimensional</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Minimization">One 
            dimensional Minimization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-overview">minimization, 
            overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Overview">Minimization 
            Overview</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-Polak_002dRibiere-algorithm">minimization, 
            Polak-Ribiere algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-providing-a-function-to-minimize">minimization, 
            providing a function to minimize</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-function-to-minimize">Providing 
            the function to minimize</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-simplex-algorithm">minimization, 
            simplex algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-steepest-descent-algorithm">minimization, 
            steepest descent algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimization_002c-stopping-parameters">minimization, 
            stopping parameters</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Stopping-Parameters">Minimization 
            Stopping Parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimum-finding_002c-Brent_0027s-method">minimum 
            finding, Brent’s method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimum-finding_002c-golden-section-algorithm">minimum 
            finding, golden section algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimum-of-two-numbers">minimum 
            of two numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Maximum-and-Minimum-functions">Maximum 
            and Minimum functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-minimum-value_002c-from-histogram">minimum 
            value, from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-MINPACK_002c-minimization-algorithms">MINPACK, 
            minimization algorithms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-MINPACK_002c-minimization-algorithms-1">MINPACK, 
            minimization algorithms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms-using-Derivatives">Minimization 
            Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-MISCFUN">MISCFUN</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Special-Functions-References-and-Further-Reading">Special 
            Functions References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-MISER-monte-carlo-integration">MISER 
            monte carlo integration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Mixed_002dradix-FFT_002c-complex-data">Mixed-radix 
            FFT, complex data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-complex-data">Mixed-radix 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Mixed_002dradix-FFT_002c-real-data">Mixed-radix 
            FFT, real data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mixed_002dradix-FFT-routines-for-real-data">Mixed-radix 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Modified-Bessel-Functions_002c-Fractional-Order">Modified 
            Bessel Functions, Fractional Order</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Modified-Clenshaw_002dCurtis-quadrature">Modified 
            Clenshaw-Curtis quadrature</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Integrands-with-weight-functions">Integrands 
            with weight functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Modified-Cylindrical-Bessel-Functions">Modified 
            Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Modified-Givens-Rotation_002c-BLAS">Modified 
            Givens Rotation, BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Modified-Newton_0027s-method-for-nonlinear-systems">Modified 
            Newton’s method for nonlinear systems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Modified-Spherical-Bessel-Functions">Modified 
            Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Monte-Carlo-integration">Monte 
            Carlo integration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Monte-Carlo-Integration">Monte 
            Carlo Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-MRG_002c-multiple-recursive-random-number-generator">MRG, 
            multiple recursive random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-MT19937-random-number-generator">MT19937 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multi_002dparameter-regression">multi-parameter 
            regression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multi_002dparameter-regression">Multi-parameter 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multidimensional-integration">multidimensional 
            integration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Monte-Carlo-Integration">Monte 
            Carlo Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multidimensional-root-finding_002c-Broyden-algorithm">multidimensional 
            root finding, Broyden algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multidimensional-root-finding_002c-overview">multidimensional 
            root finding, overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-Multidimensional-Root-Finding">Overview 
            of Multidimensional Root Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multidimensional-root-finding_002c-providing-a-function-to-solve">multidimensional 
            root finding, providing a function to solve</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-multidimensional-system-of-equations-to-solve">Providing 
            the multidimensional system of equations to solve</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Multimin_002c-caveats">Multimin, 
            caveats</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Caveats">Multimin 
            Caveats</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Multinomial-distribution">Multinomial 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Multinomial-Distribution">The 
            Multinomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multiplication">multiplication</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Operations">Elementary 
            Operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multisets">multisets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multisets">Multisets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-multistep-methods_002c-ODEs">multistep 
            methods, ODEs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-N">N</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-N_002ddimensional-random-direction-vector">N-dimensional 
            random direction vector</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-NaN_002c-defined-as-a-macro">NaN, 
            defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nautical-units">nautical 
            units</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Speed-and-Nautical-Units">Speed 
            and Nautical Units</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Negative-Binomial-distribution_002c-random-variates">Negative 
            Binomial distribution, random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Negative-Binomial-Distribution">The 
            Negative Binomial Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Nelder_002dMead-simplex-algorithm-for-minimization">Nelder-Mead 
            simplex algorithm for minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Newton-algorithm_002c-discrete">Newton 
            algorithm, discrete</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-without-Derivatives">Algorithms 
            without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Newton-algorithm_002c-globally-convergent">Newton 
            algorithm, globally convergent</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Newton_0027s-method-for-finding-roots">Newton’s 
            method for finding roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Newton_0027s-method-for-systems-of-nonlinear-equations">Newton’s 
            method for systems of nonlinear equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Algorithms-using-Derivatives">Algorithms 
            using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Niederreiter-sequence">Niederreiter 
            sequence</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002dRandom-Sequences">Quasi-Random 
            Sequences</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-NIST-Statistical-Reference-Datasets">NIST 
            Statistical Reference Datasets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fitting-References-and-Further-Reading">Fitting 
            References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-non_002dnormalized-incomplete-Gamma-function">non-normalized 
            incomplete Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonlinear-equation_002c-solutions-of">nonlinear 
            equation, solutions of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonlinear-fitting_002c-stopping-parameters">nonlinear 
            fitting, stopping parameters</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonlinear-functions_002c-minimization">nonlinear 
            functions, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Minimization">One 
            dimensional Minimization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonlinear-least-squares-fitting">nonlinear 
            least squares fitting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Nonlinear-Least_002dSquares-Fitting">Nonlinear 
            Least-Squares Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonlinear-least-squares-fitting_002c-overview">nonlinear 
            least squares fitting, overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-Nonlinear-Least_002dSquares-Fitting">Overview 
            of Nonlinear Least-Squares Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonlinear-systems-of-equations_002c-solution-of">nonlinear 
            systems of equations, solution of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multidimensional-Root_002dFinding">Multidimensional 
            Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nonsymmetric-matrix_002c-real_002c-eigensystem">nonsymmetric 
            matrix, real, eigensystem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Nordsieck-form">Nordsieck 
            form</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-normalized-form_002c-IEEE-format">normalized 
            form, IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-normalized-incomplete-Beta-function">normalized 
            incomplete Beta function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Beta-Function">Incomplete 
            Beta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Not_002da_002dnumber_002c-defined-as-a-macro">Not-a-number, 
            defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Infinities-and-Not_002da_002dnumber">Infinities 
            and Not-a-number</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-NRM2_002c-Level_002d1-BLAS">NRM2, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ntuples">ntuples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#N_002dtuples">N-tuples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-nuclear-physics_002c-constants">nuclear 
            physics, constants</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Atomic-and-Nuclear-Physics">Atomic 
            and Nuclear Physics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-numerical-constants_002c-defined-as-macros">numerical 
            constants, defined as macros</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-numerical-derivatives">numerical 
            derivatives</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation">Numerical 
            Differentiation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-numerical-integration-_0028quadrature_0029">numerical 
            integration (quadrature)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Integration">Numerical 
            Integration</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-O">O</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-obtaining-GSL">obtaining 
            GSL</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Obtaining-GSL">Obtaining 
            GSL</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ODEs_002c-initial-value-problems">ODEs, 
            initial value problems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ordinary-Differential-Equations">Ordinary 
            Differential Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-online-statistics">online 
            statistics</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics">Running 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-optimization_002c-combinatorial">optimization, 
            combinatorial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing">Simulated 
            Annealing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-optimization_002c-see-minimization">optimization, 
            see minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Minimization">One 
            dimensional Minimization</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-optimized-functions_002c-alternatives">optimized 
            functions, alternatives</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Alternative-optimized-functions">Alternative 
            optimized functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ordering_002c-matrix-elements">ordering, 
            matrix elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrices">Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ordinary-differential-equations_002c-initial-value-problem">ordinary 
            differential equations, initial value problem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ordinary-Differential-Equations">Ordinary 
            Differential Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-oscillatory-functions_002c-numerical-integration-of">oscillatory 
            functions, numerical integration of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-overflow_002c-IEEE-exceptions">overflow, 
            IEEE exceptions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-P">P</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Pareto-distribution">Pareto 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Pareto-Distribution">The 
            Pareto Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-PAW">PAW</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Ntuple-References-and-Further-Reading">Ntuple 
            References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-permutations">permutations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutations">Permutations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-physical-constants">physical 
            constants</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Physical-Constants">Physical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-physical-dimension_002c-matrices">physical 
            dimension, matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrices">Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-pi_002c-defined-as-a-macro">pi, 
            defined as a macro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mathematical-Constants">Mathematical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-plain-Monte-Carlo">plain 
            Monte Carlo</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#PLAIN-Monte-Carlo">PLAIN 
            Monte Carlo</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Pochhammer-symbol">Pochhammer 
            symbol</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Poisson-random-numbers">Poisson 
            random numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Poisson-Distribution">The 
            Poisson Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Polak_002dRibiere-algorithm_002c-minimization">Polak-Ribiere 
            algorithm, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-polar-form-of-complex-numbers">polar 
            form of complex numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-polar-to-rectangular-conversion">polar 
            to rectangular conversion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-Functions">Conversion 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-polygamma-functions">polygamma 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Psi-_0028Digamma_0029-Function">Psi 
            (Digamma) Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-polynomial-evaluation">polynomial 
            evaluation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomial-Evaluation">Polynomial 
            Evaluation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-polynomial-interpolation">polynomial 
            interpolation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#g_t1D-Interpolation-Types">1D 
            Interpolation Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-polynomials_002c-roots-of">polynomials, 
            roots of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Polynomials">Polynomials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-power-function">power 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Power-Function">Power 
            Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-power-of-complex-number">power 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-power_002c-units-of">power, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Thermal-Energy-and-Power">Thermal 
            Energy and Power</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-precision_002c-IEEE-arithmetic">precision, 
            IEEE arithmetic</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-predictor_002dcorrector-method_002c-ODEs">predictor-corrector 
            method, ODEs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-prefixes">prefixes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Prefixes">Prefixes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-pressure_002c-units-of">pressure, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pressure">Pressure</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Prince_002dDormand_002c-Runge_002dKutta-method">Prince-Dormand, 
            Runge-Kutta method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-printers-units">printers 
            units</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Printers-Units">Printers 
            Units</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-probability-distribution_002c-from-histogram">probability 
            distribution, from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-probability-distributions_002c-from-histograms">probability 
            distributions, from histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-histograms">Resampling 
            from histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-projection-of-ntuples">projection 
            of ntuples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-psi-function">psi 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Psi-_0028Digamma_0029-Function">Psi 
            (Digamma) Function</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-Q">Q</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAG-quadrature-algorithm">QAG 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAG-adaptive-integration">QAG 
            adaptive integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAGI-quadrature-algorithm">QAGI 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGI-adaptive-integration-on-infinite-intervals">QAGI 
            adaptive integration on infinite intervals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAGP-quadrature-algorithm">QAGP 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGP-adaptive-integration-with-known-singular-points">QAGP 
            adaptive integration with known singular points</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAGS-quadrature-algorithm">QAGS 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGS-adaptive-integration-with-singularities">QAGS 
            adaptive integration with singularities</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAWC-quadrature-algorithm">QAWC 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWC-adaptive-integration-for-Cauchy-principal-values">QAWC 
            adaptive integration for Cauchy principal values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAWF-quadrature-algorithm">QAWF 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWF-adaptive-integration-for-Fourier-integrals">QAWF 
            adaptive integration for Fourier integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAWO-quadrature-algorithm">QAWO 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWO-adaptive-integration-for-oscillatory-functions">QAWO 
            adaptive integration for oscillatory functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QAWS-quadrature-algorithm">QAWS 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QNG-quadrature-algorithm">QNG 
            quadrature algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QNG-non_002dadaptive-Gauss_002dKronrod-integration">QNG 
            non-adaptive Gauss-Kronrod integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QR-decomposition">QR 
            decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition">QR 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QR-decomposition-with-column-pivoting">QR 
            decomposition with column pivoting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QR-Decomposition-with-Column-Pivoting">QR 
            Decomposition with Column Pivoting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-QUADPACK">QUADPACK</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Integration">Numerical 
            Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-quadratic-equation_002c-solving">quadratic 
            equation, solving</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quadratic-Equations">Quadratic 
            Equations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-quadrature">quadrature</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Integration">Numerical 
            Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-quantile-functions">quantile 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-Number-Distributions">Random 
            Number Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-quasi_002drandom-sequences">quasi-random 
            sequences</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002dRandom-Sequences">Quasi-Random 
            Sequences</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-R">R</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-R250-shift_002dregister-random-number-generator">R250 
            shift-register random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Racah-coefficients">Racah 
            coefficients</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coupling-Coefficients">Coupling 
            Coefficients</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radial-Mathieu-Functions">Radial 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-radioactivity_002c-units-of">radioactivity, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radioactivity">Radioactivity</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Radix_002d2-FFT-for-real-data">Radix-2 
            FFT for real data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-real-data">Radix-2 
            FFT routines for real data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Radix_002d2-FFT_002c-complex-data">Radix-2 
            FFT, complex data</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Radix_002d2-FFT-routines-for-complex-data">Radix-2 
            FFT routines for complex data</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-rand_002c-BSD-random-number-generator">rand, 
            BSD random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-rand48-random-number-generator">rand48 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-random-number-distributions">random 
            number distributions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-Number-Distributions">Random 
            Number Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-random-number-generators">random 
            number generators</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-Number-Generation">Random 
            Number Generation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-random-sampling-from-histograms">random 
            sampling from histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANDU-random-number-generator">RANDU 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANF-random-number-generator">RANF 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-range">range</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-range_002dchecking-for-matrices">range-checking 
            for matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-matrix-elements">Accessing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-range_002dchecking-for-vectors">range-checking 
            for vectors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANLUX-random-number-generator">RANLUX 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANLXD-random-number-generator">RANLXD 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANLXS-random-number-generator">RANLXS 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANMAR-random-number-generator">RANMAR 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RANMAR-random-number-generator-1">RANMAR 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Rayleigh-distribution">Rayleigh 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Distribution">The 
            Rayleigh Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Rayleigh-Tail-distribution">Rayleigh 
            Tail distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Rayleigh-Tail-Distribution">The 
            Rayleigh Tail Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-real-nonsymmetric-matrix_002c-eigensystem">real 
            nonsymmetric matrix, eigensystem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Nonsymmetric-Matrices">Real 
            Nonsymmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-real-symmetric-matrix_002c-eigensystem">real 
            symmetric matrix, eigensystem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Reciprocal-Gamma-function">Reciprocal 
            Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-rectangular-to-polar-conversion">rectangular 
            to polar conversion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-Functions">Conversion 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-recursive-stratified-sampling_002c-MISER">recursive 
            stratified sampling, MISER</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#MISER">MISER</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-reduction-of-angular-variables">reduction 
            of angular variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Restriction-Functions">Restriction 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-refinement-of-solutions-in-linear-systems">refinement 
            of solutions in linear systems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-regression_002c-least-squares">regression, 
            least squares</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Least_002dSquares-Fitting">Least-Squares 
            Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-regression_002c-ridge">regression, 
            ridge</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-regression_002c-robust">regression, 
            robust</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-regression_002c-Tikhonov">regression, 
            Tikhonov</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Bessel-Functions_002c-Fractional-Order">Regular 
            Bessel Functions, Fractional Order</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Bessel-Function-_002d-Fractional-Order">Regular 
            Bessel Function - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Bessel-Functions_002c-Zeros-of">Regular 
            Bessel Functions, Zeros of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Cylindrical-Bessel-Functions">Regular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Modified-Bessel-Functions_002c-Fractional-Order">Regular 
            Modified Bessel Functions, Fractional Order</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Bessel-Functions-_002d-Fractional-Order">Regular 
            Modified Bessel Functions - Fractional Order</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Cylindrical-Bessel-Functions">Regular 
            Modified Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Modified-Spherical-Bessel-Functions">Regular 
            Modified Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Regulated-Gamma-function">Regulated 
            Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Gamma-Functions">Gamma 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-relative-Pochhammer-symbol">relative 
            Pochhammer symbol</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Pochhammer-Symbol">Pochhammer 
            Symbol</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-reporting-bugs-in-GSL">reporting 
            bugs in GSL</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Reporting-Bugs">Reporting 
            Bugs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-representations-of-complex-numbers">representations 
            of complex numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-complex-numbers">Representation 
            of complex numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-resampling-from-histograms">resampling 
            from histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-histograms">Resampling 
            from histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-residual_002c-in-nonlinear-systems-of-equations">residual, 
            in nonlinear systems of equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-the-multidimensional-solver">Search 
            Stopping Parameters for the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-residual_002c-in-nonlinear-systems-of-equations-1">residual, 
            in nonlinear systems of equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-Minimization-Algorithms">Search 
            Stopping Parameters for Minimization Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-reversing-a-permutation">reversing 
            a permutation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-functions">Permutation 
            functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ridge-regression">ridge 
            regression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Riemann-Zeta-Function">Riemann 
            Zeta Function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Riemann-Zeta-Function">Riemann 
            Zeta Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RK2_002c-Runge_002dKutta-method">RK2, 
            Runge-Kutta method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RK4_002c-Runge_002dKutta-method">RK4, 
            Runge-Kutta method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-RKF45_002c-Runge_002dKutta_002dFehlberg-method">RKF45, 
            Runge-Kutta-Fehlberg method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-robust-regression">robust 
            regression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Robust-linear-regression">Robust 
            linear regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding">root 
            finding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-bisection-algorithm">root 
            finding, bisection algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-Brent_0027s-method">root 
            finding, Brent’s method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-caveats">root 
            finding, caveats</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Caveats">Root 
            Finding Caveats</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-false-position-algorithm">root 
            finding, false position algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Bracketing-Algorithms">Root 
            Bracketing Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-initial-guess">root 
            finding, initial guess</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Bounds-and-Guesses">Search 
            Bounds and Guesses</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-Newton_0027s-method">root 
            finding, Newton’s method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-overview">root 
            finding, overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Overview">Root 
            Finding Overview</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-providing-a-function-to-solve">root 
            finding, providing a function to solve</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Providing-the-function-to-solve">Providing 
            the function to solve</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-search-bounds">root 
            finding, search bounds</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Bounds-and-Guesses">Search 
            Bounds and Guesses</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-secant-method">root 
            finding, secant method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-Steffenson_0027s-method">root 
            finding, Steffenson’s method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-stopping-parameters">root 
            finding, stopping parameters</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters">Search 
            Stopping Parameters</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-root-finding_002c-stopping-parameters-1">root 
            finding, stopping parameters</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Search-Stopping-Parameters-for-the-multidimensional-solver">Search 
            Stopping Parameters for the multidimensional solver</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-roots">roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-ROTG_002c-Level_002d1-BLAS">ROTG, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-rounding-mode">rounding 
            mode</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Runge_002dKutta-Cash_002dKarp-method">Runge-Kutta 
            Cash-Karp method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Runge_002dKutta-methods_002c-ordinary-differential-equations">Runge-Kutta 
            methods, ordinary differential equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Runge_002dKutta-Prince_002dDormand-method">Runge-Kutta 
            Prince-Dormand method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Stepping-Functions">Stepping 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-running-statistics">running 
            statistics</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Running-Statistics">Running 
            Statistics</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-S">S</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-safe-comparison-of-floating-point-numbers">safe 
            comparison of floating point numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Approximate-Comparison-of-Floating-Point-Numbers">Approximate 
            Comparison of Floating Point Numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-safeguarded-step_002dlength-algorithm">safeguarded 
            step-length algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Minimization-Algorithms">Minimization 
            Algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sampling-from-histograms">sampling 
            from histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Resampling-from-histograms">Resampling 
            from histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sampling-from-histograms-1">sampling 
            from histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-histogram-probability-distribution-struct">The 
            histogram probability distribution struct</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SAXPY_002c-Level_002d1-BLAS">SAXPY, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SCAL_002c-Level_002d1-BLAS">SCAL, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-schedule_002c-cooling">schedule, 
            cooling</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing-algorithm">Simulated 
            Annealing algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-se_0028q_002cx_0029_002c-Mathieu-function"><EM>se(q,x)</EM>, 
            Mathieu function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Angular-Mathieu-Functions">Angular 
            Mathieu Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-secant-method-for-finding-roots">secant 
            method for finding roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-selection-function_002c-ntuples">selection 
            function, ntuples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-series_002c-acceleration">series, 
            acceleration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Series-Acceleration">Series 
            Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-shared-libraries">shared 
            libraries</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Shared-Libraries">Shared 
            Libraries</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-shell-prompt">shell 
            prompt</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conventions-used-in-this-manual">Conventions 
            used in this manual</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Shi_0028x_0029">Shi(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Hyperbolic-Integrals">Hyperbolic 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-shift_002dregister-random-number-generator">shift-register 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Si_0028x_0029">Si(x)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sign-bit_002c-IEEE-format">sign 
            bit, IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sign-of-the-determinant-of-a-matrix">sign 
            of the determinant of a matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#LU-Decomposition">LU 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-simplex-algorithm_002c-minimization">simplex 
            algorithm, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-without-Derivatives">Multimin 
            Algorithms without Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-simulated-annealing">simulated 
            annealing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Simulated-Annealing">Simulated 
            Annealing</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sin_002c-of-complex-number">sin, 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sine-function_002c-special-functions">sine 
            function, special functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Circular-Trigonometric-Functions">Circular 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-single-precision_002c-IEEE-format">single 
            precision, IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-singular-functions_002c-numerical-integration-of">singular 
            functions, numerical integration of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAWS-adaptive-integration-for-singular-functions">QAWS 
            adaptive integration for singular functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-singular-points_002c-specifying-positions-in-quadrature">singular 
            points, specifying positions in quadrature</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#QAGP-adaptive-integration-with-known-singular-points">QAGP 
            adaptive integration with known singular points</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-singular-value-decomposition">singular 
            value decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Skew-Levy-distribution">Skew 
            Levy distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Levy-skew-alpha_002dStable-Distribution">The 
            Levy skew alpha-Stable Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-skewness">skewness</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Higher-moments-_0028skewness-and-kurtosis_0029">Higher 
            moments (skewness and kurtosis)</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-slope_002c-see-numerical-derivative">slope, 
            see numerical derivative</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Numerical-Differentiation">Numerical 
            Differentiation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Sobol-sequence">Sobol 
            sequence</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Quasi_002dRandom-Sequences">Quasi-Random 
            Sequences</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-solution-of-linear-system-by-Householder-transformations">solution 
            of linear system by Householder transformations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-solver-for-linear-systems">Householder 
            solver for linear systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-solution-of-linear-systems_002c-Ax_003db">solution 
            of linear systems, Ax=b</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Linear-Algebra">Linear 
            Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-solving-a-nonlinear-equation">solving 
            a nonlinear equation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-solving-nonlinear-systems-of-equations">solving 
            nonlinear systems of equations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multidimensional-Root_002dFinding">Multidimensional 
            Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sorting">sorting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting">Sorting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sorting-eigenvalues-and-eigenvectors">sorting 
            eigenvalues and eigenvectors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-Eigenvalues-and-Eigenvectors">Sorting 
            Eigenvalues and Eigenvectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sorting-vector-elements">sorting 
            vector elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-source-code_002c-reuse-in-applications">source 
            code, reuse in applications</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Code-Reuse">Code 
            Reuse</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-BLAS">sparse 
            BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-BLAS-Support">Sparse 
            BLAS Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-linear-algebra">sparse 
            linear algebra</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Linear-Algebra">Sparse 
            Linear Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-linear-algebra_002c-examples">sparse 
            linear algebra, examples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Linear-Algebra-Examples">Sparse 
            Linear Algebra Examples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-linear-algebra_002c-iterative-solvers">sparse 
            linear algebra, iterative solvers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Iterative-Solvers">Sparse 
            Iterative Solvers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-linear-algebra_002c-overview">sparse 
            linear algebra, overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-Sparse-Linear-Algebra">Overview 
            of Sparse Linear Algebra</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-linear-algebra_002c-references">sparse 
            linear algebra, references</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Linear-Algebra-References-and-Further-Reading">Sparse 
            Linear Algebra References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices">sparse 
            matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Matrices">Sparse 
            Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-accessing-elements">sparse 
            matrices, accessing elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-sparse-matrix-elements">Accessing 
            sparse matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-allocation">sparse 
            matrices, allocation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-allocation">Sparse 
            matrix allocation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-BLAS-operations">sparse 
            matrices, BLAS operations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-BLAS-operations">Sparse 
            BLAS operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-compression">sparse 
            matrices, compression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-compressed-format">Sparse 
            matrix compressed format</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-conversion">sparse 
            matrices, conversion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Conversion-between-sparse-and-dense-matrices">Conversion 
            between sparse and dense matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-copying">sparse 
            matrices, copying</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Copying-sparse-matrices">Copying 
            sparse matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-examples">sparse 
            matrices, examples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Matrix-Examples">Sparse 
            Matrix Examples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-initializing-elements">sparse 
            matrices, initializing elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-sparse-matrix-elements">Initializing 
            sparse matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-iterative-solvers">sparse 
            matrices, iterative solvers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Iterative-Solvers">Sparse 
            Iterative Solvers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-min_002fmax-elements">sparse 
            matrices, min/max elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Finding-maximum-and-minimum-elements-of-sparse-matrices">Finding 
            maximum and minimum elements of sparse matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-operations">sparse 
            matrices, operations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-operations">Sparse 
            matrix operations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-overview">sparse 
            matrices, overview</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Overview-of-Sparse-Matrices">Overview 
            of Sparse Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-properties">sparse 
            matrices, properties</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-matrix-properties">Sparse 
            matrix properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-references">sparse 
            matrices, references</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Matrix-References-and-Further-Reading">Sparse 
            Matrix References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse-matrices_002c-references-1">sparse 
            matrices, references</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-BLAS-References-and-Further-Reading">Sparse 
            BLAS References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-sparse_002c-iterative-solvers">sparse, 
            iterative solvers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sparse-Iterative-Solvers">Sparse 
            Iterative Solvers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-special-functions">special 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Special-Functions">Special 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Spherical-Bessel-Functions">Spherical 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regular-Spherical-Bessel-Functions">Regular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-spherical-harmonics">spherical 
            harmonics</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Legendre-Functions-and-Spherical-Harmonics">Legendre 
            Functions and Spherical Harmonics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-spherical-random-variates_002c-2D">spherical 
            random variates, 2D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-spherical-random-variates_002c-3D">spherical 
            random variates, 3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-spherical-random-variates_002c-N_002ddimensional">spherical 
            random variates, N-dimensional</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Spherical-Vector-Distributions">Spherical 
            Vector Distributions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-spline">spline</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Interpolation">Interpolation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-splines_002c-basis">splines, 
            basis</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Basis-Splines">Basis 
            Splines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-square-root-of-a-matrix_002c-Cholesky-decomposition">square 
            root of a matrix, Cholesky decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Cholesky-Decomposition">Cholesky 
            Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-square-root-of-complex-number">square 
            root of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Elementary-Complex-Functions">Elementary 
            Complex Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-standard-deviation">standard 
            deviation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-standard-deviation_002c-from-histogram">standard 
            deviation, from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-standards-conformance_002c-ANSI-C">standards 
            conformance, ANSI C</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-the-library">Using 
            the library</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Statistical-Reference-Datasets-_0028StRD_0029">Statistical 
            Reference Datasets (StRD)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fitting-References-and-Further-Reading">Fitting 
            References and Further Reading</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-statistics">statistics</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-statistics_002c-from-histogram">statistics, 
            from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-steepest-descent-algorithm_002c-minimization">steepest 
            descent algorithm, minimization</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multimin-Algorithms-with-Derivatives">Multimin 
            Algorithms with Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Steffenson_0027s-method-for-finding-roots">Steffenson’s 
            method for finding roots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Root-Finding-Algorithms-using-Derivatives">Root 
            Finding Algorithms using Derivatives</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-stratified-sampling-in-Monte-Carlo-integration">stratified 
            sampling in Monte Carlo integration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Monte-Carlo-Integration">Monte 
            Carlo Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-stride_002c-of-vector-index">stride, 
            of vector index</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vectors">Vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Student-t_002ddistribution">Student 
            t-distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-subdiagonal_002c-of-a-matrix">subdiagonal, 
            of a matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-summation_002c-acceleration">summation, 
            acceleration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Series-Acceleration">Series 
            Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-superdiagonal_002c-matrix">superdiagonal, 
            matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Creating-row-and-column-views">Creating 
            row and column views</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SVD">SVD</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Singular-Value-Decomposition">Singular 
            Value Decomposition</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SWAP_002c-Level_002d1-BLAS">SWAP, 
            Level-1 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-1-GSL-BLAS-Interface">Level 
            1 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-swapping-permutation-elements">swapping 
            permutation elements</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-permutation-elements">Accessing 
            permutation elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SYMM_002c-Level_002d3-BLAS">SYMM, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-symmetric-matrix_002c-real_002c-eigensystem">symmetric 
            matrix, real, eigensystem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Real-Symmetric-Matrices">Real 
            Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SYMV_002c-Level_002d2-BLAS">SYMV, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-synchrotron-functions">synchrotron 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Synchrotron-Functions">Synchrotron 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SYR_002c-Level_002d2-BLAS">SYR, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SYR2_002c-Level_002d2-BLAS">SYR2, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SYR2K_002c-Level_002d3-BLAS">SYR2K, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-SYRK_002c-Level_002d3-BLAS">SYRK, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-systems-of-equations_002c-nonlinear">systems 
            of equations, nonlinear</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multidimensional-Root_002dFinding">Multidimensional 
            Root-Finding</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-T">T</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-t_002ddistribution">t-distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-t_002ddistribution">The 
            t-distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-t_002dtest">t-test</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-tangent-of-complex-number">tangent 
            of complex number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Tausworthe-random-number-generator">Tausworthe 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Random-number-generator-algorithms">Random 
            number generator algorithms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Taylor-coefficients_002c-computation-of">Taylor 
            coefficients, computation of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Factorials">Factorials</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-testing-combination-for-validity">testing 
            combination for validity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Combination-properties">Combination 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-testing-multiset-for-validity">testing 
            multiset for validity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Multiset-properties">Multiset 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-testing-permutation-for-validity">testing 
            permutation for validity</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Permutation-properties">Permutation 
            properties</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-thermal-energy_002c-units-of">thermal 
            energy, units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Thermal-Energy-and-Power">Thermal 
            Energy and Power</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Tikhonov-regression">Tikhonov 
            regression</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Regularized-regression">Regularized 
            regression</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-time-units">time 
            units</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Measurement-of-Time">Measurement 
            of Time</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-trailing-dimension_002c-matrices">trailing 
            dimension, matrices</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Matrices">Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-transformation_002c-Householder">transformation, 
            Householder</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Householder-Transformations">Householder 
            Transformations</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-transforms_002c-Hankel">transforms, 
            Hankel</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Discrete-Hankel-Transforms">Discrete 
            Hankel Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-transforms_002c-wavelet">transforms, 
            wavelet</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Wavelet-Transforms">Wavelet 
            Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-transport-functions">transport 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Transport-Functions">Transport 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-traveling-salesman-problem">traveling 
            salesman problem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Traveling-Salesman-Problem">Traveling 
            Salesman Problem</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-tridiagonal-decomposition">tridiagonal 
            decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Real-Symmetric-Matrices">Tridiagonal 
            Decomposition of Real Symmetric Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-tridiagonal-decomposition-1">tridiagonal 
            decomposition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Decomposition-of-Hermitian-Matrices">Tridiagonal 
            Decomposition of Hermitian Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-tridiagonal-systems">tridiagonal 
            systems</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Tridiagonal-Systems">Tridiagonal 
            Systems</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-trigonometric-functions">trigonometric 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Functions">Trigonometric 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-trigonometric-functions-of-complex-numbers">trigonometric 
            functions of complex numbers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Complex-Trigonometric-Functions">Complex 
            Trigonometric Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-trigonometric-integrals">trigonometric 
            integrals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Trigonometric-Integrals">Trigonometric 
            Integrals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-TRMM_002c-Level_002d3-BLAS">TRMM, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-TRMV_002c-Level_002d2-BLAS">TRMV, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-TRSM_002c-Level_002d3-BLAS">TRSM, 
            Level-3 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-3-GSL-BLAS-Interface">Level 
            3 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-TRSV_002c-Level_002d2-BLAS">TRSV, 
            Level-2 BLAS</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Level-2-GSL-BLAS-Interface">Level 
            2 GSL BLAS Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-TSP">TSP</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Traveling-Salesman-Problem">Traveling 
            Salesman Problem</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-TT800-random-number-generator">TT800 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-two-dimensional-Gaussian-distribution">two 
            dimensional Gaussian distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Bivariate-Gaussian-Distribution">The 
            Bivariate Gaussian Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-two-dimensional-histograms">two 
            dimensional histograms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Two-dimensional-histograms">Two 
            dimensional histograms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-two_002dsided-exponential-distribution">two-sided 
            exponential distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Laplace-Distribution">The 
            Laplace Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Type-1-Gumbel-distribution_002c-random-variates">Type 
            1 Gumbel distribution, random variates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d1-Gumbel-Distribution">The 
            Type-1 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Type-2-Gumbel-distribution">Type 
            2 Gumbel distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Type_002d2-Gumbel-Distribution">The 
            Type-2 Gumbel Distribution</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-U">U</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-u_002dtransform-for-series">u-transform 
            for series</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Series-Acceleration">Series 
            Acceleration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-underflow_002c-IEEE-exceptions">underflow, 
            IEEE exceptions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Setting-up-your-IEEE-environment">Setting 
            up your IEEE environment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-uniform-distribution">uniform 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Flat-_0028Uniform_0029-Distribution">The 
            Flat (Uniform) Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-units_002c-conversion-of">units, 
            conversion of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Physical-Constants">Physical 
            Constants</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-units_002c-imperial">units, 
            imperial</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Imperial-Units">Imperial 
            Units</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Unix-random-number-generators_002c-rand">Unix 
            random number generators, rand</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Unix-random-number-generators_002c-rand48">Unix 
            random number generators, rand48</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Unix-random-number-generators">Unix 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-unnormalized-incomplete-Gamma-function">unnormalized 
            incomplete Gamma function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Incomplete-Gamma-Functions">Incomplete 
            Gamma Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-unweighted-linear-fits">unweighted 
            linear fits</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Least_002dSquares-Fitting">Least-Squares 
            Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-usage_002c-compiling-application-programs">usage, 
            compiling application programs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Using-the-library">Using 
            the library</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-V">V</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-value-function_002c-ntuples">value 
            function, ntuples</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogramming-ntuple-values">Histogramming 
            ntuple values</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Van-der-Pol-oscillator_002c-example">Van 
            der Pol oscillator, example</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#ODE-Example-programs">ODE 
            Example programs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-variance">variance</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Statistics">Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-variance_002c-from-histogram">variance, 
            from histogram</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Histogram-Statistics">Histogram 
            Statistics</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-variance_002dcovariance-matrix_002c-linear-fits">variance-covariance 
            matrix, linear fits</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Fitting-Overview">Fitting 
            Overview</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-VAX-random-number-generator">VAX 
            random number generator</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Other-random-number-generators">Other 
            random number generators</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-vector_002c-operations">vector, 
            operations</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#BLAS-Support">BLAS 
            Support</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-vector_002c-sorting-elements-of">vector, 
            sorting elements of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Sorting-vectors">Sorting 
            vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-vectors">vectors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vectors-and-Matrices">Vectors 
            and Matrices</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-vectors-1">vectors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Vectors">Vectors</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-vectors_002c-initializing">vectors, 
            initializing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-vector-elements">Initializing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-vectors_002c-range_002dchecking">vectors, 
            range-checking</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Accessing-vector-elements">Accessing 
            vector elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-VEGAS-Monte-Carlo-integration">VEGAS 
            Monte Carlo integration</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#VEGAS">VEGAS</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-viscosity_002c-units-of">viscosity, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Viscosity">Viscosity</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-volume-units">volume 
            units</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Volume-Area-and-Length">Volume 
            Area and Length</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-W">W</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-W-function">W 
            function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Lambert-W-Functions">Lambert 
            W Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-warning-options">warning 
            options</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#GCC-warning-options-for-numerical-programs">GCC 
            warning options for numerical programs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-warranty-_0028none_0029">warranty 
            (none)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#No-Warranty">No 
            Warranty</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-wavelet-transforms">wavelet 
            transforms</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Wavelet-Transforms">Wavelet 
            Transforms</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-website_002c-developer-information">website, 
            developer information</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Further-Information">Further 
            Information</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Weibull-distribution">Weibull 
            distribution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Weibull-Distribution">The 
            Weibull Distribution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-weight_002c-units-of">weight, 
            units of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Mass-and-Weight">Mass 
            and Weight</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-weighted-linear-fits">weighted 
            linear fits</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Least_002dSquares-Fitting">Least-Squares 
            Fitting</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Wigner-coefficients">Wigner 
            coefficients</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Coupling-Coefficients">Coupling 
            Coefficients</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-Y">Y</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Y_0028x_0029_002c-Bessel-Functions">Y(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Cylindrical-Bessel-Functions">Irregular 
            Cylindrical Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-y_0028x_0029_002c-Bessel-Functions">y(x), 
            Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Irregular-Spherical-Bessel-Functions">Irregular 
            Spherical Bessel Functions</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR>
  <TR>
    <TH><A name="Concept-Index_cp_letter-Z">Z</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-zero-finding">zero 
            finding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#One-dimensional-Root_002dFinding">One 
            dimensional Root-Finding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-zero-matrix">zero 
            matrix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Initializing-matrix-elements">Initializing 
            matrix elements</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-zero_002c-IEEE-format">zero, 
            IEEE format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Representation-of-floating-point-numbers">Representation 
            of floating point numbers</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeros-of-Regular-Bessel-Functions">Zeros 
            of Regular Bessel Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Zeta-functions">Zeta 
            functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#Zeta-Functions">Zeta 
            Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign="top"><A href="#index-Ziggurat-method">Ziggurat 
            method</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign="top"><A href="#The-Gaussian-Distribution">The 
            Gaussian Distribution</A></TD></TR>
  <TR>
    <TD colSpan="4">
      <HR>
    </TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign="top">Jump to: &nbsp; </TH>
    <TD><A class="summary-letter" href="#Concept-Index_cp_symbol-1"><B>$</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-2"><B>2</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-3"><B>3</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-4"><B>6</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_symbol-5"><B>9</B></A> 
            &nbsp; <BR><A class="summary-letter" href="#Concept-Index_cp_letter-A"><B>A</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-B"><B>B</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-C"><B>C</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-D"><B>D</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-E"><B>E</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-F"><B>F</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-G"><B>G</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-H"><B>H</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-I"><B>I</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-J"><B>J</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-K"><B>K</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-L"><B>L</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-M"><B>M</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-N"><B>N</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-O"><B>O</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-P"><B>P</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-Q"><B>Q</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-R"><B>R</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-S"><B>S</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-T"><B>T</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-U"><B>U</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-V"><B>V</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-W"><B>W</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-Y"><B>Y</B></A> 
            &nbsp; <A class="summary-letter" href="#Concept-Index_cp_letter-Z"><B>Z</B></A> 
            &nbsp; </TD></TR></TBODY></TABLE>
<DIV class="footnote">
<HR>

<H4 class="footnotes-heading">Footnotes</H4>
<H3><A href="#DOCF1" name="FOOT1">(1)</A></H3>
<P><A 
href="http://savannah.gnu.org/bugs/?group=gsl">http://savannah.gnu.org/bugs/?group=gsl</A></P>
<H3><A href="#DOCF2" name="FOOT2">(2)</A></H3>
<P>The last few digits may vary slightly depending on the compiler and platform 
 used—this is normal.</P>
<H3><A href="#DOCF3" name="FOOT3">(3)</A></H3>
<P>It is not needed on MacOS X.</P>
<H3><A href="#DOCF4" name="FOOT4">(4)</A></H3>
<P><A 
href="http://www.network-theory.co.uk/gcc/intro/">http://www.network-theory.co.uk/gcc/intro/</A></P>
<H3><A href="#DOCF5" name="FOOT5">(5)</A></H3>
<P><SAMP>/etc/ld.so.conf</SAMP> on GNU/Linux systems.</P>
<H3><A href="#DOCF6" name="FOOT6">(6)</A></H3>
<P>Note that the C99 standard only requires the system <CODE>isinf</CODE> 
 function to return a non-zero value, without the sign of the infinity. The 
 implementation in some earlier versions of GSL used the system 
<CODE>isinf</CODE> function and may have this behavior on some platforms. 
 Therefore, it is advisable to test the sign of <VAR>x</VAR> separately, if 
 needed, rather than relying the sign of the return value from 
<CODE>gsl_isinf()</CODE>.</P>
<H3><A href="#DOCF7" name="FOOT7">(7)</A></H3>
<P>Note that the first edition uses different definitions.</P>
<H3><A href="#DOCF8" name="FOOT8">(8)</A></H3>
<P>Range checking is available in the GNU C Compiler bounds-checking extension, 
 but it is not part of the default installation of GCC. Memory accesses can also 
 be checked with Valgrind or the <CODE>gcc -fmudflap</CODE> memory protection 
 option.</P>
<H3><A href="#DOCF9" name="FOOT9">(9)</A></H3>
<P>In versions of the GNU C library prior to the ISO C99 standard, the type 
 modifier <CODE>Z</CODE> was used instead.</P>
<H3><A href="#DOCF10" name="FOOT10">(10)</A></H3>
<P>In versions of the GNU C library prior to the ISO C99 standard, the type 
 modifier <CODE>Z</CODE> was used instead.</P>
<H3><A href="#DOCF11" name="FOOT11">(11)</A></H3>
<P>In versions of the GNU C library prior to the ISO C99 standard, the type 
 modifier <CODE>Z</CODE> was used instead.</P>
<H3><A href="#DOCF12" name="FOOT12">(12)</A></H3>
<P>In the low-level <SMALL>CBLAS</SMALL> interface, a negative stride accesses 
 the vector elements in reverse order, i.e. the <EM>i</EM>-th element is given 
by <EM>(N-i)*|incx|</EM> for <EM>incx &lt; 0</EM>.</P>
<H3><A href="#DOCF13" name="FOOT13">(13)</A></H3>
<P>The previous method of accessing these fields directly through the 
<CODE>gsl_monte_miser_state</CODE> struct is now deprecated.</P>
<H3><A href="#DOCF14" name="FOOT14">(14)</A></H3>
<P>J.F. Steffensen (1873–1961). The spelling used in the name of the function is 
 slightly incorrect, but has been preserved to avoid incompatibility.</P>
<H3><A href="#DOCF15" name="FOOT15">(15)</A></H3>
<P>The return code <CODE>GSL_CONTINUE</CODE> was used for this case in versions 
 prior to 1.14.</P></DIV>
<HR>
</BODY></HTML>
